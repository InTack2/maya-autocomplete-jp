
from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union, Text



def addMetadata(channelName: str = "",channelType: str = "",indexType: str = "",scene: bool = False,streamName: str = "",structure: str = "") -> None:
    """
    1 つまたは複数の選択したオブジェクトに対するメタデータ ストラクチャのアタッチメントを定義します。これにより、後で editMetadata コマンドを使用して設定するプレースホルダと空のメタデータ ストリームが作成されます。これは、ノードにおける addAttr コマンド(データ説明が追加されるが、データは実際に設定されない)と同様の概念です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    channelName (string): ストラクチャが追加されるチャネルのチャネルタイプの名前(「vertex」など)。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    channelType (string): 現在サポートしていません:代わりに'channelName'フラグを使用してください。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    indexType (string): 新しいチャネルが使用するインデックスタイプの名前。指定しない場合、既定で単純な数値インデックスに設定されます。ネイティブタイプの中で、メッシュの「vertexFace」チャネルのみ異なり、「pair」インデックスタイプを使用します。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    scene (boolean): 個々のノードにではなくシーン全体にメタデータを追加したい場合は、このフラグを使用します。このフラグを使用してノードを選択すると、ノードは無視され、警告が表示されます。

    -----------------------------------------

    streamName (string): 作成する空のストリームの名前。値を指定しない照会モードでは、名前を指定したチャネルタイプのストリームのリストが返されます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    structure (string): オブジェクトにアタッチするメタデータを定義するストラクチャの名前。照会モードでは、指定したストリームでアタッチされたストラクチャの名前が返されます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    Return Value:
    None: string[]新しいストリームが正常に追加されたノードの一覧(作成モード)string[]channelName フラグを照会する場合のオブジェクトに関するメタデータを含むチャネル タイプの一覧string[]streamName フラグを照会する場合のオブジェクト上のストリーム名の一覧string[]structure フラグを照会する場合にオブジェクトのメタデータ ストリームで使用されるストラクチャの一覧string[]indexType フラグを照会する場合にオブジェクトで使用されるインデックス タイプの一覧照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def applyMetadata(format: str = "",scene: bool = False,value: str = "") -> None:
    """
    選択したオブジェクトで特定のメタデータのセットの値を定義します。このコマンドは、Maya ファイル フォーマット(.ma/.mb)によるメタデータの保存に使用します。メタデータが既に存在する場合は、維持されて新しいメタデータとマージされ、重複するエントリが上書きされます(つまり、このコマンドでインデックス N にデータを指定し、インデックス N に既に値がある場合、このコマンドで指定するデータが新しい値となり、古いデータは存在しなくなります)。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    format (string): valueフラグの解析に使用するデータ関連付けフォーマットタイプの名前。既定値は「raw」です。

    -----------------------------------------

    scene (boolean): 個々のノードにではなくシーン全体にメタデータを適用したい場合は、このフラグを使用します。このフラグを使用してノードを選択すると、ノードは無視され、警告が表示されます。シーンのメタデータは、参照されたシーンとの互換性がありません。参照ファイルからのノード関連メタデータは、依然としてマスターシーンから読み取ることができますが、参照ファイルのシーン固有のメタデータはどのマスターシーンからもアクセスできなくなります。これにより、参照ファイルのメタデータがマスターファイルのシーンメタデータを破壊することがなくなります。

    -----------------------------------------

    value (string): 選択したオブジェクトに割り当てるメタデータをすべて含む文字列

    -----------------------------------------

    Return Value:
    None: Boolean適用が成功した場合、True
    """
    pass

    
def blindDataType(dataType: str = "",longDataName: str = "",longNames: bool = False,query: bool = False,shortDataName: str = "",shortNames: bool = False,typeId: int = 1,typeNames: bool = False) -> None:
    """
    このコマンドは、ブラインド データ タイプを作成します。これは DG の blindDataTemplate ノードで表示されます。ブラインド データ タイプは 1 つまたは複数のアトリビュートを持つことができます。コマンド ラインには、メモリの使用を最適化するために、次のようにアトリビュートをタイプ別に大きいものから順に並べます。string、binary、double、float、int、そして最後が boolean です。ブラインド データ タイプを作成すると、polyBlindData コマンドを使用してそのタイプのブラインド データを割り当てられます。ブラインド データは、ポリゴン コンポーネントだけでなく、オブジェクトや NURBS パッチにも割り当てられることに注意してください。ブラインド データ タイプはいったん作成すると修正できません。作成後に修正するには、削除してから再作成する必要があります。そのタイプの既存のブラインド データもすべて削除して再作成が必要になります。このコマンドを照会フラグとともに使用すると、指定したブラインド データ タイプのアトリビュートに関する情報を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    dataType (string): 作成するブラインドデータノードの一部であるdataTypesを指定します。可能な文字列は「int」、「float」、「double」、「string」、「boolean」、「binary」です。各アトリビュートを指定するには、-ldnフラグおよび-sdnフラグとともに使用する必要があります。

    -----------------------------------------

    longDataName (string): 作成されるBlindDataノードの一部であるデータのロングネームを指定します。各アトリビュートを指定するには、-dtフラグおよび-sdnフラグとともに使用する必要があります。

    -----------------------------------------

    longNames (boolean): 照会コマンドに対してロングアトリビュート名をリスト表示するように指定します。

    -----------------------------------------

    query (boolean): これが特別な照会タイプコマンドであることを指定します。

    -----------------------------------------

    shortDataName (string): 作成されるBlindDataノードの一部であるデータのショートネームを指定します。各アトリビュートを指定するには-dtおよび-ldnフラグとともに使用する必要があります。

    -----------------------------------------

    shortNames (boolean): 照会コマンドに対してショートアトリビュート名をリスト表示するように指定します。

    -----------------------------------------

    typeId (int): 作成するブラインドデータタイプのtypeIdを指定します。

    -----------------------------------------

    typeNames (boolean): 照会コマンドに対してデータタイプをリスト表示するように指定します。

    -----------------------------------------

    Return Value:
    None: string作成されたノード名
    """
    pass

    
def dataStructure(asFile: str = "",asString: str = "",dataType: bool = False,format: str = "",listMemberNames: str = "",name: str = "",remove: bool = False,removeAll: bool = False) -> None:
    """
    ストラクチャの説明を取得し、使用可能なデータ ストラクチャのリストに追加して作成します。ストラクチャの定義は、asString フラグで指定するか、または asFile フラグによって参照されるファイル内に存在します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    asFile (string): ストラクチャを説明するシリアル化されたデータが含まれているファイルを指定します。データのフォーマットは「format」フラグで指定されます。

    -----------------------------------------

    asString (string): ストラクチャを説明するシリアル化されたデータが含まれている文字列を指定します。データのフォーマットは「format」フラグで指定されます。

    -----------------------------------------

    dataType (boolean): メンバーのタイプを照会するには、「listMemberNames」フラグを指定します。タイプは、配列内の各相対メンバーの後にアペンドされます。たとえば、形式が「name=idStructure:int32=id:string=name」の場合、返される配列は「idint32namestring」です。

    -----------------------------------------

    format (string): ストラクチャの説明に要求されるデータのフォーマット。「raw」がネイティブでサポートされ、フォーマットタイプが省略されている場合の前提となります。その他のフォーマットはプラグインを介して使用できます。照会モードでこのフラグを使用すると、使用可能なフォーマットを照会できます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    listMemberNames (string): dataStructureのメンバー名を照会します。メンバー名は配列で返されます。データ構造の名前は返されません。各メンバーのタイプを取得するには、「dataType」を一緒に使用します。配列内の相対メンバーの後に、メンバーのタイプがアペンドされます。たとえば、形式が「name=idStructure:int32=id:string=name」の場合、返される配列は「idint32namestring」です。

    -----------------------------------------

    name (string): 照会モード専用です。使用可能な名前を表示するために照会または設定するデータストラクチャの名前照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    remove (boolean): 指定した名前のデータストラクチャを除去します。存在しない場合はエラーとなります。

    -----------------------------------------

    removeAll (boolean): すべてのメタデータストラクチャを除去します。このフラグは、他のフラグと一緒に使用することはできません。

    -----------------------------------------

    Return Value:
    None: string結果のストラクチャの名前。ストラクチャの説明に定義されている名前と一致する必要があります。string[]削除されたストラクチャの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def editMetadata(memberName: str = "",remove: bool = False,stringValue: str = "",value: float = 1.0,channelName: str = "",channelType: str = "",endIndex: str = "",index: str = "",indexType: str = "",scene: bool = False,startIndex: str = "",streamName: str = "") -> None:
    """
    このコマンドは、オブジェクトにメタデータ要素を設定するために、またはオブジェクトからメタデータ要素を除去するために使用します。このコマンドを使用する前に、addMetadata コマンド、または API でこのコマンドに相当するものを使用して、最初にメタデータ ストリーム タイプをオブジェクトにアタッチする必要があります。コマンドには次の 4 つの基本的なバリエーションがあります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    memberName (string): 編集される構造体メンバーの名前。メンバーの名前は、「dataStructure」コマンドで渡された説明に基づいて、または、構造の作成に使用されたAPIを介してその構造の定義で設定されます。

    -----------------------------------------

    remove (boolean): removeフラグが設定されると、メタデータは値が設定されることなく除去されます。このモードでは、「memberName」、「value」、「stringValue」の各フラグは無視されます。メタデータを削除すると、ストラクチャのすべてのメンバーがグループとして除去されるため、「memberName」は無視されます。削除する場合は値を設定する必要がないため、その他すべてが無視されます。

    -----------------------------------------

    stringValue (string): 指定のメタデータ配置場所に設定される文字列値。このフラグは、データメンバーが数値型の場合のみ使用されます。メンバーがN寸法の場合(例:string[2])、このフラグはN回(例:2回)表示される必要があります。影響を受けるすべてのコンポーネントまたはメタデータインデックスで指定されたメタデータメンバーには、同じ値が適用されます。値の1つとstringValueフラグのみを一度に指定することが可能であり、その型は、「member」フラグによって命名された構造体メンバーの型と一致する必要があります。

    -----------------------------------------

    value (float): 指定のメタデータ配置場所に設定される数値。このフラグは、データメンバーが数値型の場合のみ使用されます。メンバーがN寸法の場合(例:float[3])、このフラグはN回(例:3回)表示される必要があります。影響を受けるすべてのコンポーネントまたはメタデータインデックスで指定されたメタデータメンバーには、同じ値が適用されます。すべての数値型のメンバーは、この型の値指定(string型とmatrix型以外のすべて)を使用する必要があります。値の1つとstringValueフラグのみを一度に指定することが可能であり、その型は、「member」フラグによって命名された構造体メンバーの型と一致する必要があります。

    -----------------------------------------

    channelName (string): 指定したチャネル(例:「vertex」)に属しているメタデータのみが認識されるようにメタデータの選択をフィルタします。セレクションリストのコンポーネントが目的のメタデータを指定するために使用されている場合、このフラグは無視されます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    channelType (string): 現在サポートしていません:代わりに'channelName'フラグを使用してください。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    endIndex (string): メタデータは、インデックスリストであるストリームに保存されます。メッシュコンポーネントが選択されている場合、メタデータのインデックスは、選択されたコンポーネントのリストで暗黙的となります。ノードまたはシーンのみを選択した場合、このフラグをstartIndexフラグと組み合わせて使用することで、メタデータの取得元となるインデックスの範囲を指定できます。startIndexの値がendIndexの値よりも大きくなるとエラーが発生します。複数のインデックスを指定する別の方法については、indexフラグを参照してください。このフラグは、範囲をサポートするインデックスタイプでのみ使用できます(整数値など。2つの文字列間の範囲を要求しても無効です)。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    index (string): 通常、メタデータは単純な整数値を使用してインデックス化されます。特定のタイプのデータでは、他のインデックスタイプを使用する場合があります。たとえば、「頂点フェース」コンポーネントでは、「pair」インデックスタイプを使用します。このインデックスタイプは、コンポーネントのフェースIDを表す整数値と頂点IDを表す整数値の2つの整数値を表します。indexフラグは文字列を取り、指定されたindexTypeに必要な形式にフォーマットされます。indexフラグを使用する場合indexTypeはすべて同じになります。タイプが指定されていない場合は、単純な整数値とみなされます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    indexType (string): 新しいチャネルが使用するインデックスタイプの名前。指定しない場合、既定で単純な整数インデックスに設定されます。ネイティブタイプの中で、メッシュの「vertexFace」チャネルのみ異なり、「pair」インデックスタイプを使用します。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    scene (boolean): 個々のノードにではなくシーン全体にメタデータを追加したい場合は、このフラグを使用します。このフラグを使用してノードを選択すると、ノードは無視され、警告が表示されます。

    -----------------------------------------

    startIndex (string): メタデータは、インデックスリストであるストリームに保存されます。メッシュコンポーネントが選択されている場合、メタデータのインデックスは、選択されたコンポーネントのリストで暗黙的となります。ノードまたはシーンのみを選択した場合、このフラグをendIndexフラグと組み合わせて使用することで、メタデータの取得元となるインデックスの範囲を指定できます。startIndexの値がendIndexの値よりも大きくなるとエラーが発生します。複数のインデックスを指定する別の方法については、indexフラグを参照してください。このフラグは、範囲をサポートするインデックスタイプでのみ使用できます(整数値など。2つの文字列間の範囲を要求しても無効です)。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    streamName (string): メタデータストリームの名前。コンテキストに応じて、作成されるストリームの名前、またはフィルタを通過するストリームの名前にすることができます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    Return Value:
    None: string新しく編集されたノードがある場所にはノードの名前、編集できなかった場合は空の文字列です。コンストラクション ヒストリが存在する場合は、editMetadata ノードになります。
    """
    pass

    
def geomToBBox(bakeAnimation: bool = False,combineMesh: bool = False,endTime: float = 1.0,keepOriginal: bool = False,name: str = "",nameSuffix: str = "",sampleBy: float = 1.0,shaderColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),single: bool = False,startTime: float = 1.0) -> None:
    """
    ジオメトリのポリゴン メッシュのバウンディング ボックスを作成します。階層ごとに 1 つのバウンディング ボックスを作成することもできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bakeAnimation (boolean): アニメーションをベイク処理します。startTime、endTimeおよびsampleByフラグと一緒に使用することができます。単独で使用する場合、タイムスライダを使用してstartTimeフラグとendTimeを指定します。

    -----------------------------------------

    combineMesh (boolean): 結果のバウンディングボックスを結合します。-s/singleオプションと相互排他的です。

    -----------------------------------------

    endTime (time): bakeAnimationフラグと一緒に使用します。ベイク処理の終了時間を指定します。

    -----------------------------------------

    keepOriginal (boolean): バウンディングボックスの作成のために選択されたノードは除去しないでください。

    -----------------------------------------

    name (string): バウンディングボックス名を指定します。

    -----------------------------------------

    nameSuffix (string): バウンディングボックス名のサフィックスを指定します。

    -----------------------------------------

    sampleBy (time): bakeAnimationフラグと一緒に使用します。アニメーションの評価時間の増分を指定します。

    -----------------------------------------

    shaderColor ([float, float, float]): バウンディングボックスに関連付けられたLambertマテリアルのカラーアトリビュートを設定します。RGB値は0～1.0の間で定義する必要があります。既定値は0.50.50.5です。

    -----------------------------------------

    single (boolean): 選択された階層ごとに1つのバウンディングボックスを作成します。

    -----------------------------------------

    startTime (time): bakeAnimationフラグと一緒に使用します。ベイク処理の開始時間を指定します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def getMetadata(dataType: bool = False,listChannelNames: bool = False,listMemberNames: bool = False,listStreamNames: bool = False,memberName: str = "",channelName: str = "",channelType: str = "",endIndex: str = "",index: str = "",indexType: str = "",scene: bool = False,startIndex: str = "",streamName: str = "") -> None:
    """
    このコマンドを使用して、ノードまたはシーンからメタデータ要素の値を取得します。一度に 1 つのストラクチャ メンバーを返すように制限されています。便宜上、必要な詳細は、単一のメタデータ チャネルで 1 つのストラクチャの単一のメンバーを検索するのに十分な情報だけです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    dataType (boolean): 「streamName」および「memberName」と一緒に使用すると、指定したメンバーのdataTypeを照会できます。

    -----------------------------------------

    listChannelNames (boolean): シェイプ上のチャネル名を照会します。このフラグは、結果をフィルタするいくつかのフラグと一緒に使用できます。「streamName」フラグと一緒に使用すると、指定したストリームを含むチャネルを取得できます。「memberName」フラグと一緒に使用すると、ストリーム内の指定したメンバーが属するチャネルを取得できます。「channelName」フラグと一緒に使用することはできません。

    -----------------------------------------

    listMemberNames (boolean): シェイプ上のメンバー名を照会します。このフラグは、結果をフィルタするいくつかのフラグと一緒に使用できます。「streamName」フラグと一緒に使用すると、指定したストリーム内にあるメンバーを取得できます。「channelName」と一緒に使用すると、指定したチャネル内で使用されるメンバーを取得できます。「memberName」フラグと一緒に使用することはできません。

    -----------------------------------------

    listStreamNames (boolean): シェイプ上のストリーム名を照会します。このフラグは、結果をフィルタするいくつかのフラグと一緒に使用できます。「channelName」フラグと一緒に使用すると、指定したチャネル上のストリーム名を取得できます。「memberName」フラグと一緒に使用すると、指定したメンバーを持つストリーム名を取得できます。「streamName」フラグと一緒に使用することはできません。

    -----------------------------------------

    memberName (string): 取得される構造体メンバーの名前。メンバーの名前は、「dataStructure」コマンドで渡された説明に基づいて、または、構造の作成に使用されたAPIを介してその構造の定義で設定されます。このフラグは、選択したストラクチャに複数のメンバーが存在する場合にのみ必要です。

    -----------------------------------------

    channelName (string): 指定したチャネル(例:「vertex」)に属しているメタデータのみが認識されるようにメタデータの選択をフィルタします。セレクションリストのコンポーネントが目的のメタデータを指定するために使用されている場合、このフラグは無視されます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    channelType (string): 現在サポートしていません:代わりに'channelName'フラグを使用してください。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    endIndex (string): メタデータは、インデックスリストであるストリームに保存されます。メッシュコンポーネントが選択されている場合、メタデータのインデックスは、選択されたコンポーネントのリストで暗黙的となります。ノードまたはシーンのみを選択した場合、このフラグをstartIndexフラグと組み合わせて使用することで、メタデータの取得元となるインデックスの範囲を指定できます。startIndexの値がendIndexの値よりも大きくなるとエラーが発生します。複数のインデックスを指定する別の方法については、indexフラグを参照してください。このフラグは、範囲をサポートするインデックスタイプでのみ使用できます(整数値など。2つの文字列間の範囲を要求しても無効です)。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    index (string): 通常、メタデータは単純な整数値を使用してインデックス化されます。特定のタイプのデータでは、他のインデックスタイプを使用する場合があります。たとえば、「頂点フェース」コンポーネントでは、「pair」インデックスタイプを使用します。このインデックスタイプは、コンポーネントのフェースIDを表す整数値と頂点IDを表す整数値の2つの整数値を表します。indexフラグは文字列を取り、指定されたindexTypeに必要な形式にフォーマットされます。indexフラグを使用する場合indexTypeはすべて同じになります。タイプが指定されていない場合は、単純な整数値とみなされます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    indexType (string): 新しいチャネルが使用するインデックスタイプの名前。指定しない場合、既定で単純な整数インデックスに設定されます。ネイティブタイプの中で、メッシュの「vertexFace」チャネルのみ異なり、「pair」インデックスタイプを使用します。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    scene (boolean): 個々のノードにではなくシーン全体にメタデータを追加したい場合は、このフラグを使用します。このフラグを使用してノードを選択すると、ノードは無視され、警告が表示されます。

    -----------------------------------------

    startIndex (string): メタデータは、インデックスリストであるストリームに保存されます。メッシュコンポーネントが選択されている場合、メタデータのインデックスは、選択されたコンポーネントのリストで暗黙的となります。ノードまたはシーンのみを選択した場合、このフラグをendIndexフラグと組み合わせて使用することで、メタデータの取得元となるインデックスの範囲を指定できます。startIndexの値がendIndexの値よりも大きくなるとエラーが発生します。複数のインデックスを指定する別の方法については、indexフラグを参照してください。このフラグは、範囲をサポートするインデックスタイプでのみ使用できます(整数値など。2つの文字列間の範囲を要求しても無効です)。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    streamName (string): メタデータストリームの名前。コンテキストに応じて、作成されるストリームの名前、またはフィルタを通過するストリームの名前にすることができます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    Return Value:
    None: int[]メタデータ メンバーの整数値のリストfloat[]メタデータ メンバーの実数値のリストstring[]メタデータ メンバーの文字列値のリスト
    """
    pass

    
def hasMetadata(asList: bool = False,ignoreDefault: bool = False,memberName: str = "",channelName: str = "",channelType: str = "",endIndex: str = "",index: str = "",indexType: str = "",scene: bool = False,startIndex: str = "",streamName: str = "") -> None:
    """
    このコマンドを使用して、ノード、コンポーネント、またはシーンにメタデータ要素が存在するかどうかを照会します。このコマンドは、ノードまたはシーンに存在するすべてのメタデータから、特定のメタデータ ストリーム インデックスに設定されているメタデータ値に至るまで、メタデータが存在するあらゆるレベルで機能します。フィルタ フラグ



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    asList (boolean): ブーリアン値ではなくメタデータが存在する場所を示す文字列値を返す場合は、このフラグを使用します。このフラグで返される値の詳細については、コマンドの説明を参照してください。

    -----------------------------------------

    ignoreDefault (boolean): 既定値のみを持つメタデータをスキップする場合は、このフラグを使用します。つまり、存在していてもまだ新しい値(数値の場合は0以外、空以外の文字列など)が設定されていないメタデータはスキップされます。このフラグによって検索がどのようにフィルタされるかの詳細については、コマンドの説明を参照してください。

    -----------------------------------------

    memberName (string): チェックされるストラクチャメンバーの名前。メンバーの名前は、「dataStructure」コマンドで渡された説明に基づいて、または、構造の作成に使用されたAPIを介してその構造の定義で設定されます。メタデータの割り当てはストラクチャごとなので、既定以外の値を照会する場合にのみこのフラグを指定する必要があります。既定以外の値を照会してこのフラグを省略すると、いずれかのメンバーが既定以外の値を持っていることがチェックされます。

    -----------------------------------------

    channelName (string): 指定したチャネル(例:「vertex」)に属しているメタデータのみが認識されるようにメタデータの選択をフィルタします。セレクションリストのコンポーネントが目的のメタデータを指定するために使用されている場合、このフラグは無視されます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    channelType (string): 現在サポートしていません:代わりに'channelName'フラグを使用してください。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    endIndex (string): メタデータは、インデックスリストであるストリームに保存されます。メッシュコンポーネントが選択されている場合、メタデータのインデックスは、選択されたコンポーネントのリストで暗黙的となります。ノードまたはシーンのみを選択した場合、このフラグをstartIndexフラグと組み合わせて使用することで、メタデータの取得元となるインデックスの範囲を指定できます。startIndexの値がendIndexの値よりも大きくなるとエラーが発生します。複数のインデックスを指定する別の方法については、indexフラグを参照してください。このフラグは、範囲をサポートするインデックスタイプでのみ使用できます(整数値など。2つの文字列間の範囲を要求しても無効です)。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    index (string): 通常、メタデータは単純な整数値を使用してインデックス化されます。特定のタイプのデータでは、他のインデックスタイプを使用する場合があります。たとえば、「頂点フェース」コンポーネントでは、「pair」インデックスタイプを使用します。このインデックスタイプは、コンポーネントのフェースIDを表す整数値と頂点IDを表す整数値の2つの整数値を表します。indexフラグは文字列を取り、指定されたindexTypeに必要な形式にフォーマットされます。indexフラグを使用する場合indexTypeはすべて同じになります。タイプが指定されていない場合は、単純な整数値とみなされます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    indexType (string): 新しいチャネルが使用するインデックスタイプの名前。指定しない場合、既定で単純な整数インデックスに設定されます。ネイティブタイプの中で、メッシュの「vertexFace」チャネルのみ異なり、「pair」インデックスタイプを使用します。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    scene (boolean): 個々のノードにではなくシーン全体にメタデータを追加したい場合は、このフラグを使用します。このフラグを使用してノードを選択すると、ノードは無視され、警告が表示されます。

    -----------------------------------------

    startIndex (string): メタデータは、インデックスリストであるストリームに保存されます。メッシュコンポーネントが選択されている場合、メタデータのインデックスは、選択されたコンポーネントのリストで暗黙的となります。ノードまたはシーンのみを選択した場合、このフラグをendIndexフラグと組み合わせて使用することで、メタデータの取得元となるインデックスの範囲を指定できます。startIndexの値がendIndexの値よりも大きくなるとエラーが発生します。複数のインデックスを指定する別の方法については、indexフラグを参照してください。このフラグは、範囲をサポートするインデックスタイプでのみ使用できます(整数値など。2つの文字列間の範囲を要求しても無効です)。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    streamName (string): メタデータストリームの名前。コンテキストに応じて、作成されるストリームの名前、またはフィルタを通過するストリームの名前にすることができます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    Return Value:
    None: string[]メタデータが含まれているフィルタされたリストのインデックスのリストboolean[]指定された項目にメタデータがあるかどうかの答えのリスト
    """
    pass

    
def manipOptions(enableSmartDuplicate: bool = False,enableSmartExtrude: bool = False,forceRefresh: bool = False,handleSize: float = 1.0,hideManipOnCtrl: bool = False,hideManipOnShift: bool = False,hideManipOnShiftCtrl: bool = False,linePick: float = 1.0,lineSize: float = 1.0,middleMouseRepositioning: bool = False,pivotRotateHandleOffset: int = 1,planeHandleOffset: int = 1,pointSize: float = 1.0,preselectHighlight: bool = False,refreshMode: int = 1,relative: bool = False,rememberActiveHandle: bool = False,rememberActiveHandleAfterToolSwitch: bool = False,scale: float = 1.0,showExtrudeSliders: bool = False,showPivotRotateHandle: bool = False,showPlaneHandles: bool = False,smartDuplicateType: int = 1) -> None:
    """
    グローバル マニピュレータ パラメータが変更されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    enableSmartDuplicate (boolean): t/r/sマニピュレータで、[Shift]+複製オプションを有効にします。

    -----------------------------------------

    enableSmartExtrude (boolean): t/r/sマニピュレータで、[Shift]+押し出しオプションを有効にします。

    -----------------------------------------

    forceRefresh (boolean): 遅延評価がある場合に強制的にリフレッシュされます。

    -----------------------------------------

    handleSize (float): 小さいハンドルの最大ハンドルサイズがピクセル単位で設定されます

    -----------------------------------------

    hideManipOnCtrl (boolean): Ctrlキーが押されている場合、トランスフォームマニピュレータを非表示にします。

    -----------------------------------------

    hideManipOnShift (boolean): Shiftキーが押されている場合、トランスフォームマニピュレータを非表示にします。

    -----------------------------------------

    hideManipOnShiftCtrl (boolean): ShiftキーとCtrlキーが両方押されている場合、トランスフォームマニピュレータを非表示にします。

    -----------------------------------------

    linePick (float): 長いハンドルの選択ゾーンの幅が設定されます

    -----------------------------------------

    lineSize (float): 長いハンドル(ラインとして描画)の幅が設定されます

    -----------------------------------------

    middleMouseRepositioning (boolean): 中央マウスを再配置するかどうかを指定します。

    -----------------------------------------

    pivotRotateHandleOffset (int): ピボット回転ハンドルのオフセットを設定します。

    -----------------------------------------

    planeHandleOffset (int): 平面ドラッグハンドルのオフセットを設定します。

    -----------------------------------------

    pointSize (float): ポイントのサイズが設定されます(前の状態の表示に使用)

    -----------------------------------------

    preselectHighlight (boolean): マウスを移動するときに、マニピュレータハンドルをハイライトするかどうかを設定します。

    -----------------------------------------

    refreshMode (int): グローバルリフレッシュモードが設定されます

    -----------------------------------------

    relative (boolean): すべての値が、最終的な値ではなく乗算係数として解釈されます。

    -----------------------------------------

    rememberActiveHandle (boolean): 選択項目の変更後に、マニピュレータハンドルが保持されるかどうかを設定します。

    -----------------------------------------

    rememberActiveHandleAfterToolSwitch (boolean): マニピュレータの変更後に、マニピュレータハンドルが保持されるかどうかを設定します。

    -----------------------------------------

    scale (float): すべてのマニピュレータのグローバルスケール係数

    -----------------------------------------

    showExtrudeSliders (boolean): マニピュレータに[押し出し]スライダを表示するかどうかを指定します。

    -----------------------------------------

    showPivotRotateHandle (boolean): ピボット回転ハンドルの表示を切り替えます。

    -----------------------------------------

    showPlaneHandles (boolean): 平面ドラッグハンドルの可視性を切り替えます。

    -----------------------------------------

    smartDuplicateType (int): t/r/sマニピュレータの[コピー]と[インスタンス]間で、[Shift]+複製または[Shift]+押し出しを変更します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def manipPivot(bakeOri: bool = False,moveToolOri: int = 1,ori: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),oriValid: bool = False,pinPivot: bool = False,pos: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),posValid: bool = False,reset: bool = False,resetOri: bool = False,resetPos: bool = False,rotateToolOri: int = 1,scaleToolOri: int = 1,snapOri: bool = False,snapPos: bool = False,valid: bool = False) -> None:
    """
    移動/回転/スケールのマニピュレータによって使用されるトランスフォーム コンポーネント ピボットを変更します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bakeOri (boolean): ピボット方向をベイク処理します。ピボット方向の変更をトランスフォーム階層/ジオメトリに自動的にベイク処理します。

    -----------------------------------------

    moveToolOri (int): 移動ツールの軸方向を指定のモードに変更します。このフラグは、コマンドを元に戻すことができない点を除いて、移動ツールで「manipMoveContext-e-mode」を使用するのと同じです。

    -----------------------------------------

    ori ([float, float, float]): ワールド空間内のコンポーネントのピボット方向です。

    -----------------------------------------

    oriValid (boolean): コンポーネントピボットの方向が有効な場合はtrueを返します。

    -----------------------------------------

    pinPivot (boolean): コンポーネントピボットを固定します。選択を変更しても、カスタムピボットが設定されていて、固定が有効になっている場合は、ピボットの位置/方向がリセットされません。

    -----------------------------------------

    pos ([float, float, float]): ワールド空間内のコンポーネントのピボット位置です。

    -----------------------------------------

    posValid (boolean): コンポーネントピボットの位置が有効な場合はtrueを返します。

    -----------------------------------------

    reset (boolean): 保存されているコンポーネントのピボット位置および方向をクリアします。

    -----------------------------------------

    resetOri (boolean): 保存されているコンポーネントのピボット方向をクリアします。

    -----------------------------------------

    resetPos (boolean): 保存されているコンポーネントのピボット位置をクリアします。

    -----------------------------------------

    rotateToolOri (int): 回転ツールの軸方向を指定のモードに変更します。このフラグは、コマンドを元に戻すことができない点を除いて、回転ツールで「manipRotateContext-e-mode」を使用するのと同じです。

    -----------------------------------------

    scaleToolOri (int): スケールツールの軸方向を指定のモードに変更します。このフラグは、コマンドを元に戻すことができない点を除いて、スケールツールで「manipScaleContext-e-mode」を使用するのと同じです。

    -----------------------------------------

    snapOri (boolean): ピボットのスナップ方向です。ピボットをコンポーネントにスナップする場合のピボット方向を変更します。

    -----------------------------------------

    snapPos (boolean): ピボットのスナップ位置です。ピボットをコンポーネントにスナップする場合のピボット位置を変更します。

    -----------------------------------------

    valid (boolean): コンポーネントのピボット位置または方向が有効な場合はtrueを返します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyAppend(append: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),constructionHistory: bool = False,edge: int = 1,hole: bool = False,name: str = "",point: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),subdivision: int = 1,texture: int = 1) -> None:
    """
    選択したポリゴン オブジェクトに新しいフェースをアペンドします。最初の引数は境界エッジにする必要があります。新しいフェースは自動的に閉じます。単一のオブジェクトを選択した場合のみに動作します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    append ([[, float, float, float, ]]): 指定したポリゴンオブジェクトにアペンドします。appendフラグを複数回使用して、追加する新しいフェースを構成するエッジ、ポイント、穴を指定する必要があります。エッジを指定するには、エッジのインデックスになる単一の引数を渡します。ポイントを指定するには、オブジェクトのローカル空間でのポイント座標である3つの引数を使用します。引数を指定しない場合、その後に続く値は穴を指定していることを示します。Pythonで引数を指定しない場合は、空のタプルを渡します。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    edge (int): 選択したオブジェクトの指定したエッジを、新しいフェースに追加します。このエッジは境界である必要があり、新しいフェースと隣接するフェースがこれを共有します。新しいフェースの向きは、指定したエッジの向きに従います。このフラグは、Pythonでは使用しないでください。代わりにappendフラグを使用して、単一の引数を渡します。

    -----------------------------------------

    hole (boolean): 穴を追加します。続くポイントとエッジにより穴が定義されます。このフラグは、Pythonでは使用しないでください。代わりにappendフラグを使用して、空のタプル()を渡します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    point ([float, float, float]): 新しいフェースに新しいポイントを追加します。フリーポイントの座標は、ローカルオブジェクトのリファレンスで指定されます。このフラグは、Pythonでは使用しないでください。代わりにappendフラグを使用して、3つの引数を渡します。

    -----------------------------------------

    subdivision (int): サブディビジョンのレベルを指定します。新しいエッジを、指定したエッジ数へと自動的に細分割します。既存エッジは細分割できません。C:既定は1(細分割なし)です。Q:照会するとintを返します。

    -----------------------------------------

    texture (int): 新しいフェースをマッピングする方法を指定します。0:マッピングしない1:正規化する2:ユニット化するC:既定は0(マッピングしない)です。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyAppendVertex(append: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),constructionHistory: bool = False,hole: bool = False,name: str = "",point: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),texture: int = 1,vertex: int = 1) -> None:
    """
    選択したポリゴン オブジェクトに新しいフェースをアペンドします。法線の方向は、頂点の順序で決まります。頂点が反時計回りに回転する場合、フェース法線はユーザを向きます。穴は反対方向に記述する必要があります。単一のオブジェクトを選択した場合のみに動作します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    append ([[, float, float, float, ]]): 選択したオブジェクトに頂点またはポイントをアペンドするか、または穴の始点をマークします。このフラグを「hole」、「vertex」、「point」の各フラグの代わりに使用することもできます。appendフラグに引数を渡さなかった場合、穴の始点がマークされます(Pythonでは空のタプル()を使用します)。1つの引数を渡した場合、vertexフラグと同様、この引数は選択したオブジェクトの頂点へのインデックスとみなされます。3つの引数を渡した場合、pointフラグと同様、この引数は挿入される新しいポイントの座標とみなされます。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    hole (boolean): 穴を追加します。続くポイントとエッジにより穴が定義されます。このフラグは、Pythonでは使用しないでください。代わりに「append」フラグを使用して空のタプル()を渡し、穴の始点を指定することができます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    point ([float, float, float]): 新しいフェースに新しいポイントを追加します。フリーポイントの座標は、ローカルオブジェクトのリファレンスで指定されます。このフラグは、Pythonでは使用しないでください。代わりにappendフラグを使用して、3つの引数を渡します。

    -----------------------------------------

    texture (int): 新しいフェースをマッピングする方法を指定します。0:マッピングしない1:正規化する2:ユニット化するC:既定は0(マッピングしない)です。Q:照会するとintを返します。

    -----------------------------------------

    vertex (int): 選択したオブジェクトの指定した頂点を新しいフェースに追加します。このフラグは、Pythonでは使用しないでください。代わりにappendフラグを使用して、単一の引数を渡します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyAutoProjection(caching: bool = False,constructionHistory: bool = False,createNewMap: bool = False,insertBeforeDeformers: bool = False,layout: int = 1,name: str = "",nodeState: int = 1,optimize: int = 1,percentageSpace: float = 1.0,planes: int = 1,projectBothDirections: bool = False,scaleMode: int = 1,skipIntersect: bool = False,uvSetName: str = "",worldSpace: bool = False,layoutMethod: int = 1,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pivotX: float = 1.0,pivotY: float = 1.0,pivotZ: float = 1.0,rotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rotateX: float = 1.0,rotateY: float = 1.0,rotateZ: float = 1.0,scale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),scaleX: float = 1.0,scaleY: float = 1.0,scaleZ: float = 1.0,translate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),translateX: float = 1.0,translateY: float = 1.0,translateZ: float = 1.0) -> None:
    """
    複数の正射投影を同時に使用し、マップをオブジェクトに投影します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createNewMap (boolean): 新しいマップを作成する必要がある場合は、trueに設定します。

    -----------------------------------------

    insertBeforeDeformers (boolean): 新しく作成したノードを任意のデフォーマノードの前に挿入する必要がある場合は、trueに設定します。

    -----------------------------------------

    layout (int): 使用するレイアウトアルゴリズムです。0:UVピースはレイアウトに設定されません。1:UVピースはU軸に沿って位置合わせます。2:UVピースは正方シェイプに移動されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    optimize (int): 切断の生成に異なる2つのフレーバを使用します。0すべてのフェースが最適なプレーンに割り当てられます。これによりマップの歪みが最適化されます。1小さなUVのピースが大きなピースに統合されます。ここでさらに歪みが発生するのは不思議ではありません。この方法では、UVピースの数は少なくなる傾向があります。

    -----------------------------------------

    percentageSpace (float): レイアウトを正方形に設定した場合、この値は各UVピースの周りに追加されるテクスチャ領域のパーセンテージです。このコマンドを使用して、テクスチャ内の各UVピースがそれぞれ個別のピクセルを使用することを確認できます。最大値は5%です。

    -----------------------------------------

    planes (int): 使用される中間の投影の数。有効な数字は、4、5、6、8、12です。C:既定は6です。

    -----------------------------------------

    projectBothDirections (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:投影は正反対のフェースにミラーリングされます。オフの場合:投影は反対のフェースにミラーリングされません。C:既定はオフです。Q:照会するとintegerを返します。

    -----------------------------------------

    scaleMode (int): 投影後にピースをスケールする方法は、次のとおりです。0:スケールは適用されません。1:単位正方形に合わせて均一にスケールします。2:単位正方形に合わせて非比例にスケールします。

    -----------------------------------------

    skipIntersect (boolean): オンの場合、UVピースの交差はテストされません。これにより投影は速くなり、ピースも少なくなりますが、UV空間のオーバーラップが発生することがあります。

    -----------------------------------------

    uvSetName (string): 作成するUVセットの名前です。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    layoutMethod (int): 使用するレイアウト方法を設定します。0:ブロックスタッキング1:シェイプスタッキング

    -----------------------------------------

    pivot ([linear, linear, linear]): スケーリングと回転のピボットを指定します。C:既定は0.00.00.0です。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    pivotX (linear): スケーリングと回転のXピボットを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    pivotY (linear): スケーリングと回転のYピボットを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    pivotZ (linear): スケーリングと回転のZピボットを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    rotate ([angle, angle, angle]): X、Y、Zの回転角度を指定します。C:既定は0.00.00.0です。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    rotateX (angle): Xの回転角度を指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    rotateY (angle): Yの回転角度を指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    rotateZ (angle): Zの回転角度を指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    scale ([float, float, float]): スケーリングベクトルを指定します。C:既定は1.01.01.0です。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    scaleX (float): スケーリングベクトルのXを指定します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    scaleY (float): スケーリングベクトルのYを指定します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    scaleZ (float): スケーリングベクトルのZを指定します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    translate ([linear, linear, linear]): このフラグは移動ベクトルを指定します。C:既定は0.00.00.0です。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    translateX (linear): X移動ベクトルを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    translateY (linear): Y移動ベクトルを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    translateZ (linear): Z移動ベクトルを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyAverageNormal(allowZeroNormal: bool = False,distance: float = 1.0,postnormalize: bool = False,prenormalize: bool = False,replaceNormalXYZ: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0)) -> None:
    """
    頂点が指定したしきい値内の場合、頂点か頂点フェースの法線を平均値に設定します。まず含まれるエッジがソートされて、可能な場合はソフトに設定され、法線が「マージ」されたかように表示します。次に残りのコンポーネントが塊にソートされます。それぞれのかたまりの頂点は、指定したしきい値に収まります。すべての頂点と頂点フェースでは、法線がかたまりの平均法線に設定されます。選択した頂点は、同じオブジェクト上になくてもかまいません。オブジェクトを選択すると、すべての頂点を選択したと仮定します。エッジかフェースを選択すると、関連する頂点フェースを選択したと仮定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowZeroNormal (boolean): ゼロ法線の作成を許可するかどうかを指定します。既定はfalseで、falseの場合はreplaceNormalが必要になります。

    -----------------------------------------

    distance (float): 距離のしきい値を指定します。平均法線を計算する場合は、しきい値内のすべての頂点が考慮されます。既定は0.0です。

    -----------------------------------------

    postnormalize (boolean): 作成された法線を正規化するかどうかを指定します。既定はtrueです。

    -----------------------------------------

    prenormalize (boolean): 法線を平均化する前に正規化するかどうかを指定します。既定はtrueです。

    -----------------------------------------

    replaceNormalXYZ ([float, float, float]): allowZeroNormalがfalseの場合は、この値を使用してゼロ法線が置き換えられます。既定は(1,0,0)です。

    -----------------------------------------

    Return Value:
    None: stringノード名
    """
    pass

    
def polyAverageVertex(caching: bool = False,constructionHistory: bool = False,iterations: int = 1,name: str = "",nodeState: int = 1,worldSpace: bool = False) -> None:
    """
    ポリゴン オブジェクトの選択した頂点を移動し、シェイプを丸めます。頂点を平行移動、移動、回転、スケールします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    iterations (int): 丸めステップの数です。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyBevel(angleTolerance: float = 1.0,autoFit: bool = False,caching: bool = False,constructionHistory: bool = False,mergeVertexTolerance: float = 1.0,mergeVertices: bool = False,miteringAngle: float = 1.0,name: str = "",nodeState: int = 1,offset: float = 1.0,offsetAsFraction: bool = False,roundness: float = 1.0,segments: int = 1,smoothingAngle: float = 1.0,subdivideNgons: bool = False,useLegacyBevelAlgorithm: bool = False,uvAssignment: int = 1,worldSpace: bool = False) -> None:
    """
    エッジをベベルします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    angleTolerance (float): 追加の三角形を作成する際の角度許容値です。このアトリビュートは互換性を維持する目的で使用されるため、Maya7.0ファイルでは修正できないことご注意ください。既定:20.0

    -----------------------------------------

    autoFit (boolean): autoFitがオンの場合、スムーズな丸みを計算します。新しいファセットはスムーズな角度で丸められます。既定:true

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    mergeVertexTolerance (linear): 頂点をマージするための許容値です。既定:0.0

    -----------------------------------------

    mergeVertices (boolean): 許容値内で頂点をマージします。既定:false

    -----------------------------------------

    miteringAngle (float): マイター面はこの値よりも小さな角度になります。既定:0.0

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    offset (linear): ベベルに対するオフセットです。既定:0.2

    -----------------------------------------

    offsetAsFraction (boolean): オンの場合、オフセット値は0と1の間の比率として扱われます。既定:false

    -----------------------------------------

    roundness (float): ベベルの丸みは、autoFitがオフになっている場合に考慮されます。既定:0.5

    -----------------------------------------

    segments (int): ベベルに使用するセグメントの数を指定します。既定:1

    -----------------------------------------

    smoothingAngle (float): 隣接するフェースとの角度がこの値を超える場合、新しいエッジはハードエッジとして作成されます。既定:0.0

    -----------------------------------------

    subdivideNgons (boolean): 新しいフェースを5つ以上のエッジでサブディバイドします。既定:false

    -----------------------------------------

    useLegacyBevelAlgorithm (boolean): オンにすると、ベベルはMaya2014の方法で行われます。既定:false

    -----------------------------------------

    uvAssignment (int): 新しいフェースでUVを計算するのに使用される技法です。0の場合は、元のメッシュのサーフェス法線に沿って新しいメッシュに投影することにより、新しいUVを計算します。1の場合は、新しいメッシュのサーフェス法線に沿って元のメッシュに投影することにより、新しいUVを計算します。既定:0

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyBevel3(angleTolerance: float = 1.0,autoFit: bool = False,caching: bool = False,chamfer: bool = False,constructionHistory: bool = False,depth: float = 1.0,fillNgons: bool = False,mergeVertexTolerance: float = 1.0,mergeVertices: bool = False,miterAlong: int = 1,mitering: int = 1,miteringAngle: float = 1.0,name: str = "",nodeState: int = 1,offset: float = 1.0,offsetAsFraction: bool = False,roundness: float = 1.0,segments: int = 1,smoothingAngle: float = 1.0,uvAssignment: int = 1,worldSpace: bool = False) -> None:
    """
    エッジをベベルします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    angleTolerance (float): 追加の三角形を作成する際の角度許容値です。このアトリビュートは互換性を維持する目的で使用されるため、Maya7.0ファイルでは修正できないことご注意ください。既定:20.0

    -----------------------------------------

    autoFit (boolean): autoFitがオンの場合、スムーズな丸みを計算します。新しいファセットはスムーズな角度で丸められます。既定:true

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    chamfer (boolean): 面取りがオンの場合、サーフェスはベベルでスムージングされます。オフの場合、サーフェスのシェイプはそのまま維持されます。既定:true

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    depth (float): ベベルの深度です。1はスムーズなサーフェスを意味し、-1は最大深度を意味します。既定:1.0

    -----------------------------------------

    fillNgons (boolean): 新しいフェースを5つ以上のエッジでサブディバイドします。既定:false

    -----------------------------------------

    mergeVertexTolerance (linear): 頂点をマージするための許容値です。既定:0.0

    -----------------------------------------

    mergeVertices (boolean): 許容値内で頂点をマージします。既定:false

    -----------------------------------------

    miterAlong (int): 新しい頂点がどの方向にオフセットされるかをコントロールします。既定:0

    -----------------------------------------

    mitering (int): トポロジがコーナーでどのように表示されるかをコントロールします。既定:0

    -----------------------------------------

    miteringAngle (float): マイター面はこの値よりも小さな角度になります。既定:0.0

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    offset (linear): ベベルに対するオフセットです。既定:0.2

    -----------------------------------------

    offsetAsFraction (boolean): オンの場合、オフセット値は0と1の間の比率として扱われます。既定:false

    -----------------------------------------

    roundness (float): ベベルの丸みは、autoFitがオフになっている場合に考慮されます。既定:0.5

    -----------------------------------------

    segments (int): ベベルに使用するセグメントの数を指定します。既定:1

    -----------------------------------------

    smoothingAngle (float): 隣接するフェースとの角度がこの値を超える場合、新しいエッジはハードエッジとして作成されます。既定:0.0

    -----------------------------------------

    uvAssignment (int): 新しいフェースでUVを計算するのに使用される技法です。0の場合は、元のメッシュのサーフェス法線に沿って新しいメッシュに投影することにより、新しいUVを計算します。1の場合は、新しいメッシュのサーフェス法線に沿って元のメッシュに投影することにより、新しいUVを計算します。既定:0

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyBlendColor(baseColorName: str = "",blendFunc: int = 1,blendWeightA: float = 1.0,blendWeightB: float = 1.0,blendWeightC: float = 1.0,blendWeightD: float = 1.0,caching: bool = False,constructionHistory: bool = False,dstColorName: str = "",name: str = "",nodeState: int = 1,srcColorName: str = "") -> None:
    """
    2 つのカラー セットを取ってブレンドし、指定された 3 番目のカラー セットにします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    baseColorName (string): ブレンド元のカラーセットの名前

    -----------------------------------------

    blendFunc (int): 使用するブレンド関数のタイプ

    -----------------------------------------

    blendWeightA (float): リニアおよびバイリニアブレンド関数のブレンドウェイト

    -----------------------------------------

    blendWeightB (float): バイリニアおよびチャネルブレンド関数のブレンドウェイト

    -----------------------------------------

    blendWeightC (float): チャネル関数のブレンドウェイト

    -----------------------------------------

    blendWeightD (float): チャネル関数のブレンドウェイト

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    dstColorName (string): コピー先のカラーセットの名前

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    srcColorName (string): コピー元のカラーセットの名前

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyBlindData(associationType: str = "",binaryData: str = "",booleanData: bool = False,delete: bool = False,doubleData: float = 1.0,int64Data: int = 1,intData: int = 1,longDataName: str = "",rescan: bool = False,reset: bool = False,shape: bool = False,shortDataName: str = "",stringData: str = "",typeId: int = 1) -> None:
    """
    blindData タイプを作成します(つまり、TdnPolyBlindData のインスタンスを作成します)。照会フラグと一緒に使用すると、blindData タイプを定義するデータ型を返します。このコマンドを使用して、blindData ノードを作成、*そして*編集することができます。associationType フラグを常に指定する*必要があります*。これは、指定した BD typeId のインスタンスがヒストリ チェーン内に存在しても、その associationType が一致しない場合は、新しい polyBlindData ノードが作成されるためです。オブジェクト レベルのブラインド データの場合は、オブジェクトのみを指定する必要があります。オブジェクト上に新しい複合アトリビュート BlindDataNNNN が作成されます。オブジェクト レベルのブラインド データの場合、ブラインド データのアトリビュート名は、全タイプに渡って固有である必要があります。そのため、このコマンドでは次の項目を指定する必要があります。- typeId - associationType - 編集するデータの longDataName または shortDataName - 指定する実データ- このデータをアタッチするコンポーネント



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    associationType (string): 作成するブラインドデータノードの一部であるdataTypesを指定します。使用可能な関連付けは、「object」(任意のオブジェクト)、そして「vertex」、「edge」、「face」(メッシュオブジェクト)です。その他のジオメトリタイプの関係付けを追加することもできます。

    -----------------------------------------

    binaryData (string): データ型をバイナリデータ値に指定します。

    -----------------------------------------

    booleanData (boolean): データ型をブーリアン(論理)値に指定します。

    -----------------------------------------

    delete (boolean): ブラインドデータが見つかった場合に除去することを指定します。

    -----------------------------------------

    doubleData (float): データ型を浮動小数点のdouble値に指定します。

    -----------------------------------------

    int64Data (int64): データ型を64ビットの整数値に指定します。

    -----------------------------------------

    intData (int): データ型を整数値に指定します。

    -----------------------------------------

    longDataName (string): このコマンドで修正するデータのロングネームを指定します。

    -----------------------------------------

    rescan (boolean): ブラインドデータノードを再スキャンして。キャッシュされた情報を探します。

    -----------------------------------------

    reset (boolean): 指定したアトリビュートを既定値にリセットすることを指定します。

    -----------------------------------------

    shape (boolean): オブジェクトに対する関係付けのみの場合は、ノード自体ではなくその下のシェイプにブラインドデータを適用します。

    -----------------------------------------

    shortDataName (string): このコマンドで修正するデータのショートネームを指定します。

    -----------------------------------------

    stringData (string): データ型を文字列値に指定します。

    -----------------------------------------

    typeId (int): 作成するブラインドデータタイプのtypeIdを指定します。

    -----------------------------------------

    Return Value:
    None: string作成されたノード名
    """
    pass

    
def polyBoolOp(faceAreaThreshold: float = 1.0,operation: int = 1,preserveColor: bool = False,useThresholds: bool = False,vertexDistanceThreshold: float = 1.0,caching: bool = False,mergeUVSets: int = 1,nodeState: int = 1) -> None:
    """
    入力ポリゴン間のブール演算(論理和、論理積、論理差)によって、新しいポリゴンを作成します。論理差の場合に限り、オブジェクトを選択する順序が重要になります(結果 = オブジェクト 1 － オブジェクト 2)。コマンド ラインでオブジェクトを指定しない場合は、アクティブ リストのオブジェクトを使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    faceAreaThreshold (linear): ブール演算の前にフェースを折りたたむかどうかを決定する領域のしきい値です。useThresholdsをtrueに設定していない限り、アトリビュートは無視されます。既定:0.0001

    -----------------------------------------

    operation (int): ブール演算処理のタイプです。1=論理和、2=論理差、3=論理積。既定のタイプは論理和です。既定:kBoolOpUnion

    -----------------------------------------

    preserveColor (boolean): trueの場合、ブール演算処理は、新しいメッシュのカラーを計算します。falseの場合、新しいメッシュにカラーは設定されません。既定:false

    -----------------------------------------

    useThresholds (boolean): trueの場合、vertexDistanceThresholdよりも少ない分離で頂点をマージし、faceAreaThresholdよりも狭い領域でフェースを折りたたみます。falseの場合、頂点のマージとフェースの折りたたみを行いません。既定:false

    -----------------------------------------

    vertexDistanceThreshold (linear): ブール演算を適用する前に頂点(エッジ)をマージする必要があるかどうかを決定するしきい値です。useThresholdsをtrueに設定していない限り、アトリビュートは無視されます。既定:0.001

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    mergeUVSets (int): UVセットが出力メッシュにマージされる方法を指定します。0=マージなし:各メッシュの各UVセットは出力において新しいUVセットになります。1=名前でマージ:同じ名前を持つUVセットがマージされます。2=UVリンクでマージ:入力メッシュのUVリンクがそのまま動作するようにUVセットがマージされます。既定は「名前でマージ」です。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyBridgeEdge(bridgeOffset: int = 1,caching: bool = False,constructionHistory: bool = False,curveType: int = 1,divisions: int = 1,inputCurve: str = "",name: str = "",nodeState: int = 1,smoothingAngle: float = 1.0,startVert1: int = 1,startVert2: int = 1,taper: float = 1.0,taperCurve_FloatValue: float = 1.0,taperCurve_Interp: int = 1,taperCurve_Position: float = 1.0,twist: float = 1.0,worldSpace: bool = False) -> None:
    """
    2 つのエッジのセットをブリッジします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bridgeOffset (int): 接続されている頂点にオフセットを追加します。既定:0

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    curveType (int): フォーマット:0-リニア、1-ブレンド、2-カーブ。既定:TdnpolyBridgeEdge::Linear

    -----------------------------------------

    divisions (int): ブリッジするフェースのサブディビジョンの数です(結果としてフェースの(分割数+1)行になります)。既定:1

    -----------------------------------------

    inputCurve (name): このフラグは、操作のための入力として使用されるカーブの名前を指定します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    smoothingAngle (angle): 新しいエッジがスムージングされる角度です。既定:kPi/6.0

    -----------------------------------------

    startVert1 (int): エッジの1番目のセットからの開始頂点です。既定:-1

    -----------------------------------------

    startVert2 (int): エッジの2番目のセットからの開始頂点です。既定:-1

    -----------------------------------------

    taper (float): 押し出しパスに沿ってテーパまたはスケールします。既定:1.0

    -----------------------------------------

    taperCurve_FloatValue (float): taperCurveの値。押し出しに沿ったテーパのカーブコントロール。このカーブを使用すると、押し出しに沿ったテーパが、単純なリニアスケールから押し出しパスに沿ったカスタムスケールに変更されます。

    -----------------------------------------

    taperCurve_Interp (int): taperCurveの補間タイプ。押し出しに沿ったテーパのカーブコントロール。このカーブを使用すると、押し出しに沿ったテーパが、単純なリニアスケールから押し出しパスに沿ったカスタムスケールに変更されます。

    -----------------------------------------

    taperCurve_Position (float): TaperCurveの位置。押し出しに沿ったテーパのカーブコントロール。このカーブを使用すると、押し出しに沿ったテーパが、単純なリニアスケールから押し出しパスに沿ったカスタムスケールに変更されます。

    -----------------------------------------

    twist (angle): 押し出しに沿ったツイストまたは回転です。既定:0.0

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCacheMonitor(cacheValue: bool = False,nodeName: str = "") -> None:
    """
    cacheInput アトリビュートが正の値を持つ場合、midModifier ノードは出力メッシュをキャッシュして、下流ノードの計算を改善します。カウンタの値がゼロの場合、midModifier はキャシュされたデータをリリースします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    cacheValue (boolean): ノードのキャッシュカウンタをインクリメントするかデクリメントするかを示すフラグです。trueはカウンタをインクリメントし、falseはカウンタをデクリメントします。

    -----------------------------------------

    nodeName (string): キャッシュカウンタを変更する必要があるノードの名前です。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def polyCanBridgeEdge() -> None:
    """
    指定したポリ エッジを、polyBridgeEdge を使用してブリッジできる場合は true を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: boolean成功または失敗
    """
    pass

    
def polyCBoolOp(classification: int = 1,faceAreaThreshold: float = 1.0,operation: int = 1,preserveColor: bool = False,useCarveBooleans: bool = False,useThresholds: bool = False,vertexDistanceThreshold: float = 1.0,caching: bool = False,mergeUVSets: int = 1,nodeState: int = 1) -> None:
    """
    入力ポリゴン間のブール演算(論理和、論理積、論理差)によって、新しいポリゴンを作成します。論理差の場合に限り、オブジェクトを選択する順序が重要になります(結果 = オブジェクト 1 － オブジェクト 2)。コマンド ラインでオブジェクトを指定しない場合は、アクティブ リストのオブジェクトを使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    classification (int): 開いたマニホールドと閉じたマニホールドの交点の処理方法を変更します。1は「エッジ」で、2は「通常」です。

    -----------------------------------------

    faceAreaThreshold (linear): ブール演算の前にフェースを折りたたむかどうかを決定する領域のしきい値です。useThresholdsをtrueに設定していない限り、アトリビュートは無視されます。既定:0.0001

    -----------------------------------------

    operation (int): ブール演算処理のタイプです。1=論理和、2=論理差、3=論理積。既定のタイプは論理和です。既定:kBoolOpUnion

    -----------------------------------------

    preserveColor (boolean): trueの場合、ブール演算処理は、新しいメッシュのカラーを計算します。falseの場合、新しいメッシュにカラーは設定されません。既定:false

    -----------------------------------------

    useCarveBooleans (boolean): trueの場合、CarveBooleanライブラリを使用します、

    -----------------------------------------

    useThresholds (boolean): trueの場合、vertexDistanceThresholdよりも少ない分離で頂点をマージし、faceAreaThresholdよりも狭い領域でフェースを折りたたみます。falseの場合、頂点のマージとフェースの折りたたみを行いません。既定:false

    -----------------------------------------

    vertexDistanceThreshold (linear): ブール演算を適用する前に頂点(エッジ)をマージする必要があるかどうかを決定するしきい値です。useThresholdsをtrueに設定していない限り、アトリビュートは無視されます。既定:0.001

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    mergeUVSets (int): UVセットが出力メッシュにマージされる方法を指定します。0=マージなし:各メッシュの各UVセットは出力において新しいUVセットになります。1=名前でマージ:同じ名前を持つUVセットがマージされます。2=UVリンクでマージ:入力メッシュのUVリンクがそのまま動作するようにUVセットがマージされます。既定は「名前でマージ」です。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCheck(edge: bool = False,face: bool = False,faceOffset: bool = False,openFile: str = "") -> None:
    """
    ポリゴン オブジェクトの内部メモリ表現の説明をダンプします。コマンド ラインでオブジェクトを指定しない場合は、アクティブ リストのオブジェクトを使用します。既定の動作では、概要のみが出力されます。オブジェクトの特定の部分に関するディテールをわらに取得するには、前述のフラグを使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    edge (boolean): エッジの説明を確認します。フラグを設定しない場合、全体的なチェックを実行します。

    -----------------------------------------

    face (boolean): フェースの説明を確認します。フラグを設定しない場合、全体的なチェックを実行します。

    -----------------------------------------

    faceOffset (boolean): フェースのオフセットの説明を確認します。フラグを設定しない場合、全体的なチェックを実行します。

    -----------------------------------------

    openFile (string): デバッグコマンドによりダンプされたポリゴンの説明を含むファイルを開きます。

    -----------------------------------------

    Return Value:
    None: intエラー数。
    """
    pass

    
def polyChipOff(attraction: float = 1.0,caching: bool = False,constructionHistory: bool = False,duplicate: bool = False,gain: float = 1.0,gravity: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),gravityX: float = 1.0,gravityY: float = 1.0,gravityZ: float = 1.0,keepFacesTogether: bool = False,keepFacetTogether: bool = False,localCenter: int = 1,localDirection: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localDirectionX: float = 1.0,localDirectionY: float = 1.0,localDirectionZ: float = 1.0,localRotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localRotateX: float = 1.0,localRotateY: float = 1.0,localRotateZ: float = 1.0,localScale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localScaleX: float = 1.0,localScaleY: float = 1.0,localScaleZ: float = 1.0,localTranslate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localTranslateX: float = 1.0,localTranslateY: float = 1.0,localTranslateZ: float = 1.0,magnX: float = 1.0,magnY: float = 1.0,magnZ: float = 1.0,magnet: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),name: str = "",nodeState: int = 1,offset: float = 1.0,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pivotX: float = 1.0,pivotY: float = 1.0,pivotZ: float = 1.0,random: float = 1.0,scale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),scaleX: float = 1.0,scaleY: float = 1.0,scaleZ: float = 1.0,translate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),translateX: float = 1.0,translateY: float = 1.0,translateZ: float = 1.0,weight: float = 1.0,worldSpace: bool = False) -> None:
    """
    ファセットを抽出します。フェースは個別に抽出、またはまとめて抽出でき、ワールド空間かオブジェクト空間で操作できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attraction (float): 磁石に関連する引き付けです。範囲は[-2.0,2.0]です。既定:0.0

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    duplicate (boolean): オンにすると、ファセットを複製します。オフにすると、オリジナルのファセットが除去されます。C:既定はオンです。Q:照会するとintを返します。

    -----------------------------------------

    gain (float): コンポーネントごとの係数を増加します。Artisanを使用してペイントできます。既定:1.0

    -----------------------------------------

    gravity ([linear, linear, linear]): 重力ベクトルです。既定:0.0,-1.0,0.0

    -----------------------------------------

    gravityX (linear): 重力のX座標です。

    -----------------------------------------

    gravityY (linear): 重力のY座標です。

    -----------------------------------------

    gravityZ (linear): 重力のZ座標です。

    -----------------------------------------

    keepFacesTogether (boolean): エッジの押し出し方法です。オンの場合、押し出されるエッジから生成される押し出しフェースは共に保持されます。そうでない場合は、個別に引き出されます。既定:true

    -----------------------------------------

    keepFacetTogether (boolean): エッジの押し出し方法です。オンの場合、押し出されるエッジから生成される押し出しフェースは共に保持されます。そうでない場合は、個別に引き出されます。既定:true

    -----------------------------------------

    localCenter (int): エッジのローカル中心です。0=中点、1=始点、2=終点です。既定:0

    -----------------------------------------

    localDirection ([linear, linear, linear]): ローカル空間のX軸を決定する方向です。既定:1.0,0.0,0.0

    -----------------------------------------

    localDirectionX (linear): X軸のX座標です。

    -----------------------------------------

    localDirectionY (linear): X軸のY座標です。

    -----------------------------------------

    localDirectionZ (linear): X軸のZ座標です。

    -----------------------------------------

    localRotate ([angle, angle, angle]): ローカル回転です。既定:0.0,0.0,0.0

    -----------------------------------------

    localRotateX (angle): ローカル回転のX座標です。範囲は[0,360]です。

    -----------------------------------------

    localRotateY (angle): ローカル回転のY座標です。範囲は[0,360]です。

    -----------------------------------------

    localRotateZ (angle): ローカル回転のZ座標です。法線に沿って回転します。範囲は[0,360]です。

    -----------------------------------------

    localScale ([float, float, float]): ローカルスケールです。既定:1.0,1.0,1.0

    -----------------------------------------

    localScaleX (float): スケールのX座標です。

    -----------------------------------------

    localScaleY (float): スケールのY座標です。

    -----------------------------------------

    localScaleZ (float): スケールのZ座標です。

    -----------------------------------------

    localTranslate ([linear, linear, linear]): ローカル移動です。既定:0.0,0.0,0.0

    -----------------------------------------

    localTranslateX (linear): ローカル平行移動のX座標。

    -----------------------------------------

    localTranslateY (linear): ローカル平行移動のY座標。

    -----------------------------------------

    localTranslateZ (linear): ローカル平行移動のZ座標。法線に沿って移動します。

    -----------------------------------------

    magnX (linear): 磁石のX座標です。

    -----------------------------------------

    magnY (linear): 磁石のY座標です。

    -----------------------------------------

    magnZ (linear): 磁石のZ座標です。

    -----------------------------------------

    magnet ([linear, linear, linear]): 磁石のベクトルです。既定:0.0,0.0,0.0

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    offset (float): ローカルオフセットです。フェースは、フェースの内側に向かってこの距離に移動します。既定:0.0

    -----------------------------------------

    pivot ([linear, linear, linear]): スケールと回転のためのピボットです。既定:0.0,0.0,0.0

    -----------------------------------------

    pivotX (linear): ピボットのX座標です。

    -----------------------------------------

    pivotY (linear): ピボットのY座標です。

    -----------------------------------------

    pivotZ (linear): ピボットのZ座標です。

    -----------------------------------------

    random (float): すべてのパラメータにランダム値を指定します。既定:0.0

    -----------------------------------------

    scale ([float, float, float]): スケールのベクトルです。既定:1.0,1.0,1.0

    -----------------------------------------

    scaleX (float): スケールのX座標です。

    -----------------------------------------

    scaleY (float): スケールのY座標です。

    -----------------------------------------

    scaleZ (float): スケールのZ座標です。

    -----------------------------------------

    translate ([linear, linear, linear]): 移動ベクトルです。既定:0.0,0.0,0.0

    -----------------------------------------

    translateX (linear): 移動のX座標です。

    -----------------------------------------

    translateY (linear): 移動のY座標です。

    -----------------------------------------

    translateZ (linear): 移動のZ座標です。

    -----------------------------------------

    weight (float): 重力に関連したウェイトです。既定:0.0

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCircularize(alignment: int = 1,caching: bool = False,constructionHistory: bool = False,createCurve: bool = False,evenlyDistribute: bool = False,inputCurve: str = "",name: str = "",nodeState: int = 1,normalOrientation: int = 1,radialOffset: float = 1.0,smoothingAngle: float = 1.0,worldSpace: bool = False) -> None:
    """
    選択したオブジェクトのフェースをすべてミラーリングします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alignment (int): サーフェスに相対する円の向きを指定します。既定:0

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createCurve (boolean): trueの場合、この操作でカーブを作成することができます。

    -----------------------------------------

    evenlyDistribute (boolean): 円の周囲でポイントが均等に分散されるかどうかを指定します。既定:true

    -----------------------------------------

    inputCurve (name): このフラグは、操作のための入力として使用されるカーブの名前を指定します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    normalOrientation (int): 円の平面法線を取得するために使用する計算機能を指定します。既定:0

    -----------------------------------------

    radialOffset (float): 半径に沿って移動する円のポイントの量です。既定:0.0

    -----------------------------------------

    smoothingAngle (float): フェースがハードになるかソフトになるかを決定する角度です。既定:30.0

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCircularizeEdge(alignment: int = 1,caching: bool = False,constructionHistory: bool = False,createCurve: bool = False,evenlyDistribute: bool = False,inputCurve: str = "",name: str = "",nodeState: int = 1,normalOrientation: int = 1,radialOffset: float = 1.0,smoothingAngle: float = 1.0,worldSpace: bool = False) -> None:
    """
    選択したオブジェクトのフェースをすべてミラーリングします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alignment (int): サーフェスに相対する円の向きを指定します。既定:0

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createCurve (boolean): trueの場合、この操作でカーブを作成することができます。

    -----------------------------------------

    evenlyDistribute (boolean): 円の周囲でポイントが均等に分散されるかどうかを指定します。既定:true

    -----------------------------------------

    inputCurve (name): このフラグは、操作のための入力として使用されるカーブの名前を指定します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    normalOrientation (int): 円の平面法線を取得するために使用する計算機能を指定します。既定:0

    -----------------------------------------

    radialOffset (float): 半径に沿って移動する円のポイントの量です。既定:0.0

    -----------------------------------------

    smoothingAngle (float): フェースがハードになるかソフトになるかを決定する角度です。既定:30.0

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCircularizeFace(alignment: int = 1,caching: bool = False,constructionHistory: bool = False,createCurve: bool = False,evenlyDistribute: bool = False,inputCurve: str = "",name: str = "",nodeState: int = 1,normalOrientation: int = 1,radialOffset: float = 1.0,smoothingAngle: float = 1.0,worldSpace: bool = False) -> None:
    """
    選択したオブジェクトのフェースをすべてミラーリングします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alignment (int): サーフェスに相対する円の向きを指定します。既定:0

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createCurve (boolean): trueの場合、この操作でカーブを作成することができます。

    -----------------------------------------

    evenlyDistribute (boolean): 円の周囲でポイントが均等に分散されるかどうかを指定します。既定:true

    -----------------------------------------

    inputCurve (name): このフラグは、操作のための入力として使用されるカーブの名前を指定します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    normalOrientation (int): 円の平面法線を取得するために使用する計算機能を指定します。既定:0

    -----------------------------------------

    radialOffset (float): 半径に沿って移動する円のポイントの量です。既定:0.0

    -----------------------------------------

    smoothingAngle (float): フェースがハードになるかソフトになるかを決定する角度です。既定:30.0

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyClean(caching: bool = False,cleanEdges: bool = False,cleanPartialUVMapping: bool = False,cleanUVs: bool = False,cleanVertices: bool = False,constructionHistory: bool = False,frozen: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    polyClean はポリゴン メッシュの記述内にある無効なコンポーネントを除去しようとします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    cleanEdges (boolean): trueの場合は、メッシュ内のどのフェースにも関連付けられていないエッジを検索して、削除します。

    -----------------------------------------

    cleanPartialUVMapping (boolean): trueの場合は、完全なUVマッピングを持たないメッシュ上のフェースを検索します。Mayaでは、メッシュフェースを構成するすべての頂点に有効なUVデータが関連付けられている、またはフェース内のどの頂点にもUVが関連付けられていないことが必要です。

    -----------------------------------------

    cleanUVs (boolean): trueの場合は、メッシュ内のどのフェースにも関連付けられていないUVを検索して、削除します。

    -----------------------------------------

    cleanVertices (boolean): trueの場合は、メッシュ内のどのフェースにも関連付けられていない頂点を検索して、削除します。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    frozen (boolean): 現在の評価の状態を維持し、その他の間接的な変更を防ぐには、特定のノードのフリーズの状態を切り替えます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyClipboard(clear: bool = False,color: bool = False,copy: bool = False,paste: bool = False,shader: bool = False,uvCoordinates: bool = False) -> None:
    """
    特定のポリゴン アトリビュートをクリップボードへとコピー＆ペーストすることができます。操作できるアトリビュートは次のとおりです。1. シェーダ(シェーディング エンジン)の割り当て 2. テクスチャ座標(UV)の割り当て 3. カラー値の割り当てコピー＆ペースト操作には、任意のアトリビュートの組み合わせを選択できます。アトリビュートをクリップボードにコピーしない場合、クリップボードからペーストすることができません。コピー オプションは、単一ソースのポリゴン DAG オブジェクトやポリゴン コンポーネントからアトリビュートの割り当てをコピーします。ソースに UV アトリビュートかカラー アトリビュートがない場合は、クリップボードには何もコピーされません。ペースト オプションは、1 つまたは複数のポリゴン コンポーネントやポリゴン DAG オブジェクトにアトリビュートの割り当てをペーストします。ペースト先に UV アトリビュートかカラー アトリビュートがない場合は、必要に応じて、新しい値が割り当てられます。クリップボードの内容をクリアするオプションもあります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    clear (boolean): 指定したアトリビュート引数をクリアします。

    -----------------------------------------

    color (boolean): カラーアトリビュートをコピー、またはペーストします。

    -----------------------------------------

    copy (boolean): 指定したアトリビュート引数をコピーします。

    -----------------------------------------

    paste (boolean): 指定したアトリビュート引数をペーストします。

    -----------------------------------------

    shader (boolean): シェーダアトリビュートをコピー、またはペーストします。

    -----------------------------------------

    uvCoordinates (boolean): テクスチャ座標アトリビュートをコピー、またはペーストします。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗
    """
    pass

    
def polyCloseBorder(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    オブジェクトの開いた境界を閉じます。それぞれの境界エッジでは、フェースが作成され、エッジが存在する穴を埋めます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCollapseEdge(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    選択したエッジをポイントに変換します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCollapseFacet(areaThreshold: float = 1.0,caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,useAreaThreshold: bool = False) -> None:
    """
    選択したそれぞれのファセットをポイントに変換します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    areaThreshold (float): 面を折りたたむ必要があるかどうかを決定する領域のしきい値です。UseAreaThresholdがtrueに設定されていない場合、アトリビュートは無視されます。既定:0.1

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    useAreaThreshold (boolean): trueの場合は領域のしきい値未満の領域にあるフェースのみが折りたたまれ、それ以外の場合は領域の大きさにかかわらず、すべてのフェースが折りたたまれます。既定:false

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCollapseTweaks(hasVertexTweaks: bool = False) -> None:
    """
    それぞれの頂点データに微調整データ(メッシュ ノードに格納)を適用して、メッシュの頂点の微調整を更新するコマンドです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    hasVertexTweaks (boolean): 個々のメッシュに頂点の微調整があるかどうかを判別します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyColorBlindData(aboveMaxColorBlue: float = 1.0,aboveMaxColorGreen: float = 1.0,aboveMaxColorRed: float = 1.0,attrName: str = "",belowMinColorBlue: float = 1.0,belowMinColorGreen: float = 1.0,belowMinColorRed: float = 1.0,clashColorBlue: float = 1.0,clashColorGreen: float = 1.0,clashColorRed: float = 1.0,colorBlue: float = 1.0,colorGreen: float = 1.0,colorRed: float = 1.0,dataType: str = "",enableFalseColor: bool = False,maxColorBlue: float = 1.0,maxColorGreen: float = 1.0,maxColorRed: float = 1.0,maxValue: float = 1.0,minColorBlue: float = 1.0,minColorGreen: float = 1.0,minColorRed: float = 1.0,minValue: float = 1.0,mode: int = 1,noColorBlue: float = 1.0,noColorGreen: float = 1.0,noColorRed: float = 1.0,numIdTypes: int = 1,queryMode: bool = False,typeId: int = 1,useMax: bool = False,useMin: bool = False,value: str = "") -> None:
    """
    選択したコンポーネントにブラインド データ(ポリゴン オブジェクトの場合はダイナミック アトリビュート)が存在するかどうかに応じて、また指定したカラー モードとその値に応じて、選択したポリゴン コンポーネントとオブジェクトに擬似カラーを適用します。データが特定値か値の範囲に一致する場合は、データが存在するかどうかに応じてオブジェクトにカラーを適用できます。指定した最小値と最大値に対する実際の値に応じて、データをグレースケールに変換することもできます。照会モードでは、コンポーネント、オブジェクト、またはその両方が文字配列で返され、選択のフィルタリングが可能になります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    aboveMaxColorBlue (float): 最大値を超えるデータに使用する、カラーの青いコンポーネントを指定します。

    -----------------------------------------

    aboveMaxColorGreen (float): 最大値を超えるデータに使用する、カラーの緑のコンポーネントを指定します。

    -----------------------------------------

    aboveMaxColorRed (float): 最大値を超えるデータに使用する、カラーの赤いコンポーネントを指定します。

    -----------------------------------------

    attrName (string): このコマンドで検証するデータの名前を指定します。

    -----------------------------------------

    belowMinColorBlue (float): 最小値未満のデータ値に使用する、カラーの青いコンポーネントを指定します。

    -----------------------------------------

    belowMinColorGreen (float): 最小値未満のデータ値に使用する、カラーの緑のコンポーネントを指定します。

    -----------------------------------------

    belowMinColorRed (float): 最小値未満のデータ値に使用する、カラーの赤いコンポーネントを指定します。

    -----------------------------------------

    clashColorBlue (float): 不一致のデータに使用する、カラーの青いコンポーネントを指定します。

    -----------------------------------------

    clashColorGreen (float): 不一致のデータに使用する、カラーの緑のコンポーネントを指定します。

    -----------------------------------------

    clashColorRed (float): 不一致のデータに使用する、カラーの赤いコンポーネントを指定します。

    -----------------------------------------

    colorBlue (float): 指定したデータに使用する、カラーの青いコンポーネントを指定します。

    -----------------------------------------

    colorGreen (float): 指定したデータに使用する、カラーの緑のコンポーネントを指定します。

    -----------------------------------------

    colorRed (float): 指定したデータに使用する、カラーの赤いコンポーネントを指定します。

    -----------------------------------------

    dataType (string): このIDのタイプを指定します。

    -----------------------------------------

    enableFalseColor (boolean): シーンにある全ポリゴンオブジェクトの擬似カラーの適用をオンまたはオフにします。

    -----------------------------------------

    maxColorBlue (float): グレースケールの最大値に使用する、カラーの青いコンポーネントを指定します。

    -----------------------------------------

    maxColorGreen (float): グレースケールの最大値に使用する、カラーの緑のコンポーネントを指定します。

    -----------------------------------------

    maxColorRed (float): グレースケールの最大値に使用する、カラーの赤いコンポーネントを指定します。

    -----------------------------------------

    maxValue (float): グレースケール、または個別範囲のデータの最大値を指定します。

    -----------------------------------------

    minColorBlue (float): グレースケールの最小値に使用する、カラーの青いコンポーネントを指定します。

    -----------------------------------------

    minColorGreen (float): グレースケールの最小値に使用する、カラーの緑のコンポーネントを指定します。

    -----------------------------------------

    minColorRed (float): グレースケールの最小値に使用する、カラーの赤いコンポーネントを指定します。

    -----------------------------------------

    minValue (float): グレースケール、または個別範囲のデータの最小値を指定します。

    -----------------------------------------

    mode (int): モードを指定します。0:バイナリ(データがあるコンポーネントとオブジェクトのみにカラーを適用します)。1:個別の値(値を指定します)。この値に一致するデータにカラーを適用します。2:個別の範囲(特定の範囲内の値にカラーが適用されます)。3:符号なし設定モード((givenValue&actualValue)の場合、データにカラーが適用されます)。4:符号なし設定なしモード（!(givenValue&actualValue))の場合、データにカラーが適用されます)。5:符号なし等号モード((givenValue==actualValue)の場合にデータにカラーを適用します)。6:グレースケールモード(最小値、最大値、最小カラー値、最大カラー値、最小値未満のカラー値と最大値を超えるカラー値を指定します)。これらの値に相対する方法に応じて、データにカラーを適用します。7:カラーモード（ブラインドデータが、範囲が0～1の3つのdouble値から構成される場合は、データが指定するとおりにコンポーネントにカラーを適用します。

    -----------------------------------------

    noColorBlue (float): データが割り当てられていない場合に使用する、カラーの青いコンポーネントを指定します。

    -----------------------------------------

    noColorGreen (float): データが割り当てられていない場合に使用する、カラーの緑のコンポーネントを指定します。

    -----------------------------------------

    noColorRed (float): データが割り当てられていない場合に使用する、カラーの赤いコンポーネントを指定します。

    -----------------------------------------

    numIdTypes (int): このIDタイプに含めるアトリビュート数を指定します。

    -----------------------------------------

    queryMode (boolean): オンにした場合、カラーは適用されず、選択内容を文字配列として返します。通常ならばカラーが適用されるデータを返します(カラーなし(Nocolor)と範囲外のカラー(Outofrangecolor)を除く)。

    -----------------------------------------

    typeId (int): 作成するブラインドデータタイプのtypeIdを指定します。

    -----------------------------------------

    useMax (boolean): 個別の範囲に最大値を使用するかどうかを指定します。

    -----------------------------------------

    useMin (boolean): 個別の範囲に最小値を使用するかどうかを指定します。

    -----------------------------------------

    value (string): データの値です。

    -----------------------------------------

    Return Value:
    None: string[]コマンドの結果
    """
    pass

    
def polyColorDel(caching: bool = False,colorSetName: str = "",constructionHistory: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    選択したコンポーネントからカラーを削除します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    colorSetName (string): 使用するカラーセットの名前です。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyColorMod(alphaScale_FloatValue: float = 1.0,alphaScale_Interp: int = 1,alphaScale_Position: float = 1.0,baseColorName: str = "",blueScale_FloatValue: float = 1.0,blueScale_Interp: int = 1,blueScale_Position: float = 1.0,caching: bool = False,constructionHistory: bool = False,greenScale_FloatValue: float = 1.0,greenScale_Interp: int = 1,greenScale_Position: float = 1.0,huev: float = 1.0,intensityScale_FloatValue: float = 1.0,intensityScale_Interp: int = 1,intensityScale_Position: float = 1.0,name: str = "",nodeState: int = 1,redScale_FloatValue: float = 1.0,redScale_Interp: int = 1,redScale_Position: float = 1.0,satv: float = 1.0,value: float = 1.0) -> None:
    """
    ポリゴン カラー セットのアトリビュートを修正します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alphaScale_FloatValue (float): ?????

    -----------------------------------------

    alphaScale_Interp (int): ?????既定:0

    -----------------------------------------

    alphaScale_Position (float): ?????

    -----------------------------------------

    baseColorName (string): 修正するカラーセットの名前です。

    -----------------------------------------

    blueScale_FloatValue (float): ?????

    -----------------------------------------

    blueScale_Interp (int): ?????既定:0

    -----------------------------------------

    blueScale_Position (float): ?????

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    greenScale_FloatValue (float): ?????

    -----------------------------------------

    greenScale_Interp (int): ?????既定:0

    -----------------------------------------

    greenScale_Position (float): ?????

    -----------------------------------------

    huev (float): 色相(Hue)最終カラーの色相値を回転させます。既定:0.0

    -----------------------------------------

    intensityScale_FloatValue (float): ?????

    -----------------------------------------

    intensityScale_Interp (int): ?????既定:0

    -----------------------------------------

    intensityScale_Position (float): ?????

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    redScale_FloatValue (float): ?????

    -----------------------------------------

    redScale_Interp (int): ?????既定:0

    -----------------------------------------

    redScale_Position (float): ?????

    -----------------------------------------

    satv (float): 彩度(Sat)最終カラーの彩度をスケールします。既定:1.0

    -----------------------------------------

    value (float): 明度(Value)最終カラー値をスケールします。既定:1.0

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyColorPerVertex(alpha: float = 1.0,clamped: bool = False,colorB: float = 1.0,colorDisplayOption: bool = False,colorG: float = 1.0,colorR: float = 1.0,colorRGB: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),notUndoable: bool = False,relative: bool = False,remove: bool = False,representation: int = 1) -> None:
    """
    ポリゴン オブジェクトの頂点にカラー(RGB とアルファ)をコネクトします。照会フラグと一緒に使用すると、指定したコンポーネントにコネクトされたカラーを返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alpha (float): カラーのアルファチャネルを指定します。

    -----------------------------------------

    clamped (boolean): このフラグは、カラーセットが0から1の範囲外にあるすべての値を切り捨てるかどうかを指定します。

    -----------------------------------------

    colorB (float): カラーのBチャネルを指定します。

    -----------------------------------------

    colorDisplayOption (boolean): メッシュの表示オプションを、頂点カラーを表示するように変更します。

    -----------------------------------------

    colorG (float): カラーのGチャネルを指定します。

    -----------------------------------------

    colorR (float): カラーのRチャネルを指定します。

    -----------------------------------------

    colorRGB ([float, float, float]): カラーのRGBチャネルを指定します。

    -----------------------------------------

    notUndoable (boolean): コマンドを元に戻せる状態で、そのコマンドを実行します。オブジェクトが多い場合は、パフォーマンスが大きく改善されます。元に戻す(Undo)の有効/無効状態に関係なく、コマンドを元に戻すことができます。

    -----------------------------------------

    relative (boolean): 指定したカラー値を、現在値に関連して追加します。

    -----------------------------------------

    remove (boolean): 選択した、または指定したオブジェクトやコンポーネントから、カラー値を除去します。このオプションは、コンストラクションヒストリのないメッシュ、またはコンストラクションヒストリに最近のpolyColorPerVertexNodeを含むメッシュのみをサポートします。コンストラクションヒストリにpolyColorPerVertexNodeのポリゴン操作を含むメッシュについては、代わりにpolyColorDelコマンドの使用をお勧めします。

    -----------------------------------------

    representation (int): このフラグは、A(アルファのみ)、RGBA、RGBAなどの使用するカラーチャネルに対応します。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyColorSet(allColorSets: bool = False,clamped: bool = False,colorSet: str = "",copy: bool = False,create: bool = False,currentColorSet: bool = False,currentPerInstanceSet: bool = False,delete: bool = False,newColorSet: str = "",perInstance: bool = False,rename: bool = False,representation: str = "",shareInstances: bool = False,unshared: bool = False) -> None:
    """
    カラー セットに次の操作を実行します。- 既存のカラー セットを削除 - 既存のカラー セットの名前を変更- 空のカラー セットを新規作成- 既存のカラー セットを現在のカラー セットに設定- インスタンス間での、インスタンス単位のカラー セットの共有を修正 - 現在のカラー セットを照会- すべてのカラー セットの名前を照会- すべてのカラー セットの名前と、代表値またはクランプ値を照会 - 現在のカラー セットの代表値またはクランプ値を照会



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allColorSets (boolean): このフラグを照会に使用すると、すべてのカラーセット名のリストを返します。

    -----------------------------------------

    clamped (boolean): このフラグは、カラーセットが0から1の範囲外にあるすべての値を切り捨てるかどうかを指定します。

    -----------------------------------------

    colorSet (string): このコマンドを実行するカラーセット名を指定します。このコマンドで、現在のカラーセットを照会する以外に重要な操作を実行するには、このフラグを指定する必要があります。

    -----------------------------------------

    copy (boolean): このフラグを使用して、colorSetフラグで指定した名前に対応するカラーセットを、newColorSetフラグで指定した名前に対応するカラーセットにコピーします。

    -----------------------------------------

    create (boolean): このフラグを使用して、colorSetフラグで指定した名前に対応する空のカラーセットを作成します。同じ名前のカラーセットがすでに存在する場合は、カラーセットは新規作成されません。

    -----------------------------------------

    currentColorSet (boolean): このフラグを使用して、オブジェクトの操作対象である現在のカラーセットを、colorSetフラグで指定した名前に対応するカラーセットに設定します。つまり、指定した名前のcolorSetが存在している必要があります。照会すると、現在のカラーセットを返します。

    -----------------------------------------

    currentPerInstanceSet (boolean): これは照会専用フラグで、現在のカラーセットがインスタンス単位のカラーセットファミリである場合に使用します。現在選択しているインスタンスに対応するセットファミリのメンバーを返します。

    -----------------------------------------

    delete (boolean): このフラグを使用して、colorSetフラグで指定した名前に対応するカラーセットを削除します。

    -----------------------------------------

    newColorSet (string): colorSetフラグで指定した名前に対応する、変更する必要があるカラーセットの名前を指定します。

    -----------------------------------------

    perInstance (boolean): このフラグをcreateフラグと一緒に使用して、カラーセットがインスタンス単位かどうかを指定します。インスタンス単位のカラーセットを作成すると、unsharedフラグを使用した場合を除き、セットはシェイプにあるすべての選択したインスタンスの間で共有されるものとして適用されます。照会モードでperInstanceフラグをcurrentColorSetフラグやallColorSetsフラグと一緒に使用することで、設定したファミリ名(インスタンス識別子を含まない)を照会で返すように指定できます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    rename (boolean): このフラグを使用して、colorSetフラグで指定した名前に対応するカラーセットの名前を、newColorSetフラグで指定した名前に変更します。

    -----------------------------------------

    representation (string): このフラグは、A(アルファのみ)、RGBA、RGBAなどの使用するカラーチャネルに対応します。

    -----------------------------------------

    shareInstances (boolean): このフラグを使用して、指定したカラーセットファミリに属するインスタンス単位のカラーセットの共有設定を修正し、選択したすべてのインスタンスが指定したセットを共有するようにできます。照会モードでは、colorSetフラグで指定したセットを共有するインスタンスのリストを返します。

    -----------------------------------------

    unshared (boolean): このフラグをcreateフラグとperInstanceフラグと一緒に使用して、新規作成されたインスタンス単位のセットとともに、インスタンスごとに別のセットを作成することを指定できます。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCompare(colorSetIndices: bool = False,colorSets: bool = False,edges: bool = False,faceDesc: bool = False,userNormals: bool = False,uvSetIndices: bool = False,uvSets: bool = False,vertices: bool = False) -> None:
    """
    比較対象の詳細に制御し、2 つのポリゴン ジオメトリ オブジェクトを比較します。コマンド ラインでオブジェクトを指定しない場合は、アクティブ リストのオブジェクトを使用します。既定の動作では、すべてのフラグを比較します。MEL スクリプトの polyCompareTwoObjects.mel を使用して、このコマンドからフォーマットされた出力を得ます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    colorSetIndices (boolean): poly1とpoly2を比較し、一致するカラーインデックスを探します。

    -----------------------------------------

    colorSets (boolean): poly1とpoly2を比較し、一致するカラーセットを探します。

    -----------------------------------------

    edges (boolean): poly1とpoly2を比較し、一致するエッジを探します。

    -----------------------------------------

    faceDesc (boolean): poly1とpoly2を比較し、一致するフェースの説明を探します。フェースの説明は、エッジの数や向き、フェースに存在する穴のトポロジ数など、フェースのトポロジを記述します。

    -----------------------------------------

    userNormals (boolean): poly1とpoly2を比較し、一致するユーザ法線を探します。

    -----------------------------------------

    uvSetIndices (boolean): poly1とpoly2を比較し、一致するUVインデックスを探します。

    -----------------------------------------

    uvSets (boolean): poly1とpoly2を比較し、一致するUVセットを探します。

    -----------------------------------------

    vertices (boolean): poly1とpoly2を比較し、一致する頂点を探します。

    -----------------------------------------

    Return Value:
    None: int成功した場合は 0、要求されたフラグに基づいて poly1 と poly2 が同等と判断できない場合は 0 以外の値を返します。0 以外の場合、異なるアトリビュートによって返す値が変わります。 頂点 = 1 エッジ = 2 フェースの説明 = 4 UV セット = 8 UV インデックス = 16 カラー セット = 32 カラー インデックス = 64 ユーザ法線 = 128  たとえば、戻り値 3 は頂点とエッジが異なることを示します。
    """
    pass

    
def polyCone(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,constructionHistory: bool = False,createUVs: int = 1,height: float = 1.0,name: str = "",nodeState: int = 1,object: bool = False,radius: float = 1.0,roundCap: bool = False,subdivisionsAxis: int = 1,subdivisionsCap: int = 1,subdivisionsHeight: int = 1,subdivisionsX: int = 1,subdivisionsY: int = 1,subdivisionsZ: int = 1,texture: bool = False) -> None:
    """
    新しいポリゴン円錐を作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): 円錐の作成に使用するプリミティブ軸を指定します。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createUVs (int): UVを作成するかどうかを指定します。0:UVなし1:正規化なし2:正規化3:正規化してアスペクト比を保持既定:2

    -----------------------------------------

    height (linear): 円錐の高さです。既定:2.0

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します(適切な場合)。

    -----------------------------------------

    radius (linear): 円錐の半径です。既定:1.0

    -----------------------------------------

    roundCap (boolean): キャップの丸めが必要かどうかを示します。既定:false

    -----------------------------------------

    subdivisionsAxis (int): 軸を中心とするサブディビジョン既定:20

    -----------------------------------------

    subdivisionsCap (int): 下部キャップ上のサブディビジョンです。既定:0

    -----------------------------------------

    subdivisionsHeight (int): 高さに沿ったサブディビジョンです。既定:1

    -----------------------------------------

    subdivisionsX (int): 円錐のX方向のサブディビジョン数を指定します。C:既定は20です。Q:照会するとintを返します。

    -----------------------------------------

    subdivisionsY (int): 円錐のY方向のサブディビジョン数を指定します。C:既定は1です。Q:照会するとintを返します。

    -----------------------------------------

    subdivisionsZ (int): 円錐のZ方向のサブディビジョン数を指定します。C:既定は0です。Q:照会するとintを返します。

    -----------------------------------------

    texture (boolean): テクスチャの適用のオン/オフを切り替えます。既定:true

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyConnectComponents(adjustEdgeFlow: float = 1.0,caching: bool = False,constructionHistory: bool = False,insertWithEdgeFlow: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    ポリゴン エッジを選択したコンポーネントに従って分割します。選択したコンポーネントは、連続する分割を定義する、接続された「パス」へと集められます。頂点、エッジ、フェースなどの混合コンポーネントは即座に使用できます。接続規則は以下の通りです。* エッジは、同じフェース上の別のエッジ、同じフェース上の頂点(そのエッジ上にない)、または同じフェース上で別のエッジに接続されたフェースに接続できます。* 頂点は、同じフェース上のエッジ(上記の通り)、同じフェース上の頂点(エッジを通じて 1 番目の頂点と結合していない)、または頂点を使用するフェースに隣接するフェース(頂点を使用するフェースを除く)に接続できます。* フェースは、頂点やエッジ(上記の通り)、または隣接するフェースと接続できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustEdgeFlow (float): 配置するエッジ頂点のウェイト値。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    insertWithEdgeFlow (boolean): エッジフローを有効にするにはtrue。それ以外の場合は、エッジフローが無効になります。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyContourProjection(caching: bool = False,constructionHistory: bool = False,createNewMap: bool = False,flipRails: bool = False,insertBeforeDeformers: bool = False,method: int = 1,name: str = "",nodeState: int = 1,offset0: float = 1.0,offset1: float = 1.0,offset2: float = 1.0,offset3: float = 1.0,reduceShear: float = 1.0,smoothness0: float = 1.0,smoothness1: float = 1.0,smoothness2: float = 1.0,smoothness3: float = 1.0,userDefinedCorners: bool = False,uvSetName: str = "",worldSpace: bool = False) -> None:
    """
    オブジェクトに輪郭ストレッチ UV 投影を実行します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createNewMap (boolean): 新しいマップを作成する必要がある場合は、trueに設定します。

    -----------------------------------------

    flipRails (boolean): trueの場合、バイレイルサーフェスのレールになっているカーブを反転します。

    -----------------------------------------

    insertBeforeDeformers (boolean): 新しく作成したノードを任意のデフォーマノードの前に挿入する必要がある場合は、trueに設定します。

    -----------------------------------------

    method (int): 使用する投影方法を設定します。有効値は次のとおりです。0:ウォーク輪郭1:NURBS投影

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    offset0 (linear): NURBSサーフェスのエッジ0のオフセットを設定します。

    -----------------------------------------

    offset1 (linear): NURBSサーフェスのエッジ1のオフセットを設定します。

    -----------------------------------------

    offset2 (linear): NURBSサーフェスのエッジ2のオフセットを設定します。

    -----------------------------------------

    offset3 (linear): NURBSサーフェスのエッジ3のオフセットを設定します。

    -----------------------------------------

    reduceShear (float): 投影の「シア削減」パラメータを設定します。

    -----------------------------------------

    smoothness0 (float): NURBSサーフェスのエッジ0の平滑性を設定します。

    -----------------------------------------

    smoothness1 (float): NURBSサーフェスのエッジ1の平滑性を設定します。

    -----------------------------------------

    smoothness2 (float): NURBSサーフェスのエッジ2の平滑性を設定します。

    -----------------------------------------

    smoothness3 (float): NURBSサーフェスのエッジ3の平滑性を設定します。

    -----------------------------------------

    userDefinedCorners (boolean): trueの場合、ユーザが指定した4つの頂点は、投影を実行するためのコーナーとして使用されます。

    -----------------------------------------

    uvSetName (string): 作成するUVセットの名前です。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCopyUV(caching: bool = False,constructionHistory: bool = False,createNewMap: bool = False,name: str = "",nodeState: int = 1,uvSetName: str = "",uvSetNameInput: str = "",worldSpace: bool = False) -> None:
    """
    UV を UV セットから UV セットにコピーします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createNewMap (boolean): 新しいマップを作成する必要がある場合は、trueに設定します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    uvSetName (string): 作成するUVセットの名前です。

    -----------------------------------------

    uvSetNameInput (string): 入力UVセットの名前を指定して、そのUVの説明を読み取ります。既定は現在のUVセットです。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCrease(createHistory: bool = False,operation: int = 1,relativeValue: float = 1.0,value: float = 1.0,vertexValue: float = 1.0) -> None:
    """
    ポリゴンのエッジまたは頂点の折り目の値を設定するコマンドです。この値はスムージング アルゴリズムで使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    createHistory (boolean): コンストラクションヒストリのないオブジェクトの場合、このフラグを使用して折り目用のコンストラクションヒストリの作成を強制できます。既定では、オブジェクトにヒストリがない場合には、ヒストリは作成されません。このフラグにかかわらず、ヒストリがある場合には、ヒストリは常に作成されます。

    -----------------------------------------

    operation (uint): 実行する操作。有効な値は、0:指定したコンポーネントに折り目を付けます。1:指定したコンポーネントに対する折り目の値を除去します。2:すべての折り目の値をメッシュから除去します。既定は0です。

    -----------------------------------------

    relativeValue (float): 選択したすべての頂点コンポーネントとエッジコンポーネントの新しい相対値を指定します。このフラグは、valueフラグまたはvertexValueフラグと一緒に使用することはできません。

    -----------------------------------------

    value (float): 選択したエッジコンポーネントの折り目の値を指定します。複数回指定した場合、指定したエッジにそれぞれ値が割り当てられます。

    -----------------------------------------

    vertexValue (float): 選択した頂点コンポーネントの折り目の値を指定します。複数回指定した場合、指定した頂点にそれぞれ値が割り当てられます。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCreateFacet(constructionHistory: bool = False,hole: bool = False,name: str = "",point: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),subdivision: int = 1,texture: int = 1) -> None:
    """
    指定したフェースで、閉じられたポリゴン オブジェクトを新規作成します。引数のリストには、3 つ以上のポイントが必要です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    hole (boolean): 穴を追加します。続くポイントが穴を定義します。穴は時計回りか反時計回りで定義できます。Pythonでこのフラグを使用することは推奨しません。Pythonでpointフラグを使用してファセットを指定する場合、穴の指定を開始するには空のポイント()に渡します。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    point ([[, float, float, float, ]]): フェースに新しいポイントを追加します。ポイントの座標は、ワールドリファレンスで指定します。pointフラグは引数をつけずに渡すこともできます。これは、続くポイントが穴を指定していることを示します。引数をつけずにpointフラグを渡すことは、Pythonで動作することを除いて、holeフラグを使用することと同じです。

    -----------------------------------------

    subdivision (int): サブディビジョンのレベルを指定します。エッジを、指定したエッジの数へと細分割します。C:既定は1(細分割なし)です。Q:照会するとintを返します。

    -----------------------------------------

    texture (int): フェースのマップ方法を指定します。0:マッピングしない1:正規化する2:ユニット化するC:既定は0(マッピングしない)です。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCube(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,constructionHistory: bool = False,createUVs: int = 1,depth: float = 1.0,height: float = 1.0,name: str = "",nodeState: int = 1,object: bool = False,subdivisionsDepth: int = 1,subdivisionsHeight: int = 1,subdivisionsWidth: int = 1,subdivisionsX: int = 1,subdivisionsY: int = 1,subdivisionsZ: int = 1,texture: int = 1,width: float = 1.0) -> None:
    """
    新しいポリゴン立方体を作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): 立方体の構築に使用するプリミティブ軸を指定します。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createUVs (int): UVを作成するかどうかを指定します。0:UVなし1:正規化なし2:各フェースを別々に正規化3:集合的に正規化4:集合的に正規化してアスペクト比を保持既定:3

    -----------------------------------------

    depth (linear): 立方体の奥行きです。既定:1.0

    -----------------------------------------

    height (linear): 立方体の高さです。既定:1.0

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します(適切な場合)。

    -----------------------------------------

    subdivisionsDepth (int): 立方体の深さに沿ってサブディバイドします。既定:1

    -----------------------------------------

    subdivisionsHeight (int): 立方体の高さに沿ってサブディバイドします。既定:1

    -----------------------------------------

    subdivisionsWidth (int): 立方体の幅に沿ってサブディバイドします。既定:1

    -----------------------------------------

    subdivisionsX (int): 立方体のX方向のサブディビジョン数を指定します。C:既定は1です。Q:照会するとintを返します。

    -----------------------------------------

    subdivisionsY (int): 立方体のY方向のサブディビジョン数を指定します。C:既定は1です。Q:照会するとintを返します。

    -----------------------------------------

    subdivisionsZ (int): 立方体のZ方向のサブディビジョン数を指定します。C:既定は1です。Q:照会するとintを返します。

    -----------------------------------------

    texture (int): 適用するテクスチャのメカニズムを指定します。0=テクスチャなし、1=オブジェクト、2=フェース。既定:1

    -----------------------------------------

    width (linear): 立方体の幅です。既定:1.0

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCut(caching: bool = False,constructionHistory: bool = False,cutPlaneCenter: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),cutPlaneCenterX: float = 1.0,cutPlaneCenterY: float = 1.0,cutPlaneCenterZ: float = 1.0,cutPlaneHeight: float = 1.0,cutPlaneRotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),cutPlaneRotateX: float = 1.0,cutPlaneRotateY: float = 1.0,cutPlaneRotateZ: float = 1.0,cutPlaneSize: Tuple[float, float] = tuple(1.0, 1.0),cutPlaneWidth: float = 1.0,cuttingDirection: str = "",deleteFaces: bool = False,extractFaces: bool = False,extractOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),extractOffsetX: float = 1.0,extractOffsetY: float = 1.0,extractOffsetZ: float = 1.0,name: str = "",nodeState: int = 1,onObject: bool = False,worldSpace: bool = False) -> None:
    """
    このコマンドは、メッシュ(ポリゴン フェースのセット)をプレーンに沿って分割します。このプレーンの位置と向きは、上記の適切なフラグで調整できます。さらにカットする際には、カットするプレーンの片側にあるフェースを削除することや、オフセット量でこれらのフェースを抽出することができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    cutPlaneCenter ([linear, linear, linear]): カットするプレーンの位置を指定します。既定:0.0,0.0,0.0

    -----------------------------------------

    cutPlaneCenterX (linear): カットするプレーンの中心のX座標です。

    -----------------------------------------

    cutPlaneCenterY (linear): カットするプレーンの中心のY座標です。

    -----------------------------------------

    cutPlaneCenterZ (linear): カットするプレーンの中心のZ座標です。

    -----------------------------------------

    cutPlaneHeight (linear): カットするプレーンの高さです。

    -----------------------------------------

    cutPlaneRotate ([angle, angle, angle]): カットするプレーンの方向です。既定:0.0,0.0,0.0

    -----------------------------------------

    cutPlaneRotateX (angle): カットするプレーンのX回転角度です。

    -----------------------------------------

    cutPlaneRotateY (angle): カットするプレーンのY回転角度です。

    -----------------------------------------

    cutPlaneRotateZ (angle): カットするプレーンのZ回転角度です。

    -----------------------------------------

    cutPlaneSize ([linear, linear]): カットするプレーンの幅と高さです。既定:1.0,1.0

    -----------------------------------------

    cutPlaneWidth (linear): カットするプレーンの幅です。

    -----------------------------------------

    cuttingDirection (string): カットするプレーンの向きを指定します。有効な値は「x」、「y」、「z」で、値が「x」のときは、YZプレーンに沿って、バウンディングボックスの中央でオブジェクトをカットします。値が「y」のときは、ZXプレーンに沿って、バウンディングボックスの中央でオブジェクトをカットします。値が「z」のときは、XYプレーンに沿って、バウンディングボックスの中央でオブジェクトをカットします。

    -----------------------------------------

    deleteFaces (boolean): ポリゴンからカットするフェースの半分を削除するかどうかを指定します。trueの場合は削除されます。既定:false

    -----------------------------------------

    extractFaces (boolean): ポリゴンからカットしたフェースを個別のシェルに抽出するかどうかを指定します。trueの場合は抽出されます。既定:false

    -----------------------------------------

    extractOffset ([linear, linear, linear]): カットするフェースのディスプレイスメントオフセットです。既定:0.5,0.5,0.5

    -----------------------------------------

    extractOffsetX (linear): カットするフェースのXディスプレイスメントオフセットです。

    -----------------------------------------

    extractOffsetY (linear): カットするフェースのYディスプレイスメントオフセットです。

    -----------------------------------------

    extractOffsetZ (linear): カットするフェースのZディスプレイスメントオフセットです。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    onObject (boolean): polyObject全体またはその中の選択済みフェースコンポーネントのどちらとして動作するかを指定します。既定値:true

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCylinder(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,constructionHistory: bool = False,createUVs: int = 1,height: float = 1.0,name: str = "",nodeState: int = 1,object: bool = False,radius: float = 1.0,roundCap: bool = False,subdivisionsAxis: int = 1,subdivisionsCaps: int = 1,subdivisionsHeight: int = 1,subdivisionsX: int = 1,subdivisionsY: int = 1,subdivisionsZ: int = 1,texture: int = 1) -> None:
    """
    新しいポリゴン円柱を作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): 円柱の作成に使用するプリミティブ軸を指定します。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createUVs (int): UVを作成するかどうかを指定します。0:UVなし1:正規化なし2:正規化3:正規化してアスペクト比を保持既定:2

    -----------------------------------------

    height (linear): 円柱の高さです。既定:2.0

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します(適切な場合)。

    -----------------------------------------

    radius (linear): 円柱の半径です。既定:1.0

    -----------------------------------------

    roundCap (boolean): キャップの丸めが必要かどうかを示します。既定:false

    -----------------------------------------

    subdivisionsAxis (int): 軸を中心とするサブディビジョン既定:20

    -----------------------------------------

    subdivisionsCaps (int): キャップのサブディビジョンです。既定:0

    -----------------------------------------

    subdivisionsHeight (int): 高さに沿ったサブディビジョンです。既定:1

    -----------------------------------------

    subdivisionsX (int): 円柱のX方向のサブディビジョン数を指定します。C:既定は20です。Q:照会するとintを返します。

    -----------------------------------------

    subdivisionsY (int): 円柱のY方向のサブディビジョン数を指定します。C:既定は1です。Q:照会するとintを返します。

    -----------------------------------------

    subdivisionsZ (int): 円柱のZ方向のサブディビジョン数を指定します。C:既定は1です。Q:照会するとintを返します。

    -----------------------------------------

    texture (int): 適用するテクスチャのメカニズムを指定します。0=テクスチャなし、1=オブジェクト、2=フェース。既定:2

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyCylindricalProjection(caching: bool = False,constructionHistory: bool = False,createNewMap: bool = False,imageCenter: Tuple[float, float] = tuple(1.0, 1.0),imageCenterX: float = 1.0,imageCenterY: float = 1.0,imageScale: Tuple[float, float] = tuple(1.0, 1.0),imageScaleU: float = 1.0,imageScaleV: float = 1.0,insertBeforeDeformers: bool = False,keepImageRatio: bool = False,mapDirection: str = "",name: str = "",nodeState: int = 1,perInstance: bool = False,projectionCenter: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),projectionCenterX: float = 1.0,projectionCenterY: float = 1.0,projectionCenterZ: float = 1.0,projectionHeight: float = 1.0,projectionHorizontalSweep: float = 1.0,projectionScale: Tuple[float, float] = tuple(1.0, 1.0),projectionScaleU: float = 1.0,projectionScaleV: float = 1.0,radius: float = 1.0,rotationAngle: float = 1.0,seamCorrect: bool = False,smartFit: bool = False,worldSpace: bool = False) -> None:
    """
    TpolyProjCmdBase は、選択したポリゴン フェースにマッピングを作成するコマンドの基本クラスです。 円柱マップをオブジェクトに投影します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createNewMap (boolean): このフラグをtrueに設定すると、マップが存在していない場合は、渡された名前を持つ新しいマップを作成します。

    -----------------------------------------

    imageCenter ([float, float]): 2Dモデルレイアウトの中心点です。既定:0.5,0.5

    -----------------------------------------

    imageCenterX (float): イメージの中心のX座標です。

    -----------------------------------------

    imageCenterY (float): イメージの中心のY座標です。

    -----------------------------------------

    imageScale ([float, float]): UVのスケールを指定します。2D中心点を基準にしてU空間またはV空間にある2Dバージョンのモデルを拡大または縮小します。既定:1.0,1.0

    -----------------------------------------

    imageScaleU (float): UVのスケールを指定します。2D中心点を基準にしてU空間またはV空間にある2Dバージョンのモデルを拡大または縮小します。

    -----------------------------------------

    imageScaleV (float): Vのスケールを指定します。2D中心点を基準にしてV空間にある2Dバージョンのモデルを拡大または縮小します。

    -----------------------------------------

    insertBeforeDeformers (boolean): このフラグは、デフォーマノードをシェイプに適用する前か後どちらに投影ノードを挿入するかを指定します。デフォーマの後でノードを挿入すると、アニメーション中にテクスチャがずれて、ほとんどの場合うまくいきません。C:既定はオンです。

    -----------------------------------------

    keepImageRatio (boolean): Trueの場合はイメージ比率が維持されます。

    -----------------------------------------

    mapDirection (string): マッピング方向を指定します。「x」、「y」、「z」では、対応する軸に沿ってマップが投影されます。「c」では、現在のカメラのビュー方向に沿って投影されます。「p」では、現在のカメラがパースビューである場合に投影されます。「b」では、選択したオブジェクトに最適なプレーンに沿って投影されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    perInstance (boolean): 新しいマップがインスタンス単位の場合はTrue、それ以外の場合は共有されます。

    -----------------------------------------

    projectionCenter ([linear, linear, linear]): マップを投影する原点です。既定:0.0,0.0,0.0

    -----------------------------------------

    projectionCenterX (linear): 投影の中心のX座標です。

    -----------------------------------------

    projectionCenterY (linear): 投影の中心のY座標です。

    -----------------------------------------

    projectionCenterZ (linear): 投影の中心のZ座標です。

    -----------------------------------------

    projectionHeight (linear): 3D投影軸に相対するマップの高さです。

    -----------------------------------------

    projectionHorizontalSweep (linear): 角度は3D投影軸によってスイープされます。

    -----------------------------------------

    projectionScale ([linear, linear]): 3D投影軸に相対するマップの幅と高さです。既定:180.0,1.0

    -----------------------------------------

    projectionScaleU (linear): 3D投影軸に相対するマップの幅です。

    -----------------------------------------

    projectionScaleV (linear): 3D投影軸に相対するマップの高さです。

    -----------------------------------------

    radius (linear): UI:マニピュレータによって使用されます。既定:10.0

    -----------------------------------------

    rotationAngle (angle): 回転で使用します。マップは、角度を正にするとマップされたモデル上で反時計回りに回転し、負にすると時計回りに回転します。既定:0.0

    -----------------------------------------

    seamCorrect (boolean): UVの継ぎ目の修正のために使用されます。既定:false

    -----------------------------------------

    smartFit (boolean): Trueの場合はスマートフィットアルゴリズムを使用します。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyDelEdge(caching: bool = False,cleanVertices: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    選択したエッジを削除し、隣接するフェースをマージします。削除によって羽が付いたような頂点が残る場合は、その頂点も削除することがあります。注: 境界上にないエッジのみを削除できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    cleanVertices (boolean): オンの場合:残ってしまった「羽付き頂点」を削除します。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyDelFacet(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    フェースを削除します。削除した結果、切断された断片に分割しても、「シェル」と呼ばれるそれらの断片は、単一のオブジェクトとみなされます。注: 最後のフェースは削除することができません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyDelVertex(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    頂点を削除します。頂点を共通する 2 つのエッジを結合します。頂点は、2 つのエッジ(「羽付きエッジ」)に接続されている必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyDuplicateAndConnect(removeOriginalFromShaders: bool = False,renameChildren: bool = False) -> None:
    """
    入力ポリゴン オブジェクトを複製し、オリジナルのポリゴン シェイプの outMesh アトリビュートを新規作成した複製シェイプの inMesh アトリビュートに接続して、オリジナル シェイプのシェーダ アサインメントを複製シェイプにコピーします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    removeOriginalFromShaders (boolean): オリジナルのオブジェクトを、それが属しているシェーダ(shadingGroups)から除去するかどうかを指定します。シェーダの関連付けは、オリジナルオブジェクトから除去される前に複製オブジェクトにと転送されます。このフラグを指定すると、すべてのオブジェクトをシェーディングモードで描画していても、オリジナルのポリゴンオブジェクトはワイヤフレームモードで描画されます。

    -----------------------------------------

    renameChildren (boolean): 階層の子ノードの名前を、固有になるように変更します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def polyDuplicateEdge(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,adjustEdgeFlow: float = 1.0,deleteEdge: bool = False,endVertexOffset: float = 1.0,insertWithEdgeFlow: bool = False,offset: float = 1.0,smoothingAngle: float = 1.0,splitType: int = 1,startVertexOffset: float = 1.0) -> None:
    """
    接続された一連のエッジ(edgeLoop)を複製します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    adjustEdgeFlow (float): 配置するエッジ頂点のウェイト値。

    -----------------------------------------

    deleteEdge (boolean): trueの場合、最後のエッジが削除され、最後の三角形が四角形に変換されます。

    -----------------------------------------

    endVertexOffset (float): ウェイト値によりエッジループの最後の頂点のオフセットをコントロールします。

    -----------------------------------------

    insertWithEdgeFlow (boolean): エッジフローを有効にするにはtrue。それ以外の場合は、エッジフローが無効になります。

    -----------------------------------------

    offset (float): 新規エッジの相対位置をコントロールするウェイト値です。値の範囲は[0.0,1.0]です。

    -----------------------------------------

    smoothingAngle (angle): 新しいエッジがスムージングされる角度です。

    -----------------------------------------

    splitType (int): フォーマット:0-絶対、2-相対、2-マルチ

    -----------------------------------------

    startVertexOffset (float): ウェイト値によりエッジループの最初の頂点のオフセットをコントロールします。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyEditEdgeFlow(adjustEdgeFlow: float = 1.0,caching: bool = False,constructionHistory: bool = False,edgeFlow: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    サーフェスの曲率に応じてポリゴン オブジェクトのエッジを編集します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustEdgeFlow (float): 配置するエッジ頂点のウェイト値。<0:凹型0:中間点1:サーフェスの連続性>1:凸型既定は1.0です。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    edgeFlow (boolean): エッジフローを有効にするにはtrue。それ以外の場合は、エッジフローが無効になります。既定はtrueです。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyEditUV(angle: float = 1.0,pivotU: float = 1.0,pivotV: float = 1.0,relative: bool = False,rotateRatio: float = 1.0,rotation: bool = False,scale: bool = False,scaleU: float = 1.0,scaleV: float = 1.0,uValue: float = 1.0,uvSetName: str = "",vValue: float = 1.0) -> None:
    """
    ポリゴン オブジェクトの UV を編集します。照会フラグと一緒に使用した場合、指定したコンポーネントにコネクトされた UV 値を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    angle (float): UV値を回転させる角度値を、度単位で指定します。

    -----------------------------------------

    pivotU (float): スケールまたは回転を実行するU方向のピボット値を指定します。

    -----------------------------------------

    pivotV (float): スケールまたは回転を実行するV方向のピボット値を指定します。

    -----------------------------------------

    relative (boolean): 既存の値に対し、値を相対的に編集するかどうかを指定します。既定はtrueです。

    -----------------------------------------

    rotateRatio (float): UV値を回転させる際の比率の値を指定します。既定は1.0です。

    -----------------------------------------

    rotation (boolean): 回転値を使用して値を編集するかどうかを指定します。

    -----------------------------------------

    scale (boolean): スケール値を使用して値を編集するかどうかを指定します。

    -----------------------------------------

    scaleU (float): U方向のスケール値を指定します。

    -----------------------------------------

    scaleV (float): V方向のスケール値を指定します。

    -----------------------------------------

    uValue (float): U方向の値を指定します。relativeフラグがfalseの場合は絶対値として指定します。

    -----------------------------------------

    uvSetName (string): UVを編集するUVセット名を指定します。指定しない場合、現在のUVセットが存在すればそれを使用します。

    -----------------------------------------

    vValue (float): V方向の値を指定します。relativeフラグがfalseの場合は絶対値として指定します。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyEditUVShell(angle: float = 1.0,pivotU: float = 1.0,pivotV: float = 1.0,relative: bool = False,rotateRatio: float = 1.0,rotation: bool = False,scale: bool = False,scaleU: float = 1.0,scaleV: float = 1.0,uValue: float = 1.0,uvSetName: str = "",vValue: float = 1.0) -> None:
    """
    ポリゴン オブジェクトの UV シェルを編集します。照会フラグと一緒に使用した場合、指定したコンポーネントにコネクトされた変換値を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    angle (float): UV値を回転させる角度値を、度単位で指定します。

    -----------------------------------------

    pivotU (float): スケールまたは回転を実行するU方向のピボット値を指定します。

    -----------------------------------------

    pivotV (float): スケールまたは回転を実行するV方向のピボット値を指定します。

    -----------------------------------------

    relative (boolean): 既存の値に対し、値を相対的に編集するかどうかを指定します。既定はtrueです。

    -----------------------------------------

    rotateRatio (float): UV値を回転させる際の比率の値を指定します。既定は1.0です。

    -----------------------------------------

    rotation (boolean): 回転値を使用して値を編集するかどうかを指定します。

    -----------------------------------------

    scale (boolean): スケール値を使用して値を編集するかどうかを指定します。

    -----------------------------------------

    scaleU (float): U方向のスケール値を指定します。

    -----------------------------------------

    scaleV (float): V方向のスケール値を指定します。

    -----------------------------------------

    uValue (float): U方向の値を指定します。relativeフラグがfalseの場合は絶対値として指定します。

    -----------------------------------------

    uvSetName (string): UVを編集するUVセット名を指定します。指定しない場合、現在のUVセットが存在すればそれを使用します。

    -----------------------------------------

    vValue (float): V方向の値を指定します。relativeフラグがfalseの場合は絶対値として指定します。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyEvaluate(accurateEvaluation: bool = False,activeShells: bool = False,activeUVShells: bool = False,area: bool = False,boundingBox: bool = False,boundingBox2d: bool = False,boundingBoxComponent: bool = False,boundingBoxComponent2d: bool = False,displayStats: bool = False,edge: bool = False,edgeComponent: bool = False,face: bool = False,faceArea: bool = False,faceComponent: bool = False,format: bool = False,shell: bool = False,triangle: bool = False,triangleComponent: bool = False,uvArea: bool = False,uvComponent: bool = False,uvEdgePairs: bool = False,uvFaceArea: bool = False,uvSetName: str = "",uvShell: bool = False,uvShellIds: bool = False,uvcoord: bool = False,uvsInShell: int = 1,vertex: bool = False,vertexComponent: bool = False,worldArea: bool = False,worldFaceArea: bool = False) -> None:
    """
    指定したオブジェクトで必要なカウントを返します。コマンド ラインでオブジェクトを指定しない場合は、アクティブ リストのオブジェクトを使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    accurateEvaluation (boolean): バウンディングボックスの計算で正確な結果を出すために使用します。頂点の数が多いオブジェクトでは、正確な評価に時間がかかります。

    -----------------------------------------

    activeShells (boolean): アクティブなシェルのインデックスを整数の配列で返します。

    -----------------------------------------

    activeUVShells (boolean): アクティブなUVシェル(指定されていない場合は現在のマップ)のインデックスを整数の配列で返します。

    -----------------------------------------

    area (boolean): ローカル空間にあるオブジェクトのフェースのサーフェス領域をfloatで返します。

    -----------------------------------------

    boundingBox (boolean): 3D空間のオブジェクトのバウンディングボックスを、MELでは6つのfloat(xminxmaxyminymaxzminzmax)として、Pythonでは3組のタプル［((xmin,xmax),(ymin,ymax),(zmin,zmax))］として返します。

    -----------------------------------------

    boundingBox2d (boolean): 2D空間の(指定されていない場合は現在のマップに対する)オブジェクトのUVバウンディングボックスを、MELでは4つのfloat(xminxmaxyminymax)として、Pythonでは3組のタプル［((xmin,xmax),(ymin,ymax),(zmin,zmax))］として返します。

    -----------------------------------------

    boundingBoxComponent (boolean): 3D空間で選択したコンポーネントのバウンディングボックスを、MELでは6つのfloat(xminxmaxyminymaxzminzmax)として、Pythonでは3組のタプル［((xmin,xmax),(ymin,ymax),(zmin,zmax))］として返します。

    -----------------------------------------

    boundingBoxComponent2d (boolean): 2D空間で選択/指定したコンポーネントのUV座標のバウンディングボックスを、MELでは4つのfloat(xminxmaxyminymax)として、Pythonでは2組のタプル((xmin,xmax),(ymin,ymax))として返します。

    -----------------------------------------

    displayStats (boolean): アクティブなビューのポリゴン統計の表示/非表示を切り替えます。このフラグを指定すると、その他すべてのフラグは無視されます(サポートしていません。headsUpDisplayコマンドを参照してください)。

    -----------------------------------------

    edge (boolean): エッジの数を整数で返します。

    -----------------------------------------

    edgeComponent (boolean): 選択したエッジのオブジェクトの数を整数で返します。

    -----------------------------------------

    face (boolean): フェースの数を整数で返します。

    -----------------------------------------

    faceArea (boolean): ローカル空間で選択/指定した面のサーフェス領域をfloatの配列で返します。

    -----------------------------------------

    faceComponent (boolean): 選択したフェースのオブジェクトの数を整数で返します。

    -----------------------------------------

    format (boolean): 結果を明示的な文で表示するために使用します。

    -----------------------------------------

    shell (boolean): シェル(切断されている断片)の数を整数で返します。

    -----------------------------------------

    triangle (boolean): 三角形の数を整数で返します。

    -----------------------------------------

    triangleComponent (boolean): 選択したコンポーネントの三角形の数を整数で返します。

    -----------------------------------------

    uvArea (boolean): 2D空間にあるオブジェクトの面のUV領域をfloatで返します。

    -----------------------------------------

    uvComponent (boolean): 選択したUV座標のオブジェクトの数を整数で返します。

    -----------------------------------------

    uvEdgePairs (boolean): 選択/指定したエッジ上にあるUVのペアを返します。

    -----------------------------------------

    uvFaceArea (boolean): 2D空間で選択/指定した面のUV領域をfloatの配列で返します。

    -----------------------------------------

    uvSetName (string): UVセットを指定するためにテクスチャ頂点を照会するときに使用します。UVセットが指定されていない場合は、オブジェクトの現在のマップが使用されます。

    -----------------------------------------

    uvShell (boolean): UVシェルの数(指定されていない場合は現在のマップ)を整数で返します。

    -----------------------------------------

    uvShellIds (boolean): 選択/指定した面またはUVのUVシェルのインデックスを整数の配列で返します(指定されていない場合は現在のマップ)。それぞれの面/UVに対して1つのシェルインデックスを返します。

    -----------------------------------------

    uvcoord (boolean): UV座標の数(指定されていない場合は現在のマップ)が整数で返されます。

    -----------------------------------------

    uvsInShell (int): 指定したシェル内のすべてのUVを返します(指定されていない場合は現在のマップ)。現在の選択に対するシェルインデックスを取得する場合はactiveUVShellsを使用し、指定した面またはUVに対するシェルインデックスを取得する場合はuvShellIdsを使用します。

    -----------------------------------------

    vertex (boolean): 頂点の数を整数で返します。

    -----------------------------------------

    vertexComponent (boolean): 選択した頂点のオブジェクトの数を整数で返します。

    -----------------------------------------

    worldArea (boolean): ワールド空間にあるオブジェクトのフェースのサーフェス領域をfloatで返します。

    -----------------------------------------

    worldFaceArea (boolean): ワールド空間で選択/指定した面のサーフェス領域をfloatの配列で返します。

    -----------------------------------------

    Return Value:
    None: Any要求されたフォーマット、およびコール元の言語に応じて、値の MEL 配列、Python 辞書、または文字列。
    """
    pass

    
def polyExtrudeEdge(caching: bool = False,constructionHistory: bool = False,createCurve: bool = False,divisions: int = 1,gain: float = 1.0,inputCurve: str = "",keepFacesTogether: bool = False,localCenter: int = 1,localDirection: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localDirectionX: float = 1.0,localDirectionY: float = 1.0,localDirectionZ: float = 1.0,localRotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localRotateX: float = 1.0,localRotateY: float = 1.0,localRotateZ: float = 1.0,localScale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localScaleX: float = 1.0,localScaleY: float = 1.0,localScaleZ: float = 1.0,localTranslate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localTranslateX: float = 1.0,localTranslateY: float = 1.0,localTranslateZ: float = 1.0,name: str = "",nodeState: int = 1,offset: float = 1.0,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pivotX: float = 1.0,pivotY: float = 1.0,pivotZ: float = 1.0,random: float = 1.0,rotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rotateX: float = 1.0,rotateY: float = 1.0,rotateZ: float = 1.0,scale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),scaleX: float = 1.0,scaleY: float = 1.0,scaleZ: float = 1.0,smoothingAngle: float = 1.0,taper: float = 1.0,taperCurve_FloatValue: float = 1.0,taperCurve_Interp: int = 1,taperCurve_Position: float = 1.0,thickness: float = 1.0,translate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),translateX: float = 1.0,translateY: float = 1.0,translateZ: float = 1.0,twist: float = 1.0,worldSpace: bool = False) -> None:
    """
    エッジを個別に、またはまとめて押し出します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createCurve (boolean): trueの場合、この操作でカーブを作成することができます。

    -----------------------------------------

    divisions (int): 引き出し時にどのくらい多くの内部エッジを作成するかを指定します。既定:1

    -----------------------------------------

    gain (float): コンポーネントごとの係数を増加します。Artisanを使用してペイントできます。既定:1.0

    -----------------------------------------

    inputCurve (name): このフラグは、操作のための入力として使用されるカーブの名前を指定します。

    -----------------------------------------

    keepFacesTogether (boolean): エッジの押し出し方法です。オンの場合、押し出されるエッジから生成される押し出しフェースは共に保持されます。そうでない場合は、個別に引き出されます。既定:true

    -----------------------------------------

    localCenter (int): エッジのローカル中心です。0=中点、1=始点、2=終点です。既定:0

    -----------------------------------------

    localDirection ([linear, linear, linear]): ローカル空間のX軸を決定する方向です。既定:1.0,0.0,0.0

    -----------------------------------------

    localDirectionX (linear): X軸のX座標です。

    -----------------------------------------

    localDirectionY (linear): X軸のY座標です。

    -----------------------------------------

    localDirectionZ (linear): X軸のZ座標です。

    -----------------------------------------

    localRotate ([angle, angle, angle]): ローカル回転です。既定:0.0,0.0,0.0

    -----------------------------------------

    localRotateX (angle): ローカル回転のX座標です。範囲は[0,360]です。

    -----------------------------------------

    localRotateY (angle): ローカル回転のY座標です。範囲は[0,360]です。

    -----------------------------------------

    localRotateZ (angle): ローカル回転のZ座標です。法線に沿って回転します。範囲は[0,360]です。

    -----------------------------------------

    localScale ([float, float, float]): ローカルスケールです。既定:1.0,1.0,1.0

    -----------------------------------------

    localScaleX (float): スケールのX座標です。

    -----------------------------------------

    localScaleY (float): スケールのY座標です。

    -----------------------------------------

    localScaleZ (float): スケールのZ座標です。

    -----------------------------------------

    localTranslate ([linear, linear, linear]): ローカル移動です。既定:0.0,0.0,0.0

    -----------------------------------------

    localTranslateX (linear): ローカル平行移動のX座標。

    -----------------------------------------

    localTranslateY (linear): ローカル平行移動のY座標。

    -----------------------------------------

    localTranslateZ (linear): ローカル平行移動のZ座標。法線に沿って移動します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    offset (float): エッジは、このエッジと反対の方向にこの距離だけ移動します。既定:0.0

    -----------------------------------------

    pivot ([linear, linear, linear]): スケールと回転のためのピボットです。既定:0.0,0.0,0.0

    -----------------------------------------

    pivotX (linear): ピボットのX座標です。

    -----------------------------------------

    pivotY (linear): ピボットのY座標です。

    -----------------------------------------

    pivotZ (linear): ピボットのZ座標です。

    -----------------------------------------

    random (float): すべてのパラメータにランダム値を指定します。既定:0.0

    -----------------------------------------

    rotate ([angle, angle, angle]): X,Y,Zを中心とする回転角度です。既定:0.0,0.0,0.0

    -----------------------------------------

    rotateX (angle): X軸を中心とする回転角度です。

    -----------------------------------------

    rotateY (angle): Y軸を中心とする回転角度です。

    -----------------------------------------

    rotateZ (angle): Z軸を中心とする回転角度です。

    -----------------------------------------

    scale ([float, float, float]): スケールのベクトルです。既定:1.0,1.0,1.0

    -----------------------------------------

    scaleX (float): スケールのX座標です。

    -----------------------------------------

    scaleY (float): スケールのY座標です。

    -----------------------------------------

    scaleZ (float): スケールのZ座標です。

    -----------------------------------------

    smoothingAngle (angle): 新しいエッジがスムージングされる角度です。既定:kPi/6.0

    -----------------------------------------

    taper (float): 押し出しパスに沿ってテーパまたはスケールします。既定:1.0

    -----------------------------------------

    taperCurve_FloatValue (float): ?????

    -----------------------------------------

    taperCurve_Interp (int): ?????既定:0

    -----------------------------------------

    taperCurve_Position (float): ?????

    -----------------------------------------

    thickness (float): エッジは接続された面の法線の方向にこの距離だけ移動します。既定:0.0f

    -----------------------------------------

    translate ([linear, linear, linear]): 移動ベクトルです。既定:0.0,0.0,0.0

    -----------------------------------------

    translateX (linear): 移動のX座標です。

    -----------------------------------------

    translateY (linear): 移動のY座標です。

    -----------------------------------------

    translateZ (linear): 移動のZ座標です。

    -----------------------------------------

    twist (angle): 押し出しに沿ったツイストまたは回転です。既定:0.0

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyExtrudeFacet(attraction: float = 1.0,caching: bool = False,constructionHistory: bool = False,createCurve: bool = False,divisions: int = 1,gain: float = 1.0,gravity: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),gravityX: float = 1.0,gravityY: float = 1.0,gravityZ: float = 1.0,inputCurve: str = "",keepFacesTogether: bool = False,keepFacetTogether: bool = False,localCenter: int = 1,localDirection: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localDirectionX: float = 1.0,localDirectionY: float = 1.0,localDirectionZ: float = 1.0,localRotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localRotateX: float = 1.0,localRotateY: float = 1.0,localRotateZ: float = 1.0,localScale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localScaleX: float = 1.0,localScaleY: float = 1.0,localScaleZ: float = 1.0,localTranslate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localTranslateX: float = 1.0,localTranslateY: float = 1.0,localTranslateZ: float = 1.0,magnX: float = 1.0,magnY: float = 1.0,magnZ: float = 1.0,magnet: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),name: str = "",nodeState: int = 1,offset: float = 1.0,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pivotX: float = 1.0,pivotY: float = 1.0,pivotZ: float = 1.0,random: float = 1.0,reverseAllFaces: bool = False,rotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rotateX: float = 1.0,rotateY: float = 1.0,rotateZ: float = 1.0,scale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),scaleX: float = 1.0,scaleY: float = 1.0,scaleZ: float = 1.0,smoothingAngle: float = 1.0,taper: float = 1.0,taperCurve_FloatValue: float = 1.0,taperCurve_Interp: int = 1,taperCurve_Position: float = 1.0,thickness: float = 1.0,translate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),translateX: float = 1.0,translateY: float = 1.0,translateZ: float = 1.0,twist: float = 1.0,weight: float = 1.0,worldSpace: bool = False) -> None:
    """
    フェースを押し出します。フェースは、個別またはまとめて押し出すことができ、ワールド空間またはオブジェクト空間で操作できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attraction (float): 磁石に関連する引き付けです。範囲は[-2.0,2.0]です。既定:0.0

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createCurve (boolean): trueの場合、この操作でカーブを作成することができます。

    -----------------------------------------

    divisions (int): 押し出しをいくつのディビジョンに分割するかを指定します。既定:1

    -----------------------------------------

    gain (float): コンポーネントごとの係数を増加します。Artisanを使用してペイントできます。既定:1.0

    -----------------------------------------

    gravity ([linear, linear, linear]): 重力ベクトルです。既定:0.0,-1.0,0.0

    -----------------------------------------

    gravityX (linear): 重力のX座標です。

    -----------------------------------------

    gravityY (linear): 重力のY座標です。

    -----------------------------------------

    gravityZ (linear): 重力のZ座標です。

    -----------------------------------------

    inputCurve (name): このフラグは、操作のための入力として使用されるカーブの名前を指定します。

    -----------------------------------------

    keepFacesTogether (boolean): フェースの押し出し方法です。オンにするとフェースはまとめて引き出され(接続されたフェースは接続されたまま)、オフにすると個別に引き出されます。既定:true

    -----------------------------------------

    keepFacetTogether (boolean): エッジの押し出し方法です。オンの場合、押し出されるエッジから生成される押し出しフェースは共に保持されます。そうでない場合は、個別に引き出されます。既定:true

    -----------------------------------------

    localCenter (int): エッジのローカル中心です。0=中点、1=始点、2=終点です。既定:0

    -----------------------------------------

    localDirection ([linear, linear, linear]): ローカル空間のX軸を決定する方向です。既定:1.0,0.0,0.0

    -----------------------------------------

    localDirectionX (linear): X軸のX座標です。

    -----------------------------------------

    localDirectionY (linear): X軸のY座標です。

    -----------------------------------------

    localDirectionZ (linear): X軸のZ座標です。

    -----------------------------------------

    localRotate ([angle, angle, angle]): ローカル回転です。既定:0.0,0.0,0.0

    -----------------------------------------

    localRotateX (angle): ローカル回転のX座標です。範囲は[0,360]です。

    -----------------------------------------

    localRotateY (angle): ローカル回転のY座標です。範囲は[0,360]です。

    -----------------------------------------

    localRotateZ (angle): ローカル回転のZ座標です。法線に沿って回転します。範囲は[0,360]です。

    -----------------------------------------

    localScale ([float, float, float]): ローカルスケールです。既定:1.0,1.0,1.0

    -----------------------------------------

    localScaleX (float): スケールのX座標です。

    -----------------------------------------

    localScaleY (float): スケールのY座標です。

    -----------------------------------------

    localScaleZ (float): スケールのZ座標です。

    -----------------------------------------

    localTranslate ([linear, linear, linear]): ローカル移動です。既定:0.0,0.0,0.0

    -----------------------------------------

    localTranslateX (linear): ローカル平行移動のX座標。

    -----------------------------------------

    localTranslateY (linear): ローカル平行移動のY座標。

    -----------------------------------------

    localTranslateZ (linear): ローカル平行移動のZ座標。法線に沿って移動します。

    -----------------------------------------

    magnX (linear): 磁石のX座標です。

    -----------------------------------------

    magnY (linear): 磁石のY座標です。

    -----------------------------------------

    magnZ (linear): 磁石のZ座標です。

    -----------------------------------------

    magnet ([linear, linear, linear]): 磁石のベクトルです。既定:0.0,0.0,0.0

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    offset (float): ローカルオフセットです。フェースは、フェースの内側に向かってこの距離に移動します。既定:0.0

    -----------------------------------------

    pivot ([linear, linear, linear]): スケールと回転のためのピボットです。既定:0.0,0.0,0.0

    -----------------------------------------

    pivotX (linear): ピボットのX座標です。

    -----------------------------------------

    pivotY (linear): ピボットのY座標です。

    -----------------------------------------

    pivotZ (linear): ピボットのZ座標です。

    -----------------------------------------

    random (float): すべてのパラメータにランダム値を指定します。既定:0.0

    -----------------------------------------

    reverseAllFaces (boolean): オンの場合、すべてのフェースを押し出す際に元のフェースが反転されます。既定:true

    -----------------------------------------

    rotate ([angle, angle, angle]): X,Y,Zを中心とする回転角度です。既定:0.0,0.0,0.0

    -----------------------------------------

    rotateX (angle): X軸を中心とする回転角度です。

    -----------------------------------------

    rotateY (angle): Y軸を中心とする回転角度です。

    -----------------------------------------

    rotateZ (angle): Z軸を中心とする回転角度です。

    -----------------------------------------

    scale ([float, float, float]): スケールのベクトルです。既定:1.0,1.0,1.0

    -----------------------------------------

    scaleX (float): スケールのX座標です。

    -----------------------------------------

    scaleY (float): スケールのY座標です。

    -----------------------------------------

    scaleZ (float): スケールのZ座標です。

    -----------------------------------------

    smoothingAngle (angle): 新しいエッジがスムージングされる角度です。既定:kPi/6.0

    -----------------------------------------

    taper (float): 押し出しパスに沿ってテーパまたはスケールします。既定:1.0

    -----------------------------------------

    taperCurve_FloatValue (float): ?????

    -----------------------------------------

    taperCurve_Interp (int): ?????既定:0

    -----------------------------------------

    taperCurve_Position (float): ?????

    -----------------------------------------

    thickness (float): オブジェクトに一貫した厚さを与えるために、フェースがその元の位置から外側に移動します。既定:0.0f

    -----------------------------------------

    translate ([linear, linear, linear]): 移動ベクトルです。既定:0.0,0.0,0.0

    -----------------------------------------

    translateX (linear): 移動のX座標です。

    -----------------------------------------

    translateY (linear): 移動のY座標です。

    -----------------------------------------

    translateZ (linear): 移動のZ座標です。

    -----------------------------------------

    twist (angle): 押し出しに沿ったツイストまたは回転です。既定:0.0

    -----------------------------------------

    weight (float): 重力に関連したウェイトです。既定:0.0

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyExtrudeVertex(caching: bool = False,constructionHistory: bool = False,divisions: int = 1,length: float = 1.0,name: str = "",nodeState: int = 1,width: float = 1.0,worldSpace: bool = False) -> None:
    """
    選択した頂点を外方向に押し出すコマンド。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    divisions (int): サブディビジョンの数を指定します。C:既定は1ですQ:照会するとintを返します。

    -----------------------------------------

    length (float): 頂点押し出しの長さを指定します。C:既定は0ですQ:照会するとfloatを返します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    width (float): 頂点押し出しの幅を指定します。C:既定は0ですQ:照会するとfloatを返します。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyFlipEdge() -> None:
    """
    隣接する 2 つの三角ポリゴンが共有するエッジを反転します。編集フラグと一緒に使用すると、チェーン内に別のノードを作成する代わりに、同じノードに新しいエッジを追加できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyFlipUV(caching: bool = False,constructionHistory: bool = False,createNewMap: bool = False,cutUV: bool = False,flipType: int = 1,insertBeforeDeformers: bool = False,local: bool = False,name: str = "",nodeState: int = 1,pivotU: float = 1.0,pivotV: float = 1.0,usePivot: bool = False,uvSetName: str = "",worldSpace: bool = False) -> None:
    """
    U 軸または V 軸を中心に、入力 polyFaces の UV (テクスチャ空間)を反転(ミラーリング)します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createNewMap (boolean): 新しいマップを作成する必要がある場合は、trueに設定します。

    -----------------------------------------

    cutUV (boolean): UVシェル上で一部のコンポーネントを反転するときにUVエッジをカットします。C:既定はオンです。Q:照会すると、intを返します。

    -----------------------------------------

    flipType (int): U方向またはV方向に沿って反転します。0Horizontal1VerticalC:既定は0です。Q:照会すると、intを返します。

    -----------------------------------------

    insertBeforeDeformers (boolean): 新しく作成したノードを任意のデフォーマノードの前に挿入する必要がある場合は、trueに設定します。

    -----------------------------------------

    local (boolean): 入力フェースのローカルスペースで反転します。C:既定はオンです。Q:照会すると、intを返します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pivotU (float): U方向のピボット値を指定します。

    -----------------------------------------

    pivotV (float): V方向のピボット値を指定します。

    -----------------------------------------

    usePivot (boolean): ピボットを使用するかどうかを切り替えます。C:既定はオフです。Q:照会すると、intを返します。

    -----------------------------------------

    uvSetName (string): 作成するUVセットの名前です。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyForceUV(cameraProjection: bool = False,createNewMap: bool = False,flipHorizontal: bool = False,flipVertical: bool = False,g: bool = False,local: bool = False,normalize: str = "",numItems: int = 1,preserveAspectRatio: bool = False,unitize: bool = False,unshare: bool = False,uvSetName: str = "") -> None:
    """
    機能のセットをコールすることができます。このコマンドの入力はフェースのセットです。渡した引数に基づいて、選択したフェースの UV を作成できます。カメラに基づいて UV を投影: (UV 作成) 現在選択しているビューの方向と向きに基づいて UV を生成し、フェースに割り当てます。以前に割り当てられた UV 情報は失われます。最適プレーンに投影: (UV 作成) UV はユーザ定義のプレーンに基づいて計算され、選択したフェースに適用されます。このツールは 2 段階で処理します。最初の段階では、マップするフェース(UV を作成するフェース)が選択されます。次の段階では、投影プレーンを定義するポイント(頂点や CV)が選択されます。以前に割り当てられた UV 情報は失われます。ユニット化: (UV 作成) ユニット化された UV の新しいセットが生成され、フェースに割り当てられます。以前に割り当てられた UV 情報は失われます。共有解除: (UV 作成)可能であれば新しい UV を作成し、指定した UV の共有解除を強制します。以前に割り当てられた UV 情報は失われます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    cameraProjection (boolean): カメラの位置/向きに基づいてUVを投影します。

    -----------------------------------------

    createNewMap (boolean): マップが存在しない場合は、新しいマップを作成します。

    -----------------------------------------

    flipHorizontal (boolean): このフラグは現在サポートしていません。polyFlipUVを使用してください。

    -----------------------------------------

    flipVertical (boolean): このフラグは現在サポートしていません。polyFlipUVを使用してください。

    -----------------------------------------

    g (boolean): このフラグは現在サポートしていません。

    -----------------------------------------

    local (boolean): このフラグは現在サポートしていません。

    -----------------------------------------

    normalize (string): このフラグは現在サポートしていません。polyNormalizeUVを使用してください。

    -----------------------------------------

    numItems (uint): このフラグは、ポリゴンフェースの最適プレーンテクスチャリングのみに使用します。このフラグの後にはセレクションリストが続きます。指定しない場合、選択したオブジェクトが(選択した順序で)使用されます。マッピングに使用するセレクションリストの先頭にある項目数を指定します。続く項目は、プレーンの計算に使用されます(下の例を参照)。最適プレーンテクスチャリングは、そのコンテキストにおいて、インタラクティブに使用する場合に適しています。コンテキストを入力するには、コマンドウィンドウに「BestPlaneTexturingTool」と入力するか、メニューからポリゴンの編集>テクスチャ>最適プレーンテクスチャリングツール(EditPolygons>Texture>BestPlaneTexturingTool)を選択します。

    -----------------------------------------

    preserveAspectRatio (boolean): このフラグは現在サポートしていません。

    -----------------------------------------

    unitize (boolean): 選択したフェースのUVをユニット化します。

    -----------------------------------------

    unshare (boolean): 指定したUVの共有を解除します。

    -----------------------------------------

    uvSetName (string): 作業するUVセットの名前を指定します。

    -----------------------------------------

    Return Value:
    None: booleantrue/false
    """
    pass

    
def polyGeoSampler(alphaBlend: str = "",averageColor: bool = False,clampAlphaMax: float = 1.0,clampAlphaMin: float = 1.0,clampRGBMax: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),clampRGBMin: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),colorBlend: str = "",colorDisplayOption: bool = False,computeShadows: bool = False,displaceGeometry: bool = False,flatShading: bool = False,ignoreDoubleSided: bool = False,lightingOnly: bool = False,reuseShadows: bool = False,sampleByFace: bool = False,scaleFactor: float = 1.0,shareUV: bool = False,useLightShadows: bool = False) -> None:
    """
    選択したそれぞれの頂点またはフェースのサーフェス カラーと透明度のレンダー サンプリングを実行し、サンプリングしたデータをカラー値として格納するか、サンプリングしたデータを使用して、作用させる頂点またはフェースをサンプリングしたデータ値でディスプレイスメントします。透明度はディスプレイスメントに使用されず、ディスプレイスメントは頂点法線に沿って実行されます。サンプリングしたデータ値は、ユーザが定義した量であらかじめスケールできます。サンプリングする法線は、フラット シェーディング オプションを使用してオーバーライドできます。このオプションは、サンプリング値の計算時にフェースの法線を必ず使用します。これはエッジの平滑性の効果をオーバーライドしたい場合に望ましい場合があります。フラット シェーディング オプションをオンにすると、エッジは必ずハードであるとみなされます。頂点のディスプレイスメントは頂点に接続されたフェースに影響を与えるため、ディスプレイスメント サンプリングによって -sampleByFace オプションがオフになるので注意してください。共有された頂点カラーの保存の強制、そして共有されていない UV 値の使用の強制が可能です。結果のカラーの計算は、次のように実行されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alphaBlend (string): 適用するアルファブレンドのタイプを示します。オプションは、「none」、「overwrite」、「add」、「subtract」、「multiply」、「divide」、「average」です。このオプションは、カラー設定時のみに適用されます。この引数を指定しない場合の既定は「overwrite」です。「none」オプションは既存の値を上書きしません。

    -----------------------------------------

    averageColor (boolean): 頂点レベルのサンプリングにおける共有されているカラーの格納を強制します。既定では、頂点レベルのサンプリングは共有されてないカラーを格納します。

    -----------------------------------------

    clampAlphaMax (float): アルファ値の格納を最大限にクランプします。

    -----------------------------------------

    clampAlphaMin (float): アルファ値の格納を最小限にクランプします。

    -----------------------------------------

    clampRGBMax ([float, float, float]): RGBカラーの格納を最大限にクランプします。

    -----------------------------------------

    clampRGBMin ([float, float, float]): RGBカラーの格納を最小限にクランプします。

    -----------------------------------------

    colorBlend (string): 適用するカラーブレンドのタイプを示します。オプションは、「none」、「overwrite」、「add」、「subtract」、「multiply」、「divide」、「average」です。このオプションは、カラー設定時のみに適用されます。この引数を指定しない場合の既定は「overwrite」です。「none」オプションは既存の値を上書きしません。

    -----------------------------------------

    colorDisplayOption (boolean): メッシュの表示オプションを、頂点カラーを表示するように変更します。

    -----------------------------------------

    computeShadows (boolean): サンプリング時にシャドウマップの計算、保存、再使用を実行します。

    -----------------------------------------

    displaceGeometry (boolean): カラー値を格納する代わりに、サンプリング位置で法線に沿ってジオメトリをディスプレイスメントします。既定ではカラー値を格納します。

    -----------------------------------------

    flatShading (boolean): フラットシェーディングサンプリングを計算します。既定はスムーズシェーディングです。

    -----------------------------------------

    ignoreDoubleSided (boolean): プリライティングで両面フラグを無視します。

    -----------------------------------------

    lightingOnly (boolean): 透明度にサーフェスカラーを適用する代わりに、入射するイルミネーションを計算します。

    -----------------------------------------

    reuseShadows (boolean): シャドウマップを事前に計算して保存した場合、サンプリング時に再利用されます。このオプションを適用するには、computeShadowsオプションを有効にする必要があります。

    -----------------------------------------

    sampleByFace (boolean): 既定の頂点単位ではなく、フェース単位にサンプリングを実行します。

    -----------------------------------------

    scaleFactor (float): サンプル値を指定した数量でスケールします。既定のスケール係数は1.0です。負の値は、ディスプレイスメントには有効ですが、カラー値には無効です。

    -----------------------------------------

    shareUV (boolean): UVが、サンプル時に頂点で共有されます。既定では、UVの共有解除を強制します。

    -----------------------------------------

    useLightShadows (boolean): それぞれのライトのシャドウマップオプションを使用します。使用しない場合、computeShadowsオプションやreusedShadowsオプションを有効にした際に、これらのオプションがオーバーライドされます。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗
    """
    pass

    
def polyHelix(caching: bool = False,coils: float = 1.0,constructionHistory: bool = False,createUVs: int = 1,direction: int = 1,height: float = 1.0,name: str = "",nodeState: int = 1,object: bool = False,radius: float = 1.0,roundCap: bool = False,subdivisionsAxis: int = 1,subdivisionsCaps: int = 1,subdivisionsCoil: int = 1,texture: int = 1,useOldInitBehaviour: bool = False,width: float = 1.0) -> None:
    """
    polyHelix コマンドは、新しいポリゴンらせんを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    coils (float): コイルの数です。既定:3

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createUVs (int): UVを作成するかどうかを指定します。0:UVなし1:正規化なし2:正規化3:正規化してアスペクト比を保持既定:2

    -----------------------------------------

    direction (int): コイルの方向を指定します。0=時計回り、1=反時計回り。既定:1

    -----------------------------------------

    height (linear): らせんの高さです。既定:2.0

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します(適切な場合)。

    -----------------------------------------

    radius (linear): チューブの半径です。既定:0.4

    -----------------------------------------

    roundCap (boolean): キャップの丸めが必要かどうかを示します。既定:false

    -----------------------------------------

    subdivisionsAxis (int): 軸を中心とするサブディビジョン既定:8

    -----------------------------------------

    subdivisionsCaps (int): 厚さキャップに沿ったサブディビジョンです。既定:0

    -----------------------------------------

    subdivisionsCoil (int): コイルに沿ったサブディビジョンです。既定:50

    -----------------------------------------

    texture (int): 適用するテクスチャのメカニズムを指定します。0=テクスチャなし、1=オブジェクト、2=フェース。既定:2

    -----------------------------------------

    useOldInitBehaviour (boolean): Maya8.0以下と同じように、原点を底にしてらせんを作成します。そうでない場合、原点を中心にしてらせんを作成します。既定:false

    -----------------------------------------

    width (linear): らせんの幅です。既定:2.0

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyHole(assignHole: bool = False,createHistory: bool = False) -> None:
    """
    指定したフェースに穴を設定またはクリアするためのコマンドです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    assignHole (boolean): 選択したフェースを穴に割り当てる、穴フェースの割り当てを解除します。既定では、このコマンドはフェースを穴に割り当てます。

    -----------------------------------------

    createHistory (boolean): コンストラクションヒストリのないオブジェクトの場合、このフラグを使用して穴用のコンストラクションヒストリの作成を強制できます。既定では、オブジェクトにヒストリがない場合には、ヒストリは作成されません。このフラグにかかわらず、ヒストリがある場合には、ヒストリは常に作成されます。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyInfo(edgeToFace: bool = False,edgeToVertex: bool = False,faceNormals: bool = False,faceToEdge: bool = False,faceToVertex: bool = False,invalidEdges: bool = False,invalidVertices: bool = False,laminaFaces: bool = False,nonManifoldEdges: bool = False,nonManifoldUVEdges: bool = False,nonManifoldUVs: bool = False,nonManifoldVertices: bool = False,vertexToEdge: bool = False,vertexToFace: bool = False) -> None:
    """
    コマンドは、ポリゴン オブジェクトとコンポーネントのトポロジ情報を照会します。つまりこのコマンドでは、次を指定する必要があります。- 照会するセレクション リスト



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    edgeToFace (boolean): 指定したエッジを共有するフェースを返します。エッジを選択する必要があります。

    -----------------------------------------

    edgeToVertex (boolean): エッジを定義する頂点を返します。エッジを選択する必要があります。

    -----------------------------------------

    faceNormals (boolean): 指定したオブジェクトのフェース法線を返します。フェースを選択した場合、選択したフェースのフェース法線を返します。それ以外の場合は、オブジェクトにあるすべてのフェースのフェース法線を返します。

    -----------------------------------------

    faceToEdge (boolean): フェースを定義するエッジを返します。フェースを選択する必要があります。

    -----------------------------------------

    faceToVertex (boolean): フェースを定義する頂点を返します。フェースを選択する必要があります。

    -----------------------------------------

    invalidEdges (boolean): メッシュ内のどのフェースにも関連付けられていないすべてのエッジを検索します。

    -----------------------------------------

    invalidVertices (boolean): メッシュ内のどのフェースにも関連付けられていないすべての頂点を検索します。

    -----------------------------------------

    laminaFaces (boolean): 指定したオブジェクトのすべてのラミナフェースを検索します。

    -----------------------------------------

    nonManifoldEdges (boolean): 指定したオブジェクトのすべての非多様エッジを検索します。

    -----------------------------------------

    nonManifoldUVEdges (boolean): 指定したオブジェクトのすべての非多様UVエッジを検索します。

    -----------------------------------------

    nonManifoldUVs (boolean): 指定したオブジェクトのすべての非多様UVを検索します。

    -----------------------------------------

    nonManifoldVertices (boolean): 指定したオブジェクトのすべての非多様頂点を検索します。

    -----------------------------------------

    vertexToEdge (boolean): 頂点に接続されているエッジを返します。頂点を選択する必要があります。

    -----------------------------------------

    vertexToFace (boolean): 指定した頂点を共有するフェースを返します。頂点を選択する必要があります。

    -----------------------------------------

    Return Value:
    None: stringコンポーネント
    """
    pass

    
def polyInstallAction(commandName: bool = False,convertSelection: bool = False,installConstraint: bool = False,installDisplay: bool = False,keepInstances: bool = False,uninstallConstraint: bool = False,uninstallDisplay: bool = False) -> None:
    """
    ユーザが指定した動作を実行するために次のインストール/アンインストールを行います。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    commandName (boolean): 以前インストールしたコマンドの名前を文字列で返します。

    -----------------------------------------

    convertSelection (boolean): オブジェクトモードで選択したすべてのポリゴンを完全に一致するコンポーネント選択に変換します。例:ポリゴンメッシュが選択されている場合、polyInstallAction-cspolyCloseBorderは境界エッジをすべて選択します。

    -----------------------------------------

    installConstraint (boolean): C:actionnameに対する選択項目のpickmaskと内部コンストレイントをインストールします。Q:現在のアクションで内部コンストレイントが設定されている場合は1が返されます。

    -----------------------------------------

    installDisplay (boolean): C:actionnameに対するディスプレイアトリビュートをインストールします。Q:現在のアクションで内部コンストレイントが設定されている場合は1が返されます。

    -----------------------------------------

    keepInstances (boolean): 最初に選択したインスタンスのみではなく、選択したすべてのインスタンスのコンポーネントを変換します。

    -----------------------------------------

    uninstallConstraint (boolean): 以前インストールした内部コンストレイントをアンインストールします。

    -----------------------------------------

    uninstallDisplay (boolean): 以前インストールしたdisplayアトリビュートをアンインストールします。

    -----------------------------------------

    Return Value:
    None: string[]コンストレイントをインストールする場合、インストールされたコマンドの作用対象となる項目を文字配列として返します。インストールしない場合、何も返されません。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyLayoutUV(caching: bool = False,constructionHistory: bool = False,flipReversed: bool = False,layout: int = 1,layoutMethod: int = 1,name: str = "",nodeState: int = 1,percentageSpace: float = 1.0,rotateForBestFit: int = 1,scale: int = 1,separate: int = 1,uvSetName: str = "",worldSpace: bool = False) -> None:
    """
    テクスチャ プレーンで UV を移動し、オーバーラップを避けます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    flipReversed (boolean): このフラグをオンにすると、反転したUVピースが反転します。

    -----------------------------------------

    layout (int): カット適用後にUVのピースを移動する方法を指定します。0:移動は適用されません。1:ピースをU軸に沿ってレイアウトします。2:ピースを四角形にレイアウトします。

    -----------------------------------------

    layoutMethod (int): 使用するレイアウト方法。0:ブロックスタッキング1:シェイプスタッキング

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    percentageSpace (float): レイアウトを正方形に設定した場合、この値は各UVピースの周りに追加されるテクスチャ領域のパーセンテージです。このコマンドを使用して、テクスチャ内の各UVピースがそれぞれ個別のピクセルを使用することを確認できます。最大値は5%です。

    -----------------------------------------

    rotateForBestFit (int): 0:回転は適用されません。1:90°回転のみを可能にします。2:自由回転を可能にします。

    -----------------------------------------

    scale (int): 移動とカット後のピースのスケール方法を指定します。0:スケールは適用されません。1:単位正方形に合わせて均一にスケールします。2:単位正方形に合わせて非比例にスケールします。

    -----------------------------------------

    separate (int): カットするUVエッジを指定します。0:カットは実行されません。1:折り目に沿ってカットが実行されます。2:すべての必要なカットですべての交点が回避されます。

    -----------------------------------------

    uvSetName (string): 作成するUVセットの名前です。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyListComponentConversion(border: bool = False,fromEdge: bool = False,fromFace: bool = False,fromUV: bool = False,fromVertex: bool = False,fromVertexFace: bool = False,internal: bool = False,toEdge: bool = False,toFace: bool = False,toUV: bool = False,toVertex: bool = False,toVertexFace: bool = False,uvShell: bool = False,vertexFaceAllEdges: bool = False) -> None:
    """
    1 つまたは複数のタイプのポリゴン コンポーネントを別の 1 つまたは複数のタイプに変換し、変換のリストを返します。現在のデータベースは変更されません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    border (boolean): 変換後のコンポーネントが、選択範囲の境界上に存在する必要があることを指定します。指定しないと、変換後のコンポーネントは関連したコンポーネントになります。

    -----------------------------------------

    fromEdge (boolean): 

    -----------------------------------------

    fromFace (boolean): 

    -----------------------------------------

    fromUV (boolean): 

    -----------------------------------------

    fromVertex (boolean): 

    -----------------------------------------

    fromVertexFace (boolean): 変換前のコンポーネントタイプを指定します。指定しないと、ポリゴンオブジェクトを含むすべてとみなされます。

    -----------------------------------------

    internal (boolean): 変換後のコンポーネントにすべてのソースコンポーネントを含める必要があることを指定しますたとえば、指定した周囲の頂点すべてを変換後のフェースに含めます。指定しないと、変換後のコンポーネントは関連したコンポーネントになります。

    -----------------------------------------

    toEdge (boolean): 

    -----------------------------------------

    toFace (boolean): 

    -----------------------------------------

    toUV (boolean): 

    -----------------------------------------

    toVertex (boolean): 

    -----------------------------------------

    toVertexFace (boolean): 変換後のコンポーネントタイプを指定します。指定しないとオブジェクトが仮定されます。

    -----------------------------------------

    uvShell (boolean): 同じUVシェル内にあるUVコンポーネントを返します。-tuvおよび-fuvフラグを指定した場合のみ動作します。

    -----------------------------------------

    vertexFaceAllEdges (boolean): フェースの頂点からエッジに変換した場合、フェースの頂点に端があるエッジがすべて含まれるように指定します。このフラグがない場合、既定の動作ではフェースの頂点ごとに1つのエッジのみが含まれます。

    -----------------------------------------

    Return Value:
    None: selectionItem[]ポリゴン コンポーネントのリスト
    """
    pass

    
def polyMapCut(caching: bool = False,constructionHistory: bool = False,moveratio: float = 1.0,name: str = "",nodeState: int = 1) -> None:
    """
    テクスチャ マッピングのエッジに沿ってカットします。カットしたエッジはマップ境界となります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    moveratio (float): カットしたエッジの隣接エッジ長に対する切開比です。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMapDel(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    選択したフェースからテクスチャ座標(UV)を削除します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMapSew(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    テクスチャ空間で境界エッジを縫い合わせます。選択したエッジはマップ境界である必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMapSewMove(caching: bool = False,constructionHistory: bool = False,limitPieceSize: bool = False,name: str = "",nodeState: int = 1,numberFaces: int = 1,uvSetName: str = "",worldSpace: bool = False) -> None:
    """
    このコマンドは、ジオメトリック エッジに沿って個々の UV ピースを移動したり縫合したりするために使用します。同じジオメトリック エッジに対応する UV ピースは、小さなピースをより大きなピースに移動することで マージされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    limitPieceSize (boolean): このフラグをオンにすると、上で説明したフェース数の制限が使用されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    numberFaces (int): UVピース内のフェースの最大数です。2つのUVピースを単一のUVピースに統合しようとすると、小さい方のピースのフェース数がこのフラグで指定した数よりも多い場合、マージ操作が拒否されます。このフラグは、limitPieceSizeがオンに設定されているときだけ有効です。

    -----------------------------------------

    uvSetName (string): 作成するUVセットの名前です。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMergeEdge(caching: bool = False,constructionHistory: bool = False,firstEdge: int = 1,mergeMode: int = 1,mergeTexture: bool = False,name: str = "",nodeState: int = 1,secondEdge: int = 1) -> None:
    """
    2 つの境界エッジを縫合します。 新しいエッジは、モードによって、最初か最後、または選択したエッジの間に配置されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    firstEdge (int): マージする最初のエッジです。無効な既定値によって設定値を強制します。既定:-1

    -----------------------------------------

    mergeMode (int): マージのモードです。0=最初、1=エッジの両端の中間、2=2番目。既定:1

    -----------------------------------------

    mergeTexture (boolean): UV座標をジオメトリとともにマージするかどうかを決定するために使用されるブーリアン値です。既定:false

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    secondEdge (int): マージする2番目のエッジです。無効な既定値によって設定値を強制します。既定:-1

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMergeFacet(caching: bool = False,constructionHistory: bool = False,firstFacet: int = 1,mergeMode: int = 1,name: str = "",nodeState: int = 1,secondFacet: int = 1) -> None:
    """
    2 番目のフェースが 1 番目のフェースの穴になります。 新しく穴の開いたフェースは、モードによって、最初か最後、または選択したフェースの間に配置されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    firstFacet (int): マージする1番目の(外部)フェースの数。

    -----------------------------------------

    mergeMode (int): フェースのマージ方法を指定します。0:2番目のフェースを1番目に移動します。1:両方のフェースがその平均に移動します。2:1番目のフェースが2番目のフェースに移動します。3,4,5:フェースが投影されたときに中央に揃わないこと以外は上述と同様です。6:移動しません。C:既定はnone(6)です。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    secondFacet (int): マージする2番目の(穴)フェースの数。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMergeUV(caching: bool = False,constructionHistory: bool = False,distance: float = 1.0,name: str = "",nodeState: int = 1,uvSetName: str = "",worldSpace: bool = False) -> None:
    """
    距離に基づいてオブジェクトの UV をマージします。UV は、同じ 3D 頂点に属している場合に限ってマージされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    distance (float): UVをマージする最大距離を指定します。C:既定は0.0です。Q:照会するとdoubleを返します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    uvSetName (string): 作成するUVセットの名前です。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMergeVertex(alwaysMergeTwoVertices: bool = False,caching: bool = False,constructionHistory: bool = False,distance: float = 1.0,mergeToComponents: str = "",name: str = "",nodeState: int = 1,texture: bool = False,worldSpace: bool = False) -> None:
    """
    指定しきい値内の頂点をマージします。 同じオブジェクト上に存在する頂点はすべてマージできるため、作成されたジオメトリが非多様体になる可能性があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alwaysMergeTwoVertices (boolean): このフラグは、距離に関係なく、頂点が2つしか選択されていない場合は常にマージするかどうかを指定します。C:既定はfalseです。Q:照会するとbooleanを返します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    distance (linear): 距離を指定します。この距離以内である場合、頂点はマージされます。C:既定は0.0です(つまり、頂点が一致している場合)。Q:照会するとdoubleを返します。

    -----------------------------------------

    mergeToComponents (string): オプションで、すべての頂点のマージ位置を定義します。設定した場合、距離フラグは無視され、代わりに設定コンポーネントの中心点が計算され、頂点はすべてその位置にマージされます。C:既定は空文字列です。Q:照会するとstringを返します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    texture (boolean): このフラグは、3Dエッジに加えてテクスチャも縫合するかどうかを指定します。C:既定はtrueです。Q:照会するとbooleanを返します。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMirrorFace(axis: int = 1,axisDirection: int = 1,caching: bool = False,constructionHistory: bool = False,direction: int = 1,mergeMode: int = 1,mergeThreshold: float = 1.0,mergeThresholdType: int = 1,mirrorAxis: int = 1,mirrorPosition: float = 1.0,name: str = "",nodeState: int = 1,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pivotX: float = 1.0,pivotY: float = 1.0,pivotZ: float = 1.0,worldSpace: bool = False) -> None:
    """
    選択したオブジェクトのフェースをすべてミラーリングします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis (int): オブジェクトに沿ってミラーリングする軸です。既定:0

    -----------------------------------------

    axisDirection (int): オブジェクトに沿ってミラーリングする方向です。既定:1

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    direction (int): オブジェクトに沿ってミラーリングする方向です。既定:0

    -----------------------------------------

    mergeMode (int): 適用するマージモードです。既定:1

    -----------------------------------------

    mergeThreshold (linear): 頂点をマージするかどうかを決定する許容値です。既定:0.001

    -----------------------------------------

    mergeThresholdType (int): 適用するマージモードです。既定:0

    -----------------------------------------

    mirrorAxis (int): ミラー軸のタイプの選択です。既定:2

    -----------------------------------------

    mirrorPosition (linear): カスタムミラー軸の位置です。既定:0.0

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pivot ([linear, linear, linear]): ミラープレーンのピボットポイントです。既定:0.0,0.0,0.0

    -----------------------------------------

    pivotX (linear): 移動のX座標です。

    -----------------------------------------

    pivotY (linear): 移動のY座標です。

    -----------------------------------------

    pivotZ (linear): 移動のZ座標です。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMoveEdge(caching: bool = False,constructionHistory: bool = False,gain: float = 1.0,localCenter: int = 1,localDirection: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localDirectionX: float = 1.0,localDirectionY: float = 1.0,localDirectionZ: float = 1.0,localRotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localRotateX: float = 1.0,localRotateY: float = 1.0,localRotateZ: float = 1.0,localScale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localScaleX: float = 1.0,localScaleY: float = 1.0,localScaleZ: float = 1.0,localTranslate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localTranslateX: float = 1.0,localTranslateY: float = 1.0,localTranslateZ: float = 1.0,name: str = "",nodeState: int = 1,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pivotX: float = 1.0,pivotY: float = 1.0,pivotZ: float = 1.0,random: float = 1.0,rotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rotateX: float = 1.0,rotateY: float = 1.0,rotateZ: float = 1.0,scale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),scaleX: float = 1.0,scaleY: float = 1.0,scaleZ: float = 1.0,translate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),translateX: float = 1.0,translateY: float = 1.0,translateZ: float = 1.0,worldSpace: bool = False) -> None:
    """
    ポリゴン オブジェクトのエッジを修正します。エッジの平行移動、移動、回転、スケールが行われます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    gain (float): コンポーネントごとの係数を増加します。Artisanを使用してペイントできます。既定:1.0

    -----------------------------------------

    localCenter (int): エッジのローカル中心です。0=中点、1=始点、2=終点です。既定:0

    -----------------------------------------

    localDirection ([linear, linear, linear]): ローカル空間のX軸を決定する方向です。既定:1.0,0.0,0.0

    -----------------------------------------

    localDirectionX (linear): X軸のX座標です。

    -----------------------------------------

    localDirectionY (linear): X軸のY座標です。

    -----------------------------------------

    localDirectionZ (linear): X軸のZ座標です。

    -----------------------------------------

    localRotate ([angle, angle, angle]): ローカル回転です。既定:0.0,0.0,0.0

    -----------------------------------------

    localRotateX (angle): ローカル回転のX座標です。範囲は[0,360]です。

    -----------------------------------------

    localRotateY (angle): ローカル回転のY座標です。範囲は[0,360]です。

    -----------------------------------------

    localRotateZ (angle): ローカル回転のZ座標です。法線に沿って回転します。範囲は[0,360]です。

    -----------------------------------------

    localScale ([float, float, float]): ローカルスケールです。既定:1.0,1.0,1.0

    -----------------------------------------

    localScaleX (float): スケールのX座標です。

    -----------------------------------------

    localScaleY (float): スケールのY座標です。

    -----------------------------------------

    localScaleZ (float): スケールのZ座標です。

    -----------------------------------------

    localTranslate ([linear, linear, linear]): ローカル移動です。既定:0.0,0.0,0.0

    -----------------------------------------

    localTranslateX (linear): ローカル平行移動のX座標。

    -----------------------------------------

    localTranslateY (linear): ローカル平行移動のY座標。

    -----------------------------------------

    localTranslateZ (linear): ローカル平行移動のZ座標。法線に沿って移動します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pivot ([linear, linear, linear]): スケールと回転のためのピボットです。既定:0.0,0.0,0.0

    -----------------------------------------

    pivotX (linear): ピボットのX座標です。

    -----------------------------------------

    pivotY (linear): ピボットのY座標です。

    -----------------------------------------

    pivotZ (linear): ピボットのZ座標です。

    -----------------------------------------

    random (float): すべてのパラメータにランダム値を指定します。既定:0.0

    -----------------------------------------

    rotate ([angle, angle, angle]): X,Y,Zを中心とする回転角度です。既定:0.0,0.0,0.0

    -----------------------------------------

    rotateX (angle): X軸を中心とする回転角度です。

    -----------------------------------------

    rotateY (angle): Y軸を中心とする回転角度です。

    -----------------------------------------

    rotateZ (angle): Z軸を中心とする回転角度です。

    -----------------------------------------

    scale ([float, float, float]): スケールのベクトルです。既定:1.0,1.0,1.0

    -----------------------------------------

    scaleX (float): スケールのX座標です。

    -----------------------------------------

    scaleY (float): スケールのY座標です。

    -----------------------------------------

    scaleZ (float): スケールのZ座標です。

    -----------------------------------------

    translate ([linear, linear, linear]): 移動ベクトルです。既定:0.0,0.0,0.0

    -----------------------------------------

    translateX (linear): 移動のX座標です。

    -----------------------------------------

    translateY (linear): 移動のY座標です。

    -----------------------------------------

    translateZ (linear): 移動のZ座標です。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMoveFacet(attraction: float = 1.0,caching: bool = False,constructionHistory: bool = False,gain: float = 1.0,gravity: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),gravityX: float = 1.0,gravityY: float = 1.0,gravityZ: float = 1.0,localCenter: int = 1,localDirection: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localDirectionX: float = 1.0,localDirectionY: float = 1.0,localDirectionZ: float = 1.0,localRotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localRotateX: float = 1.0,localRotateY: float = 1.0,localRotateZ: float = 1.0,localScale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localScaleX: float = 1.0,localScaleY: float = 1.0,localScaleZ: float = 1.0,localTranslate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localTranslateX: float = 1.0,localTranslateY: float = 1.0,localTranslateZ: float = 1.0,magnX: float = 1.0,magnY: float = 1.0,magnZ: float = 1.0,magnet: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),name: str = "",nodeState: int = 1,offset: float = 1.0,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pivotX: float = 1.0,pivotY: float = 1.0,pivotZ: float = 1.0,random: float = 1.0,rotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rotateX: float = 1.0,rotateY: float = 1.0,rotateZ: float = 1.0,scale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),scaleX: float = 1.0,scaleY: float = 1.0,scaleZ: float = 1.0,translate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),translateX: float = 1.0,translateY: float = 1.0,translateZ: float = 1.0,weight: float = 1.0,worldSpace: bool = False) -> None:
    """
    ポリゴン オブジェクトのファセットを修正します。ファセットの平行移動、移動、回転、スケールが行われます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attraction (float): 磁石に関連する引き付けです。範囲は[-2.0,2.0]です。既定:0.0

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    gain (float): コンポーネントごとの係数を増加します。Artisanを使用してペイントできます。既定:1.0

    -----------------------------------------

    gravity ([linear, linear, linear]): 重力ベクトルです。既定:0.0,-1.0,0.0

    -----------------------------------------

    gravityX (linear): 重力のX座標です。

    -----------------------------------------

    gravityY (linear): 重力のY座標です。

    -----------------------------------------

    gravityZ (linear): 重力のZ座標です。

    -----------------------------------------

    localCenter (int): エッジのローカル中心です。0=中点、1=始点、2=終点です。既定:0

    -----------------------------------------

    localDirection ([linear, linear, linear]): ローカル空間のX軸を決定する方向です。既定:1.0,0.0,0.0

    -----------------------------------------

    localDirectionX (linear): X軸のX座標です。

    -----------------------------------------

    localDirectionY (linear): X軸のY座標です。

    -----------------------------------------

    localDirectionZ (linear): X軸のZ座標です。

    -----------------------------------------

    localRotate ([angle, angle, angle]): ローカル回転です。既定:0.0,0.0,0.0

    -----------------------------------------

    localRotateX (angle): ローカル回転のX座標です。範囲は[0,360]です。

    -----------------------------------------

    localRotateY (angle): ローカル回転のY座標です。範囲は[0,360]です。

    -----------------------------------------

    localRotateZ (angle): ローカル回転のZ座標です。法線に沿って回転します。範囲は[0,360]です。

    -----------------------------------------

    localScale ([float, float, float]): ローカルスケールです。既定:1.0,1.0,1.0

    -----------------------------------------

    localScaleX (float): スケールのX座標です。

    -----------------------------------------

    localScaleY (float): スケールのY座標です。

    -----------------------------------------

    localScaleZ (float): スケールのZ座標です。

    -----------------------------------------

    localTranslate ([linear, linear, linear]): ローカル移動です。既定:0.0,0.0,0.0

    -----------------------------------------

    localTranslateX (linear): ローカル平行移動のX座標。

    -----------------------------------------

    localTranslateY (linear): ローカル平行移動のY座標。

    -----------------------------------------

    localTranslateZ (linear): ローカル平行移動のZ座標。法線に沿って移動します。

    -----------------------------------------

    magnX (linear): 磁石のX座標です。

    -----------------------------------------

    magnY (linear): 磁石のY座標です。

    -----------------------------------------

    magnZ (linear): 磁石のZ座標です。

    -----------------------------------------

    magnet ([linear, linear, linear]): 磁石のベクトルです。既定:0.0,0.0,0.0

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    offset (float): ローカルオフセットです。フェースは、フェースの内側に向かってこの距離に移動します。既定:0.0

    -----------------------------------------

    pivot ([linear, linear, linear]): スケールと回転のためのピボットです。既定:0.0,0.0,0.0

    -----------------------------------------

    pivotX (linear): ピボットのX座標です。

    -----------------------------------------

    pivotY (linear): ピボットのY座標です。

    -----------------------------------------

    pivotZ (linear): ピボットのZ座標です。

    -----------------------------------------

    random (float): すべてのパラメータにランダム値を指定します。既定:0.0

    -----------------------------------------

    rotate ([angle, angle, angle]): X,Y,Zを中心とする回転角度です。既定:0.0,0.0,0.0

    -----------------------------------------

    rotateX (angle): X軸を中心とする回転角度です。

    -----------------------------------------

    rotateY (angle): Y軸を中心とする回転角度です。

    -----------------------------------------

    rotateZ (angle): Z軸を中心とする回転角度です。

    -----------------------------------------

    scale ([float, float, float]): スケールのベクトルです。既定:1.0,1.0,1.0

    -----------------------------------------

    scaleX (float): スケールのX座標です。

    -----------------------------------------

    scaleY (float): スケールのY座標です。

    -----------------------------------------

    scaleZ (float): スケールのZ座標です。

    -----------------------------------------

    translate ([linear, linear, linear]): 移動ベクトルです。既定:0.0,0.0,0.0

    -----------------------------------------

    translateX (linear): 移動のX座標です。

    -----------------------------------------

    translateY (linear): 移動のY座標です。

    -----------------------------------------

    translateZ (linear): 移動のZ座標です。

    -----------------------------------------

    weight (float): 重力に関連したウェイトです。既定:0.0

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMoveFacetUV(axisLen: Tuple[float, float] = tuple(1.0, 1.0),axisLenX: float = 1.0,axisLenY: float = 1.0,caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,pivot: Tuple[float, float] = tuple(1.0, 1.0),pivotU: float = 1.0,pivotV: float = 1.0,random: float = 1.0,rotationAngle: float = 1.0,scale: Tuple[float, float] = tuple(1.0, 1.0),scaleU: float = 1.0,scaleV: float = 1.0,translate: Tuple[float, float] = tuple(1.0, 1.0),translateU: float = 1.0,translateV: float = 1.0) -> None:
    """
    選択したフェースに関連する、すべての UV 値を移動してマップを修正します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axisLen ([float, float]): 軸の長さのベクトルで、マニピュレータハンドルの描画に使用します。C:既定は1.0,1.0です。Q:照会するとfloat[2]を返します。

    -----------------------------------------

    axisLenX (float): Xの軸の長さで、マニピュレータハンドルの描画に使用します。C:既定は1.0ですQ:照会するとfloatを返します。

    -----------------------------------------

    axisLenY (float): Yの軸の長さで、マニピュレータハンドルの描画に使用します。C:既定は1.0ですQ:照会するとfloatを返します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pivot ([float, float]): スケーリングと回転のピボットを指定します。C:既定は0.00.0です。Q:照会するとfloat[2]を返します。

    -----------------------------------------

    pivotU (float): このフラグはスケーリングと回転のピボットのUを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    pivotV (float): スケーリングと回転のピボットのVを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    random (float): すべてのパラメータにランダム値を指定します。C:既定は0.0です。範囲は[-10.0,10.0]です。Q:照会するとfloatを返します。

    -----------------------------------------

    rotationAngle (angle): 回転角度です。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    scale ([float, float]): スケーリングベクトルを指定します。C:既定は1.01.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    scaleU (float): このフラグはスケーリングベクトルのUを指定します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    scaleV (float): このフラグはスケーリングベクトルのVを指定します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    translate ([float, float]): このフラグは移動ベクトルを指定します。C:既定は0.00.0です。Q:照会するとfloat[2]を返します。

    -----------------------------------------

    translateU (float): このフラグはU移動ベクトルを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    translateV (float): このフラグはV移動ベクトルを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMoveUV(axisLen: Tuple[float, float] = tuple(1.0, 1.0),axisLenX: float = 1.0,axisLenY: float = 1.0,caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,pivot: Tuple[float, float] = tuple(1.0, 1.0),pivotU: float = 1.0,pivotV: float = 1.0,random: float = 1.0,rotationAngle: float = 1.0,scale: Tuple[float, float] = tuple(1.0, 1.0),scaleU: float = 1.0,scaleV: float = 1.0,translate: Tuple[float, float] = tuple(1.0, 1.0),translateU: float = 1.0,translateV: float = 1.0) -> None:
    """
    2D 空間で選択した UV 座標を移動します。選択した UV が調整されるため、イメージのオブジェクトへのマップ方法もそれに従って変化します。このコマンドでは、オブジェクトの 3D ジオメトリを変更せずに UV 値が操作されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axisLen ([float, float]): AxisLenベクトルで、マニピュレータハンドルの描画に使用します。既定:1.0,1.0

    -----------------------------------------

    axisLenX (float): AxisLenのX座標です。

    -----------------------------------------

    axisLenY (float): AxisLenのY座標です。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pivot ([float, float]): スケールと回転のためのピボットです。既定:0.5,0.5

    -----------------------------------------

    pivotU (float): ピボットのU座標です。

    -----------------------------------------

    pivotV (float): ピボットのV座標です。

    -----------------------------------------

    random (float): すべてのパラメータにランダム値を追加します。既定:0.0

    -----------------------------------------

    rotationAngle (angle): 回転角度です。既定:0.0

    -----------------------------------------

    scale ([float, float]): スケールのベクトルです。既定:1.0,1.0

    -----------------------------------------

    scaleU (float): スケールのU座標です。

    -----------------------------------------

    scaleV (float): スケールのV座標です。

    -----------------------------------------

    translate ([float, float]): 移動ベクトルです。既定:0.0,0.0

    -----------------------------------------

    translateU (float): 移動のU座標です。

    -----------------------------------------

    translateV (float): 移動のV座標です。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMoveVertex(caching: bool = False,constructionHistory: bool = False,gain: float = 1.0,localDirection: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localDirectionX: float = 1.0,localDirectionY: float = 1.0,localDirectionZ: float = 1.0,localTranslate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localTranslateX: float = 1.0,localTranslateY: float = 1.0,localTranslateZ: float = 1.0,name: str = "",nodeState: int = 1,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pivotX: float = 1.0,pivotY: float = 1.0,pivotZ: float = 1.0,random: float = 1.0,rotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rotateX: float = 1.0,rotateY: float = 1.0,rotateZ: float = 1.0,scale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),scaleX: float = 1.0,scaleY: float = 1.0,scaleZ: float = 1.0,translate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),translateX: float = 1.0,translateY: float = 1.0,translateZ: float = 1.0,worldSpace: bool = False) -> None:
    """
    ポリゴン オブジェクトの頂点を修正します。ローカル空間またはワールド空間で、頂点の平行移動、回転、スケールが行われます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    gain (float): コンポーネントごとの係数を増加します。Artisanを使用してペイントできます。既定:1.0

    -----------------------------------------

    localDirection ([linear, linear, linear]): ローカル空間のX軸を決定する方向です。既定:1.0,0.0,0.0

    -----------------------------------------

    localDirectionX (linear): X軸のX座標です。

    -----------------------------------------

    localDirectionY (linear): X軸のY座標です。

    -----------------------------------------

    localDirectionZ (linear): X軸のZ座標です。

    -----------------------------------------

    localTranslate ([linear, linear, linear]): ローカル移動です。既定:0.0,0.0,0.0

    -----------------------------------------

    localTranslateX (linear): ローカル平行移動のX座標。

    -----------------------------------------

    localTranslateY (linear): ローカル平行移動のY座標。

    -----------------------------------------

    localTranslateZ (linear): ローカル平行移動のZ座標。法線に沿って移動します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pivot ([linear, linear, linear]): スケールと回転のためのピボットです。既定:0.0,0.0,0.0

    -----------------------------------------

    pivotX (linear): ピボットのX座標です。

    -----------------------------------------

    pivotY (linear): ピボットのY座標です。

    -----------------------------------------

    pivotZ (linear): ピボットのZ座標です。

    -----------------------------------------

    random (float): すべてのパラメータにランダム値を指定します。既定:0.0

    -----------------------------------------

    rotate ([angle, angle, angle]): X,Y,Zを中心とする回転角度です。既定:0.0,0.0,0.0

    -----------------------------------------

    rotateX (angle): X軸を中心とする回転角度です。

    -----------------------------------------

    rotateY (angle): Y軸を中心とする回転角度です。

    -----------------------------------------

    rotateZ (angle): Z軸を中心とする回転角度です。

    -----------------------------------------

    scale ([float, float, float]): スケールのベクトルです。既定:1.0,1.0,1.0

    -----------------------------------------

    scaleX (float): スケールのX座標です。

    -----------------------------------------

    scaleY (float): スケールのY座標です。

    -----------------------------------------

    scaleZ (float): スケールのZ座標です。

    -----------------------------------------

    translate ([linear, linear, linear]): 移動ベクトルです。既定:0.0,0.0,0.0

    -----------------------------------------

    translateX (linear): 移動のX座標です。

    -----------------------------------------

    translateY (linear): 移動のY座標です。

    -----------------------------------------

    translateZ (linear): 移動のZ座標です。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyMultiLayoutUV(flipReversed: bool = False,gridU: int = 1,gridV: int = 1,layout: int = 1,layoutMethod: int = 1,offsetU: float = 1.0,offsetV: float = 1.0,percentageSpace: float = 1.0,prescale: int = 1,rotateForBestFit: int = 1,scale: int = 1,sizeU: float = 1.0,sizeV: float = 1.0,uvSetName: str = "") -> None:
    """
    選択したポリゴン オブジェクトの UV を、オーバーラップしないように配置します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    flipReversed (boolean): このフラグをオンにすると、反転したUVピースが反転します。

    -----------------------------------------

    gridU (int): グリッドのUサイズです。

    -----------------------------------------

    gridV (int): グリッドのVサイズです。

    -----------------------------------------

    layout (int): カット適用後にUVのピースを移動する方法を指定します。0:移動は適用されません。1:ピースをU軸に沿ってレイアウトします。2:ピースを四角形にレイアウトします。3:ピースをグリッドにレイアウトします。4:ピースを最も近い領域にレイアウトします。

    -----------------------------------------

    layoutMethod (int): //-lm/layoutMethodlayoutMethod整数//(C、E、Q)使用するレイアウト方法を指定します。//0:ブロックスタッキング//1:シェイプスタッキング

    -----------------------------------------

    offsetU (float): レイアウトをU方向に、指定した値でオフセットします。

    -----------------------------------------

    offsetV (float): レイアウトをV方向に、指定した値でオフセットします。

    -----------------------------------------

    percentageSpace (float): レイアウトを正方形に設定した場合、この値は各UVピースの周りに追加されるテクスチャ領域のパーセンテージです。このコマンドを使用して、テクスチャ内の各UVピースがそれぞれ個別のピクセルを使用することを確認できます。最大値は5%です。

    -----------------------------------------

    prescale (int): シェルをレイアウトする前に、あらかじめスケールします。0:スケールは適用されません。1オブジェクト空間のスケールが適用されます。2ワールド空間のスケールが適用されます。

    -----------------------------------------

    rotateForBestFit (int): 移動前にピースを回転する方法を指定します。0:回転は適用されません。1:90°回転のみを可能にします。2:自由回転を可能にします。

    -----------------------------------------

    scale (int): 移動後にピースをスケールする方法を指定します。0:スケールは適用されません。1:単位正方形に合わせて均一にスケールします。2:単位正方形に合わせて非比例にスケールします。

    -----------------------------------------

    sizeU (float): レイアウトをU方向に、指定した値でスケールします。

    -----------------------------------------

    sizeV (float): レイアウトをV方向に、指定した値でスケールします。

    -----------------------------------------

    uvSetName (string): UVを編集するUVセット名を指定します。指定しない場合、現在のUVセットが存在すればそれを使用します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def polyNormal(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,normalMode: int = 1,userNormalMode: bool = False) -> None:
    """
    オブジェクトの法線を制御します。このコマンドは、フェースまたはポリゴン オブジェクトで動作します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    normalMode (int): 法線モードです。0=反転(reverse)、1=伝播(propagate)、2=方向の一致(conform)、3=反転して抽出(reverseAndCut)、4=反転して伝播(reverseAndPropagate)。既定:0

    -----------------------------------------

    userNormalMode (boolean): ユーザ法線を反転させる必要があるかも決定します。既定:true

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyNormalizeUV(caching: bool = False,constructionHistory: bool = False,createNewMap: bool = False,insertBeforeDeformers: bool = False,name: str = "",nodeState: int = 1,uvSetName: str = "",worldSpace: bool = False,centerOnTile: bool = False,normalizeDirection: int = 1,normalizeType: int = 1,preserveAspectRatio: bool = False) -> None:
    """
    入力ポリフェースの UV を正規化します。フェースの既存 UV は、0 から 1 の間で正規化されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createNewMap (boolean): 新しいマップを作成する必要がある場合は、trueに設定します。

    -----------------------------------------

    insertBeforeDeformers (boolean): 新しく作成したノードを任意のデフォーマノードの前に挿入する必要がある場合は、trueに設定します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    uvSetName (string): 作成するUVセットの名前です。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    centerOnTile (boolean): trueの場合、UVタイルで最も上にあるものが中心のUVになります。falseの場合、0-1領域にあるものが中心のUVになります。

    -----------------------------------------

    normalizeDirection (int): UまたはV、あるいは両方に沿ってスケールします。0UV1U2VC:既定は0です。Q:照会すると、intを返します。

    -----------------------------------------

    normalizeType (int): 正規化オプション。0Separate1CollectiveC:既定は1です。Q:照会すると、intを返します。

    -----------------------------------------

    preserveAspectRatio (boolean): U方向およびV方向に沿って均一にスケールします。C:既定はオンです。Q:照会すると、intを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyNormalPerVertex(allLocked: bool = False,deformable: bool = False,freezeNormal: bool = False,normalX: float = 1.0,normalXYZ: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),normalY: float = 1.0,normalZ: float = 1.0,relative: bool = False,unFreezeNormal: bool = False) -> None:
    """
    法線(x, y, z)をポリゴン オブジェクトの頂点にコネクトします。照会フラグと一緒に使用する場合、指定したコンポーネントにコネクトされた法線を返します。ただし照会すると、共有の有無に関係なく、頂点のすべての法線(すべての頂点とフェースの組み合わせ)を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allLocked (boolean): 選択した頂点上のすべての法線がロックされている(フリーズされている)かどうかを照会します。

    -----------------------------------------

    deformable (boolean): このフラグは現在サポートしていません(既定はtrue)。このフラグは、次のリリースで除去予定です。

    -----------------------------------------

    freezeNormal (boolean): 法線の値を現在値でフリーズ(ロック)することを指定します。

    -----------------------------------------

    normalX (float): 法線のX値を指定します。

    -----------------------------------------

    normalXYZ ([float, float, float]): 法線のXYZ値を指定します。このフラグを単独で使用した場合は、選択されたすべてのコンポーネントに、指定した法線のXYZ値が使用されます。フラグが複数回使用されている場合、使用数は選択したコンポーネントの数と一致する必要があります。フラグを使用するたびに、特定のコンポーネントの法線を指定します。

    -----------------------------------------

    normalY (float): 法線のY値を指定します。

    -----------------------------------------

    normalZ (float): 法線のZ値を指定します。

    -----------------------------------------

    relative (boolean): 指定した法線の値を、現在値を基準にして追加します。

    -----------------------------------------

    unFreezeNormal (boolean): 現在値でフリーズしている法線の値をフリーズ解除(ロック解除)することを指定します。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyOptions(activeObjects: bool = False,allEdges: bool = False,backCullVertex: bool = False,backCulling: bool = False,colorMaterialChannel: str = "",colorShadedDisplay: bool = False,displayAlphaAsGreyScale: bool = False,displayBlueChannel: bool = False,displayBorder: bool = False,displayCenter: bool = False,displayCreaseEdge: bool = False,displayCreaseVertex: bool = False,displayGeometry: bool = False,displayGreenChannel: bool = False,displayInvisibleFaces: bool = False,displayItemNumbers: Tuple[bool, bool, bool, bool] = tuple(False, False, False, False),displayMapBorder: bool = False,displayMetadata: Tuple[bool, bool, bool] = tuple(False, False, False),displayNormal: bool = False,displayRedChannel: bool = False,displaySubdComps: bool = False,displayTangent: bool = False,displayTriangle: bool = False,displayUVTopology: bool = False,displayUVs: bool = False,displayVertex: bool = False,displayWarp: bool = False,facet: bool = False,fullBack: bool = False,gl: bool = False,hardBack: bool = False,hardEdge: bool = False,hardEdgeColor: bool = False,materialBlend: str = "",newPolymesh: bool = False,point: bool = False,pointFacet: bool = False,relative: bool = False,reuseTriangles: bool = False,sizeBorder: float = 1.0,sizeNormal: float = 1.0,sizeUV: float = 1.0,sizeVertex: float = 1.0,smoothDrawType: int = 1,softEdge: bool = False,vertexNormalMethod: int = 1,wireBackCulling: bool = False) -> None:
    """
    グローバル表示ポリゴン アトリビュートを変更します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activeObjects (boolean): すべてのアクティブオブジェクトにユーザ選択を適用します。

    -----------------------------------------

    allEdges (boolean): すべてのエッジを実線で表示します。

    -----------------------------------------

    backCullVertex (boolean): 頂点をバックカリングします。

    -----------------------------------------

    backCulling (boolean): バックカリングなしで表示します。

    -----------------------------------------

    colorMaterialChannel (string): colorShadedDisplayをtrueにした場合は、頂点ごとにカラーを表示するマテリアルチャネルを決めます。次のオプションがあります。「none」:マテリアルシェーディングを無効にします。「ambient」:アンビエントマテリアルチャネルを指定します。「ambientDiffuse」:アンビエントマテリアルチャネルと拡散マテリアルチャネルを指定します。「diffuse」:拡散マテリアルチャネルを指定します。「specular」:スペキュラマテリアルチャネルを指定します。「emission」:放出マテリアルチャネルを指定します。

    -----------------------------------------

    colorShadedDisplay (boolean): シェーディングモードで表示する頂点カラーを使用します。

    -----------------------------------------

    displayAlphaAsGreyScale (boolean): アルファ値をグレースケールとして表示します。

    -----------------------------------------

    displayBlueChannel (boolean): 青チャネルを表示します。

    -----------------------------------------

    displayBorder (boolean): 境界エッジをハイライトします。

    -----------------------------------------

    displayCenter (boolean): ファセットの中心を表示します。

    -----------------------------------------

    displayCreaseEdge (boolean): 折り目エッジをハイライトします。

    -----------------------------------------

    displayCreaseVertex (boolean): 折り目の頂点をハイライトします。

    -----------------------------------------

    displayGeometry (boolean): ジオメトリを表示します。

    -----------------------------------------

    displayGreenChannel (boolean): 緑チャネルを表示します。

    -----------------------------------------

    displayInvisibleFaces (boolean): 非表示のフェースをハイライト表示します。

    -----------------------------------------

    displayItemNumbers ([boolean, boolean, boolean, boolean]): 項目番号を表示します(頂点、エッジ、ファセット、UV)。

    -----------------------------------------

    displayMapBorder (boolean): マップ境界エッジをハイライトします。

    -----------------------------------------

    displayMetadata ([boolean, boolean, boolean]): コンポーネントメタデータを表示します(頂点、エッジ、ファセット、頂点フェース)。

    -----------------------------------------

    displayNormal (boolean): 法線を表示します。

    -----------------------------------------

    displayRedChannel (boolean): 赤チャネルを表示します。

    -----------------------------------------

    displaySubdComps (boolean): スムーズメッシュプレビューモードで、細分割されたコンポーネントを表示します。

    -----------------------------------------

    displayTangent (boolean): 接線を表示します。

    -----------------------------------------

    displayTriangle (boolean): 三角網を表示します。

    -----------------------------------------

    displayUVTopology (boolean): UVをトポロジ的に表示するUV表示オプション。

    -----------------------------------------

    displayUVs (boolean): UVを表示します。

    -----------------------------------------

    displayVertex (boolean): 頂点を表示します。

    -----------------------------------------

    displayWarp (boolean): ワープしたファセットをハイライトします。

    -----------------------------------------

    facet (boolean): -dnフラグとともに使用します。法線表示スタイルをファセットの表示に設定します。

    -----------------------------------------

    fullBack (boolean): 完全なバックカリングで表示します。

    -----------------------------------------

    gl (boolean): すべてのオブジェクトにユーザ選択を適用します。

    -----------------------------------------

    hardBack (boolean): バックカリングしたフェースのみのバックカリングしたハードエッジ。

    -----------------------------------------

    hardEdge (boolean): ハードエッジのみを表示します。

    -----------------------------------------

    hardEdgeColor (boolean): 別のカラーでハードエッジを表示します。

    -----------------------------------------

    materialBlend (string): 次のオプションがあります。「overwrite」「add」「subtract」「multiply」「divide」「average」「modulate2x」

    -----------------------------------------

    newPolymesh (boolean): 新しいポリゴンメッシュオブジェクトのコンポーネントの表示状態を設定します。

    -----------------------------------------

    point (boolean): -dnフラグとともに使用します。法線表示スタイルを頂点の表示に設定します。

    -----------------------------------------

    pointFacet (boolean): -dnフラグとともに使用します。法線表示スタイルを頂点とフェースの表示に設定します。

    -----------------------------------------

    relative (boolean): サイズを扱うフラグとともに使用すると、値(サイズ)が乗算係数になります。次のようなフラグの場合です。-sizeNormal、-sizeBorder。ブーリアン値を扱うフラグとともに使用すると、ブーリアン値が反転します。次のようなフラグの場合です。displayVertex、displayCenter、displayTriangle、displayBorder、backCullVertex、displayWarp、displayItemNumbers。

    -----------------------------------------

    reuseTriangles (boolean): コンストラクションヒストリの上流で古い三角形を再使用することで、三角形の再生成を防止します。コンストラクションヒストリは、他のメッシュノードの上流および下流で検索され、これらのメッシュノードに特定のブーリアン値が設定されます。このコマンドは指定したメッシュノードには値を設定しないことに注意してください。そのような場合の設定は、setAttrコマンドを使用して行う必要があります。このオプションは、インタラクティブな3Dビューポートにのみ反映されます。バッチレンダリングには、正確に計算された三角形が使用されます。表示モードがシェーディング(つまり三角形で表示されたワイヤフレーム)であるとき、スキニング再生などのインタラクティブなパフォーマンスにのみ有用です。ワイヤフレーム表示に使用することはお勧めしません。

    -----------------------------------------

    sizeBorder (float): ポリゴン境界エッジのサイズを設定します。

    -----------------------------------------

    sizeNormal (float): ポリゴン法線のサイズを設定します。

    -----------------------------------------

    sizeUV (float): ポリゴンUVのサイズを設定します。

    -----------------------------------------

    sizeVertex (float): ポリゴン頂点のサイズを設定します。

    -----------------------------------------

    smoothDrawType (int): この設定は、newPolymeshフラグを使用する場合のみ機能します。ポリゴンメッシュオブジェクト上のsmoothDrawTypeアトリビュートの新しい既定のアトリビュート値を設定します。オプションは、0:Catmull-Clark1:リニア2:OpenSubdivCatmull-Clark均一3:OpenSubdivCatmull-Clark適応です。

    -----------------------------------------

    softEdge (boolean): ソフトエッジを点線で表示します。

    -----------------------------------------

    vertexNormalMethod (int): この設定は、newPolymeshフラグを使用する場合のみ機能します。ポリゴンメッシュオブジェクト上のvertexNormalMethodアトリビュートの新しい既定のアトリビュート値を設定します。オプション:0:重みなし1:角度に重み2:エリアに重み3:角度とエリアに重み

    -----------------------------------------

    wireBackCulling (boolean): バックカリングしたフェースをワイヤフレームにします。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyOptUvs(applyToShell: bool = False,areaWeight: float = 1.0,caching: bool = False,constructionHistory: bool = False,globalBlend: float = 1.0,globalMethodBlend: float = 1.0,iterations: int = 1,name: str = "",nodeState: int = 1,optimizeAxis: int = 1,pinSelected: bool = False,pinUvBorder: bool = False,scale: float = 1.0,stoppingThreshold: float = 1.0,useScale: bool = False,uvSetName: str = "",worldSpace: bool = False) -> None:
    """
    選択した UV を最適化します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    applyToShell (boolean): 選択または固定されているオブジェクト全体またはシェルのみが影響を受ける場所を指定します。

    -----------------------------------------

    areaWeight (float): サーフェスドリブンの重要性です。0:すべてのフェースを同等に扱います。1:大きいフェースを重視します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    globalBlend (float): ローカルの最適化方法(globalBlend=0.0)とグローバルの最適化方法(globalBlend=1.0)をブレンドできるようになります。ローカルな最適化方法では、オブジェクト上の三角ポリゴンとUV空間の三角ポリゴンの比率を見ます。ただし、テーパの問題を引き起こす可能性があります。グローバルの最適化はより時間がかかりますが、UV配置を最適化するときにオブジェクト全体を考慮します。

    -----------------------------------------

    globalMethodBlend (float): グローバルの最適化方法は、最小化の計算に2つの関数を使用します。1番目の関数はXYZとUV間のエッジの長さを使用してエッジ伸長を制御します。2番目の関数は、三角ポリゴンがオーバーラップする構成を防ぐことで、1番目の関数にペナルティを科します。すべてのサーフェスに、適切な応答を返す2つの関数の組み合わせが存在します。値が1.0に近いほど、エッジの長さ関数が重視されます。0.0に近づくほど、サーフェス領域が重視されます。既定値は0.5で、これら2つの値の均等な組み合わせです。

    -----------------------------------------

    iterations (int): 接続された各UVピースの反復の最大数です。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    optimizeAxis (int): 最適化の自由度。0=自由に最適化、1=垂直方向にのみ移動、2=水平方向にのみ移動

    -----------------------------------------

    pinSelected (boolean): 選択していないコンポーネントではなく、選択したコンポーネントを固定するように指定します。

    -----------------------------------------

    pinUvBorder (boolean): ソルバの実行時にUV境界を固定するかどうかを指定します。既定では、非選択のコンポーネントのみが固定されます。

    -----------------------------------------

    scale (float): 2D空間と3D空間の比率です。

    -----------------------------------------

    stoppingThreshold (float): 2つのステップ間における、歪み改善の最小値(%)です。

    -----------------------------------------

    useScale (boolean): スケールを調整するかどうかを指定します。

    -----------------------------------------

    uvSetName (string): 作成するUVセットの名前です。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyOutput(allValues: bool = False,color: bool = False,colorDesc: bool = False,edge: bool = False,edgeFace: bool = False,face: bool = False,faceNorm: bool = False,force: bool = False,group: bool = False,noOutput: bool = False,normDesc: bool = False,outputFile: str = "",triangle: bool = False,uvDesc: bool = False,uvValue: bool = False,vert: bool = False,vertEdge: bool = False,vertNorm: bool = False) -> None:
    """
    ポリゴン オブジェクトの内部メモリ表現の説明をダンプします。コマンド ラインでオブジェクトを指定しない場合、アクティブ リストのオブジェクトが使用されます。ポリゴン シェイプのヒストリにあるジオメトリの情報が必要な場合、コマンドラインで対象となる情報のプラグを指定する必要があります。既定動作では、概要のみが出力されます。オブジェクトの特定の部分に関するディテールをわらに取得するには、前述のフラグを使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allValues (boolean): 前述のフラグすべてを設定するためのショートカット

    -----------------------------------------

    color (boolean): 頂点単位のカラーを出力します。セットが複数存在する場合、すべてのセットが出力されます。

    -----------------------------------------

    colorDesc (boolean): 頂点単位のカラーの説明を出力します。各整数はcolor配列のエントリです。

    -----------------------------------------

    edge (boolean): エッジの説明を出力します。

    -----------------------------------------

    edgeFace (boolean): フェース隣接リストにエッジを出力します。オブジェクト上で情報が既に計算されている場合のみ使用可能です。

    -----------------------------------------

    face (boolean): フェースの説明を出力します。

    -----------------------------------------

    faceNorm (boolean): フェース単位の法線を出力します。オブジェクト上で情報が既に計算されている場合のみ使用可能です。

    -----------------------------------------

    force (boolean): 失われている部分を強制的に評価してから、出力に進みます。

    -----------------------------------------

    group (boolean): オブジェクトのグループを出力します。

    -----------------------------------------

    noOutput (boolean): データを一切出力しません。テスト目的で、データの評価のみを行う場合に便利です。

    -----------------------------------------

    normDesc (boolean): 頂点単位の法線の説明を出力します。各整数はvertNorm配列のエントリです。オブジェクト上で情報が既に計算されている場合のみ使用可能です。

    -----------------------------------------

    outputFile (string): 出力ファイルの場所です。

    -----------------------------------------

    triangle (boolean): フェース単位の三角ポリゴンを出力します。オブジェクト上で情報が既に計算されている場合のみ使用可能です。

    -----------------------------------------

    uvDesc (boolean): UVの説明を出力します。各整数はuvValue配列のエントリです。

    -----------------------------------------

    uvValue (boolean): UV位置を出力します。UVセットが複数存在する場合、すべてのセットが出力されます。

    -----------------------------------------

    vert (boolean): 頂点の位置を出力します。

    -----------------------------------------

    vertEdge (boolean): エッジ隣接リストに頂点を出力します。オブジェクト上で情報が既に計算されている場合のみ使用可能です。

    -----------------------------------------

    vertNorm (boolean): 頂点単位の法線を出力します。オブジェクト上で情報が既に計算されている場合のみ使用可能です。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def polyPinUV(createHistory: bool = False,operation: int = 1,unpinned: bool = False,uvSetName: str = "",value: float = 1.0) -> None:
    """
    このコマンドは、UV を固定 / 固定解除するために使用します。「固定された」UV とは、修正してはならない UV です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    createHistory (boolean): コンストラクションヒストリのないオブジェクトの場合、このフラグを使用して固定用のコンストラクションヒストリの作成を強制できます。既定では、オブジェクトにヒストリがない場合には、ヒストリは作成されません。このフラグにかかわらず、ヒストリがある場合には、ヒストリは常に作成されます。

    -----------------------------------------

    operation (uint): 実行する操作。有効な値:0:選択したUVのピンウェイト値を設定します。1:選択したUVのピンウェイトをゼロに設定します。2:メッシュ全体からピンウェイトを削除します。3:メッシュ全体のピンウェイトを反転します。既定は0です。

    -----------------------------------------

    unpinned (boolean): 固定されていない選択したすべてのUVをリストします。

    -----------------------------------------

    uvSetName (string): UVを編集するUVセット名を指定します。指定されない場合は、現在のUVセットが使われます(存在する場合)。

    -----------------------------------------

    value (float): 選択したUVコンポーネントのピンの値を指定します。複数回指定した場合、指定したUVにそれぞれ値が割り当てられます。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyPipe(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,constructionHistory: bool = False,createUVs: bool = False,height: float = 1.0,name: str = "",nodeState: int = 1,object: bool = False,radius: float = 1.0,roundCap: bool = False,subdivisionsAxis: int = 1,subdivisionsCaps: int = 1,subdivisionsHeight: int = 1,texture: bool = False,thickness: float = 1.0) -> None:
    """
    polyPipe コマンドは新しいポリゴン パイプを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): パイプの作成に使用するプリミティブの軸を指定します。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createUVs (boolean): UVを作成するかどうかを指定します。既定:true

    -----------------------------------------

    height (linear): パイプの高さです。既定:2.0

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します(適切な場合)。

    -----------------------------------------

    radius (linear): パイプの半径です。既定:1.0

    -----------------------------------------

    roundCap (boolean): キャップの丸めが必要かどうかを示します。既定:false

    -----------------------------------------

    subdivisionsAxis (int): 軸を中心とするサブディビジョン既定:20

    -----------------------------------------

    subdivisionsCaps (int): 厚さキャップに沿ったサブディビジョンです。既定:1

    -----------------------------------------

    subdivisionsHeight (int): 高さに沿ったサブディビジョンです。既定:1

    -----------------------------------------

    texture (boolean): テクスチャの適用のオン/オフを切り替えます。古いアトリビュートです。サポート対象ではなく、将来のリリースで削除される予定です。既定:true

    -----------------------------------------

    thickness (linear): パイプの厚さです。既定:0.5

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyPlanarProjection(caching: bool = False,constructionHistory: bool = False,createNewMap: bool = False,imageCenter: Tuple[float, float] = tuple(1.0, 1.0),imageCenterX: float = 1.0,imageCenterY: float = 1.0,imageScale: Tuple[float, float] = tuple(1.0, 1.0),imageScaleU: float = 1.0,imageScaleV: float = 1.0,insertBeforeDeformers: bool = False,keepImageRatio: bool = False,mapDirection: str = "",name: str = "",nodeState: int = 1,perInstance: bool = False,projectionCenter: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),projectionCenterX: float = 1.0,projectionCenterY: float = 1.0,projectionCenterZ: float = 1.0,projectionHeight: float = 1.0,projectionScale: Tuple[float, float] = tuple(1.0, 1.0),rotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rotateX: float = 1.0,rotateY: float = 1.0,rotateZ: float = 1.0,rotationAngle: float = 1.0,smartFit: bool = False,worldSpace: bool = False,projectionHorizontalSweep: float = 1.0,seamCorrect: bool = False) -> None:
    """
    TpolyProjCmdBase は、選択したポリゴン フェースにマッピングを作成するコマンドの基本クラスです。 正射投影を使用してマップをオブジェクトに投影します。isu 領域、isv 領域、icx 領域、icy 領域から定義されたマップの断片は、pcx 位置、pcy 位置、pcz 位置に配置されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createNewMap (boolean): このフラグをtrueに設定すると、マップが存在していない場合は、渡された名前を持つ新しいマップを作成します。

    -----------------------------------------

    imageCenter ([float, float]): 2Dモデルレイアウトの中心点です。既定:0.5,0.5

    -----------------------------------------

    imageCenterX (float): イメージの中心のX座標です。

    -----------------------------------------

    imageCenterY (float): イメージの中心のY座標です。

    -----------------------------------------

    imageScale ([float, float]): UVのスケールを指定します。2D中心点を基準にしてU空間またはV空間にある2Dバージョンのモデルを拡大または縮小します。既定:1.0,1.0

    -----------------------------------------

    imageScaleU (float): Uのスケールを指定します。2D中心点を基準にしてU空間にある2Dバージョンのモデルを拡大または縮小します。

    -----------------------------------------

    imageScaleV (float): Vのスケールを指定します。2D中心点を基準にしてV空間にある2Dバージョンのモデルを拡大または縮小します。

    -----------------------------------------

    insertBeforeDeformers (boolean): このフラグは、デフォーマノードをシェイプに適用する前か後どちらに投影ノードを挿入するかを指定します。デフォーマの後でノードを挿入すると、アニメーション中にテクスチャがずれて、ほとんどの場合うまくいきません。C:既定はオンです。

    -----------------------------------------

    keepImageRatio (boolean): Trueの場合はイメージ比率が維持されます。

    -----------------------------------------

    mapDirection (string): マッピング方向を指定します。「x」、「y」、「z」では、対応する軸に沿ってマップが投影されます。「c」では、現在のカメラのビュー方向に沿って投影されます。「p」では、現在のカメラがパースビューである場合に投影されます。「b」では、選択したオブジェクトに最適なプレーンに沿って投影されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    perInstance (boolean): 新しいマップがインスタンス単位の場合はTrue、それ以外の場合は共有されます。

    -----------------------------------------

    projectionCenter ([linear, linear, linear]): 投影の中心となるオブジェクト上のポイントです。既定:0.0,0.0,0.0

    -----------------------------------------

    projectionCenterX (linear): 投影の中心のX座標です。

    -----------------------------------------

    projectionCenterY (linear): 投影の中心のY座標です。

    -----------------------------------------

    projectionCenterZ (linear): 投影の中心のZ座標です。

    -----------------------------------------

    projectionHeight (linear): 3D投影軸に相対するマップの高さです。

    -----------------------------------------

    projectionScale ([linear, linear]): 3D投影軸に相対するマップの幅と高さです。既定:1.0,1.0

    -----------------------------------------

    rotate ([angle, angle, angle]): マッピングの回転角度です。既定:0.0,0.0,0.0

    -----------------------------------------

    rotateX (angle): Xマッピング回転角度です。

    -----------------------------------------

    rotateY (angle): Yマッピング回転角度です。

    -----------------------------------------

    rotateZ (angle): Zマッピング回転角度です。

    -----------------------------------------

    rotationAngle (angle): 回転の角度です。角度が正である場合、マップはマッピングされたモデル上で反時計回りに回転します。負の値の場合、マップは時計回りに回転します。既定:0.0

    -----------------------------------------

    smartFit (boolean): Trueの場合はスマートフィットアルゴリズムを使用します。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    projectionHorizontalSweep (linear): 投影によって水平にスイープされる角度です。範囲は[0,360]です。

    -----------------------------------------

    seamCorrect (boolean): マップされたフェース上の継ぎ目の補正を実行するために指定します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyPlane(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,object: bool = False,axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),createUVs: int = 1,height: float = 1.0,subdivisionsHeight: int = 1,subdivisionsWidth: int = 1,subdivisionsX: int = 1,subdivisionsY: int = 1,texture: int = 1,width: float = 1.0) -> None:
    """
    新しいポリゴン プレーンを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します(適切な場合)。

    -----------------------------------------

    axis ([linear, linear, linear]): プレーンの作成に使用するプリミティブ軸を指定します。

    -----------------------------------------

    createUVs (int): UVを作成するかどうかを指定します。0:UVなし1:正規化なし2:正規化してアスペクト比を保持既定:1

    -----------------------------------------

    height (linear): プレーンの高さ。既定:1.0

    -----------------------------------------

    subdivisionsHeight (int): 球の高さに沿ったサブディビジョンです。

    -----------------------------------------

    subdivisionsWidth (int): プレーンの幅に沿ったサブディビジョンです。既定:10

    -----------------------------------------

    subdivisionsX (int): プレーンのX方向のサブディビジョン数を指定します。既定は5です。

    -----------------------------------------

    subdivisionsY (int): プレーンのY方向のサブディビジョン数を指定します。既定は5です。

    -----------------------------------------

    texture (int): 適用するテクスチャのメカニズムを指定します。0=テクスチャなし、1=フィットするようにストレッチ、2=アスペクト比を保持既定:1

    -----------------------------------------

    width (linear): プレーンオブジェクトの幅。既定:1.0

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyPlatonicSolid(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,constructionHistory: bool = False,createUVs: int = 1,name: str = "",nodeState: int = 1,object: bool = False,radius: float = 1.0,sideLength: float = 1.0,solidType: int = 1,texture: int = 1) -> None:
    """
    polyPlatonicSolid コマンドにより、新しいポリゴン正多面体が作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): 正多面体の作成に使用するプリミティブ軸を指定します。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createUVs (int): 作成時に、特定のUV構造を選択することができます。有効な値は、0、1、2、3、4です。0にすると、UVは生成されません(適用するテクスチャがない場合)。1にすると、UVは正規化されずにオブジェクト全体に作成されます。ソリッドはラップ解除され、テクスチャはディストーションせずに適用されます。ラップ解除されたソリッドでは、共有エッジに共有UVが含まれます。2にすると、ソリッドのフェースごとにUVが作成されます。3にすると、UVは正規化されます。これにより、これにより、UとVの方向は個別に正規化されるため、結果としてテクスチャのディストーションが発生します。4にすると、テクスチャが適用時に歪まないようにUVを作成します。UV範囲外にあるテクスチャは切り捨てます(テクスチャを歪めずに押し込むことはできないため)。これらのオプションをよりよく理解するには、テクスチャビューウィンドウを開いてください。C:既定は4です。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します(適切な場合)。

    -----------------------------------------

    radius (linear): 正多面体の半径を指定します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    sideLength (linear): 正多面体のサイドの長さを指定します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    solidType (int): このフラグにより、メッシュの作成に使用される特定の正多面体を選択できるようになります。有効な値は0、1、2、3です。0は、12面体を作成します。1は、20面体を作成します。2は、8面体を作成します。3は、4面体を作成します。C:既定は0です。

    -----------------------------------------

    texture (int): このフラグはサポートしていません。次のリリースで除去されます。代わりに-cuv/createUVsフラグを使用してください。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyPoke(caching: bool = False,constructionHistory: bool = False,localTranslate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),localTranslateX: float = 1.0,localTranslateY: float = 1.0,localTranslateZ: float = 1.0,name: str = "",nodeState: int = 1,translate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),translateX: float = 1.0,translateY: float = 1.0,translateZ: float = 1.0,worldSpace: bool = False) -> None:
    """
    選択したフェースの中心に新しい頂点を作成し、フェースの他の頂点と接続します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    localTranslate ([linear, linear, linear]): 新しい頂点をローカルフェース座標で移動します。

    -----------------------------------------

    localTranslateX (linear): 新しい頂点をローカルフェースのX座標に沿って移動します。

    -----------------------------------------

    localTranslateY (linear): 新しい頂点をローカルフェースのY座標に沿って移動します。

    -----------------------------------------

    localTranslateZ (linear): 新しい頂点をローカルフェースのZ座標に沿って移動します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    translate ([linear, linear, linear]): 新しい頂点をワールド空間で移動します。

    -----------------------------------------

    translateX (linear): 新しい頂点をワールド空間のX座標に沿って移動します。

    -----------------------------------------

    translateY (linear): 新しい頂点をワールド空間のY座標に沿って移動します。

    -----------------------------------------

    translateZ (linear): 新しい頂点をワールド空間のZ座標に沿って移動します。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyPrimitive(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,object: bool = False,axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),createUVs: int = 1,polyType: int = 1,radius: float = 1.0,sideLength: float = 1.0,texture: int = 1) -> None:
    """
    ポリゴン プリミティブを作成します



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します(適切な場合)。

    -----------------------------------------

    axis ([linear, linear, linear]): プリミティブポリゴンの作成に使用するプリミティブ軸を指定します。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    createUVs (int): UVを作成するかどうかを指定します。0:UVなし1:正規化なし2:各フェースを別々に正規化3:集合的に正規化4:集合的に正規化してアスペクト比を保持

    -----------------------------------------

    polyType (int): このフラグにより、メッシュの作成に使用される特定のプリミティブポリゴンを選択できるようになります。有効な値は0です。0はサッカーボールが作成されることを表します。C:既定は0です。

    -----------------------------------------

    radius (linear): プリミティブポリゴンの半径を指定します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    sideLength (linear): プリミティブポリゴンのサイドの長さを指定します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    texture (int): 適用するテクスチャのメカニズムを指定します。0=テクスチャなし、1=オブジェクト、2=フェース。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyPrism(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,constructionHistory: bool = False,createUVs: int = 1,length: float = 1.0,name: str = "",nodeState: int = 1,numberOfSides: int = 1,numderOfSides: int = 1,object: bool = False,sideLength: float = 1.0,subdivisionsCaps: int = 1,subdivisionsHeight: int = 1,texture: int = 1) -> None:
    """
    prism コマンドは、新しいポリゴン プリズムを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): プリズムの作成に使用するプリミティブ軸を指定します。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createUVs (int): プリミティブを作成するときに、特定のUV構造を選択することができます。有効な値は、0、1、2、または3です。0にすると、UVは生成されません(適用するテクスチャがない場合)。1にすると、UVは正規化されずにオブジェクト全体に作成されます。プリミティブはラップ解除され、テクスチャはディストーションなしで適用されます。ラップ解除されたプリミティブでは、共有エッジに共有UVが含まれます。2にすると、UVは正規化されます。これにより、これにより、UとVの方向は個別に正規化されるため、結果としてテクスチャのディストーションが発生します。3にすると、テクスチャが適用時に歪まないようにUVを作成します。UV範囲外にあるテクスチャは切り捨てます(テクスチャを歪めずに押し込むことはできないため)。これらのオプションをよりよく理解するには、テクスチャビューウィンドウを開いてください。C:既定は2です。

    -----------------------------------------

    length (linear): プリズムの長さを指定します。C:既定は2.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    numberOfSides (int): プリズムのサイドの数を指定します。C:既定は3です。Q:照会するとintを返します。

    -----------------------------------------

    numderOfSides (int): プリズムのサイドの数を指定します。C:既定は3です。Q:照会するとintを返します。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します(適切な場合)。

    -----------------------------------------

    sideLength (linear): プリズムのエッジの長さを指定します。C:既定は2.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    subdivisionsCaps (int): プリズムのキャップ上のサブディビジョンを指定します。C:既定は2です。Q:照会するとintを返します。

    -----------------------------------------

    subdivisionsHeight (int): プリズムの高さに沿ったサブディビジョンを指定します。C:既定は1です。Q:照会するとintを返します。

    -----------------------------------------

    texture (int): このフラグはサポートしていません。次のリリースで除去されます。代わりに-cuv/createUVsフラグを使用してください。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyProjectCurve(addUnderTransform: bool = False,caching: bool = False,direction: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),directionX: float = 1.0,directionY: float = 1.0,directionZ: float = 1.0,nodeState: int = 1,tolerance: float = 1.0) -> None:
    """
    polyProjectCurve コマンドは、選択したカーブを選択したポリゴン メッシュに投影することによりカーブを作成します。投影方向は、-direction/-d フラグを使って方向ベクトルを指定しない限り、現在選択しているビューの方向に一致します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addUnderTransform (boolean): 結果のカーブがソーストランスフォームの下に追加される必要がある場合は、trueに設定します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    direction ([linear, linear, linear]): 投影の方向です。

    -----------------------------------------

    directionX (linear): 投影のX方向です。

    -----------------------------------------

    directionY (linear): 投影のY方向です。

    -----------------------------------------

    directionZ (linear): 投影のZ方向です。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    tolerance (linear): 適合させるときの許容値。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyProjection(constructionHistory: bool = False,createNewMap: bool = False,imageCenterX: float = 1.0,imageCenterY: float = 1.0,imageScaleU: float = 1.0,imageScaleV: float = 1.0,insertBeforeDeformers: bool = False,keepImageRatio: bool = False,mapDirection: str = "",projectionCenterX: float = 1.0,projectionCenterY: float = 1.0,projectionCenterZ: float = 1.0,projectionScaleU: float = 1.0,projectionScaleV: float = 1.0,rotateX: float = 1.0,rotateY: float = 1.0,rotateZ: float = 1.0,rotationAngle: float = 1.0,seamCorrect: bool = False,smartFit: bool = False,type: str = "",uvSetName: str = "") -> None:
    """
    選択したポリゴン フェース上にマッピングを作成します。コンストラクション ヒストリの作成時に、新しいノードの名前を返します。それ以外の場合、このコマンドは何も返しません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。

    -----------------------------------------

    createNewMap (boolean): マップが存在しない場合は、新しいマップを作成します。

    -----------------------------------------

    imageCenterX (float): 投影したUVのX(U)方向移動を指定します。既定は0.5です。

    -----------------------------------------

    imageCenterY (float): 投影したUVのY(V)方向移動を指定します。既定は0.5です。

    -----------------------------------------

    imageScaleU (float): 投影したUVのUスケール係数を指定します。既定は1です。

    -----------------------------------------

    imageScaleV (float): 投影したUVのVスケール係数を指定します。既定は1です。

    -----------------------------------------

    insertBeforeDeformers (boolean): デフォーマノードをシェイプに適用する前に投影ノードを挿入するか、適用後に挿入するかを指定します。デフォーマの後でノードを挿入すると、アニメーション中にテクスチャがずれて、ほとんどの場合うまくいきません。既定はオンです。

    -----------------------------------------

    keepImageRatio (boolean): 平面投影のXYスケーリングを均一にするかどうかを指定します。このフラグを設定すると、テクスチャのアスペクト比が保持されます。このフラグは、円柱投影と球投影で無視されます。

    -----------------------------------------

    mapDirection (string): 投影の方向を指定します。このフラグを指定すると、投影配置の値(pcx、pcy、pcz、rx、ry、rz、psu、psv)を内部で計算します。このフラグと投影値の両方を指定した場合は、投影値が無視されます。有効な値は次のとおりです。X:X軸に沿って投影する、Y:Y軸に沿って投影する、Z:Z軸に沿って投影する、bestPlane:オブジェクトに最もフィットするプレーンに投影する、camera:ビュー方向に沿って投影する、perspective:現在のカメラがパースビューの場合、パースビューに投影する、既定はbestPlaneです。

    -----------------------------------------

    projectionCenterX (float): 投影マニピュレータの中心のX座標を指定します。

    -----------------------------------------

    projectionCenterY (float): 投影マニピュレータの中心のY座標を指定します。

    -----------------------------------------

    projectionCenterZ (float): 投影マニピュレータの中心のZ座標を指定します。

    -----------------------------------------

    projectionScaleU (float): 投影マニピュレータのUスケールコンポーネントを指定します。

    -----------------------------------------

    projectionScaleV (float): 投影マニピュレータのVスケールコンポーネントを指定します。

    -----------------------------------------

    rotateX (float): 投影マニピュレータのX軸回転を指定します。

    -----------------------------------------

    rotateY (float): 投影マニピュレータのY軸回転を指定します。

    -----------------------------------------

    rotateZ (float): 投影マニピュレータのZ軸回転を指定します。

    -----------------------------------------

    rotationAngle (float): UV空間で投影したUVの回転を指定します。既定は0です。

    -----------------------------------------

    seamCorrect (boolean): 球投影と円柱投影の継ぎ目を補正するかどうかを指定します。平面投影を指定した場合、このフラグは無視されます。

    -----------------------------------------

    smartFit (boolean): 投影マニピュレータをオブジェクトに合わせて配置するかどうかを指定します。円柱投影と球投影で使用します。平面投影をスマートフィットする場合は、オプションが複数あるので、mapDirectionフラグを使用する必要があります。

    -----------------------------------------

    type (string): 実行するマッピングのタイプを指定します。文字列の有効値は、平面(planar)、円柱(cylindrical)、球面(spherical)です。既定は平面(planar)です。

    -----------------------------------------

    uvSetName (string): 作業するUVセットの名前を指定します。

    -----------------------------------------

    Return Value:
    None: string作成したノードの名前です
    """
    pass

    
def polyPyramid(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,constructionHistory: bool = False,createUVs: int = 1,name: str = "",nodeState: int = 1,numberOfSides: int = 1,numderOfSides: int = 1,object: bool = False,sideLength: float = 1.0,subdivisionsCaps: int = 1,subdivisionsHeight: int = 1,texture: bool = False) -> None:
    """
    pyramid コマンドは、新しいポリゴン ピラミッドを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): ピラミッドの作成に使用するプリミティブ軸を指定します。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createUVs (int): UVを作成するかどうかを指定します。0:UVなし1:正規化なし2:正規化3:正規化してアスペクト比を保持既定:2

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    numberOfSides (int): ピラミッドの側面の数です。既定:4

    -----------------------------------------

    numderOfSides (int): ピラミッドの側面の数です。既定:4

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します(適切な場合)。

    -----------------------------------------

    sideLength (linear): ピラミッドの辺の長さです。既定:1.0

    -----------------------------------------

    subdivisionsCaps (int): ボトムキャップのサブディビジョンです。既定:0

    -----------------------------------------

    subdivisionsHeight (int): 高さに沿ったサブディビジョンです。既定:1

    -----------------------------------------

    texture (boolean): テクスチャの適用のオン/オフを切り替えます。既定:true

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyQuad(angle: float = 1.0,caching: bool = False,constructionHistory: bool = False,keepGroupBorder: bool = False,keepHardEdges: bool = False,keepTextureBorders: bool = False,name: str = "",nodeState: int = 1,worldSpace: bool = False) -> None:
    """
    ポリゴン オブジェクトで選択した三角形をマージし、4 辺から構成されるフェースを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    angle (angle): 角度のしきい値。これより大きいと、2つの三角形はマージされません。C:既定は30度です。範囲は[0.0,180.0]です。Q:照会するとfloatを返します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    keepGroupBorder (boolean): ファセットのグループ境界を維持します。オンの場合は、選択したファセットの境界がそのまま維持されます。それ以外の場合は、選択したファセットの境界を変更することが可能になります。C:既定はオンです。Q:照会するとintを返します。

    -----------------------------------------

    keepHardEdges (boolean): ハードエッジを維持します。オンの場合は、選択したフェースのハードエッジはそのまま維持されます。それ例外の場合は、2つの三角形の間にあるハードエッジを削除することが可能になります。C:既定はオンです。Q:照会するとintを返します。

    -----------------------------------------

    keepTextureBorders (boolean): テクスチャの境界を維持します。オンの場合は、選択したテクスチャマップの境界がそのまま維持されます。それ以外の場合は、テクスチャマップの境界を変更することが可能になります。C:既定はオンです。Q:照会するとintを返します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyQueryBlindData(associationType: str = "",binaryData: str = "",booleanData: bool = False,doubleData: float = 1.0,intData: int = 1,longDataName: str = "",maxValue: float = 1.0,minValue: float = 1.0,shortDataName: str = "",showComp: bool = False,stringData: str = "",subString: str = "",typeId: int = 1) -> None:
    """
    特定のポリゴン コンポーネントにコネクトされたブラインドデータを照会します。つまりこのコマンドでは、次を指定する必要があります。- 照会するセレクション リスト。オプションは以下のとおりです。- 照会するデータの typeId - associationType - longDataName または shortDataName - 指定する実データ- showComponent フラグオブジェクト レベルのブラインド データは showComponent フラグを無視するので注意してください。コンポーネントを選択しない場合、関係フラグは無視され、オブジェクト レベルのデータが照会されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    associationType (string): 照会するブラインドデータノードの一部であるデータ型を指定します。使用可能な関連付けは、「object」(任意のオブジェクト)、そして「vertex」、「edge」、「face」(メッシュオブジェクト)です。

    -----------------------------------------

    binaryData (string): 検索するバイナリ文字列値を指定します。

    -----------------------------------------

    booleanData (boolean): 検索する文字列値を指定します。

    -----------------------------------------

    doubleData (float): 検索するdouble/float値を指定します。

    -----------------------------------------

    intData (int): 検索する整数値を指定します。

    -----------------------------------------

    longDataName (string): コマンドが照会するデータのロングネームを指定します。

    -----------------------------------------

    maxValue (float): 検索する最大値を指定します。このオプションは、ブラインドデータのfloat型、double型、int型を照会します。

    -----------------------------------------

    minValue (float): 検索する最低値を指定します。このオプションは、ブラインドデータのfloat型、double型、int型を照会します。

    -----------------------------------------

    shortDataName (string): コマンドが照会するデータのショートネームを指定します。

    -----------------------------------------

    showComp (boolean): showComponentオプションは、object。[component].attributeという形式の名前を実際値の前に出力するかどうかを制御します。showComponentオプションを使用すると、int、float、doubleなどのブラインドデータのうち1つの型のみを返すという制限がなくなり、すべての戻り値はstringになります。対象がコンポーネントではなくオブジェクトである場合でも、このオプションはすべてのアトリビュート名を出力します。

    -----------------------------------------

    stringData (string): 検索する文字列値を指定します。

    -----------------------------------------

    subString (string): 文字列型のブラインドデータでチェックする従属文字列を指定します。従属文字列が見つかると、照会は正常に終了します。文字列型以外のブラインドデータ要素は検索しません。

    -----------------------------------------

    typeId (int): 照会するブラインドデータ型のタイプIDを指定します。タイプIDを指定しない場合、照会に一致するすべてのコンポーネントが出力されます。ShowComponentsオプションを使用すると、検索した要素のタイプIDを出力します。フォーマットは「object.component.attribute::typeId」です。タイプIDを指定すると、「::typeId」の部分はShowComponentsオプションで出力されません。

    -----------------------------------------

    Return Value:
    None: stringブラインド データ
    """
    pass

    
def polyReduce(caching: bool = False,cachingReduce: bool = False,colorWeights: float = 1.0,compactness: float = 1.0,constructionHistory: bool = False,geomWeights: float = 1.0,invertVertexWeights: bool = False,keepBorder: bool = False,keepBorderWeight: float = 1.0,keepColorBorder: bool = False,keepColorBorderWeight: float = 1.0,keepCreaseEdge: bool = False,keepCreaseEdgeWeight: float = 1.0,keepFaceGroupBorder: bool = False,keepFaceGroupBorderWeight: float = 1.0,keepHardEdge: bool = False,keepHardEdgeWeight: float = 1.0,keepMapBorder: bool = False,keepMapBorderWeight: float = 1.0,keepOriginalVertices: bool = False,keepQuadsWeight: float = 1.0,name: str = "",nodeState: int = 1,percentage: float = 1.0,preserveLocation: bool = False,preserveTopology: bool = False,replaceOriginal: bool = False,sharpness: float = 1.0,symmetryPlaneW: float = 1.0,symmetryPlaneX: float = 1.0,symmetryPlaneY: float = 1.0,symmetryPlaneZ: float = 1.0,symmetryTolerance: float = 1.0,termination: int = 1,triangleCount: int = 1,triangulate: bool = False,useVirtualSymmetry: int = 1,uvWeights: float = 1.0,version: int = 1,vertexCount: int = 1,vertexMapName: str = "",vertexWeightCoefficient: float = 1.0,weightCoefficient: float = 1.0) -> None:
    """
    メッシュの全体的な形状を保持しながら、ジオメトリを削減することによりポリゴン オブジェクトを簡略化します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    cachingReduce (boolean): メモリを使用して速度を上げるために、削減の中間状態をキャッシュします。新しいアルゴリズムを使用するときは、キャッシュを有効にすることをお勧めします(-version1)。ただし、古いアルゴリズムを使用するときは、安定性の問題が発生する可能性があるので、キャッシュを使用しないことをお勧めします。C:既定はfalseです。Q:照会するとbooleanを返します。

    -----------------------------------------

    colorWeights (float): このフラグは古いアルゴリズムを使用するときにのみ適用され、下位互換性のために提供されます。削減アルゴリズムで頂点のカラーをどの程度考慮するかを示します。ウェイトが大きいほど、削減で頂点のカラーを保持しようとする傾向が強くなります。C:既定は0です。Q:照会するとfloatを返します。

    -----------------------------------------

    compactness (float): このフラグは古いアルゴリズムを使用するときにのみ適用され、下位互換性のために提供されます。生成される三角形のコンパクトさの許容値です。値0は、デシメーションの間にすべての三角形を受け入れます。0に近い値は、同一直線上にエッジのある三角形の除去を試みます(ゼロ領域の三角形)。1に近い値は、厳密に(同じ長さの)等辺ではない三角形の除去を試みます。1.0に近いほど、計算量が増えます。Q:照会すると、floatを返します。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    geomWeights (float): このフラグは古いアルゴリズムを使用するときにのみ適用され、下位互換性のために提供されます。削減アルゴリズムで頂点の位置をどの程度配慮するかを示します。ウェイトが大きいほど、削減ではジオメトリを保持しようとする傾向が強くなります。C:既定は1です。Q:照会するとfloatを返します。

    -----------------------------------------

    invertVertexWeights (boolean): このフラグは、ウェイトマップ値の解釈方法を制御します。trueの場合、頂点ウェイト1.0は頂点が削減されない可能性があることを意味します。falseの場合、頂点ウェイト0.0は頂点が削減されない可能性があることを意味します。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値はtrueです。Q:照会するとbooleanを返します。

    -----------------------------------------

    keepBorder (boolean): trueの場合、削減時にジオメトリ境界および選択領域の境界の保持を試みます。C:既定はtrueです。Q:照会するとbooleanを返します。

    -----------------------------------------

    keepBorderWeight (float): keepBorderがオンの場合、このフラグは境界線に割り当てるウェイトを指定します。この値を0に設定すると境界の保持が無効になり、1に設定すると、隣接するメッシュのマッチングに役に立つすべての境界頂点が厳密に保持されます。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値は0.5です。Q:照会するとfloatを返します。

    -----------------------------------------

    keepColorBorder (boolean): trueの場合、削減時にカラー境界の保持を試みます。これらはカラーIDに従って決定されます。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値はtrueです。Q:照会するとbooleanを返します。

    -----------------------------------------

    keepColorBorderWeight (float): keepColorBorderがオンの場合、このフラグはカラー境界に割り当てるウェイトを指定します。この値を0に設定するとカラー境界の保持が無効になり、1に設定するとすべてのカラー境界が厳密に保持されます。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値は0.5です。Q:照会するとfloatを返します。

    -----------------------------------------

    keepCreaseEdge (boolean): trueの場合、削減時に折り目エッジの保持を試みます。C:既定はtrueです。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値はtrueです。Q:照会するとbooleanを返します。

    -----------------------------------------

    keepCreaseEdgeWeight (float): keepCreaseEdgeがオンの場合、このフラグは折り目エッジに割り当てるウェイトを指定します。この値を0に設定すると折り目エッジの保持が無効になり、1に設定するとすべての折り目エッジが厳密に保持されます。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値は0.5です。Q:照会するとfloatを返します。

    -----------------------------------------

    keepFaceGroupBorder (boolean): trueの場合、削減ではフェースグループの境界の保持が試みられます。これは、主としてマテリアル割り当ての定義に使用されます。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値はtrueです。Q:照会するとbooleanを返します。

    -----------------------------------------

    keepFaceGroupBorderWeight (float): keepFaceGroupBorderがオンの場合、このフラグはマテリアル境界に割り当てるウェイトを指定します。この値を0に設定するとグループ境界の保持が無効になり、1に設定するとすべてのグループ境界が厳密に保持されます。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値は0.5です。Q:照会するとfloatを返します。

    -----------------------------------------

    keepHardEdge (boolean): trueの場合、削減時にハードエッジの保持を試みます。C:既定はtrueです。Q:照会するとbooleanを返します。

    -----------------------------------------

    keepHardEdgeWeight (float): keepHardEdgeがオンの場合、このフラグはハードエッジに割り当てるウェイトを指定します。この値を0に設定するとハードエッジの保持が無効になり、1に設定するとすべてのハードエッジが厳密に保持されます。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値は0.5です。Q:照会するとfloatを返します。

    -----------------------------------------

    keepMapBorder (boolean): trueの場合、削減時にUV境界の保持を試みます。UV境界は、エッジのどちらかのサイドにあるフェースがUVのIDを共有していない場合に存在します。C:既定はtrueです。Q:照会するとbooleanを返します。

    -----------------------------------------

    keepMapBorderWeight (float): keepMapBorderがオンの場合、このフラグはUVマップ境界に割り当てるウェイトを指定します。この値を0に設定するとUVマップ境界の保持が無効になり、1に設定するとすべてのUV境界が厳密に保持されます。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値は0.5です。Q:照会するとfloatを返します。

    -----------------------------------------

    keepOriginalVertices (boolean): このフラグは古いアルゴリズムを使用するときにのみ適用され、下位互換性のために提供されます。trueの場合、頂点は元の位置を保持しようとし、最適なシェイプになるように再配置されません。注:新しいアルゴリズムでは、頂点は常に元の正確な位置を維持します(ただし、IDは変わります)。C:既定値はfalseです。Q:照会するとbooleanを返します。

    -----------------------------------------

    keepQuadsWeight (float): このフラグは、削減の間に四角形の面の保持をどの程度考慮するかを制御します。ウェイトが大きいほど、削減では四角形の面を保持しようとする傾向が強くなり、三角形が作成されにくくなります。バージョンフラグを1に設定し(-version1)、keepQuadsWeightフラグを1.0に設定した場合、四角形の保持に優れた特別な四角削減アルゴリズムが使用されます。ただし、この特別な四角削減アルゴリズムはシンメトリをサポートしないので、keepQuadsWeightフラグを1.0に設定したときはシンメトリのフラグは無視されます。C:既定値は0です。Q:照会するとfloatを返します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    percentage (float): このフラグは、削減中にオリジナルのメッシュのパーセンテージとして除去する頂点の数を指定します。このフラグは、終了フラグが0に設定されている場合、または古いアルゴリズムを使用する場合にのみ適用されます。C:既定は0です。100にすると可能性のあるすべての頂点が除去され、0にすると何も除去されません。Q:照会するとfloatを返します。

    -----------------------------------------

    preserveLocation (boolean): このフラグは、元のジオメトリが保持された場合、新しいジオメトリが同じ場所に配置されることを保証します。C:既定はfalseです。

    -----------------------------------------

    preserveTopology (boolean): このフラグは、削減の間にトポロジタイプが保持されることを保証します。具体的には、入力が多様の場合は、出力も多様になります。また、このオプションは、メッシュ内の穴が閉じるのを防ぎます。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値はtrueです。Q:照会するとbooleanを返します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します(一部使用できないコマンドがあります)。注:このフラグは、「Reduce」メニュー項目で使用することを前提にしています。コマンドラインから、polyReduce-rpo0を実行すると、シェーダ情報がオリジナルのメッシュから結果イメージにコピーされません。

    -----------------------------------------

    sharpness (float): シャープネスは、小さいシャープな詳細の保持と大きいシェイプの保持とのバランスを制御します。値が小さいほど、オブジェクトの全体的なシェイプに対して相対的に小さい詳細が集約される可能性が高くなります。値が大きいほど、詳細が保持されます。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値は0です。Q:照会するとfloatを返します。

    -----------------------------------------

    symmetryPlaneW (float): シンメトリプレーンのW値を指定します。このフラグは、新しいアルゴリズムを使用し(-version1)、useVirtualSymmetryフラグが2に設定されている場合にのみ適用されます。C:既定は0です。Q:照会するとfloatを返します。

    -----------------------------------------

    symmetryPlaneX (float): シンメトリプレーンのX値を指定します。このフラグは、新しいアルゴリズムを使用し(-version1)、useVirtualSymmetryフラグが2に設定されている場合にのみ適用されます。C:既定は0です。Q:照会するとfloatを返します。

    -----------------------------------------

    symmetryPlaneY (float): シンメトリプレーンのY値を指定します。このフラグは、新しいアルゴリズムを使用し(-version1)、useVirtualSymmetryフラグが2に設定されている場合にのみ適用されます。C:既定は0です。Q:照会するとfloatを返します。

    -----------------------------------------

    symmetryPlaneZ (float): シンメトリプレーンのZ値を指定します。このフラグは、新しいアルゴリズムを使用し(-version1)、useVirtualSymmetryフラグが2に設定されている場合にのみ適用されます。C:既定は0です。Q:照会するとfloatを返します。

    -----------------------------------------

    symmetryTolerance (float): シンメトリを適用するときに使用する許容値です。メッシュの各頂点について、正確なシンメトリポイントを探した後、許容値の距離以内で正確なシンメトリに最も近い頂点を探します。値を大きくすると不正確なシンメトリになる可能性があり、値を小さくするとシンメトリが検出されない可能性があります。値は、オブジェクト空間での距離です。このフラグは、新しいアルゴリズムを使用し(-version1)、useVirtualSymmetryフラグが0に設定されていない場合にのみ適用されます。C:既定は0です。Q:照会するとfloatを返します。

    -----------------------------------------

    termination (int): このフラグは、メッシュを削減するときに使用する終端条件を指定します。このフラグは、新しいアルゴリズムにのみ適用されます。(-version1)0:パーセンテージ1:頂点の数2:三角形の数C:既定値は0です。Q:照会するとintegerを返します。

    -----------------------------------------

    triangleCount (int): このフラグは、削減の後で保持する三角形のターゲット数を指定します。四角や機能の保持などの他の要素が優先され、実際の三角形の数がこれとは異なるものになる場合があります。このフラグは、新しいアルゴリズムを使用し(-version1)、終了フラグが2に設定されている場合にのみ適用されます。C:既定は0です。Q:照会するとintegerを返します。

    -----------------------------------------

    triangulate (boolean): このフラグは古いアルゴリズムを使用するときにのみ適用され、下位互換性のために提供されます。このアトリビュートは、削減を行う前に、ジオメトリまたは選択したフェースを三角化するかどうかを指定します。C:既定はtrueです。Q:照会するとbooleanを返します。

    -----------------------------------------

    useVirtualSymmetry (int): このフラグは、削減の間にシンメトリを保持するかどうかを制御します。このフラグは、新しいアルゴリズムを使用し(-version1)、keepQuadsWeightフラグが1.0未満の場合にのみ適用されます。0:シンメトリを保持しません1:自動。削減の間に適切なシンメトリの検出が試みられます。2:プレーン。削減の間に使用するシンメトリプレーンを指定します。C:既定は0です。Q:照会するとintegerを返します。

    -----------------------------------------

    uvWeights (float): このフラグは古いアルゴリズムを使用するときにのみ適用され、下位互換性のために提供されます。削減アルゴリズムにおいてUVの位置をどの程度考慮するかを示します。ウェイトが大きいほど、削減でUV位置を保持しようとする傾向が強くなります。C:既定は0です。Q:照会するとfloatを返します。

    -----------------------------------------

    version (int): 使用するポリゴンの削減アルゴリズムのバージョンです。0:Maya2013以前で使用されていた古いアルゴリズム(下位互換用)1:Maya2014以降で使用される、Softimageから派生した新しいアルゴリズム既定値は下位互換性を保つために0ですが、最善の結果を得るには、メッシュの詳細の保持に優れた新しいアルゴリズムの使用をお勧めします。一部のフラグは特定のアルゴリズムにのみ適用され、これについては各フラグで説明されています。C:下位互換性を保つため、既定値は0です。Q:照会するとintegerを返します。

    -----------------------------------------

    vertexCount (int): このフラグは、削減の後で保持する頂点のターゲット数を指定します。四角や機能の保持などの他の要素が優先され、実際の頂点の数がこれとは異なるものになる場合があります。このフラグは、新しいアルゴリズムを使用し(-version1)、終了フラグが1に設定されている場合にのみ適用されます。C:既定は0です。Q:照会するとintegerを返します。

    -----------------------------------------

    vertexMapName (string): 出力メッシュに追加される、出力メッシュの頂点から入力メッシュの頂点へのマッピングを格納するカラーセットの名前です。カラーセットはRGBです。出力頂点にマップする元の頂点IDは頂点65536*r+gであり、rおよびgは頂点での赤と緑のチャネルです。青チャネルは、常に0になります。出力メッシュ内の各頂点には共有されるカラーがあります。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)Q:照会するとstringを返します。

    -----------------------------------------

    vertexWeightCoefficient (float): このフラグは、ウェイトマップの各値に乗算する定数値を指定します。値0はウェイトマップをオフにします。このフラグは、新しいアルゴリズムを使用するときにのみ適用されます。(-version1)C:既定値は1です。Q:照会するとfloatを返します。

    -----------------------------------------

    weightCoefficient (float): このフラグは古いアルゴリズムを使用するときにのみ適用され、下位互換性のために提供されます。削減を実行するときに、各頂点のウェイトにこの係数が乗算されます。通常、この値を編集する必要はありません。ウェイト付きの削減をより細かく制御できます。バージョンフラグが1に設定されている場合、このアトリビュートは新しいアルゴリズムのvertexWeightCoefficientで置き換えられます。C:既定値は10000です。Q:照会するとfloatを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyRemesh(caching: bool = False,collapseThreshold: float = 1.0,constructionHistory: bool = False,interpolationType: int = 1,maxEdgeLength: float = 1.0,name: str = "",nodeState: int = 1,smoothStrength: float = 1.0,tessellateBorders: bool = False,useRelativeValues: bool = False) -> None:
    """
    三角化し、エッジの分割と折り畳みを行って指定されたメッシュを再メッシュします。指定された細分化しきい値より長いエッジは分割され、削減しきい値よりも短いエッジは折り畳まれます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    collapseThreshold (float): refineThresholdのパーセンテージです。このパーセンテージよりも短いエッジは、単一頂点に削減されます。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    interpolationType (int): 新しい頂点の補間に使用されるアルゴリズム

    -----------------------------------------

    maxEdgeLength (float): この値よりも長い三角形のエッジが2つに分割されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    smoothStrength (float): 再メッシュ後に頂点に適用されるスムージングの量です。

    -----------------------------------------

    tessellateBorders (boolean): 選択した領域の境界の再メッシュを許可するかどうかを指定します。

    -----------------------------------------

    useRelativeValues (boolean): リファインのしきい値が、入力メッシュのエッジの長さの平均を基準にしているかを指定します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySelect(add: bool = False,addFirst: bool = False,asSelectString: bool = False,deselect: bool = False,edgeBorder: int = 1,edgeBorderPath: Tuple[int, int] = tuple(1, 1),edgeBorderPattern: Tuple[int, int] = tuple(1, 1),edgeLoop: int = 1,edgeLoopOrBorder: int = 1,edgeLoopOrBorderPattern: Tuple[int, int] = tuple(1, 1),edgeLoopPath: Tuple[int, int] = tuple(1, 1),edgeLoopPattern: Tuple[int, int] = tuple(1, 1),edgeRing: int = 1,edgeRingPath: Tuple[int, int] = tuple(1, 1),edgeRingPattern: Tuple[int, int] = tuple(1, 1),edgeUVLoopOrBorder: int = 1,everyN: int = 1,extendToShell: int = 1,noSelection: bool = False,replace: bool = False,shortestEdgePath: Tuple[int, int] = tuple(1, 1),shortestEdgePathUV: Tuple[int, int] = tuple(1, 1),shortestFacePath: Tuple[int, int] = tuple(1, 1),toggle: bool = False) -> None:
    """
    さまざまなタイプのポリゴン コンポーネントを選択します。戻り値は、int 配列であり、選択した順番にコンポーネント ID を含みます。特定の種類の選択が折り返し点に到達することは、開始 ID が 2 度(開始時と終了時)表示されることで示されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    add (boolean): アクティブリストの既存の項目を除去することなく、指定した項目をアクティブリストに追加することを示します。

    -----------------------------------------

    addFirst (boolean): アクティブリストから既存の項目を除去することなく、指定した項目をアクティブリストの先頭に追加することを示します。

    -----------------------------------------

    asSelectString (boolean): 戻り値のタイプを、整数配列から、選択文字列として使用できる文字配列に変更します。

    -----------------------------------------

    deselect (boolean): 指定した項目がアクティブリストにある場合、それらの項目をアクティブリストから除去することを示します。

    -----------------------------------------

    edgeBorder (uint): 所定のエッジで開始される、接続されたすべての境界エッジを選択します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    edgeBorderPath ([int, int]): 同じ境界に2つのエッジを与えると、両者の間のパスにある境界上のエッジが選択されます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    edgeBorderPattern ([int, int]): 同一の境界に2つのエッジがあることを前提に、指定したエッジの間にエッジがいくつあるかがチェックされ、その後、境界線の周囲でこの選択パターンを継続します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    edgeLoop (uint): 所定のエッジで開始されるエッジループを選択します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    edgeLoopOrBorder (uint): エッジが境界上にあるかどうかに応じて、指定したエッジから始まるエッジループ、または接続された境界線すべてが選択されます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    edgeLoopOrBorderPattern ([int, int]): 2つのエッジが同じエッジループ、または同じエッジ境界にあることを前提に、指定したエッジの間にエッジがいくつあるかがチェックされ、その後、エッジループ、またはエッジ境界の周囲でこの選択パターンを継続します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    edgeLoopPath ([int, int]): 同じエッジループに2つのエッジを与えると、ループ上で両者間の最短のパスが選択されます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    edgeLoopPattern ([int, int]): 同一のループに2つのエッジがあることを前提に、指定したエッジの間にエッジがいくつあるかがチェックされ、その後、ループの周囲でこの選択パターンを継続します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    edgeRing (uint): 所定のエッジで開始されるエッジリングを選択します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    edgeRingPath ([int, int]): 同じエッジリングに2つのエッジを与えると、リング上で両者間の最短のパスが選択されます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    edgeRingPattern ([int, int]): 同一のエッジリングに2つのエッジがあることを前提に、指定したエッジの間にエッジがいくつあるかがチェックされ、その後、エッジリングの周囲でこの選択パターンを継続します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    edgeUVLoopOrBorder (uint): エッジループまたは境界を選択し、UV境界で終了します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    everyN (uint): ストライド上の要素の数です。1未満の場合は1が使用されます。つまり各要素です。2の場合は2つおきになります。

    -----------------------------------------

    extendToShell (uint): フェースIDが指定されているとして、ポリゴンシェルを選択します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    noSelection (boolean): このフラグを使用すると、選択項目がまったく変更されません。

    -----------------------------------------

    replace (boolean): アクティブリストの既存の項目を指定した項目で置き換えることを示します。

    -----------------------------------------

    shortestEdgePath ([int, int]): 3Dオブジェクト空間に頂点が2つあることを前提にして、これらの頂点の間の最短パスを選択します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    shortestEdgePathUV ([int, int]): 2Dテクスチャ空間にUVが2つあることを前提にして、これらのUVの間の最短パスを選択します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    shortestFacePath ([int, int]): 3Dオブジェクト空間にフェースが2つあることを前提にして、これらのフェースの間の最短パスを選択します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    toggle (boolean): 与えられたリストの項目のうち、アクティブリストにある項目をアクティブリストから除去し、アクティブリストにない項目をアクティブリストに追加することを示します。

    -----------------------------------------

    Return Value:
    None: int[]選択したコンポーネントのリスト照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySelectConstraint(angle: int = 1,anglePropagation: bool = False,angleTolerance: float = 1.0,anglebound: Tuple[float, float] = tuple(1.0, 1.0),border: bool = False,borderPropagation: bool = False,convexity: int = 1,crease: bool = False,disable: bool = False,dist: int = 1,distaxis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),distbound: Tuple[float, float] = tuple(1.0, 1.0),distpoint: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),edgeDistance: int = 1,geometricarea: int = 1,geometricareabound: Tuple[float, float] = tuple(1.0, 1.0),holes: int = 1,length: int = 1,lengthbound: Tuple[float, float] = tuple(1.0, 1.0),loopPropagation: bool = False,max2dAngle: float = 1.0,max3dAngle: float = 1.0,mode: int = 1,nonmanifold: int = 1,oppositeEdges: bool = False,order: int = 1,orderbound: Tuple[int, int] = tuple(1, 1),orient: int = 1,orientaxis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),orientbound: Tuple[float, float] = tuple(1.0, 1.0),planarity: int = 1,propagate: int = 1,random: int = 1,randomratio: float = 1.0,returnSelection: bool = False,ringPropagation: bool = False,shell: bool = False,size: int = 1,smoothness: int = 1,stateString: bool = False,textured: int = 1,texturedarea: int = 1,texturedareabound: Tuple[float, float] = tuple(1.0, 1.0),textureshared: int = 1,topology: int = 1,type: int = 1,uvBorderSelection: bool = False,uvConstraint: bool = False,uvEdgeLoopPropagation: bool = False,uvEdgeRingPropagation: bool = False,uvFaceOrientation: int = 1,uvShell: bool = False,visibility: int = 1,visibilityangle: float = 1.0,visibilitypoint: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),where: int = 1,wholeSensitive: bool = False) -> None:
    """
    グローバルなポリゴンの選択項目のコンストレイントを変更します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    angle (int): 0(オフ)1(オン)。

    -----------------------------------------

    anglePropagation (boolean): trueにすると、接続されたすべてのコンポーネントのうち、法線が元の選択項目の法線のいずれかに近いものが含まれるよう、選択範囲が延長されます(angleToleranceを参照)。

    -----------------------------------------

    angleTolerance (float): 角度の伝播がオンになっている場合、これは選択項目が伝播する法線ベクトルの最大差を制御します。

    -----------------------------------------

    anglebound ([angle, angle]): 最小および最大の角度値はMayaで使用されている現在の単位で指定する必要があります。現在の単位の確認方法は例を参照してください。頂点の場合:頂点を持つ2つのエッジ間の角度です。エッジの場合:エッジを持つ2つのフェース間の角度です。

    -----------------------------------------

    border (boolean): 「-uvConstrainttrue」を使用してUVビューのコンストレイントを編集または照会します。trueにすると、選択項目が接続されているすべての境界コンポーネントに延長され、「ループ」全体が選択されるようになります。また、既存の選択からすべての非境界コンポーネントを削除します(互換モード)。

    -----------------------------------------

    borderPropagation (boolean): trueにすると、選択項目が接続されているすべての境界コンポーネントに延長され、「ループ」全体が選択されるようになります。

    -----------------------------------------

    convexity (int): 0(オフ)1(凹型)2(凸型)。

    -----------------------------------------

    crease (boolean): trueの場合に選択項目は、接続されて折り目が付けられたすべてのコンポーネントに延長されます。

    -----------------------------------------

    disable (boolean): すべてのコンポーネントタイプの全コンストレイントをオフに切り替えますが、その他のコンストレイントパラメータは変更しません。このフラグは、一部のコンストレイントをオンに切り替える他のフラグと一緒に使用することが可能です。その場合は、まずすべてのコンストレイントが無効になり(コマンドライン上の-disableフラグの位置に関わらず)、指定したコンストレイントのみが有効になります。

    -----------------------------------------

    dist (int): 0(オフ)1(ポイントへ)2(軸へ)3(プレーンへ)。

    -----------------------------------------

    distaxis ([float, float, float]): 軸(プレーンへの距離の場合は、プレーンの法線)

    -----------------------------------------

    distbound ([float, float]): 最小および最大距離

    -----------------------------------------

    distpoint ([float, float, float]): ポイント(軸/プレーンへの距離の場合は、軸/プレーンの原点)

    -----------------------------------------

    edgeDistance (uint): 「隣接エッジ」の伝播モードにおける、エッジの選択を延長するための最大距離(エッジ数)です。0は、距離コンストレイントを無視します。

    -----------------------------------------

    geometricarea (int): 0(オフ)1(オン)。

    -----------------------------------------

    geometricareabound ([float, float]): 最小および最大の領域

    -----------------------------------------

    holes (int): 0(オフ)1(穴あき)2(穴なし)。

    -----------------------------------------

    length (int): 0(オフ)1(オン)。

    -----------------------------------------

    lengthbound ([float, float]): 最小および最大の長さ

    -----------------------------------------

    loopPropagation (boolean): trueにすると、エッジ選択がループに延長されます。

    -----------------------------------------

    max2dAngle (float): 「隣接エッジ」の伝播モードにおける、2D接線プレーンにある2つの連続エッジ間の最大角度です。

    -----------------------------------------

    max3dAngle (float): 「隣接エッジ」の伝播モードにおける、3D空間にある2つの連続エッジ間の最大角度です。

    -----------------------------------------

    mode (int): 0(オフ)1(次)2(現在および次)3(すべておよび次)オフ:コンストレイントを使用しません。次:コンストレイントを使用して次の選択項目をフィルタリングします。現在および次:コンストレイントを現在の選択項目に適用し、次の選択項目をフィルタリングします。すべておよび次:コンストレイントに適したすべての項目を選択します。

    -----------------------------------------

    nonmanifold (int): 0(オフ)1(オン)。

    -----------------------------------------

    oppositeEdges (boolean): 反対側のエッジを使用

    -----------------------------------------

    order (int): 0(オフ)1(オン)。

    -----------------------------------------

    orderbound ([int, int]): 最小および最大の順序所有しているエッジの数

    -----------------------------------------

    orient (int): 0(オフ)1(向き)2(方向)。

    -----------------------------------------

    orientaxis ([float, float, float]): 軸

    -----------------------------------------

    orientbound ([float, float]): 最小および最大の角度値はMayaで使用されている現在の単位で指定する必要があります。現在の単位の確認方法は例を参照してください。

    -----------------------------------------

    planarity (int): 0(オフ)1(非平面)2(平面)。

    -----------------------------------------

    propagate (int): 0(オフ)1(より多く)2(より少なく)3(境界)4(連続エッジ)5(ループに沿って延長)6(ループに沿って縮小)。より多く:現在選択している境界を現在の選択項目に追加します。より少なく:現在選択している境界を現在の選択項目から除去します。境界:現在選択している境界のみを維持します。連続エッジ:現在選択しているエッジに位置合わせたエッジを追加します。選択されるエッジの向きと数は、-m2a、-m3a、-edの各フラグで制御します。ループに沿って延長(GrowAlongLoop):現在の選択項目をループに沿って延長します。フェース、エッジ、頂点、UVがサポートされます。ループに沿って縮小(ShrinkAlongLoop):現在の選択項目をループに沿って縮小します。フェース、エッジ、頂点、UVがサポートされます。

    -----------------------------------------

    random (int): 0(オフ)1(オン)。

    -----------------------------------------

    randomratio (float): 率[0,1]

    -----------------------------------------

    returnSelection (boolean): trueにすると、現在の選択は変更されず、代わりに新しい選択が結果として返されます。

    -----------------------------------------

    ringPropagation (boolean): trueにすると、エッジ選択がリングに延長されます。

    -----------------------------------------

    shell (boolean): trueにすると、選択項目が接続されているすべてのコンポーネントに延長され、オブジェクト全体を選択します。

    -----------------------------------------

    size (int): 0(オフ)1(三角形)2(四角形)3(N角形)。

    -----------------------------------------

    smoothness (int): 0(オフ)1(ハード)2(スムーズ)。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。すべての現在の設定を復元するMELコマンドを返します。

    -----------------------------------------

    textured (int): 0(オフ)1(マップ済み)2(未マップ)。

    -----------------------------------------

    texturedarea (int): 0(オフ)1(指定した領域に符号が付かない)2(指定した領域に符号が付く)。

    -----------------------------------------

    texturedareabound ([float, float]): 最小および最大の領域

    -----------------------------------------

    textureshared (int): 0(オフ)1(オン)。このオプションは、複数の頂点が共有する現在のマップの任意のUVを選択します。

    -----------------------------------------

    topology (int): 0(オフ)1(三角化不可)2(ラミナ)3(三角化不可とラミナ)

    -----------------------------------------

    type (int): 0x0000(なし)0x0001(頂点)0x8000(エッジ)0x0008(フェース)0x0010(テクスチャ座標)

    -----------------------------------------

    uvBorderSelection (boolean): このフラグはUVビューでのみ動作します。trueにすると、選択項目がすべてのUV境界コンポーネントに延長されます。また、既存の選択項目からUV境界上にないすべてのコンポーネントを除去します。

    -----------------------------------------

    uvConstraint (boolean): trueにすると、該当するコンストレイントフラグがUVビュー内で動作します。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    uvEdgeLoopPropagation (boolean): 「-uvConstrainttrue」を使用してUVビューのコンストレイントを編集または照会します。trueにすると、UVエッジ選択がループに延長されます。

    -----------------------------------------

    uvEdgeRingPropagation (boolean): このフラグはUVビューでのみ動作します。trueにすると、UVエッジ選択がリングに延長されます。

    -----------------------------------------

    uvFaceOrientation (int): このフラグはUVビューでのみ動作します。0(オフ)1(正面)2(背面)。

    -----------------------------------------

    uvShell (boolean): trueにすると、選択がUV空間で接続したすべてのコンポーネントに延長されます。

    -----------------------------------------

    visibility (int): 0(オフ)1(オン)。

    -----------------------------------------

    visibilityangle (angle): 角度[0,360]

    -----------------------------------------

    visibilitypoint ([float, float, float]): ポイント

    -----------------------------------------

    where (int): 0(オフ)1(境界上)2(内部)。

    -----------------------------------------

    wholeSensitive (boolean): フェースの選択方法を指定します。フェース内側の任意の箇所を選択する(trueの場合)フェースセンターのマーカーを選択する(falseの場合)

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySelectConstraintMonitor(changeCommand: Tuple[str, str] = tuple("", ""),create: bool = False,delete: bool = False) -> None:
    """
    ウィンドウを管理し、ポリゴンのセレクション コンストレイントのパラメータを表示、編集します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    changeCommand ([string, string]): ウィンドウをリフレッシュするMELコールバックを指定します。最初の引数がコールバック、2番目がウィンドウ名です。

    -----------------------------------------

    create (boolean): モニターの作成を指定します。

    -----------------------------------------

    delete (boolean): モニターの除去を指定します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def polySeparate(caching: bool = False,nodeState: int = 1,removeShells: bool = False,separateSpecificShell: int = 1) -> None:
    """
    指定したポリから新しいオブジェクトを作成します。新しいオブジェクトは、別個のメッシュ(残りのメッシュにエッジで接続されていない)の各セクションに作成されます。このコマンドでは、一度に 1 つのオブジェクトのみを切り離すことができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    removeShells (boolean): 作成後、シェルを削除します。

    -----------------------------------------

    separateSpecificShell (int): 分離するシェルIDのリストです。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名、およびノード名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySetToFaceNormal(setUserNormal: bool = False) -> None:
    """
    選択したポリゴン頂点または頂点フェースの法線を変更します。userNormal オプションを使用すると、新しい法線値が頂点や頂点フェース周囲のフェース法線になります。それ以外の場合、新しい法線値は内部計算に基づいた既定値になります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    setUserNormal (boolean): このフラグを指定すると、ユーザ法線がそれぞれの頂点フェースに作成され、値はフェース法線値になります。それ以外の場合、法線値は内部計算の結果になります。既定はfalseです。

    -----------------------------------------

    Return Value:
    None: stringノード名
    """
    pass

    
def polySewEdge(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,texture: bool = False,tolerance: float = 1.0,worldSpace: bool = False) -> None:
    """
    指定したしきい値内の境界エッジをマージします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    texture (boolean): trueの場合、テクスチャが3次元エッジとともに縫い合わせられます。C:既定はtrueです。Q:照会するとintを返します。

    -----------------------------------------

    tolerance (linear): エッジを縫合するための許容値(エッジの距離)。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySlideEdge(absolute: bool = False,direction: int = 1,edgeDirection: float = 1.0,symmetry: bool = False) -> None:
    """
    エッジ ループの選択範囲を、頂点の側面に接続されたエッジに沿って移動します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absolute (boolean): このフラグは、コマンドで絶対モードを使用するかどうかを指定します。絶対モードの場合、頂点はすべて同じ距離(最も小さいエッジの指定したパーセンテージ)を移動します。C:既定はオフです。

    -----------------------------------------

    direction (uint): このフラグはスライドエッジの移動方向を指定します。0:左方向(相対的)、1:右方向(相対的)、2:法線方向(相対的)、C:既定は0です。

    -----------------------------------------

    edgeDirection (float): このフラグは、エッジループ沿いの頂点のどちらかの側面にあるエッジに沿って移動する相対的パーセンテージを指定します。C:既定は0.0です。

    -----------------------------------------

    symmetry (boolean): このフラグは、コマンドがシンメトリスライドを実行するかどうかを指定します。シンメトリが有効な場合のみ有効です。C:既定はオフです。

    -----------------------------------------

    Return Value:
    None: boolean成功値
    """
    pass

    
def polySmooth(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,continuity: float = 1.0,degree: int = 1,divisions: int = 1,divisionsPerEdge: int = 1,keepBorder: bool = False,keepHardEdge: bool = False,keepMapBorders: int = 1,keepSelectionBorder: bool = False,keepTesselation: bool = False,keepTessellation: bool = False,method: int = 1,osdCreaseMethod: int = 1,osdFvarBoundary: int = 1,osdFvarPropagateCorners: bool = False,osdSmoothTriangles: bool = False,osdVertBoundary: int = 1,propagateEdgeHardness: bool = False,pushStrength: float = 1.0,roundness: float = 1.0,smoothUVs: bool = False,subdivisionLevels: int = 1,subdivisionType: int = 1) -> None:
    """
    ポリゴン オブジェクトを滑らかにします。このコマンドは、ポリゴン オブジェクトかフェースで動作します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    continuity (float): このフラグは平滑性パラメータを指定します。最小値の0.0にすると、フェースは細分割されるだけです。最大値の1.0にすると、フェースはできる限り滑らかになります。C:既定は1.0ですQ:照会するとfloatを返します。

    -----------------------------------------

    degree (int): 結果の制限サーフェスの次数です。

    -----------------------------------------

    divisions (int): スムージングの反復ステップ数を指定します。C:既定は1です。Q:照会するとintを返します。

    -----------------------------------------

    divisionsPerEdge (int): 各ステップに対する1つのエッジに沿ったサブディビジョンの数です。

    -----------------------------------------

    keepBorder (boolean): オンにした場合、オブジェクトの境界は、スムージングオペレーション中に移動しません。C:既定はオンです。Q:照会するとintを返します。

    -----------------------------------------

    keepHardEdge (boolean): trueの場合は、ハードエッジの頂点は変更されません。C:既定はfalseです。Q:照会するとbooleanを返します。

    -----------------------------------------

    keepMapBorders (int): UVマップ境界線の扱いです。0-すべてのマップ境界エッジをスムージング。1-ジオメトリの境界でもあるマップ境界をスムージング。2-マップ境界のスムージングなし。

    -----------------------------------------

    keepSelectionBorder (boolean): trueにすると、選択した境界の頂点は修正されません。C:既定はfalseです。Q:照会するとbooleanを返します。

    -----------------------------------------

    keepTesselation (boolean): trueの場合:フレームからフレームまで、一貫してオブジェクトがスムージングされます。これは、オブジェクトが変形またはアニメートされている場合に最適です。falseの場合:スムージングする前に、星型でないフェースは三角形化されます。これにより自己オーバーラッピングを防げますが、アニメートされた変形の場合、フレームからフレームへのトポロジ(頂点数とフェース数)の変更を招く恐れがあります。

    -----------------------------------------

    keepTessellation (boolean): trueの場合:フレームからフレームまで、一貫してオブジェクトがスムージングされます。これは、オブジェクトが変形またはアニメートされている場合に最適です。falseの場合:スムージングする前に、星型でないフェースは三角形化されます。これにより自己オーバーラッピングを防げますが、アニメートされた変形の場合、フレームからフレームへのトポロジ(頂点数とフェース数)の変更を招く恐れがあります。

    -----------------------------------------

    method (int): 使用するスムージングアルゴリズムのタイプ。0-指数関数(従来のスムージング)、1-リニア(エッジごとのフェース数がリニアに増加)。

    -----------------------------------------

    osdCreaseMethod (int): 境界エッジと頂点の補間方法をコントロールします。

    -----------------------------------------

    osdFvarBoundary (int): フェースに応じて変わるデータ(UVおよび頂点カラー)に対する境界の処理方法をコントロールします。

    -----------------------------------------

    osdFvarPropagateCorners (boolean): 

    -----------------------------------------

    osdSmoothTriangles (boolean): 特別なサブディビジョンルールを、三角形をより滑らかにサブディバイドするために経験的に定義されたすべての三角面に適用します。

    -----------------------------------------

    osdVertBoundary (int): 境界エッジと頂点の補間方法をコントロールします。

    -----------------------------------------

    propagateEdgeHardness (boolean): trueの場合、エッジのスムーズの結果であるエッジには、エッジの硬度に同じ値が与えられます。新たに細分割されたエッジは、常にスムーズになります。C:既定はfalseです。Q:照会するとbooleanを返します。

    -----------------------------------------

    pushStrength (float): コメント:0.0は近似値で、1.0は補間スキーム。

    -----------------------------------------

    roundness (float): 1.0の場合、長さを一定に保つために、押し出しベクトルは再正規化されます。

    -----------------------------------------

    smoothUVs (boolean): Trueの場合、UVおよびジオメトリがスムージングされます。

    -----------------------------------------

    subdivisionLevels (int): 分割とスムージングの操作は何回も実行されます。

    -----------------------------------------

    subdivisionType (int): スムージングに使用されるサブディビジョン方法です。C:既定は0です。0:MayaCatmull-Clark1:OpenSubdivCatmull-Clark

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySoftEdge(angle: float = 1.0,caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,worldSpace: bool = False) -> None:
    """
    エッジをソフトかハードにします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    angle (angle): スムージング角度。C:既定は30度です。Q:照会するとfloatを返します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringpolySoftEdge ノードの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySphere(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,object: bool = False,axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),createUVs: int = 1,radius: float = 1.0,subdivisionsAxis: int = 1,subdivisionsHeight: int = 1,subdivisionsX: int = 1,subdivisionsY: int = 1,texture: int = 1) -> None:
    """
    sphere コマンドは、新しいポリゴン球を作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します(適切な場合)。

    -----------------------------------------

    axis ([linear, linear, linear]): 球の作成に使用するプリミティブ軸を指定します。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    createUVs (int): このフラグにより、球を作成するときに、特定のUV構造を選択できます。有効な値は、0、1、または2です。0にすると、UVは生成されません(適用するテクスチャがない場合)。1は作成されるのUVの極がつままれていることを暗示します。2は作成されるUVの極がのこぎり歯になっていることを暗示します。これらのオプションをよりよく理解するには、テクスチャビューウィンドウを開いてください。C:既定は2です。

    -----------------------------------------

    radius (linear): 球の半径を指定します。C:既定は0.5です。Q:照会するとfloatを返します。

    -----------------------------------------

    subdivisionsAxis (int): 軸を中心とするサブディビジョン

    -----------------------------------------

    subdivisionsHeight (int): 球の高さに沿ったサブディビジョンです。

    -----------------------------------------

    subdivisionsX (int): 球のX方向のサブディビジョン数を指定します。C:既定は20です。Q:照会するとintを返します。

    -----------------------------------------

    subdivisionsY (int): 球のY方向のサブディビジョン数を指定します。C:既定は20です。Q:照会するとintを返します。

    -----------------------------------------

    texture (int): このフラグはサポートしていません。次のリリースで除去されます。代わりに-cuv/createUVsフラグを使用してください。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySphericalProjection(caching: bool = False,constructionHistory: bool = False,createNewMap: bool = False,insertBeforeDeformers: bool = False,keepImageRatio: bool = False,mapDirection: str = "",name: str = "",nodeState: int = 1,perInstance: bool = False,smartFit: bool = False,worldSpace: bool = False,imageCenter: Tuple[float, float] = tuple(1.0, 1.0),imageCenterX: float = 1.0,imageCenterY: float = 1.0,imageScale: Tuple[float, float] = tuple(1.0, 1.0),imageScaleU: float = 1.0,imageScaleV: float = 1.0,projectionCenter: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),projectionCenterX: float = 1.0,projectionCenterY: float = 1.0,projectionCenterZ: float = 1.0,projectionHorizontalSweep: float = 1.0,projectionScale: Tuple[float, float] = tuple(1.0, 1.0),projectionScaleU: float = 1.0,projectionScaleV: float = 1.0,radius: float = 1.0,rotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rotateX: float = 1.0,rotateY: float = 1.0,rotateZ: float = 1.0,rotationAngle: float = 1.0,seamCorrect: bool = False) -> None:
    """
    TpolyProjCmdBase は、選択したポリゴン フェースにマッピングを作成するコマンドの基本クラスです。 球マップをオブジェクトに投影します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createNewMap (boolean): このフラグをtrueに設定すると、マップが存在していない場合は、渡された名前を持つ新しいマップを作成します。

    -----------------------------------------

    insertBeforeDeformers (boolean): このフラグは、デフォーマノードをシェイプに適用する前か後どちらに投影ノードを挿入するかを指定します。デフォーマの後でノードを挿入すると、アニメーション中にテクスチャがずれて、ほとんどの場合うまくいきません。C:既定はオンです。

    -----------------------------------------

    keepImageRatio (boolean): Trueの場合はイメージ比率が維持されます。

    -----------------------------------------

    mapDirection (string): マッピング方向を指定します。「x」、「y」、「z」では、対応する軸に沿ってマップが投影されます。「c」では、現在のカメラのビュー方向に沿って投影されます。「p」では、現在のカメラがパースビューである場合に投影されます。「b」では、選択したオブジェクトに最適なプレーンに沿って投影されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    perInstance (boolean): 新しいマップがインスタンス単位の場合はTrue、それ以外の場合は共有されます。

    -----------------------------------------

    smartFit (boolean): Trueの場合はスマートフィットアルゴリズムを使用します。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    imageCenter ([float, float]): 2Dモデルレイアウトの中心ポイントを指定します。C:既定は0.50.5です。Q:照会するとfloat[2]を返します。

    -----------------------------------------

    imageCenterX (float): 2Dモデルレイアウトの中心ポイントのXを指定します。C:既定は0.5です。Q:照会するとfloatを返します。

    -----------------------------------------

    imageCenterY (float): 2Dモデルレイアウトの中心ポイントのYを指定します。C:既定は0.5です。Q:照会するとfloatを返します。

    -----------------------------------------

    imageScale ([float, float]): UVのスケールを指定します。2D中心点を基準にしてU空間またはV空間にある2Dバージョンのモデルを拡大または縮小します。C:既定は1.01.0です。Q:照会するとfloat[2]を返します。

    -----------------------------------------

    imageScaleU (float): Uのスケールを指定します。2D中心点を基準にしてU空間にある2Dバージョンのモデルを拡大または縮小します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    imageScaleV (float): Vのスケールを指定します。2D中心点を基準にしてV空間にある2Dバージョンのモデルを拡大または縮小します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    projectionCenter ([linear, linear, linear]): このプラグは、マップを投影する原点を指定します。C:既定は0.00.00.0です。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    projectionCenterX (linear): マップを投影する原点のXを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    projectionCenterY (linear): マップを投影する原点のYを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    projectionCenterZ (linear): マップを投影する原点のZを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    projectionHorizontalSweep (linear): 投影によって水平にスイープされる角度です。範囲は[0,360]です。

    -----------------------------------------

    projectionScale ([linear, linear]): 3D投影軸に関連するマップの幅と高さを指定します。C:既定は180.090.0です。Q:照会するとfloat[2]を返します。

    -----------------------------------------

    projectionScaleU (linear): 3D投影軸を基準にして、マップの幅を指定します(スケールのアパーチャ)。範囲は[0,360]です。C:既定は180.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    projectionScaleV (linear): 3D投影軸に関連するマップの高さを指定します(スケールの高さ)。C:既定は90.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    radius (linear): UI:マニピュレータによって使用されます。

    -----------------------------------------

    rotate ([angle, angle, angle]): マッピング回転角度を指定します。C:既定は0.00.00.0です。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    rotateX (angle): Xマッピング回転角度を指定します。C:既定は0.0です。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    rotateY (angle): Yマッピング回転角度を指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    rotateZ (angle): Zマッピング回転角度を指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    rotationAngle (angle): マッピング空間の回転角度を指定します。マップは角度が正の場合、マップされたモデル上で反時計回りに回転し、負の場合は時計回りに回転します。C:既定は10.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    seamCorrect (boolean): マップされたフェース上の継ぎ目の補正を実行するために指定します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySplit(constructionHistory: bool = False,name: str = "",adjustEdgeFlow: float = 1.0,detachEdges: bool = False,edgepoint: Tuple[int, float] = tuple(1, 1.0),facepoint: Tuple[int, float, float, float] = tuple(1, 1.0, 1.0, 1.0),insertWithEdgeFlow: bool = False,insertpoint: Tuple[int, float, float, float] = tuple(1, 1.0, 1.0, 1.0),projectedCurve: str = "",projectedCurveTolerance: float = 1.0,smoothingangle: float = 1.0,subdivision: int = 1) -> None:
    """
    ポリゴン オブジェクトのファセットやエッジを分割します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    adjustEdgeFlow (float): 配置するエッジ頂点のウェイト値。

    -----------------------------------------

    detachEdges (boolean): 結果のポリゴン分割ノードのためのdetachEdgesアトリビュートの値です。

    -----------------------------------------

    edgepoint ([int, float]): エッジにそって特定パーセンテージに新しい頂点を配置し、特定エッジを2つの新しいエッジに分割します。注:Pythonでこのフラグを使用することはお勧めできません。代わりに、insertpointフラグを参照してください。

    -----------------------------------------

    facepoint ([int, float, float, float]): 特定フェース内の特定座標に新しい頂点を挿入します。座標はローカルオブジェクト空間で指定します。注:Pythonでこのフラグを使用することはお勧めできません。代わりに、insertpointフラグを参照してください。

    -----------------------------------------

    insertWithEdgeFlow (boolean): エッジフローを有効にするにはtrue。それ以外の場合は、エッジフローが無効になります。

    -----------------------------------------

    insertpoint ([int, float, [, float, float, ]]): このフラグにより、コール側はエッジやフェースに新しい頂点を挿入できるようになります。エッジに新しい頂点を挿入するには、エッジのインデックスと、新しい頂点を挿入するエッジ沿いの位置のパーセンテージを渡します。エッジに頂点を挿入するために使用する場合、このフラグは2つの引数を取ります。フェースに新しい頂点を挿入するには、フェースのインデックスと、ローカルなオブジェクト空間に挿入するための座標を定義する3つの値を渡します。フェースに頂点を挿入するために使用する場合、このフラグは4つの引数を取ります。このフラグは、edgepointフラグとfacepointフラグに替わるものです。

    -----------------------------------------

    projectedCurve (name): 投影するカーブです。

    -----------------------------------------

    projectedCurveTolerance (float): カーブ投影の許容値です。

    -----------------------------------------

    smoothingangle (angle): この角度よりも小さい場合に、細分割したエッジはソフトエッジになります。C:既定は0.0です。

    -----------------------------------------

    subdivision (int): 特定数のセクションに新しいエッジを細分割します。フリーポイントを含むエッジは細分割されません。C:既定は1(細分割なし)です。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySplitEdge(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,operation: int = 1) -> None:
    """
    エッジを分割します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    operation (int): 0は非マニホールドメソッドを使用し、1はマニホールドメソッドを使用します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySplitRing(adjustEdgeFlow: float = 1.0,caching: bool = False,constructionHistory: bool = False,direction: bool = False,divisions: int = 1,enableProfileCurve: bool = False,fixQuads: bool = False,insertWithEdgeFlow: bool = False,name: str = "",nodeState: int = 1,profileCurveInputOffset: float = 1.0,profileCurveInputScale: float = 1.0,profileCurve_FloatValue: float = 1.0,profileCurve_Interp: int = 1,profileCurve_Position: float = 1.0,rootEdge: int = 1,smoothingAngle: float = 1.0,splitType: int = 1,useEqualMultiplier: bool = False,useFaceNormalsAtEnds: bool = False,weight: float = 1.0,worldSpace: bool = False) -> None:
    """
    接続された四角形の一連のリング エッジを分割して、これらの間に接続するエッジを挿入します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustEdgeFlow (float): 配置するエッジ頂点のウェイト値。既定:1.0f

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    direction (boolean): このアトリビュートは絶対分割を行うときに使用されます。Trueの場合、距離はルートエッジの開始頂点から取得されます。Falseの場合、距離はルートエッジの終了頂点から取得されます。既定:true

    -----------------------------------------

    divisions (int): 分割数です。既定:2

    -----------------------------------------

    enableProfileCurve (boolean): プロファイルカーブの使用を有効にします。既定:true

    -----------------------------------------

    fixQuads (boolean): 新しいエッジの中央から5辺のフェースのエッジに渡る頂点に向かって分割することにより、5辺および3辺のフェースから四角形のフェースに変換する場合の分割を修正します。既定:false

    -----------------------------------------

    insertWithEdgeFlow (boolean): エッジフローを有効にするにはtrue。それ以外の場合は、エッジフローが無効になります。既定:false

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    profileCurveInputOffset (float): オフセットをマルチ分割プロファイルカーブに変更します。例:プロファイルカーブの値が0から1までの間にあり、この値が-1に設定されている場合、プロファイルカーブの値は-1から0の間になるように調整されます。既定:0.0f

    -----------------------------------------

    profileCurveInputScale (float): プロファイルカーブを表す値の範囲を変更します。例:プロファイルカーブの値が0から1までの間にあり、この値が2に設定されている場合、プロファイルカーブの値は0から2の間になるように調整されます。既定:1.0f

    -----------------------------------------

    profileCurve_FloatValue (float): ?????

    -----------------------------------------

    profileCurve_Interp (int): ?????既定:0

    -----------------------------------------

    profileCurve_Position (float): ?????

    -----------------------------------------

    rootEdge (int): ウェイトアトリビュートは、このエッジの開始頂点を使用して、新しい分割が発生する場所を特定します。既定:-1

    -----------------------------------------

    smoothingAngle (angle): 新しいエッジがスムージングされる角度です。既定:kPi

    -----------------------------------------

    splitType (int): フォーマット:0-絶対(Absolute)、1-相対(Relative)、2-マルチ(Multi)。既定:TdnpolySplitRing::Relative

    -----------------------------------------

    useEqualMultiplier (boolean): マルチ分割を行う場合のプロファイルカーブのオフセットへの影響を変更します。trueの場合、分割される最短エッジに基づき、頂点は同じ距離にオフセットされます。falseの場合、挿入される各エッジループは、分割されるエッジの長さに対する相対的な距離にオフセットされます。既定:true

    -----------------------------------------

    useFaceNormalsAtEnds (boolean): 閉じていないエッジリングのセットでマルチ分割を行う場合、これにより、エッジ法線またはフェース法線として計算される分割の端で法線を切り替えます。既定:true

    -----------------------------------------

    weight (float): 既存のエッジの新しいポイントの相対位置をコントロールするウェイト値です。範囲は[0.0,1.0]です。0.1の値は、新しいエッジがエッジシーケンスの最初のエッジの開始頂点の近くに配置されることを示します。既定:0.5

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySplitVertex(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,worldSpace: bool = False) -> None:
    """
    1 つ以上の頂点を分割します。  メッシュは、1 つ以上のフェースから構成されます。フェースは、頂点を結ぶエッジで定義されます。一般的なフェースは、頂点とエッジを同じメッシュの隣接フェースと共有します。頂点とエッジを共有すると、メッシュで使用するメモリ量を減らすことができます。あるフェースを移動すると、接続されているすべてのフェースも移動します。 接続したフェースからフェースを切り離し、別々に移動することもできます。これは、フェースのどの部分を抽出するかによって、以下の 3 つの方法で実行できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringpolySplitVert ノード名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyStraightenUVBorder(blendOriginal: float = 1.0,caching: bool = False,constructionHistory: bool = False,curvature: float = 1.0,gapTolerance: int = 1,name: str = "",nodeState: int = 1,preserveLength: float = 1.0,uvSetName: str = "",worldSpace: bool = False) -> None:
    """
    境界 UV を単純なカーブにそって移動します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    blendOriginal (float): ターゲットUVシェイプとオリジナルUVシェイプ間の補間係数。値を0にすると、UVはターゲットカーブに正確に適合します。値を1にすると、UVは移動しません。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    curvature (float): UVパスの曲率を指定します。0は直線を意味します。値を1にすると、カーブの中間ポイントは、UVセグメントの長さの半分に直線から移動します。

    -----------------------------------------

    gapTolerance (int): 0以外にすると、UV選択間の小さいギャップが埋められます。整数値は、選択した断片を結ぶために横切る必要があるUVの数を表します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    preserveLength (float): UVエッジ比率を考慮する度合いを指定します。この値を1にすると、オリジナルのUV間隔を維持したまま、望ましいカーブに沿った新しいUV位置が構築されます。値を0にすると、新しいUVはカーブに沿って等間隔に並びます。

    -----------------------------------------

    uvSetName (string): 作成するUVセットの名前です。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySubdivideEdge(caching: bool = False,constructionHistory: bool = False,divisions: int = 1,name: str = "",nodeState: int = 1,size: float = 1.0,worldSpace: bool = False) -> None:
    """
    複数のサブエッジにエッジを分割します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    divisions (int): それぞれのエッジで挿入する頂点の最大数。指定した最低の長さよりエッジが短くなる場合、この数は少なくなることがあります。C:既定は1(エッジを半分に分割)です。Q:照会するとintを返します。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    size (linear): 作成するサブエッジの最短長。所定のサブディビジョンによってこの値よりも短いエッジが作成される場合は、最短長を維持するように分割数が変更されます。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polySubdivideFacet(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,divisions: int = 1,divisionsU: int = 1,divisionsV: int = 1,mode: int = 1,subdMethod: int = 1) -> None:
    """
    四角形または三角形にフェースを分割します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    divisions (int): 選択したフェースを細分割する回数を指定します。たとえば四角形モードで分割を3に設定すると、最初の四辺形は、4つのサブフェースに3回細分割されるので、合計で64個(4*4*4)のフェースが作成されます。C:既定は1です。Q:照会するとintを返します。

    -----------------------------------------

    divisionsU (int): U方向に沿って実行されるサブディビジョンステップの数です。四角形フェースは、四角形モードでは4^(分割数)のフェースに分割され、三角形モードでは4*3^(分割数-1)に分割されます。

    -----------------------------------------

    divisionsV (int): V方向に沿って実行されるサブディビジョンステップの数です。四角形フェースは、四角形モードでは4^(分割数)のフェースに分割され、三角形モードでは4*3^(分割数-1)に分割されます。

    -----------------------------------------

    mode (int): サブディビジョンモード。0:四角ポリゴンにサブディビジョン1:四角ポリゴンにサブディビジョンC:既定は0です。Q:照会するとintを返します。

    -----------------------------------------

    subdMethod (int): 使用するサブディビジョンのタイプです。0-指数関数(従来のサブディビジョン)、1-リニア(エッジごとのフェース数がリニアに増加)。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyTorus(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,constructionHistory: bool = False,createUVs: bool = False,name: str = "",nodeState: int = 1,object: bool = False,radius: float = 1.0,sectionRadius: float = 1.0,subdivisionsAxis: int = 1,subdivisionsHeight: int = 1,subdivisionsX: int = 1,subdivisionsY: int = 1,texture: bool = False,twist: float = 1.0) -> None:
    """
    新しいポリゴン トーラスを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): トーラスの作成に使用するプリミティブ軸を指定します。Q:照会するとvectorを返します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    createUVs (boolean): UVを作成するかどうかを指定します。既定:true

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します(適切な場合)。

    -----------------------------------------

    radius (linear): トーラスの半径です。既定:1.0

    -----------------------------------------

    sectionRadius (linear): トーラスの断面です。既定:0.50

    -----------------------------------------

    subdivisionsAxis (int): 垂直軸を中心とするサブディビジョンです。既定:20

    -----------------------------------------

    subdivisionsHeight (int): 高さに沿ったサブディビジョンです。既定:20

    -----------------------------------------

    subdivisionsX (int): トーラスのX方向のサブディビジョン数(セクション数)を指定します。C:既定は20です。Q:照会するとintを返します。

    -----------------------------------------

    subdivisionsY (int): トーラスのY方向のサブディビジョン数(セクションごとのセグメント数)を指定します。C:既定は20です。Q:照会するとintを返します。

    -----------------------------------------

    texture (boolean): テクスチャの適用のオン/オフを切り替えます。古いアトリビュートです。サポート対象ではなく、将来のリリースで削除される予定です。既定:true

    -----------------------------------------

    twist (angle): トーラスのツイスト角度です。既定:0.0

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyTransfer(alternateObject: str = "",caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,uvSets: bool = False,vertexColor: bool = False,vertices: bool = False) -> None:
    """
    あるポリゴン オブジェクトから別のポリゴン オブジェクトに情報を転写します。両方のオブジェクトでは、トポロジが一致している必要があります。つまり、頂点、エッジ、フェースの数が一致している必要があります。このフラグは、頂点、UV セット、頂点カラーのうち、どれをコピーするかを指定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alternateObject (string): 代替オブジェクトの名前です。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    uvSets (boolean): trueにすると、UVセットが代替オブジェクトからコピーされます。C:既定はオンです。

    -----------------------------------------

    vertexColor (boolean): trueにすると、頂点ごとのカラーが代替オブジェクトからコピーされます。C:既定はオフです。

    -----------------------------------------

    vertices (boolean): trueにすると、頂点位置が代替オブジェクトからコピーされます。C:既定はオフです。

    -----------------------------------------

    Return Value:
    None: stringノード名を表します。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyTriangulate(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    三角網では、すべてのフェースがプレーンで穴が開いていない三角形にポリゴンが分割されます。モデルの三角網は、多くの領域で便利です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyUnite(caching: bool = False,mergeUVSets: int = 1,nodeState: int = 1,centerPivot: bool = False,objectPivot: bool = False) -> None:
    """
    リストされたポリを結合して新しいポリを作成します。コマンド ラインでオブジェクトを指定しないと、アクティブなリストのオブジェクトが使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    mergeUVSets (int): UVセットが出力メッシュにマージされる方法を指定します。選択肢は0、1、2です。0=マージしない。各メッシュの各UVセットは出力において新しいUVセットになります。1=名前ごとにマージ。同じ名前のUVセットがマージされます。2=UVリンクごとにマージ。入力メッシュのUVリンクがそのまま動作するようにUVセットがマージされます。既定は1(名前ごとにマージ)です。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    centerPivot (boolean): 作成されたオブジェクトのピボットを選択したオブジェクトのバウンディングボックスの中心に設定します。

    -----------------------------------------

    objectPivot (boolean): 作成されたオブジェクトのピボットを最後に選択したオブジェクトのピボットに設定します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyUVCoverage(uvRange: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0)) -> None:
    """
    指定したコンポーネントの UV 空間の有効範囲を返します。コマンド ラインでオブジェクトが指定されなかった場合は、選択リストのコンポーネントが使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    uvRange ([float, float, float, float]): 有効範囲を計算するためのUV空間範囲。4つの値は、最小UとVおよび最大UとVです(この順序)。既定値は0.00.01.01.0です。

    -----------------------------------------

    Return Value:
    None: float[]UV 空間の有効範囲のパーセンテージ
    """
    pass

    
def polyUVOverlap(nonOverlappingComponents: bool = False,overlappingComponents: bool = False) -> None:
    """
    指定したコンポーネントに必要な結果を返します。コマンド ラインでオブジェクトが指定されなかった場合は、選択リストのコンポーネントが使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    nonOverlappingComponents (boolean): 選択または指定されたコンポーネントに基づいて非オーバーラップコンポーネントを返します。

    -----------------------------------------

    overlappingComponents (boolean): 選択または指定されたコンポーネントに基づいてオーバーラップコンポーネントを返します。

    -----------------------------------------

    Return Value:
    None: selectionItem[]ポリゴン コンポーネントのリスト
    """
    pass

    
def polyUVRectangle(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    2 つの頂点を指定し、次のいずれかを実行します。1) 頂点が長方形の対角を定義する場合、長方形の 0-1 領域に渡る UV グリッドを割り当てます。2) 頂点が長方形のエッジおよびトポロジ上の四角形の円柱領域を定義する場合は、U=0 エッジとして定義したエッジを使用し、0-1 領域に渡る UV を円柱部分に割り当てます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyUVSet(allUVSets: bool = False,allUVSetsIndices: bool = False,allUVSetsWithCount: bool = False,copy: bool = False,create: bool = False,currentLastUVSet: bool = False,currentPerInstanceUVSet: bool = False,currentUVSet: bool = False,delete: bool = False,genNewUVSet: bool = False,newUVSet: str = "",perInstance: bool = False,projections: bool = False,rename: bool = False,reorder: bool = False,shareInstances: bool = False,unshared: bool = False,uvSet: str = "") -> None:
    """
    UV セットを次のように操作します。- 既存の UV セットを削除 - 既存の UV セットの名前を変更- 新しい空の UV セットを作成- UV セットの値を既存の UV セットにコピー- 2 つの UV セットの順序を並べ替える - 現在の UV セットを既存の UV セットの前に配置- インスタンス間での、インスタンス単位の UV セットの共有を修正 - 現在の UV セットを照会- 現在の UV セットを、オブジェクトに最後に追加した UV セットに設定- すべての UV セットの名前を照会



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allUVSets (boolean): このフラグを照会に使用すると、すべてのUVセット名のリストを返します。

    -----------------------------------------

    allUVSetsIndices (boolean): このフラグを照会すると、まばらなUVセット配列にある全UVセットの論理プラグインデックスのリストを返します。

    -----------------------------------------

    allUVSetsWithCount (boolean): このフラグを照会モードで使用すると、すべてのUVセットファミリ名のリストを返します。ファミリ名には、指定または選択したシェイプが共有するインスタンス数がperInstanceセットにアペンドされます。

    -----------------------------------------

    copy (boolean): このフラグを使用して、uvSetフラグで指定した名前に対応するUVセットを、newUVSetフラグで指定した名前に対応するUVセットにコピーします。

    -----------------------------------------

    create (boolean): このフラグを使用して、uvSetフラグで指定した名前に対応する空のUVセットを作成します。同じ名前のUVセットが存在する場合は、UVセットは新規作成されません。

    -----------------------------------------

    currentLastUVSet (boolean): このフラグを使用して、オブジェクトの操作対象である現在のUVセットを、最後にオブジェクトに追加したUVセットに設定します。オブジェクトにUVセット存在しない場合、UVセットの名前を返しません。

    -----------------------------------------

    currentPerInstanceUVSet (boolean): これは照会専用フラグで、現在のUVセットがインスタンス単位のUVセットファミリである場合に使用します。現在選択しているインスタンスに対応するセットファミリのメンバーを返します。

    -----------------------------------------

    currentUVSet (boolean): このフラグを使用して、オブジェクトの操作対象である現在のUVセットを、uvSetフラグで指定した名前に対応するUVセットに設定します。つまり、指定した名前のuvSetが必ず存在している必要があります。照会すると、現在のUVセットを返します。

    -----------------------------------------

    delete (boolean): このフラグを使用して、uvSetフラグで指定した名前に対応するUVセットを削除します。

    -----------------------------------------

    genNewUVSet (boolean): これは新しい一意の名前を生成するための、照会モード専用のフラグです。

    -----------------------------------------

    newUVSet (string): uvSetフラグで指定した名前に対応する、変更する必要があるUVセットの名前を指定します。

    -----------------------------------------

    perInstance (boolean): このフラグをcreateフラグと一緒に使用して、UVセットがインスタンス単位かどうかを指定します。インスタンス単位のUVセットを作成すると、unsharedフラグを使用した場合を除き、セットはシェイプにあるすべてのインスタンスの間で共有されるものとして適用されます。照会モードでperInstanceフラグをcurrentUVSetフラグやallUVSetsフラグと一緒に使用することで、設定したファミリ名(インスタンス識別子を含まない)を照会で返すように指定できます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    projections (boolean): このフラグを照会に使用すると、ポリゴンのUV投影ノード名のリストを返します。リストは、最後に適用したノード名から、最初に適用した名前の順になります。

    -----------------------------------------

    rename (boolean): このフラグを使用して、uvSetフラグで指定した名前に対応するUVセットの名前を、newUVSetフラグで指定した名前に変更します。

    -----------------------------------------

    reorder (boolean): このフラグを使用すると、uvSetフラグで指定した名前に対応する2つのUVセットとnewUVSetフラグで指定した名前に対応するUVセットの順序が変更されます。

    -----------------------------------------

    shareInstances (boolean): このフラグを使用して、指定したUVセットファミリに属するインスタンス単位のUVセットの共有設定を修正し、選択したすべてのインスタンスが指定したセットを共有するようにできます。照会モードでは、uvSetフラグで指定したセットを共有するインスタンスのリストを返します。

    -----------------------------------------

    unshared (boolean): このフラグをcreateフラグとperInstanceフラグと一緒に使用して、新規作成されたインスタンス単位のセットとともに、インスタンスごとに別のセットを作成することを指定できます。

    -----------------------------------------

    uvSet (string): このコマンドを実行するUVセット名を指定します。このコマンドで、現在のUVセットを照会する以外に重要な操作を実行するには、このフラグを指定する必要があります。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyUVStackSimilarShells(onlyMatch: bool = False,tolerance: float = 1.0) -> None:
    """
    UV シェルに類似するものをスタックします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    onlyMatch (boolean): このフラグがtrueである場合、UVシェルにのみ一致し、ターゲットUVシェルのUVを返しますが、スタックしません。

    -----------------------------------------

    tolerance (float): UVシェルに類似するものをスタックするための許容差設定です。

    -----------------------------------------

    Return Value:
    None: string[]スタックされた UV シェルの UV、またはターゲットの UV シェルです。
    """
    pass

    
def polyWedgeFace(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,center: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),constructionHistory: bool = False,divisions: int = 1,edge: int = 1,name: str = "",nodeState: int = 1,wedgeAngle: float = 1.0,worldSpace: bool = False) -> None:
    """
    軸を中心にフェースを押し出します。軸とはすべての選択したエッジの平均です。エッジが位置合わせされていない場合は、ウェッジが確認できないことがあります。フェースを異なるウェッジ軸で別々にウェッジするためには、ウエッジ軸の数だけコマンドを実行しなければなりません(2 つめの例を参照)。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([float, float, float]): このフラグ(-centerと共に使用)を、-edgeフラグの代わりに使用して、ウェッジが実行される軸を指定できます。このフラグには、それを中心として回転を実行するベクトルを形成する3つの座標が必要です。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    center ([float, float, float]): このフラグ(-axisと共に使用)を、-edgeフラグの代わりに使用して、ウェッジが実行される位置を指定できます。このフラグには、回転の中心を定義する3つの座標が必要です。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします(適切な場合)。コンストラクションヒストリがオンの場合、対応するノードがメッシュのヒストリチェーンに挿入されます。コンストラクションヒストリがオフの場合、操作オブジェクト上に直接行われます。注:コンストラクションヒストリがすでにオブジェクトにある場合は、このフラグは無視され、ノードは必ずヒストリチェーンに挿入されます。

    -----------------------------------------

    divisions (int): 押し出しに沿ったサブディビジョンの数を指定します。

    -----------------------------------------

    edge (int): このフラグは、ウエッジ処理に使用するedgeIdを指定します。複数のエッジを指定できます。ウエッジ操作は、すべてのエッジの平均である軸を中心に実行されます。同一リニア上に並んだエッジのみを使うことをお勧めします。そうでない場合、結果が確認できないことがあります。-edgeフラグを指定する代わりに、ウェッジは点と軸を中心として実行できます。詳細については、-centerフラグおよび-axisフラグを参照してください。

    -----------------------------------------

    name (string): 作成されるノードに名前をつけます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    wedgeAngle (angle): 回転角度を指定します。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def setXformManip(showUnits: bool = False,suppress: bool = False,useRotatePivot: bool = False,worldSpace: bool = False) -> None:
    """
    このコマンドは、xform マニピュレータの設定のいくつかを変更し、外観を制御します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    showUnits (boolean): trueに設定されている場合、xformマニピュレータは現在のユニットを表示します。falseの場合は、このマニピュレータは現在のユニットを非表示にします。

    -----------------------------------------

    suppress (boolean): trueに設定されている場合、xformマニピュレータは隠されるため、可視とならず、使用することもできません。

    -----------------------------------------

    useRotatePivot (boolean): trueに設定されている場合、xformマニピュレータは回転ピボットを使用します。それ以外は、このマニピュレータはバウンディングボックスの中心を使います。既定はfalseです。

    -----------------------------------------

    worldSpace (boolean): trueに設定されている場合、xformマニピュレータは常にワールド空間にあります。falseの場合、このマニピュレータはオブジェクト空間にあります。(注:複数のオブジェクトが選択されている場合、このマニピュレータは、何に設定されているかにかかわらず必ずワールド空間にあります。)

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def showMetadata(auto: bool = False,dataType: str = "",interpolation: bool = False,isActivated: bool = False,listAllStreams: bool = False,listMembers: bool = False,listValidMethods: bool = False,listVisibleStreams: bool = False,member: str = "",method: str = "",off: bool = False,range: Tuple[float, float] = tuple(1.0, 1.0),rayScale: float = 1.0,stream: str = "") -> None:
    """
    このコマンドは、指定したチャネル「vertex」、「edge」、「face」、および「vertexFace」内のメタデータ値をビューポートに表示する場合に使用します。データは次の 3 つの方法で表示できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    auto (boolean): 「-range」フラグと似ていますが、指定された入力値でなく、同じストリームおよびメンバー内のメタデータの最大/最小値を使用します。照会モードでは、このフラグを使用して「auto」がオンであるかどうかを照会できます。

    -----------------------------------------

    dataType (string): 作成モードで、「stream」および「member」フラグと併用した場合は、表示するメンバーを指定します。「off」フラグを使用する場合は、オフにするメンバーを指定します。照会モードで、「stream」および「member」フラグと併用した場合は、指定したメンバーの視覚化状態を照会します。1回に視覚化できるのは、各シェイプの1つのメンバーのみです。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    interpolation (boolean): 作成モードでは、「カラー」メソッドの補間を有効/無効にします。補間をオンにすると、メタデータ値の平均を取って計算された補間カラーを使用してコンポーネントが表示されます。照会モードでは、選択されたオブジェクトの補間フラグの現在の状態を照会します。

    -----------------------------------------

    isActivated (boolean): 指定されたストリームがアクティブかどうかを確認します。いくつかのシェイプを選択した場合は、その状態を照会します。シェイプが選択されていない場合は、シーンのすべてのシェイプの状態を照会します。

    -----------------------------------------

    listAllStreams (boolean): オブジェクト名と一緒に使用すると、指定されたオブジェクトのすべてのストリームをリストできます。ビューポートに表示されているかどうかは関係ありません。また、このフラグを個別に使用すると、シーン内のすべてのストリームをリストできます。複数のオブジェクトに同じストリーム名が設定されている可能性があるため、返されたリストでは複製されたストリーム名が自動的にマージされます。

    -----------------------------------------

    listMembers (boolean): 「stream」フラグを指定して使用すると、指定されたストリームのメンバーリストを取得できます。

    -----------------------------------------

    listValidMethods (boolean): 現在のストリームおよびメンバーに設定できる有効な表示方法をリストします。方法によっては、表示できないデータ型があります。たとえば、データ型が「string」の場合、「color」または「ray」では表示できません。つまり、方法をリストすると、「string」方法のみが返されます。

    -----------------------------------------

    listVisibleStreams (boolean): オブジェクト名と一緒に使用すると、指定したオブジェクトの現在の可視ストリーム名をリストできます。また、オブジェクト名を指定しないでフラグを使用すると、シーン内のすべての可視ストリームをリストできます。

    -----------------------------------------

    member (string): 作成モードで、「stream」および「dataType」フラグと併用した場合は、表示するメンバーを指定します。「off」フラグがオンの場合は、オフにするメンバーを指定します。照会モードで、「stream」および「dataType」フラグと併用した場合は、指定したメンバーの視覚化状態を照会します。1回に視覚化できるのは、各シェイプの1つのメンバーのみです。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    method (string): 視覚化の方法を決定します。「color」はメタデータをカラー値に変換して、そのカラーでコンポーネントを描画します。「ray」はメタデータをベクトルに変換して、そのコンポーネントの中心を起点とするベクトル線を描画します。「string」はビューポート内のコンポーネントの横に2D文字列を使ってメタデータを表示します。引数には、これらの3つのワードの1つを文字列で指定する必要があります。既定の方法は「color」です。データ型が文字列である場合は、「string」方法を使用した場合のみ表示することができます。照会モードで、引数を指定しないでこのフラグを使用すると、指定したストリームおよびメンバーの方法を照会できます。

    -----------------------------------------

    off (boolean): 作成モードでは、「stream」、「member」、および「dataType」フラグで指定されたメンバーをオフにします。

    -----------------------------------------

    range ([float, float]): 使用するデータの範囲を指定します。範囲外の値は、最小/最大値にクランプされます。視覚化の方法が「color」の場合、範囲はカラーにマップされます。つまり、最小値は黒で、最大値は白で表示されます。照会モードでは、このフラグを個別に使用して現在の範囲を照会できます。

    -----------------------------------------

    rayScale (float): 適切な長さで表示するには、レイの尺度を指定します。

    -----------------------------------------

    stream (string): 作成モードで、「member」および「dataType」フラグと併用した場合は、表示するメンバーを指定します。「off」フラグを使用する場合は、オフにするメンバーを指定します。照会モードで、「member」および「dataType」フラグと併用した場合は、指定したメンバーの視覚化状態を照会します。または、「listMembers」フラグと併用した場合は、指定されたストリームのメンバーを照会します。1回に視覚化できるのは、各シェイプの1つのメンバーのみです。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    Return Value:
    None: string操作または照会したステータスの結果です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def transferAttributes(after: bool = False,afterReference: bool = False,before: bool = False,colorBorders: int = 1,deformerTools: bool = False,exclusive: str = "",flipUVs: int = 1,frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,ignoreSelected: bool = False,includeHiddenSelections: bool = False,matchChoice: int = 1,name: str = "",parallel: bool = False,prune: bool = False,remove: bool = False,sampleSpace: int = 1,searchMethod: int = 1,searchScaleX: float = 1.0,searchScaleY: float = 1.0,searchScaleZ: float = 1.0,sourceColorSet: str = "",sourceUvSet: str = "",sourceUvSpace: str = "",split: bool = False,targetColorSet: str = "",targetUvSet: str = "",targetUvSpace: str = "",transferColors: int = 1,transferNormals: int = 1,transferPositions: int = 1,transferUVs: int = 1,useComponentTags: bool = False) -> None:
    """
    ソース サーフェス(1 番目の引数)のアトリビュートをサンプリングし、これらをターゲット サーフェス(2 番目の引数)に転送します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    colorBorders (uint): カラーデータの転送時にカラー境界を保持するかどうかをコントロールします。ゼロ以外の場合、カラー境界はターゲットジオメトリの最も近いエッジにマッピングされます。0の場合、カラー境界はターゲットジオメトリの頂点に滑らかにブレンドされます。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    flipUVs (uint): ターゲットに転送する前に、サンプリングしたUVデータを反転する方法をコントロールします。0の場合、反転は行いません。1の場合は、U方向にUVデータを反転します。2の場合は、V方向にUVデータを反転します。3の場合は、両方の方向に反転します。反転をミラーリングと組み合わせると、対称的なUVマッピングを作成できます(たとえば、UVマップの一方にキャラクタの左側、他方に右側をマッピングできます)。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    matchChoice (uint): トポロジのコンポーネントを一致する際に使用すると、一致候補から最良の一致を選択します。転送操作に関わるメッシュに対称のトポロジがある場合は、複数のトポロジの一致がある場合があります。メッシュのシェイプを比較して一致候補にスコアが付けられ、ゼロから始まるインデックスが割り当てられます。通常、(既定の)ゼロを一致させることが最良ですが、Mayaが誤って選択する場合を考慮して値を変更することで、その他の一致を確認することができます。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    sampleSpace (uint): アトリビュートの転送を実行する空間を選択します。0はワールド空間、1はモデル空間、4はコンポーネントベース、5はトポロジベースです。既定はワールド空間です。

    -----------------------------------------

    searchMethod (uint): ポイントを相関させるときに使用する検索方法を指定します。0は法線に沿った最近接、3はポイントに最近接を意味します。既定はポイントに最近接です。

    -----------------------------------------

    searchScaleX (float): データの転送前にターゲットモデルのX軸に適用するオプションスケールを指定します。値が1.0(既定)の場合、スケーリングは行いません。値が-1.0の場合、X軸に沿ってミラーリングを行います。

    -----------------------------------------

    searchScaleY (float): データの転送前にターゲットモデルのY軸に適用するオプションスケールを指定します。値が1.0(既定)の場合、スケーリングは行いません。値が-1.0の場合、Y軸に沿ってミラーリングを行います。

    -----------------------------------------

    searchScaleZ (float): データの転送前にターゲットモデルのZ軸に適用するオプションスケールを指定します。値が1.0(既定)の場合、スケーリングは行いません。値が-1.0の場合、Z軸に沿ってミラーリングを行います。

    -----------------------------------------

    sourceColorSet (string): ターゲットに転送するソースサーフェス上の単一のカラーセットの名前を指定します。この値は、単一のカラーセットを転送するように操作を設定している場合だけ使用します(transferColorsフラグを参照)。

    -----------------------------------------

    sourceUvSet (string): ターゲットに転送するソースサーフェス上の単一のUVセットの名前を指定します。この値は、単一のUVセットを転送するように操作を設定している場合だけ使用します(transferUVsフラグを参照)。

    -----------------------------------------

    sourceUvSpace (string): 転送空間として使用するソースサーフェス上のUVセットの名前を指定します。この値は、UV空間でアトリビュートを転送するように操作を設定している場合だけ使用します。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    targetColorSet (string): サンプリングしたカラーデータを受信するターゲットサーフェス上の単一のカラーセットの名前を指定します。この値は、単一のカラーセットを転送するように操作を設定している場合だけ使用します(transferColorsフラグを参照)。

    -----------------------------------------

    targetUvSet (string): サンプリングしたUVデータを受信するターゲットサーフェス上の単一のUVセットの名前を指定します。この値は、単一のUVセットを転送するように操作を設定している場合だけ使用します(transferUVsフラグを参照)。

    -----------------------------------------

    targetUvSpace (string): 転送空間として使用するターゲットサーフェス上のUVセットの名前を指定します。この値は、UV空間でアトリビュートを転送するように操作を設定している場合だけ使用します。

    -----------------------------------------

    transferColors (uint): カラーセットの転送をコントロールします。0の場合は、カラーセットを転送しません。1の場合は、(sourceColorSetとtargetColorSetで指定した)単一のカラーセットを転送します。2の場合は、すべてのカラーセットを転送します。

    -----------------------------------------

    transferNormals (uint): ゼロ以外の値は、頂点法線をサンプリングし、ターゲットサーフェス上のユーザ法線に書き込むことを示します。

    -----------------------------------------

    transferPositions (uint): ゼロ以外の値は、頂点の位置をサンプリングすることを示します。この場合、ターゲットサーフェスがソースサーフェスに「ラップ」されます。

    -----------------------------------------

    transferUVs (uint): UVセットの転送をコントロールします。0の場合は、UVセットを転送しません。1の場合は、(sourceUVSetとtargetUVSetで指定した)単一のUVセットを転送します。2の場合は、すべてのUVセットを転送します。

    -----------------------------------------

    useComponentTags (boolean): このフラグを指定すると、componentTagsを使用した設定が作成されます。つまり、groupId、groupParts、tweak、またはobjectSetノードは作成されず、新しいデフォーマに接続されません。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def transferShadingSets(sampleSpace: int = 1,searchMethod: int = 1) -> None:
    """
    メッシュ間でシェーディング セットの割り当てを転送するためのコマンド。リストの最後のメッシュが他のメッシュからシェーディングの割り当てを受け取ります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    sampleSpace (uint): アトリビュートの転送を実行する空間を選択します。0はワールド空間、1はモデル空間です。既定はワールド空間です。

    -----------------------------------------

    searchMethod (uint): ポイントを相関させるときに使用する検索方法を指定します。0は法線に沿った最近接、3はポイントに最近接を意味します。既定はポイントに最近接です。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def unfold(applyToShell: bool = False,areaWeight: float = 1.0,globalBlend: float = 1.0,globalMethodBlend: float = 1.0,iterations: int = 1,optimizeAxis: int = 1,pinSelected: bool = False,pinUvBorder: bool = False,scale: float = 1.0,stoppingThreshold: float = 1.0,useScale: bool = False) -> None:
    """
    なし



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    applyToShell (boolean): 選択したコンポーネントが、選択または固定された項目があるシェルのみに作用するように指定します。

    -----------------------------------------

    areaWeight (float): サーフェスドリブンの重要性です。0:すべてのフェースを同等に扱います。1:大きいフェースを重視します。

    -----------------------------------------

    globalBlend (float): ローカルの最適化方法(globalBlend=0.0)とグローバルの最適化方法(globalBlend=1.0)をブレンドできるようになります。ローカルな最適化方法では、オブジェクト上の三角ポリゴンとUV空間の三角ポリゴンの比率を見ます。ただし、テーパの問題を引き起こす可能性があります。グローバルの最適化はより時間がかかりますが、UV配置を最適化するときにオブジェクト全体を考慮します。

    -----------------------------------------

    globalMethodBlend (float): グローバルの最適化方法は、最小化の計算に2つの関数を使用します。1番目の関数はXYZとUV間のエッジの長さを使用してエッジ伸長を制御します。2番目の関数は、三角ポリゴンがオーバーラップする構成を防ぐことで、1番目の関数にペナルティを科します。すべてのサーフェスに、適切な応答を返す2つの関数の組み合わせが存在します。値が1.0に近いほど、エッジの長さ関数が重視されます。0.0に近づくほど、サーフェス領域が重視されます。既定値は0.5で、これら2つの値の均等な組み合わせです。

    -----------------------------------------

    iterations (int): 接続された各UVピースの反復の最大数です。

    -----------------------------------------

    optimizeAxis (int): 最適化の自由度です。0=自由に最適化、1=垂直方向のみに移動、2=水平方向のみに移動

    -----------------------------------------

    pinSelected (boolean): 選択されていないコンポーネントではなく、選択したコンポーネントを固定するように指定します。

    -----------------------------------------

    pinUvBorder (boolean): ソルバの実行時にUV境界を固定するかどうかを指定します。既定では、非選択のコンポーネントのみが固定されます。

    -----------------------------------------

    scale (float): 2D空間と3D空間の比率です。

    -----------------------------------------

    stoppingThreshold (float): 2つのステップ間における、歪み改善の最小値(%)です。

    -----------------------------------------

    useScale (boolean): スケールを調整するかどうかを指定します。

    -----------------------------------------

    Return Value:
    None: int実行するリラックス反復の回数
    """
    pass

    
def untangleUV(mapBorder: str = "",maxRelaxIterations: int = 1,pinBorder: bool = False,pinSelected: bool = False,pinUnselected: bool = False,relax: str = "",relaxTolerance: float = 1.0,shapeDetail: float = 1.0) -> None:
    """
    このコマンドは、テクスチャ UV をほどくことで、テクスチャ空間に非オーバーラップ領域(すなわちポリゴン)を作成できるようにします。これは次の 2 段階で行われます。 1. このコマンドを使用して、現在の選択項目に定義された UV 境界または渡されたコンポーネントを、次のリラックス処理により適したシェイプにマッピングします。 2. テクスチャ空間にあるすべてのエッジに対して長さの最小化アルゴリズムを実行し、内部のすべてのテクスチャ UV をリラックスさせます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    mapBorder (string): 選択したUVを含む境界を、UVのリラックス操作により適したシェイプへとマッピングします。数多くのタイプのマッピングが使用可能です。すべてのマッピング結果は単位正方形内に収められます。有効な文字列:circular:(0,0)に最近接の選択済みUVによる円形マッピングsquare:選択済みUVを(0,0)に配置した、単位正方形へのマッピングshape:選択済みUVが(0,0)から(0.5,0.5)の直線状に配置されたオブジェクトの、実際のシェイプを反映することを試みるマッピングshape_circular:マッピングされた境界の自己交差を回避できる程度に、円形マッピングへと補間されるシェイプマッピングshape_square:マップピングされた境界の自己交差を回避できる程度に、正方形マッピングへと補間されるシェイプマッピング

    -----------------------------------------

    maxRelaxIterations (int): リラックスプロセスは反復アルゴリズムです。このフラグを使用して、実行する反復数の上限を設定します。

    -----------------------------------------

    pinBorder (boolean): trueの場合、すべてのリラックス操作において、関連するテクスチャ境界を同じ位置に固定します。

    -----------------------------------------

    pinSelected (boolean): trueの場合、すべてのリラックス操作において、選択したUVを同じ位置に固定します。

    -----------------------------------------

    pinUnselected (boolean): trueの場合、すべてのリラックス操作において、各メッシュにあるすべての非選択UVを同じ位置に固定します。

    -----------------------------------------

    relax (string): 選択したUVのシェルにあるすべてのUVをリラックスします。リラックスは、UVの各エッジをスプリングとして扱う、スプリングシステムをシミュレートします。リラックスには、スプリングシステムにおけるUVエッジをウェイト付けする方法により、さまざまな方法があります。ウェイト付けは文字列で指定します。有効な文字列:uniform:すべてのエッジを同じようにウェイト付けします。これが最速の方法です。inverse_length:すべてのエッジウェイトは、ワールド空間上の長さに反比例します。inverse_sqrt_length:すべてのエッジウェイトは、ワールド空間上の長さの平方根に反比例します。harmonic:このウェイト付けは、UVとジオメトリとの一致ングについてほぼ最適の結果を生成できますが、処理に時間がかかる場合があります。

    -----------------------------------------

    relaxTolerance (float): リラックスプロセスを中止するタイミングを定義する許容量を設定します。許容量を小さくすると優れた結果が得られますが、処理に時間がかかります。

    -----------------------------------------

    shapeDetail (float): mapBorderフラグをcircularまたはsquareに設定した場合、このフラグは、境界の他王するサーフェスシェイプが、最終的にマッピングされた境界で保持される度合いを制御します。

    -----------------------------------------

    Return Value:
    None: int実行するリラックス反復の回数
    """
    pass

    
def uvSnapshot(antiAliased: bool = False,blueColor: int = 1,entireUVRange: bool = False,fileFormat: str = "",greenColor: int = 1,name: str = "",overwrite: bool = False,redColor: int = 1,uMax: float = 1.0,uMin: float = 1.0,uvSetName: str = "",vMax: float = 1.0,vMin: float = 1.0,xResolution: int = 1,yResolution: int = 1) -> None:
    """
    選択したオブジェクトの UV を含むイメージを構築します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    antiAliased (boolean): このフラグを設定すると、ラインがアンチエイリアシングされます。

    -----------------------------------------

    blueColor (int): 線画の青色の成分です。既定は255です。

    -----------------------------------------

    entireUVRange (boolean): このフラグを設定すると、生成されたイメージにはUVの全範囲が含まれます。既定は、0-1の範囲にあるUVです。

    -----------------------------------------

    fileFormat (string): 出力ファイルフォーマットです。このキーワードは、「iff」、「sgi」、「pic」、「tif」、「als」、「gif」、「rla」、「jpg」のいずれかで、既定はiffです。

    -----------------------------------------

    greenColor (int): 線画の緑色の成分です。既定は255です。

    -----------------------------------------

    name (string): 作成するファイルの名前です。

    -----------------------------------------

    overwrite (boolean): このフラグを設定すると、既存のファイルを上書きできます。

    -----------------------------------------

    redColor (int): 線画の赤色の成分です。既定は255です。

    -----------------------------------------

    uMax (float): ユーザがオプションで指定したU方向の最大値です。既定値は1で、「全範囲」の-euvフラグよりも優先されます。

    -----------------------------------------

    uMin (float): ユーザがオプションで指定したU方向の最小値です。既定値は0で、「全範囲」の-euvフラグよりも優先されます。

    -----------------------------------------

    uvSetName (string): 使用するUVセットの名前です。既定は現在のUVセットです。

    -----------------------------------------

    vMax (float): ユーザがオプションで指定したV方向の最大値です。既定値は1で、「全範囲」の-euvフラグよりも優先されます。

    -----------------------------------------

    vMin (float): ユーザがオプションで指定したV方向の最小値です。既定値は0で、「全範囲」の-euvフラグよりも優先されます。

    -----------------------------------------

    xResolution (int): イメージの水平方向のサイズです。既定は512です。

    -----------------------------------------

    yResolution (int): イメージの垂直方向のサイズです。既定は512です。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def alignSurface(caching: bool = False,curvatureContinuity: bool = False,curvatureScale1: float = 1.0,curvatureScale2: float = 1.0,directionU: bool = False,joinParameter: float = 1.0,nodeState: int = 1,positionalContinuity: bool = False,positionalContinuityType: int = 1,reverse1: bool = False,reverse2: bool = False,swap1: bool = False,swap2: bool = False,tangentContinuity: bool = False,tangentContinuityType: int = 1,tangentScale1: float = 1.0,tangentScale2: float = 1.0,twist: bool = False,attach: bool = False,constructionHistory: bool = False,keepMultipleKnots: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    alignSurface コマンドは、Maya のサーフェスを位置合わせするために使用します。主な位置合わせオプションは、位置連続性、接線連続性と曲率連続性です。曲率連続性は接線連続性を含みます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    curvatureContinuity (boolean): trueにすると曲率連続性はオンになり、falseにすると曲率連続性はオフになります。既定:false

    -----------------------------------------

    curvatureScale1 (float): 曲率連続性で1番目のサーフェスの曲率に適用される曲率スケール。既定:0.0

    -----------------------------------------

    curvatureScale2 (float): 曲率連続性で2番目のサーフェスの曲率に適用される曲率スケール。既定:0.0

    -----------------------------------------

    directionU (boolean): trueの場合はサーフェスのU方向を使い、falseの場合はサーフェスのV方向を使います。既定:true

    -----------------------------------------

    joinParameter (float): 修正されたサーフェスが位置合わせされる参照サーフェスのパラメータ。既定:123456.0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    positionalContinuity (boolean): trueの場合、位置連続性がオンになり、falseの場合、位置連続性がオフになります。既定:true

    -----------------------------------------

    positionalContinuityType (int): 位置連続性タイプの正当な値は次のとおりです:1-最初のサーフェスを移動2-2番目のサーフェスを移動3-両方のサーフェスを移動4-最初のサーフェスを修正5-2番目のサーフェスを修正6-両方のサーフェスを修正既定:1

    -----------------------------------------

    reverse1 (boolean): trueの場合、位置合わせする前に1番目の入力サーフェスの方向(方向Uで指定される)を逆にします。falseの場合、位置合わせする前に1番目の入力サーフェスに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    reverse2 (boolean): trueの場合、位置合わせする前に2番目の入力サーフェスの方向(方向Uで指定される)を逆にします。falseの場合、位置合わせする前に2番目の入力サーフェスに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    swap1 (boolean): trueの場合、位置合わせする前に1番目の入力サーフェスのUV方向を交換します。falseの場合、位置合わせする前に1番目の入力サーフェスに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    swap2 (boolean): trueの場合、位置合わせする前に2番目の入力サーフェスのUV方向を交換します。falseの場合、位置合わせする前に2番目の入力サーフェスに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    tangentContinuity (boolean): trueの場合、接線連続性がオンになり、falseの場合、接線連続性がオフになります。既定:true

    -----------------------------------------

    tangentContinuityType (int): 接線連続性タイプの正当な値は次のとおりです:1-最初のサーフェスで接線連続性を実行2-2番目のサーフェスで接線連続性を実行既定:1

    -----------------------------------------

    tangentScale1 (float): 接線連続性で1番目のサーフェスの接線に適用される接線スケール。既定:1.0

    -----------------------------------------

    tangentScale2 (float): 接線連続性で2番目のサーフェスの接線に適用される接線スケール。既定:1.0

    -----------------------------------------

    twist (boolean): trueの場合、位置合わせする前に2番目のサーフェスを反対の方向(方向Uで指定される)に逆にします。これにより、位置合わせされたサーフェスでのねじれが避けられます。falseの場合、位置合わせする前に2番目の入力サーフェスに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    attach (boolean): 位置揃え後に、サーフェスをアタッチする必要がありますか?

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    keepMultipleKnots (boolean): 多重ノットを維持する必要がありますか?

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def angleBetween(caching: bool = False,constructionHistory: bool = False,euler: bool = False,nodeState: int = 1,vector1: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),vector1X: float = 1.0,vector1Y: float = 1.0,vector1Z: float = 1.0,vector2: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),vector2X: float = 1.0,vector2Y: float = 1.0,vector2Z: float = 1.0) -> None:
    """
    1 つのベクトルを別のベクトルに回転するために必要な軸と角度を返します。コンストラクション ヒストリ(ch)フラグが ON の場合、新しいディペンデンシー ノードの名前が返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    euler (boolean): 回転を軸と角度ではなく、3つのオイラー角で返します

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    vector1 ([linear, linear, linear]): 回転の計算元のベクトル

    -----------------------------------------

    vector1X (linear): 回転の計算元のベクトルのX座標

    -----------------------------------------

    vector1Y (linear): 回転の計算元のベクトルのY座標

    -----------------------------------------

    vector1Z (linear): 回転の計算元のベクトルのZ座標

    -----------------------------------------

    vector2 ([linear, linear, linear]): 回転の計算先のベクトル

    -----------------------------------------

    vector2X (linear): 回転の計算先のベクトルのX座標

    -----------------------------------------

    vector2Y (linear): 回転の計算先のベクトルのY座標

    -----------------------------------------

    vector2Z (linear): 回転の計算先のベクトルのZ座標

    -----------------------------------------

    Return Value:
    None: float[]3 つのオイラー角、または軸と角度stringconstructionHistory フラグが使用されている場合。
    """
    pass

    
def arubaNurbsToPoly(caching: bool = False,constructionHistory: bool = False,localSpace: bool = False,name: str = "",nodeState: int = 1,object: bool = False,worldSpace: bool = False) -> None:
    """
    このコマンドは、NURBS サーフェスをテッセレーションし、ポリゴン サーフェスを作成します。新しいポリゴン サーフェスの名前が返されます。コンストラクション ヒストリがオンの場合、新しいディペンデンシー ノードの名前も返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    localSpace (boolean): ローカル空間でテッセレートします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    worldSpace (boolean): ワールド空間でテッセレートします。

    -----------------------------------------

    Return Value:
    None: string[]ポリゴンとオプションのディペンデンシー ノード名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def attachSurface(blendBias: float = 1.0,blendKnotInsertion: bool = False,caching: bool = False,directionU: bool = False,keepMultipleKnots: bool = False,method: int = 1,nodeState: int = 1,parameter: float = 1.0,reverse1: bool = False,reverse2: bool = False,swap1: bool = False,swap2: bool = False,twist: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    Attach コマンドは、サーフェスをアタッチするときに使います。サーフェスが一度アタッチされると、結合ポイントには複数のノットができます。多重ノットは、必要に応じて保持または除去できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    blendBias (float): ブレンドファクトリに応じて1番目または2番目のカーブの方向に結果のオブジェクトを傾斜させて、0.5より小さいまたは0.5より大きい範囲に収めます。既定:0.5

    -----------------------------------------

    blendKnotInsertion (boolean): trueに設定されている場合、少し異なるエフェクトを作成するため、オリジナルカーブの1つ(以下のパラメータアトリビュートで指定される相対的な位置)にノットを挿入します。既定:false

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    directionU (boolean): trueの場合はサーフェスのU方向にアタッチし、falseの場合はサーフェスのV方向にアタッチします。既定:true

    -----------------------------------------

    keepMultipleKnots (boolean): trueの場合、結合パラメータの多重ノットを維持します。falseの場合、多重ノットを除去します。既定:true

    -----------------------------------------

    method (int): アタッチ方法(接続-0、ブレンド-1)。既定:0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    parameter (float): 新しく挿入されたノットの位置に関するパラメータ値です。既定:0.1

    -----------------------------------------

    reverse1 (boolean): trueの場合、アタッチする前に1つ目の入力サーフェスの(directionUで指定された)方向を逆にします。falseの場合、アタッチする前に1つ目の入力サーフェスに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    reverse2 (boolean): trueの場合、アタッチする前に2つ目の入力サーフェスの(directionUで指定された)方向を逆にします。falseの場合、アタッチする前に2つ目の入力サーフェスに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    swap1 (boolean): trueの場合、アタッチする前に1つ目の入力サーフェスのUV方向を入れ替えます。falseの場合、アタッチする前に1つ目の入力サーフェスに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    swap2 (boolean): trueの場合、アタッチする前に2つ目の入力サーフェスのUV方向を入れ替えます。falseの場合、アタッチする前に2つ目の入力サーフェスに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    twist (boolean): trueの場合、アタッチする前に2番目のサーフェスの(directionUで指定された)方向の逆に反転します。これにより、アタッチされたサーフェスでのねじれが避けられます。falseの場合、アタッチする前に2つ目の入力サーフェスに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def bevel(bevelShapeType: int = 1,caching: bool = False,cornerType: int = 1,depth: float = 1.0,extrudeDepth: float = 1.0,nodeState: int = 1,tolerance: float = 1.0,width: float = 1.0,constructionHistory: bool = False,joinSurfaces: bool = False,name: str = "",numberOfSides: int = 1,object: bool = False,polygon: int = 1,range: bool = False) -> None:
    """
    bevel コマンドは、指定したカーブに対して新しいベベル サーフェスを作成します。カーブには NURBS カーブを指定できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bevelShapeType (int): シェイプタイプ:1-直線カット、2-カーブアウト、3-カーブイン既定:1

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    cornerType (int): コーナータイプ:1-リニア、2-円形既定:2

    -----------------------------------------

    depth (linear): べベルの深度既定:0.05

    -----------------------------------------

    extrudeDepth (linear): べベルの押し出しの深度既定:1.0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    tolerance (linear): ベベルオフセットの許容値既定:0.01

    -----------------------------------------

    width (linear): べベルの幅既定:0.05

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    joinSurfaces (boolean): それぞれの入力カーブの1つのサーフェスに、べベルしたサーフェスをアタッチします。既定:true

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    numberOfSides (int): ベベルの適用方法1-べベルなし2-開始位置のみべベル3-終了位置のみべベル4-開始と終了位置でべベル既定:4

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def bevelPlus(bevelInside: bool = False,capSides: int = 1,constructionHistory: bool = False,innerStyle: int = 1,joinSurfaces: bool = False,name: str = "",normalsOutwards: bool = False,numberOfSides: int = 1,outerStyle: int = 1,polygon: int = 1,range: bool = False) -> None:
    """
    bevelPlus コマンドは、指定したカーブに対して指定したスタイル カーブを使い、新しいベベル サーフェスを作成します。1 つめのカーブは「外側」のカーブで、残りのカーブ(オプション)は、1 つめのカーブの内側になければなりません。予想通りの結果を得るためには、カーブはすべて平面で同一プレーン上にある必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bevelInside (boolean): trueの場合、常にサーフェスに元のプロファイルカーブが残るようにします。既定:false

    -----------------------------------------

    capSides (int): ベベルにキャップを付加する方法1-キャップなし2-開始位置のみキャップ3-終了位置のみキャップ4-開始と終了位置でキャップ既定:4

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    innerStyle (int): outerStyleに似ていますが、指定した1つめ(外側)のカーブ以外のすべてのカーブに、このスタイルが適用されます。

    -----------------------------------------

    joinSurfaces (boolean): それぞれの入力カーブの1つのサーフェスに、べベルしたサーフェスをアタッチします。既定:true

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    normalsOutwards (boolean): 有効な場合、法線はNURBSサーフェスまたはポリゴンサーフェスの外側を示します。

    -----------------------------------------

    numberOfSides (int): ベベルの適用方法1-べベルなし2-開始位置のみべベル3-終了位置のみべベル4-開始と終了位置でべベル既定:4

    -----------------------------------------

    outerStyle (int): 1つめ(外側)のカーブのベベルに使うスタイルを選択します。定義済みのスタイルが15個あります(0～14の値で選択)。MELをお使いになった経験があれば、カスタムカーブを指定してスタイルカーブに使用することができます。スタイルカーブの要件については、styleCurveノードのマニュアルを参照してください。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def bezierAnchorPreset(preset: int = 1) -> None:
    """
    ベジェ曲線のシェイプ用に照会可能なインタフェースを提供します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    preset (int): 選択したベジェアンカーに適用するプリセットを選択します。有効な引数は、0:ベジェ、1:ベジェコーナー、2:コーナーです。

    -----------------------------------------

    Return Value:
    None: int(修正されたアンカーの数)
    """
    pass

    
def bezierAnchorState(even: bool = False,smooth: bool = False) -> None:
    """
    bezierAnchorState コマンドは、アンカー状態を修正するための簡単なインタフェースを提供します:



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    even (boolean): 選択されたアンカー(またはアタッチされた接線ハンドル)を、trueのときは均等化、それ以外は非均等化します。

    -----------------------------------------

    smooth (boolean): 選択されたアンカー(またはアタッチされた接線ハンドル)を、trueのときはスムーズ、それ以外は分割します。

    -----------------------------------------

    Return Value:
    None: int(修正されたアンカーの数)
    """
    pass

    
def bezierCurveToNurbs() -> None:
    """
    bezierCurveToNurbs コマンドは、既存の NURBS カーブをベジェ カーブに変換しようとします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string[](オブジェクト名とノード名)
    """
    pass

    
def bezierInfo(anchorFromCV: int = 1,cvFromAnchor: int = 1,isAnchorSelected: bool = False,isTangentSelected: bool = False,onlyAnchorsSelected: bool = False,onlyTangentsSelected: bool = False) -> None:
    """
    ベジェ カーブのシェイプ用に照会可能なインタフェースを提供します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    anchorFromCV (int): 指定されたCVインデックスからベジェアンカーインデックスを返します。

    -----------------------------------------

    cvFromAnchor (int): 指定されたベジェアンカーインデックスのCVインデックスを返します。

    -----------------------------------------

    isAnchorSelected (boolean): アンカーのCVが現在選択されていれば1、それ以外は0を返します。

    -----------------------------------------

    isTangentSelected (boolean): 接線のCVが現在選択されていれば1、それ以外は0を返します。

    -----------------------------------------

    onlyAnchorsSelected (boolean): 選択されたCVのコンポーネントのみがアンカーのCVであれば1、それ以外は0を返します。

    -----------------------------------------

    onlyTangentsSelected (boolean): 選択されたCVのコンポーネントのみが接線のCVであれば1、それ以外は0を返します。

    -----------------------------------------

    Return Value:
    None: int照会された値
    """
    pass

    
def blend2(autoAnchor: bool = False,autoNormal: bool = False,caching: bool = False,flipLeftNormal: bool = False,flipRightNormal: bool = False,leftAnchor: float = 1.0,leftEnd: float = 1.0,leftStart: float = 1.0,multipleKnots: bool = False,nodeState: int = 1,positionTolerance: float = 1.0,reverseLeft: bool = False,reverseRight: bool = False,rightAnchor: float = 1.0,rightEnd: float = 1.0,rightStart: float = 1.0,tangentTolerance: float = 1.0,constructionHistory: bool = False,crvsInFirstRail: int = 1,name: str = "",object: bool = False,polygon: int = 1) -> None:
    """
    このコマンドは、指定したカーブ間でブレンドしてサーフェスを作成します。これは、現在はサポートされていないブレンドのエンハンスメント(さらに細かくコントロール可能)です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    autoAnchor (boolean): trueで両方のパスが閉じている場合は、一致するように右側のレイルで値を自動的に定義します。既定:true

    -----------------------------------------

    autoNormal (boolean): trueの場合、各開始接線の方向は、指定したジオメトリに基づいて計算されます。既定:true

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    flipLeftNormal (boolean): trueの場合、開始接線を左側の境界に反転します。既定:false

    -----------------------------------------

    flipRightNormal (boolean): trueの場合、開始接線を右側の境界に反転します。既定:false

    -----------------------------------------

    leftAnchor (float): 閉じたレイルの場合の、ブレンドサーフェスが始まる、左側の境界の参照パラメータです。既定:0.0

    -----------------------------------------

    leftEnd (float): ブレンドサーフェスが終わる、左側の境界の参照パラメータです。既定:1.0

    -----------------------------------------

    leftStart (float): ブレンドサーフェスが始まる、左側の境界の参照パラメータです。既定:0.0

    -----------------------------------------

    multipleKnots (boolean): trueの場合は、複数の内部ノットを完全に生成する新しいブレンドを使用します既定:true

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    positionTolerance (float): 隣接するサーフェスへのブレンドサーフェスの位置C(0)の許容値です。既定:0.1

    -----------------------------------------

    reverseLeft (boolean): trueの場合、左側の境界の方向を反転させます。この値のautoDirectionはfalseである必要があります。既定:false

    -----------------------------------------

    reverseRight (boolean): trueの場合、右側の境界の方向を反転させます。この値のautoDirectionはfalseである必要があります。既定:false

    -----------------------------------------

    rightAnchor (float): 閉じたレイルの場合の、ブレンドサーフェスが始まる、右側の境界の参照パラメータです。既定:0.0

    -----------------------------------------

    rightEnd (float): ブレンドサーフェスが終わる、右側の境界の参照パラメータです。既定:1.0

    -----------------------------------------

    rightStart (float): ブレンドサーフェスが始まる、右側の境界の参照パラメータです。既定:0.0

    -----------------------------------------

    tangentTolerance (float): 隣接するサーフェスへのブレンドサーフェスの接線G(1)連続性の許容値です。既定:0.1

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    crvsInFirstRail (int): ブレンドの1番目のレイルのカーブの数です。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def boundary(caching: bool = False,endPoint: bool = False,endPointTolerance: float = 1.0,nodeState: int = 1,order: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1,range: bool = False) -> None:
    """
    このコマンドは、3 つまたは 4 つのカーブが指定した境界サーフェスを生成します。作成される境界サーフェスは 1 つの方向に指定した 2 つのカーブを通過します。残ったカーブによってシェイプを別の方向に定義します。「endPoint」オプションがオンの場合、カーブの終点はサーフェスが作成される前に接している必要があります。これは、境界サーフェスが便利なケースです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    endPoint (boolean): trueは、サーフェスが作成される前にカーブの終端が接している必要があるという意味です。既定:false

    -----------------------------------------

    endPointTolerance (linear): endPointアトリビュートがtrueの場合のみ使用される、終点の許容値です。既定:0.1

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    order (boolean): カーブの順序が重要な場合はtrueです。既定:true

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def canCreateManip() -> None:
    """
    このコマンドは、指定した選択項目にマニピュレータがある可能性がある場合は true を、なければ false を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: booleanコマンドの結果
    """
    pass

    
def circularFillet(caching: bool = False,nodeState: int = 1,positionTolerance: float = 1.0,primaryRadius: float = 1.0,secondaryRadius: float = 1.0,tangentTolerance: float = 1.0,constructionHistory: bool = False,curveOnSurface: bool = False,name: str = "",object: bool = False) -> None:
    """
    このコマンドは、指定した 2 つの NURBS サーフェス間の転がるボールのサーフェス フィレット(円形フィレット)を計算する場合に使用します。このサーフェス上にトリム カーブを作成するには、-cos true を使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    positionTolerance (float): C(0)フィレットサーフェスの許容値です。既定:0.01

    -----------------------------------------

    primaryRadius (linear): 1番目の半径です。既定:1.0

    -----------------------------------------

    secondaryRadius (linear): 2番目の半径です。既定:1.0

    -----------------------------------------

    tangentTolerance (float): G(1)フィレットサーフェスの許容値です。既定:0.01

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    curveOnSurface (boolean): 可能な場合は、2Dカーブが作成されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名、ノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def closeSurface(blendBias: float = 1.0,blendKnotInsertion: bool = False,caching: bool = False,direction: int = 1,nodeState: int = 1,parameter: float = 1.0,preserveShape: int = 1,constructionHistory: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    closeSurface コマンドは U、V または両方向のサーフェスを閉じて周期サーフェスにします。閉じる方向は、direction フラグで制御されます。このコマンドでサーフェスが指定されていない場合、最初に選択したサーフェスが使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    blendBias (float): ブレンド値に応じて1つめまたは2つめのサーフェスの方向に結果のオブジェクトを傾斜させて、0.5より小さいまたは0.5より大きい範囲に収めます。既定:0.5

    -----------------------------------------

    blendKnotInsertion (boolean): trueに設定されている場合、少し異なるエフェクトを作成するため、オリジナルサーフェスの1つ(以下のパラメータアトリビュートで指定される相対的な位置)にノットを挿入します。既定:false

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    direction (int): 閉じる方向:0-U、1-V、2-UとVの両方。既定:0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    parameter (float): 新しく挿入されたノットの位置に関するパラメータ値です。既定:0.1

    -----------------------------------------

    preserveShape (int): 0-シェイプの保持なし1-シェイプを保持2-ブレンド既定:1

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def cone(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,degree: int = 1,endSweep: float = 1.0,heightRatio: float = 1.0,nodeState: int = 1,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),radius: float = 1.0,sections: int = 1,spans: int = 1,startSweep: float = 1.0,tolerance: float = 1.0,useOldInitBehaviour: bool = False,useTolerance: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1) -> None:
    """
    cone コマンドは新規の円錐や円錐を作成するディペンデンシー ノードを作成し、それらの名前を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): プリミティブの軸です。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    degree (int): 作成されるサーフェスの次数です:1-一次、3-三次既定:3

    -----------------------------------------

    endSweep (angle): 回転サーフェスが終了角度。既定は2πラジアン(360度)です。既定:6.2831853

    -----------------------------------------

    heightRatio (float): 「高さ」と「幅」の比率です。既定:2.0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pivot ([linear, linear, linear]): プリミティブのピボットポイントです。

    -----------------------------------------

    radius (linear): オブジェクトの半径です。既定:1.0

    -----------------------------------------

    sections (int): セクション数によって、サーフェスのスイープ方向の解像度が決まります。useToleranceがfalseの場合のみに使用されます。既定:8

    -----------------------------------------

    spans (int): スパン数によって、サーフェスの逆方向の解像度が決まります。既定:1

    -----------------------------------------

    startSweep (angle): 回転サーフェスの開始角度です。既定:0

    -----------------------------------------

    tolerance (linear): サーフェスの構築で使用するしきい値です。useToleranceがtrueの場合のみに使用されます。既定:0.01

    -----------------------------------------

    useOldInitBehaviour (boolean): Maya8.0以下と同じように、原点を底にして円錐を作成します。そうでない場合、原点を中心にして円錐を作成します。既定:false

    -----------------------------------------

    useTolerance (boolean): 指定したしきい値を使用して解像度を決定します。指定されていない場合は、セクション数が使用されます。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def constructionHistory(toggle: bool = False) -> None:
    """
    このコマンドはコンストラクション ヒストリをオンまたはオフにします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    toggle (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def cylinder(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,degree: int = 1,endSweep: float = 1.0,heightRatio: float = 1.0,nodeState: int = 1,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),radius: float = 1.0,sections: int = 1,spans: int = 1,startSweep: float = 1.0,tolerance: float = 1.0,useTolerance: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1) -> None:
    """
    cylinder コマンドを使うと、新しい円柱や円柱を作成するディペンデンシー ノードが作成され、その名前が返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): プリミティブの軸です。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    degree (int): 作成されるサーフェスの次数です:1-一次、3-三次既定:3

    -----------------------------------------

    endSweep (angle): 回転サーフェスが終了角度。既定は2πラジアン(360度)です。既定:6.2831853

    -----------------------------------------

    heightRatio (float): 「高さ」と「幅」の比率です。既定:2.0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pivot ([linear, linear, linear]): プリミティブのピボットポイントです。

    -----------------------------------------

    radius (linear): オブジェクトの半径です。既定:1.0

    -----------------------------------------

    sections (int): セクション数によって、サーフェスのスイープ方向の解像度が決まります。useToleranceがfalseの場合のみに使用されます。既定:8

    -----------------------------------------

    spans (int): スパン数によって、サーフェスの逆方向の解像度が決まります。既定:1

    -----------------------------------------

    startSweep (angle): 回転サーフェスの開始角度です。既定:0

    -----------------------------------------

    tolerance (linear): サーフェスの構築で使用するしきい値です。useToleranceがtrueの場合のみに使用されます。既定:0.01

    -----------------------------------------

    useTolerance (boolean): 指定したしきい値を使用して解像度を決定します。指定されていない場合は、セクション数が使用されます。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def detachSurface(caching: bool = False,direction: int = 1,keep: bool = False,nodeState: int = 1,parameter: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    パラメータ値と方向のリストに従って、サーフェスが断片にデタッチされます。「-k」フラグを使用すると、保存する断片と破棄する断片を指定できます。戻り値は、新しくデタッチされたサーフェスの名前です。コンストラクション ヒストリがオンの場合は、作成されるディペンデンシー ノード名も返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    direction (int): デタッチの方向。0-V方向、1-U方向。既定:1

    -----------------------------------------

    keep (boolean): デタッチされた断片が保存されます。既定:true

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    parameter (float): デタッチのパラメータ。既定:0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def doubleProfileBirailSurface(blendFactor: float = 1.0,caching: bool = False,nodeState: int = 1,tangentContinuityProfile1: bool = False,tangentContinuityProfile2: bool = False,transformMode: int = 1,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1) -> None:
    """
    引数は、「profile1」、「profile2」、「rail1」、「rail2」という名前の 4 つのカーブです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    blendFactor (float): 2つのプロファイル間に適用するブレンド係数。影響量'inputProfile1'がサーフェス作成に含まれます。既定:0.5

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    tangentContinuityProfile1 (boolean): inputProfile1で入力プロファイル全体の接線連続性を維持する必要があります。既定:false

    -----------------------------------------

    tangentContinuityProfile2 (boolean): inputProfile2で入力カーブ全体の接線連続性を維持する必要があります。既定:false

    -----------------------------------------

    transformMode (int): トランスフォームモードです(非比例、比例)。非比例が既定値です。既定:0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def duplicateSurface(caching: bool = False,constructionHistory: bool = False,faceCountU: int = 1,faceCountV: int = 1,firstFaceU: int = 1,firstFaceV: int = 1,local: bool = False,mergeItems: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    サーフェス パッチ(フェース)を取り、3D サーフェスを返します。接続したパッチは、1 つのサーフェスとして返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    faceCountU (int): U方向のフェース数。既定:1

    -----------------------------------------

    faceCountV (int): V方向のフェース数。既定:1

    -----------------------------------------

    firstFaceU (int): 最初のフェース(U方向のインデックス)。既定:0

    -----------------------------------------

    firstFaceV (int): 最初のフェース(V方向のインデックス)。既定:0

    -----------------------------------------

    local (boolean): サーフェスのトランスフォームをコピーし、ローカル空間バージョンに接続します。

    -----------------------------------------

    mergeItems (boolean): 可能な場合は、コンポーネントの結果をマージします。たとえば、a[1]およびa[2]を返すのではなく、a[1:2]を返します。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def extendSurface(caching: bool = False,distance: float = 1.0,extendDirection: int = 1,extendMethod: int = 1,extendSide: int = 1,extensionType: int = 1,join: bool = False,nodeState: int = 1,constructionHistory: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    このコマンドは、サーフェスを延長するか、または延長として新しいサーフェスを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    distance (linear): 延長する距離(bydistanceの場合のみ)。既定:1

    -----------------------------------------

    extendDirection (int): 延長するサーフェスのパラメトリック方向(0-U、1-V、2-両方)。既定:0

    -----------------------------------------

    extendMethod (int): 延長方法(0-距離)。既定:0

    -----------------------------------------

    extendSide (int): 延長するサーフェスの側(0-終点、1-起点、2-両方)。既定:1

    -----------------------------------------

    extensionType (int): 延長のタイプ(0-接線、2-補外)。既定:0

    -----------------------------------------

    join (boolean): 延長をオリジナルに結合します。既定:true

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def extrude(caching: bool = False,degreeAlongLength: int = 1,direction: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),directionX: float = 1.0,directionY: float = 1.0,directionZ: float = 1.0,extrudeType: int = 1,fixedPath: bool = False,length: float = 1.0,nodeState: int = 1,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),reverseSurfaceIfPathReversed: bool = False,rotation: float = 1.0,scale: float = 1.0,subCurveSubSurface: bool = False,useComponentPivot: int = 1,useProfileNormal: bool = False,constructionHistory: bool = False,mergeItems: bool = False,name: str = "",object: bool = False,polygon: int = 1,range: bool = False,rebuild: bool = False) -> None:
    """
    このコマンドは、プロファイル カーブと場合によってはパス カーブを指定した場合に、サーフェスを計算します。プロファイル カーブを押し出すには 3 つの方法があります。最も基本的な方法は「距離」押し出しと呼ばれる方法で、押し出す方向と長さが指定されます。この場合、パス カーブは必要ありません。2 番目の方法は「フラット」押し出しと呼ばれる方法です。この方法では、プロファイル カーブの方向を変えずにプロファイル カーブを下にスイープします。最後に、3 番目の「チューブ」押し出しと呼ばれる方法があります。この方法では、プロファイル カーブを下にスイープし、プロファイル カーブは回転してパス カーブとの関係性が維持されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    degreeAlongLength (int): 距離の押し出しを実行したときの、距離に沿ったサーフェス次数。既定:1

    -----------------------------------------

    direction ([linear, linear, linear]): 押し出す方向です。extrudeTypeが距離でuseProfileNormalがオフの場合にのみ使用します。

    -----------------------------------------

    directionX (linear): 方向のX座標。既定:0

    -----------------------------------------

    directionY (linear): 方向のY座標。既定:1

    -----------------------------------------

    directionZ (linear): 方向のZ座標。既定:0

    -----------------------------------------

    extrudeType (int): 押し出しのタイプ(距離-0、フラット-1、チューブ-2)既定:2

    -----------------------------------------

    fixedPath (boolean): trueの場合、作成されたサーフェスをパスカーブに配置します。それ以外の場合は、作成されたサーフェスをプロファイルカーブに配置します。既定:false

    -----------------------------------------

    length (linear): 押し出す距離です。extrudeTypeが距離の場合にのみ使用します。既定:1

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pivot ([linear, linear, linear]): extrudeTypeがチューブの場合に使用されるピボットポイントです。

    -----------------------------------------

    reverseSurfaceIfPathReversed (boolean): trueの場合、押し出しタイプはチューブ(2)で、パスが内部的に反転してから、計算されたサーフェスをパスに対応する方向に反転します。既定:false

    -----------------------------------------

    rotation (angle): パスカーブに沿ってスイープするときのプロファイルカーブを回転する量です。既定:0

    -----------------------------------------

    scale (float): パスカーブに沿ってスイープするときのプロファイルカーブをスケールする量です。既定:1.0

    -----------------------------------------

    subCurveSubSurface (boolean): trueの場合、パス上でのカーブの範囲は、押し出す前のカットではなく、結果として得られるサーフェスに適用されます。既定:false

    -----------------------------------------

    useComponentPivot (int): パスの最近接終点-0、コンポーネントピボット-1、プロファイルのバウンディングボックスのセンター-2を使用既定:0

    -----------------------------------------

    useProfileNormal (boolean): trueの場合、押し出す方向のプロファイルカーブの法線を使用します。extrudeTypeが距離またはチューブの場合にのみ使用します。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    mergeItems (boolean): 可能な場合は、コンポーネントの結果をマージします。たとえば、a[1]およびa[2]を返すのではなく、a[1:2]を返します。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    rebuild (boolean): 操作で入力カーブを使用する前に、入力カーブを再構築します。変換のためのパラメータを設定するには、nurbsCurveRebuildPrefを使用します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def filterExpand(expand: bool = False,fullPath: bool = False,selectionMask: int = 1,symActive: bool = False,symNegative: bool = False,symPositive: bool = False,symSeam: bool = False) -> None:
    """
    選択したコンポーネント(またはコマンドラインで指定したコンポーネント)に基づき、このコマンドはリストで指定したオプションにフィルタをかけたり展開したりします。すべての一致する選択項目を含む文字配列を返します。セレクション マスクには次のものがあります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    expand (boolean): これがtrueの場合、各項目は単一のエンティティになります。既定はtrueです。

    -----------------------------------------

    fullPath (boolean): これがtrueで選択項目がDAGオブジェクトの場合、フル選択パスを返します。この値がfalseのときは、オブジェクトの名前だけを返します。既定はfalseです。

    -----------------------------------------

    selectionMask (int): セレクションマスクを指定します。

    -----------------------------------------

    symActive (boolean): シンメトリが有効になっている場合、オブジェクトのアクティブなシンメトリ側にあるコンポーネントのみを返します。このフラグは、シンメトリがアクティブでない場合には影響しません。

    -----------------------------------------

    symNegative (boolean): シンメトリが有効になっている場合、現在のシンメトリプレーンと比較してオブジェクトの負の側にあるコンポーネントのみを返します。このフラグは、シンメトリがアクティブでない場合には影響しません。

    -----------------------------------------

    symPositive (boolean): シンメトリが有効になっている場合、現在のシンメトリプレーンと比較してオブジェクトの正の側にあるコンポーネントのみを返します。このフラグは、シンメトリがアクティブでない場合には影響しません。

    -----------------------------------------

    symSeam (boolean): シンメトリが有効になっている場合、現在のシンメトリプレーンと比較してオブジェクトの両側に均等に位置するコンポーネントのみを返します。このフラグは、シンメトリがアクティブでない場合には影響しません。

    -----------------------------------------

    Return Value:
    None: string[]コマンドの結果
    """
    pass

    
def freeFormFillet(bias: float = 1.0,caching: bool = False,depth: float = 1.0,nodeState: int = 1,positionTolerance: float = 1.0,tangentTolerance: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1,range: bool = False) -> None:
    """
    2 つのサーフェス トリム エッジ、アイソパラム、またはカーブ オンサーフェスの間にフリーフォームのサーフェス フィレットを作成します。フィレット サーフェス作成では、バイアスと深度としてブレンド コントロールが備わります。バイアス値は、2 つの選択したカーブの 2 つの端の接線をスケールします。深度値は選択した 2 つのカーブのフィレットの曲率をコントロールします。深度およびバイアスの既定値はそれぞれ 0.5 です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bias (float): フィレットのバイアス値。既定:0.5

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    depth (float): フィレットの深度値。既定:0.5

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    positionTolerance (float): C(0)フィレットサーフェス作成の許容値。既定:0.1

    -----------------------------------------

    tangentTolerance (float): G(1)フィレットサーフェス作成の連続性の許容値。既定:0.1

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def globalStitch(caching: bool = False,lockSurface: bool = False,maxSeparation: float = 1.0,modificationResistance: float = 1.0,nodeState: int = 1,sampling: int = 1,stitchCorners: int = 1,stitchEdges: int = 1,stitchPartialEdges: bool = False,stitchSmoothness: int = 1,constructionHistory: bool = False,name: str = "",object: bool = False) -> None:
    """
    このコマンドは NURBS サーフェスの globalStitch を計算します。最低 1 つの NURBS サーフェスがなければなりません。NURBS サーフェスはトリミングされていない状態である必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    lockSurface (boolean): 取り付けで変更しないようにNURBSサーフェスを指定したマルチインデックスにロックします。既定:false

    -----------------------------------------

    maxSeparation (linear): ステッチ可能な最大分離です。既定:0.1

    -----------------------------------------

    modificationResistance (float): サーフェスCVに対する修正抵抗値ウェイトです。既定:1e-1

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    sampling (int): エッジのステッチ時のサンプリングです。既定:1

    -----------------------------------------

    stitchCorners (int): サーフェスのコーナーをステッチします。0(ゼロ)-オフ、1-最近接ポイント、2-最近接ノット、既定:1

    -----------------------------------------

    stitchEdges (int): サーフェスのエッジをステッチします。0(ゼロ)-オフ、1-最近接ポイント、2-パラメータ一致、既定:1

    -----------------------------------------

    stitchPartialEdges (boolean): 部分エッジステッチングのオン/オフを切り替えます。既定:false

    -----------------------------------------

    stitchSmoothness (int): エッジ結合の平滑性タイプを設定します。0(ゼロ)-オフ、1-接線、2-法線、既定:0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def grid(default: bool = False,displayAxes: bool = False,displayAxesBold: bool = False,displayDivisionLines: bool = False,displayGridLines: bool = False,displayOrthographicLabels: bool = False,displayPerspectiveLabels: bool = False,divisions: int = 1,orthographicLabelPosition: str = "",perspectiveLabelPosition: str = "",reset: bool = False,size: float = 1.0,spacing: float = 1.0,style: int = 1,toggle: bool = False) -> None:
    """
    このコマンドは、パース ビューと正投影ビューで表示される地表プレーンの、ラインのサイズと間隔を変更します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    default (boolean): 既定値の指定や照会に使用します。

    -----------------------------------------

    displayAxes (boolean): グリッド軸を表示するには、trueを指定します。

    -----------------------------------------

    displayAxesBold (boolean): trueを指定すると、グリッド軸を太い線で描画して強調します。

    -----------------------------------------

    displayDivisionLines (boolean): グリッドラインの間のサブディビジョンラインを表示するには、trueを指定します。

    -----------------------------------------

    displayGridLines (boolean): グリッドラインを表示するには、trueを指定します。

    -----------------------------------------

    displayOrthographicLabels (boolean): trueを指定すると、正投影ビューにあるグリッドラインの数値ラベルを表示します。

    -----------------------------------------

    displayPerspectiveLabels (boolean): trueを指定すると、パースビューにあるグリッドラインの数値ラベルを表示します。

    -----------------------------------------

    divisions (uint): メイングリッドライン間のサブディビジョン数を設定します。既定は5です。間隔が5単位の場合、5つに区切ると境界線が1単位ごとに分かれて表示されます。

    -----------------------------------------

    orthographicLabelPosition (string): 正投影ビューにあるグリッドの数値ラベルの位置を指定します。有効な値は「axis」と「edge」です。

    -----------------------------------------

    perspectiveLabelPosition (string): パースビューにあるグリッドの数値ラベルの位置を指定します。有効な値は「axis」と「edge」です。

    -----------------------------------------

    reset (boolean): 地表プレーンを既定値にリセットします。

    -----------------------------------------

    size (linear): グリッドサイズをリニア単位で設定します。既定は12単位です。

    -----------------------------------------

    spacing (linear): メイングリッドラインの間隔をリニア単位で設定します。既定は5です。

    -----------------------------------------

    style (uint): このフラグは廃止されているので、使用しないでください。

    -----------------------------------------

    toggle (boolean): 正投影ビューを含め、すべてのウィンドウの地表プレーンの表示をオフにします。既定はtrueです。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def insertKnotSurface(addKnots: bool = False,caching: bool = False,direction: int = 1,insertBetween: bool = False,nodeState: int = 1,numberOfKnots: int = 1,parameter: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    insertKnotSurface コマンドでは、パラメータ値のリストが指定されている場合に、サーフェスにノット(アイソパラムとも呼ばれる)が挿入されます。パラメータ値 1 つに対して追加されるノットの数と、ノットが追加されるか補完されるかを指定することができます。サーフェスの名前を返し、ヒストリがオンの場合は、作成されたディペンデンシー ノードの名前も返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addKnots (boolean): ノットまたは補足を追加します。補足とは、指定したノット数に到達するようにノットを追加することです。既定:true

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    direction (int): ノットを挿入する方向:0-V方向、1-U方向。既定:1

    -----------------------------------------

    insertBetween (boolean): true(真)に設定すると、複数のパラメータ値が指定され、ノットはパラメータ値そのものではなく、所定のパラメータ値の間に均等な間隔で挿入されます。既定:false

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    numberOfKnots (int): 挿入されるノットの数。既定:1

    -----------------------------------------

    parameter (float): ノットが追加されるパラメータ値です。既定:0.0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def intersect(caching: bool = False,firstSurface: bool = False,nodeState: int = 1,tolerance: float = 1.0,constructionHistory: bool = False,curveOnSurface: bool = False,name: str = "",object: bool = False) -> int:
    """
    intersect コマンドでは、すべてのサーフェスが互いに交差する位置にカーブ オンサーフェスが作成されます。既定では、カーブ オンサーフェスは両方のサーフェスに作成されます。しかし、-fs フラグを使用すると、最初のサーフェスだけがカーブ オンサーフェスを持つようになります。また、交差カーブは、カーブ オンサーフェスではなく、3D カーブとして作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    firstSurface (boolean): 最初のサーフェスだけ、またはすべてのサーフェス(既定)にカーブオンサーフェスが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    tolerance (linear): 適合させるときの許容値。既定:0.01

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    curveOnSurface (boolean): 可能な場合は、2Dカーブが作成されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    Return Value:
    int: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def loft(autoReverse: bool = False,caching: bool = False,close: bool = False,createCusp: bool = False,degree: int = 1,nodeState: int = 1,reverse: bool = False,reverseSurfaceNormals: bool = False,sectionSpans: int = 1,uniform: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1,range: bool = False,rebuild: bool = False) -> None:
    """
    複数の NURBS カーブを通過するスキン(ロフト)サーフェスが算出されます。最低 2 本のカーブが存在する必要があります。NURBS カーブとしては、サーフェス アイソパラム、カーブ オンサーフェス、トリム エッジ、ポリゴン エッジが挙げられます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    autoReverse (boolean): trueに設定すると、ロフトのカーブ方向が自動的に算出されます。falseに設定すると、多目的のreverseフラグ値が代わりに使用されます。既定:true

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    close (boolean): trueに設定すると、算出されるサーフェスは最初のカーブの先頭(末尾)で閉じます(循環します)。falseに設定すると、サーフェスは開いたままになります。既定:false

    -----------------------------------------

    createCusp (boolean): 多目的フラグ。各フラグはロフト操作で適合するカーブを参照します。フラグを設定すると、特定のプロファイルに、作成されたサーフェスで尖角(接線の切れ目)ができます。既定:false

    -----------------------------------------

    degree (int): 作成されるサーフェスの次数です。既定:3

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    reverse (boolean): 多目的フラグ。各フラグはロフト操作で適合するカーブを参照します。フラグを設定すると、特定のカーブは反転してからロフト操作で使用されます。既定:false

    -----------------------------------------

    reverseSurfaceNormals (boolean): 設定すると、出力NURBSサーフェス上のサーフェス法線が反転します。つまり、UとVのパラメータ方向を入れ替えます。既定:false

    -----------------------------------------

    sectionSpans (int): ロフトで連続したカーブ間のサーフェススパン数です。既定:1

    -----------------------------------------

    uniform (boolean): trueに設定すると、算出されるサーフェスはロフト方向で均一なパラメータ設定になります。falseに設定すると、パラメータ設定は弦の長さになります。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    rebuild (boolean): 操作で入力カーブを使用する前に、入力カーブを再構築します。変換のためのパラメータを設定するには、nurbsCurveRebuildPrefを使用します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def makeSingleSurface(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1,object: bool = False,stitchTolerance: float = 1.0) -> None:
    """
    このコマンドは、ステッチとテッセレーション操作を実行します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    stitchTolerance (float): ステッチの許容値。既定:0.1

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def moveVertexAlongDirection(direction: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),magnitude: float = 1.0,normalDirection: float = 1.0,uDirection: float = 1.0,uvNormalDirection: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),vDirection: float = 1.0) -> None:
    """
    選択したコントロール頂点(CV)が、指定した単位方向に特定規模だけ移動します。頂点は、単位法線(-n フラグ)の方向にも移動できます。NURBS サーフェス頂点の場合、移動方向は、U に沿った接線か V に沿った接線になります。フラグ -n、-u、-v、および -d は、相互に排他的です。つまり、選択した頂点はすべて、-n、-u、-v、または -d でのみ移動することができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    direction ([float, float, float]): 指定した方向に頂点が移動します。方向は正規化されます。

    -----------------------------------------

    magnitude (linear): 指定した規模だけ方向ベクトルで移動します。

    -----------------------------------------

    normalDirection (linear): それぞれのコンポーネントの特定規模だけ、法線方向にコンポーネントが移動します。法線は「正規化」されます。

    -----------------------------------------

    uDirection (linear): 適切である場合は、それぞれのコンポーネントでUに沿った接線方向にコンポーネントが移動します。このフラグは、ポリゴンとNURBSカーブで無視されます。U方向は正規化されます。

    -----------------------------------------

    uvNormalDirection ([linear, linear, linear]): 指定したディスプレイスメントでそれぞれのコンポーネントの三つ組み空間[u,v,n]で移動されます。このフラグは、ポリゴンとNURBSカーブで無視されます。

    -----------------------------------------

    vDirection (linear): 適切である場合は、それぞれのコンポーネントでVに沿った接線方向にコンポーネントが移動します。このフラグは、ポリゴンとNURBSカーブで無視されます。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def multiProfileBirailSurface(caching: bool = False,nodeState: int = 1,tangentContinuityProfile1: bool = False,tangentContinuityProfile2: bool = False,transformMode: int = 1,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1) -> None:
    """
    このコマンドは、2 本のレイル カーブに沿ってプロファイルをスイープすることによって、レイル サーフェスを作成します。2 本のレイルは、最後の 2 つの引数です。たとえば、5 つのカーブを指定した場合、「curve1」「curve2」「curve3」「rail1」「rail2」に対応します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    tangentContinuityProfile1 (boolean): 最初のプロファイルを横切った接線連続性。プロファイルはサーフェスカーブである必要があります。既定:false

    -----------------------------------------

    tangentContinuityProfile2 (boolean): 最後のプロファイルを横切った接線連続性。プロファイルはサーフェスカーブである必要があります。既定:false

    -----------------------------------------

    transformMode (int): トランスフォームモードです(非比例、比例)。非比例が既定値です。既定:0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nurbsBoolean(caching: bool = False,nodeState: int = 1,operation: int = 1,tolerance: float = 1.0,constructionHistory: bool = False,name: str = "",nsrfsInFirstShell: int = 1,object: bool = False,smartConnection: bool = False) -> None:
    """
    このコマンドは、ブール演算を行います。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    operation (int): ブール演算のタイプです。既定:0

    -----------------------------------------

    tolerance (linear): フィッティングの許容値です。既定:0.01

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nsrfsInFirstShell (int): 最初のシェルを構成する選択項目の数です。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    smartConnection (boolean): ブール演算をヒストリとして持つ選択項目を検索します。既定はtrueです。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nurbsCopyUVSet() -> None:
    """
    これはデバッグ専用のサンプル コマンドで、NURBS サーフェス上に暗黙的な st パラメータ設定のコピーを作成し、1 番目の明示的な uvset にします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nurbsCube(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,degree: int = 1,heightRatio: float = 1.0,lengthRatio: float = 1.0,nodeState: int = 1,patchesU: int = 1,patchesV: int = 1,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),width: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1) -> None:
    """
    nurbsCube コマンドは 6 つのプレーンからなる、新しい NURBS 立方体を作成します。既定では、中心が原点にある立方体を作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): プリミティブの軸です。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    degree (int): 作成されるサーフェスの次数です。1-一次、2-ニ次、3-三次、5-五次、7-七次。既定:3

    -----------------------------------------

    heightRatio (float): 「高さ」と「幅」の比率です。既定:1.0

    -----------------------------------------

    lengthRatio (float): 「長さ」と「幅」の比率です。既定:1.0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    patchesU (int): U方向のセクション数。既定:1

    -----------------------------------------

    patchesV (int): V方向のセクション数。既定:1

    -----------------------------------------

    pivot ([linear, linear, linear]): プリミティブのピボットポイントです。

    -----------------------------------------

    width (linear): オブジェクトの幅。既定:1.0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nurbsCurveToBezier() -> None:
    """
    nurbsCurveToBezier コマンドは既存の NURBS カーブをベジェ カーブに変換しようとします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string[](オブジェクト名とノード名)
    """
    pass

    
def nurbsEditUV(angle: float = 1.0,pivotU: float = 1.0,pivotV: float = 1.0,relative: bool = False,rotateRatio: float = 1.0,rotation: bool = False,scale: bool = False,scaleU: float = 1.0,scaleV: float = 1.0,uValue: float = 1.0,vValue: float = 1.0) -> None:
    """
    このコマンドは、NURBS オブジェクトの UV を編集します。照会フラグと一緒に使用した場合、指定したコンポーネントにコネクトされた UV 値を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    angle (float): UV値を回転させる角度値を、度単位で指定します。

    -----------------------------------------

    pivotU (float): スケールまたは回転を実行するU方向のピボット値を指定します。

    -----------------------------------------

    pivotV (float): スケールまたは回転を実行するV方向のピボット値を指定します。

    -----------------------------------------

    relative (boolean): 既存の値に対し、値を相対的に編集するかどうかを指定します。既定はtrueです。

    -----------------------------------------

    rotateRatio (float): UV値を回転させるときに使用する比率を指定します。既定は1.0です。

    -----------------------------------------

    rotation (boolean): 回転値を使用して値を編集するかどうかを指定します。

    -----------------------------------------

    scale (boolean): スケール値を使用して値を編集するかどうかを指定します。

    -----------------------------------------

    scaleU (float): U方向のスケール値を指定します。

    -----------------------------------------

    scaleV (float): V方向のスケール値を指定します。

    -----------------------------------------

    uValue (float): U方向の値を指定します。relativeフラグがfalseの場合は絶対値として指定します。

    -----------------------------------------

    vValue (float): V方向の値を指定します。relativeフラグがfalseの場合は絶対値として指定します。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nurbsPlane(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,degree: int = 1,lengthRatio: float = 1.0,nodeState: int = 1,patchesU: int = 1,patchesV: int = 1,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),width: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1) -> None:
    """
    nurbsPlane コマンドは、新しい NURBS プレーンを作成し、その新規のサーフェス名を返します。ユニット プレーンが作成され、その中心は既定では原点になっています。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): プリミティブの軸です。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    degree (int): 作成されるサーフェスの次数です。1-一次、2-二次、3-三次、5-五次、7-七次。既定:3

    -----------------------------------------

    lengthRatio (float): プレーンの「長さ」と「幅」の比率です。既定:1.0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    patchesU (int): U方向のスパン数。既定:1

    -----------------------------------------

    patchesV (int): V方向のスパン数。既定:1

    -----------------------------------------

    pivot ([linear, linear, linear]): プリミティブのピボットポイントです。

    -----------------------------------------

    width (linear): プレーンの幅。既定:1.0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nurbsSelect(borderSelection: bool = False,bottomBorder: bool = False,growSelection: int = 1,leftBorder: bool = False,rightBorder: bool = False,shrinkSelection: int = 1,topBorder: bool = False) -> None:
    """
    オブジェクトへの選択操作を実行します。 任意の境界フラグを設定すると、該当する境界が選択されます。それ以外の場合は、現在選択されている CV が使用されるか、サーフェスをオブジェクトとして選択している場合は、すべての CV が使用されます。 次に growSelection、shrinkSelection、borderSelection の各フラグが、この順番で適用されます。 実際には、一度にひとつのフラグを使用することをお勧めします(境界フラグを除く)。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    borderSelection (boolean): 現在選択されているCVの境界を抽出します。

    -----------------------------------------

    bottomBorder (boolean): サーフェスの下の境界を選択します(V=0)。

    -----------------------------------------

    growSelection (int): 指定したCV数だけ、CV選択を増やします。

    -----------------------------------------

    leftBorder (boolean): サーフェスの左の境界を選択します(U=0)。

    -----------------------------------------

    rightBorder (boolean): サーフェスの右の境界を選択します(U=最大(Max))。

    -----------------------------------------

    shrinkSelection (int): 指定したCV数だけ、CV選択を減らします。

    -----------------------------------------

    topBorder (boolean): パッチの上の境界を選択します(V=最大(Max))。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def nurbsToPoly(caching: bool = False,constructionHistory: bool = False,curvatureTolerance: int = 1,explicitTessellationAttributes: bool = False,name: str = "",nodeState: int = 1,object: bool = False,smoothEdge: bool = False,smoothEdgeRatio: float = 1.0,uDivisionsFactor: float = 1.0,vDivisionsFactor: float = 1.0) -> None:
    """
    このコマンドは、NURBS サーフェスをテッセレーションし、ポリゴン サーフェスを作成します。新しいポリゴン サーフェスの名前が返されます。コンストラクション ヒストリがオンの場合、新しいディペンデンシー ノードの名前も返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    curvatureTolerance (int): 二次基準曲率許容値のレベルのプリセットです。0=最高許容値、1=高許容値、2=中許容値、3=許容なし。既定:2

    -----------------------------------------

    explicitTessellationAttributes (boolean): テッセレーションパラメータの上級モードと初級モードを指定します。既定:true

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    smoothEdge (boolean): テッセレーションを継続するための決定を、NURBSエッジのスムーズ度に基づいて行うかどうかを指定します。既定:false

    -----------------------------------------

    smoothEdgeRatio (float): スムーズエッジの比率を指定します。値が大きいほど、エッジはより滑らかになります。既定:0.99

    -----------------------------------------

    uDivisionsFactor (float): 初級モードにおけるU方向のテッセレーションの増加係数を指定します。既定:1.5

    -----------------------------------------

    vDivisionsFactor (float): 初級モードにおけるV方向のテッセレーションの増加係数を指定します。既定:1.5

    -----------------------------------------

    Return Value:
    None: string[]ポリゴンとオプションのディペンデンシー ノード名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nurbsToPolygonsPref(chordHeight: float = 1.0,chordHeightRatio: float = 1.0,delta3D: float = 1.0,edgeSwap: bool = False,format: int = 1,fraction: float = 1.0,matchRenderTessellation: int = 1,merge: int = 1,mergeTolerance: float = 1.0,minEdgeLen: float = 1.0,polyCount: int = 1,polyType: int = 1,uNumber: int = 1,uType: int = 1,useChordHeight: bool = False,useChordHeightRatio: bool = False,vNumber: int = 1,vType: int = 1) -> None:
    """
    このコマンドは、nurbs-to-polygons (または「tesselate」)プリファレンスで使用します。このプリファレンスは、Maya のメニュー項目が使用し、Maya のセッション間で保存されます。これらのフラグを照会するには、「-query」フラグを使用します。フラグの詳細については、ノードに関するマニュアルで「nurbsTesselate」ノードを参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    chordHeight (float): 

    -----------------------------------------

    chordHeightRatio (float): 

    -----------------------------------------

    delta3D (float): 

    -----------------------------------------

    edgeSwap (boolean): 

    -----------------------------------------

    format (uint): 有効な値は0、1、2です。

    -----------------------------------------

    fraction (float): 

    -----------------------------------------

    matchRenderTessellation (uint): 

    -----------------------------------------

    merge (uint): 

    -----------------------------------------

    mergeTolerance (float): 

    -----------------------------------------

    minEdgeLen (float): 

    -----------------------------------------

    polyCount (uint): 

    -----------------------------------------

    polyType (uint): 

    -----------------------------------------

    uNumber (uint): 

    -----------------------------------------

    uType (uint): 

    -----------------------------------------

    useChordHeight (boolean): 

    -----------------------------------------

    useChordHeightRatio (boolean): 

    -----------------------------------------

    vNumber (uint): 

    -----------------------------------------

    vType (uint): 

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nurbsUVSet(create: bool = False,useExplicit: bool = False) -> None:
    """
    NURBS オブジェクト上の暗黙的 UV と明示的な UV を切り替えることができます。また、明示的な現在の UV セットの作成、削除、名前の変更、設定するための機能を提供します。暗黙的な UV セットは編集できません。これは NURBS オブジェクトのパラメトリック構成を使用して、UV の位置(アイソパラム交点)を決定します。また NURBS オブジェクトは、ポリゴン オブジェクトの UV に類似した明示的 UV セットもサポートします。UV はオブジェクトのノット(アイソパラム交点)に作成され、完全に編集可能です。NURBS オブジェクトの UV 編集機能にアクセスするには、明示的な UV セットを作成し、現在の UV セットとして設定する必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    create (boolean): 指定したサーフェス上に、明示的なUVセットを作成します。サーフェス上に明示的なUVセットがすでに存在する場合、このフラグに効果はありません。-ue/useExplicitフラグを使用して、作成した明示的なUVセットを現在のUVセットとして設定(または設定解除)します。

    -----------------------------------------

    useExplicit (boolean): 明示的なUVと暗黙的なUVの使用を切り替えます。trueの場合は明示的なUVを使用し、それ以外の場合は暗黙的なUVを使用します。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def offsetSurface(caching: bool = False,distance: float = 1.0,method: int = 1,nodeState: int = 1,constructionHistory: bool = False,name: str = "",object: bool = False) -> None:
    """
    offset コマンドは、選択したサーフェスから新しいオフセット サーフェスを作成します。既定の手法はサーフェスのオフセットで、そのサーフェス自身に相対的にオフセットします。CV オフセットの手法はサーフェスではなく CV を直接オフセットするので、通常はわずかに精度が低くなりますが、速度は高速になります。オフセット サーフェスは、オリジナル サーフェスと常に同じ角度、同数の CV、同じノットのスペーシング方式です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    distance (linear): オフセット距離既定:1.0

    -----------------------------------------

    method (int): オフセット方法0-サーフェスフィット1-CVフィット既定:0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def planarSrf(caching: bool = False,degree: int = 1,keepOutside: bool = False,nodeState: int = 1,tolerance: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1,range: bool = False) -> None:
    """
    閉じた領域を形成する平面境界カーブから平面トリム カーブを計算します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    degree (int): 作成されるサーフェスの次数です:1-一次、3-三次既定:3

    -----------------------------------------

    keepOutside (boolean): trueに設定すると、指定したカーブの外側に領域が維持されます。既定:false

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    tolerance (linear): 同じプレーンに存在するカーブのCVの距離許容値。既定:0.01

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def plane(length: float = 1.0,name: str = "",position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rotation: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),size: float = 1.0,width: float = 1.0) -> None:
    """
    空間内にスケッチ プレーン(「コンストラクション プレーン」とも言う)を作成します。NURBS カーブ、ジョイント チェーン、ポリゴンなどのオブジェクトをコンストラクション プレーン上に作成するには、まずプレーンをライブにする必要があります。makeLive コマンドも参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    length (linear): プレーンの長さ。「linear」は、このフラグで単位を伴う値を処理できることを意味します。

    -----------------------------------------

    name (string): 作成されたオブジェクトに名前を付けます。

    -----------------------------------------

    position ([linear, linear, linear]): プレーンの中央を示す3Dの位置。「linear」は、このフラグで単位を伴う値を処理できることを意味します。

    -----------------------------------------

    rotation ([angle, angle, angle]): プレーンの回転。「angle」は、このフラグで単位を伴う値を処理できることを意味します。

    -----------------------------------------

    size (linear): プレーンの組み合わさったサイズ(サイズxサイズ)。「linear」は、このフラグで単位を伴う値を処理できることを意味します。

    -----------------------------------------

    width (linear): プレーンの幅。「linear」は、このフラグで単位を伴う値を処理できることを意味します。

    -----------------------------------------

    Return Value:
    None: string(新しいプレーンの名前)
    """
    pass

    
def pointOnSurface(caching: bool = False,constructionHistory: bool = False,nodeState: int = 1,normal: bool = False,normalizedNormal: bool = False,normalizedTangentU: bool = False,normalizedTangentV: bool = False,parameterU: float = 1.0,parameterV: float = 1.0,position: bool = False,tangentU: bool = False,tangentV: bool = False,turnOnPercentage: bool = False) -> None:
    """
    サーフェス上のポイントの情報を返します。フラグが指定されていない場合、このコマンドでは既定の p/position が指定されているものとみなされます。複数のフラグを指定すると、文字配列を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    normal (boolean): サーフェス上で指定したポイントの法線(x,y,z)を返します。

    -----------------------------------------

    normalizedNormal (boolean): サーフェス上で指定したポイントの正規化された法線(x,y,z)を返します。

    -----------------------------------------

    normalizedTangentU (boolean): サーフェス上で指定したポイントの正規化U接線(x,y,z)を返します。

    -----------------------------------------

    normalizedTangentV (boolean): サーフェス上で指定したポイントの正規化されたV接線(x,y,z)を返します。

    -----------------------------------------

    parameterU (float): サーフェス上のUパラメータ値既定:0.0

    -----------------------------------------

    parameterV (float): サーフェス上のVパラメータ値既定:0.0

    -----------------------------------------

    position (boolean): サーフェス上で指定したポイントの位置(x,y,z)を返します。

    -----------------------------------------

    tangentU (boolean): サーフェス上で指定したポイントのU接線(x,y,z)を返します。

    -----------------------------------------

    tangentV (boolean): サーフェス上で指定したポイントのV接線(x,y,z)を返します。

    -----------------------------------------

    turnOnPercentage (boolean): パラメータが正規化(0,1)されているかどうか既定:false

    -----------------------------------------

    Return Value:
    None: float[3]ベクトル クエリー結果string文字クエリー結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def pointPosition(local: bool = False,world: bool = False) -> None:
    """
    あらゆるタイプのポイント オブジェクトのワールド空間位置かローカル空間位置を返します。有効な選択項目は、- カーブおよびサーフェス CV - ポリゴン頂点 - ラティス ポイント - パーティクル - カーブおよびサーフェス エディット ポイント - カーブおよびサーフェス パラメータ ポイント - ポリゴン UV - 回転/スケール/ジョイント ピボット - セレクション ハンドル - ロケータ、パラメータ ロケータ、および円弧長ロケータです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    local (boolean): ポイントのローカル空間の座標を返します。

    -----------------------------------------

    world (boolean): ポイントのワールド空間の座標を返します。

    -----------------------------------------

    Return Value:
    None: float[]コマンドの結果
    """
    pass

    
def projectCurve(caching: bool = False,direction: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),directionX: float = 1.0,directionY: float = 1.0,directionZ: float = 1.0,nodeState: int = 1,tolerance: float = 1.0,useNormal: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,range: bool = False) -> None:
    """
    projectCurve コマンドはカーブをサーフェス上に作成し、すべての選択したカーブは選択したサーフェスに投影されます。投影はサーフェス法線を使って行うか、投影するベクトル方向を指定して行うことができます。注: コマンド ラインで、カーブおよびサーフェスを特定の順番に指定する必要はありません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    direction ([linear, linear, linear]): 投影の方向です。useNormalがfalseの場合にのみ使用可能です。

    -----------------------------------------

    directionX (linear): 投影のX方向です。既定:0.0

    -----------------------------------------

    directionY (linear): 投影のY方向です。既定:0.0

    -----------------------------------------

    directionZ (linear): 投影のZ方向です。既定:1.0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    tolerance (linear): 適合させるときの許容値。既定:0.01

    -----------------------------------------

    useNormal (boolean): サーフェス法線を使用する場合はtrue、方向ベクトルを使用する場合はfalseにします。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def propMove(percent: float = 1.0,percentX: float = 1.0,percentY: float = 1.0,percentZ: float = 1.0,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),scale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),translate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),worldSpace: bool = False) -> None:
    """
    任意の数のオブジェクトの比率変換、スケールおよび回転を行います。回転、スケール、または変換のパーセンテージは、-p フラグあるいは -px、-py、-pz フラグを使って指定することができます。それぞれの選択したオブジェクトには、対応する -p あるいは -px、-py、-pz フラグがなければなりません。回転、スケールまたは変換は相対的に行われます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    percent (float): 指定したx、y、zが、オブジェクトに与えるエフェクトのパーセンテージです。このフラグは各オブジェクトにつき1つ指定しなければなりません。つまり4つのオブジェクトが指定されている場合、4つの「-p」フラグが必要になります(このフラグが指定されていない場合は、1.0%が使用されます)。このフラグは通常0.0～1.0ですが、任意の浮動小数点を取ることもできます。

    -----------------------------------------

    percentX (float): 指定したxがオブジェクトに与えるエフェクトのパーセンテージです。このフラグは、各オブジェクトに1つずつ指定します。値の範囲は0.0～1.0ですが、任意の浮動小数点値を取ることもできます。-pフラグがすでに指定されている場合、このフラグの使用は無効になります。

    -----------------------------------------

    percentY (float): 指定したyがオブジェクトに与えるエフェクトのパーセンテージです。このフラグは、各オブジェクトに1つずつ指定します。値の範囲は0.0～1.0ですが、任意の浮動小数点値を取ることもできます。-pフラグがすでに指定されている場合、このフラグの使用は無効になります。

    -----------------------------------------

    percentZ (float): 指定したzがオブジェクトに与えるエフェクトのパーセンテージです。このフラグは、各オブジェクトに1つずつ指定します。値の範囲は0.0～1.0ですが、任意の浮動小数点値を取ることもできます。-pフラグがすでに指定されている場合、このフラグの使用は無効になります。

    -----------------------------------------

    pivot ([float, float, float]): 回転またはスケールの中心となるピボットを指定します。ピボットの変更は現在の「propMove」コマンドでのみ有効なので、エフェクトを際立たせるためには、上記の移動フラグの1つと連動して使用する必要があります。

    -----------------------------------------

    rotate ([angle, angle, angle]): 各オブジェクトを指定した角度で均等に回転します。回転値は、オブジェクトの対応する「-percent」フラグで指定したパーセンテージでスケールされます。角度はすべて度単位です。回転の中心は、「-pivot」フラグで指定したピボットです。また「-pivot」フラグがない場合は、(0,0,0)です。

    -----------------------------------------

    scale ([float, float, float]): 各オブジェクトを指定した量だけ均等にスケールします。スケール値は、オブジェクトの対応する「-percent」フラグで指定したパーセンテージでスケールされます。各オブジェクトの位置と大きさは、「-pivot」フラグで指定したピボットとの関係で測定されます。既定では、各オブジェクトの個々のピボットが使用されます。コントロール頂点(CV)などのオブジェクトコンポーネントの場合、既定は親オブジェクトのピボットです。

    -----------------------------------------

    translate ([linear, linear, linear]): 各オブジェクトを指定した量だけ均等に移動します。移動値は、オブジェクトの対応する「-percent」フラグで指定したパーセンテージでスケールされます。「-pivot」フラグは移動には影響しません。

    -----------------------------------------

    worldSpace (boolean): 計算にワールド空間を使用します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def rebuildSurface(caching: bool = False,degreeU: int = 1,degreeV: int = 1,direction: int = 1,endKnots: int = 1,fitRebuild: int = 1,keepControlPoints: bool = False,keepCorners: bool = False,keepRange: int = 1,nodeState: int = 1,rebuildType: int = 1,spansU: int = 1,spansV: int = 1,tolerance: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1,replaceOriginal: bool = False) -> None:
    """
    パラメータ設定を修正してサーフェスをリビルドします。サーフェスのシェイプも変化することがあります。サーフェスの再構築方法は、rebuildType (-rt)アトリビュートで決まります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    degreeU (int): 作成するサーフェスのU方向の次数。0-現在の値を維持、1-一次、2-二次、3-三次、5-五次、7-七次。既定:3

    -----------------------------------------

    degreeV (int): 作成するサーフェスのU方向の次数。0-現在の値を維持、1-一次、2-二次、3-三次、5-五次、7-七次。既定:3

    -----------------------------------------

    direction (int): 再構築する方向。0-U、1-V、2-UとVの両方。既定:2

    -----------------------------------------

    endKnots (int): サーフェスのエンドノットの状態。0-均一エンドノット、1-多重エンドノット。既定:0

    -----------------------------------------

    fitRebuild (int): 使用するリビルド方法のタイプを指定します。0-従来の手法で変換(オリジナルの変換方法。既定です)。1-最小二乗法を使用してフィット。2-一致を変換(一致ング変換方法の代替)。3-グリッドで変換(グリッドベースのフィットアルゴリズムを使用)。既定:0

    -----------------------------------------

    keepControlPoints (boolean): 入力サーフェスのコントロールポイントを使用します。rebuildTypeが2(matchKnots)でない場合、強制的に均一なパラメータ設定になります。既定:false

    -----------------------------------------

    keepCorners (boolean): 作成するサーフェスのコーナーを、入力サーフェスのコーナーから変更しません。既定:true

    -----------------------------------------

    keepRange (int): 作成するサーフェスのパラメータ設定を決定します。0-作成するサーフェスのパラメータを0から1で再配置、1-元のサーフェスのパラメータ設定を維持、2-結果のパラメータを0からスパン数に再設定。既定:1

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    rebuildType (int): 再構築のタイプ。0-均一、1-スパンの削減、2-ノット一致ング、3-多重ノットの除去、4-非有理の強制、5-終端のリビルド、6-トリムの変換(均一)、7-ベジェメッシュへ。既定:0

    -----------------------------------------

    spansU (int): 作成するサーフェスの、U方向のスパン数。rebuildTypeが0(均一)のときにのみ使用されます。0の場合は、オリジナルサーフェスと同数のスパンを維持します。既定:4

    -----------------------------------------

    spansV (int): 作成するサーフェスの、V方向のスパン数。rebuildTypeが0(均一)のときにのみ使用されます。0の場合は、オリジナルサーフェスと同数のスパンを維持します。既定:4

    -----------------------------------------

    tolerance (linear): リビルドする際の許容差。既定:0.01

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def reverseSurface(caching: bool = False,direction: int = 1,nodeState: int = 1,constructionHistory: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    サーフェスの一方向または両方向を反転するか、U 方向と V 方向を入れ替える(サーフェス法線を反転する効果)場合に使用できます。新しく反転したサーフェスの名前、および作成されたディペンデンシーノード名が返されます。反転したサーフェスのパラメータ範囲は、オリジナルのサーフェスと同じです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    direction (int): サーフェスを反転する方向です。0-U、1-V、2-UとVの両方、3-入れ替え。既定:0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def revolve(autoCorrectNormal: bool = False,axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),axisChoice: int = 1,axisX: float = 1.0,axisY: float = 1.0,axisZ: float = 1.0,bridge: bool = False,caching: bool = False,computePivotAndAxis: int = 1,degree: int = 1,endSweep: float = 1.0,nodeState: int = 1,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pivotX: float = 1.0,pivotY: float = 1.0,pivotZ: float = 1.0,radius: float = 1.0,radiusAnchor: float = 1.0,sections: int = 1,startSweep: float = 1.0,tolerance: float = 1.0,useTolerance: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1,range: bool = False,rebuild: bool = False,useLocalPivot: bool = False) -> None:
    """
    軸を中心に指定したプロファイル カーブを回転し、リボルブ サーフェスを作成します。カーブ、カーブオンサーフェス、サーフェス アイソパラム、トリム エッジをプロファイル カーブとして使用できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    autoCorrectNormal (boolean): trueにすると、サーフェス法線がオブジェクトの外側を向いている場合、必要に応じて軸の方向を反転します。既定:false

    -----------------------------------------

    axis ([linear, linear, linear]): 回転軸です。

    -----------------------------------------

    axisChoice (int): 算出された軸/ピボットの場合のみ使用されます。平面カーブの軸を計算する場合、主軸と基軸という2つの選択肢があります。オブジェクトの長い方の次元に一致する軸を選択するか(0)、いずれかの軸を明示的に選択します(1と2)。既定:0

    -----------------------------------------

    axisX (linear): 軸のX値です。既定:1

    -----------------------------------------

    axisY (linear): 軸のY値です。既定:0

    -----------------------------------------

    axisZ (linear): 軸のZ値です。既定:0

    -----------------------------------------

    bridge (boolean): trueにすると、部分的な回転を閉じてパイ型のサーフェスが得られます。サーフェスは閉じますが、完全に回転したときのような形で閉じられるわけではありません。既定:false

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    computePivotAndAxis (int): 2に設定すると、軸を計算し、カーブの位置と半径を使用して内部回転のピボットを計算します。ピボットアトリビュートと軸アトリビュートの値は無視されます。1に設定すると、軸はアトリビュートの値を使用し、ピボットは計算されます。0に設定すると、軸、ピボットの両方ともアトリビュートの値を使用します。既定:0

    -----------------------------------------

    degree (int): 作成されるサーフェスの次数です。既定:3

    -----------------------------------------

    endSweep (angle): 現在の単位で表した終了スイープ角度の値です。これは、最大値(360°、2Piラジアン)を超えないように注意する必要があります。既定:6.2831853

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pivot ([linear, linear, linear]): 回転ピボットポイント。

    -----------------------------------------

    pivotX (linear): ピボットのX値です。既定:0

    -----------------------------------------

    pivotY (linear): ピボットのY値です。既定:0

    -----------------------------------------

    pivotZ (linear): ピボットのZ値です。既定:0

    -----------------------------------------

    radius (linear): computedPivotがtrueに設定されている場合、ピボットポイントは指定した距離だけカーブのバウンディングボックスから離れます。ピボットアトリビュートは無視されます。既定:1

    -----------------------------------------

    radiusAnchor (float): 半径の値を使用してピボットを計算できるようにするための、カーブ上のアンカーポイントの位置。0-1の場合、カーブ上の正規化されたパラメータ範囲内にあります。<0または>1の場合、バウンディングボックスに基づいて計算されます。既定:-1

    -----------------------------------------

    sections (int): 作成されるサーフェスのセクション数です(許容差を使用しない場合)。既定:8

    -----------------------------------------

    startSweep (angle): 現在の単位で表した開始スイープ角度の値です。これは、最大値(360°、2Piラジアン)を超えないように注意する必要があります。既定:0

    -----------------------------------------

    tolerance (linear): 構築時の許容値です(useToleranceアトリビュートが設定されている場合)。既定:0.01

    -----------------------------------------

    useTolerance (boolean): 許容差、つまりセクション数を使用してセクションを制御します。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    rebuild (boolean): 操作で入力カーブを使用する前に、入力カーブを再構築します。変換のためのパラメータを設定するには、nurbsCurveRebuildPrefを使用します。

    -----------------------------------------

    useLocalPivot (boolean): trueにすると、プロファイルカーブのピボットが、回転軸の開始点として使用されます。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def roundConstantRadius(append: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,radiuss: float = 1.0,side: Tuple[str, int] = tuple("", 1),sidea: int = 1,sideb: int = 1) -> None:
    """
    NURBS サーフェス上で一致するエッジ ペアに対する一定半径 NURBS フィレットと NURBS コーナー サーフェスを生成します。エッジ ペアとは、サーフェスのアイソパラムかトリム エッジが一致するペアのことです。このコマンドは、複数のエッジ ペアを同時に処理できます。エッジペアが 2 つより多いサーフェスから構成される複合エッジも処理できます。この場合は、「-sa」フラグと「-sb」フラグを使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    append (boolean): trueにすると、既存のラウンドディペンデンシーノードにエッジペアが追加されます。既定はfalseです。このフラグをtrueにした場合は、既存のラウンドディペンデンシーノードを指定する必要があります。下の例を参照してください。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    radiuss (linear): このフラグで半径を指定します。このフラグは「r/radius」フラグをオーバーライドします。使用する「rad」フラグが1つだけの場合は、すべてのエッジペアに適用されます。複数の「rad」フラグを使用する場合は、「-rad」フラグの数とエッジペアの数が同じでなければなりません。たとえば、4つのエッジペアがある場合、ゼロ、1、または4の「rad」フラグを指定する必要があります。

    -----------------------------------------

    side ([string, int]): このフラグは複合エッジに使用します。このフラグはsidea/sidebフラグの代わりに使用され、Pythonと互換性があります。最初の引数は「a」または「b」にする必要があります。「b」値と同じ数の「a」値を指定する必要があります。「side」フラグ(またはsidea/sidebフラグ)を使用してサイドを指定しないと、エッジはペアであると仮定されます。下の例を参照してください。たとえば、立方体の2つのフェースはエッジペアで合っています。この場合に、片方のフェースがエッジの中間で2つに分割され、サイド「A」にはフェースが1つ、サイド「B」には2つの断片が存在するとします。この場合、フラグの組み合わせには、-side"a"1-side"b"2を使用します。対応する順序でエッジを指定する必要があります。//MELroundConstantRadius-side"a"1-side"b"2isoAisoB1isoB2;#Pythonmaya.cmds.roundConstantRadius('isoA','isoB1','isoB2',side=[("a",1),("b",2)])

    -----------------------------------------

    sidea (int): 次の「-sb」フラグと共に、複合エッジに使用します。このフラグはPythonでは使用できません。「side」フラグを参照してください。「-sb」フラグと同じ数の「-sa」フラグを指定する必要があります。「-sa」フラグも「-sb」フラグも指定しないと、エッジはペアであると仮定されます。下の例を参照してください。たとえば、立方体の2つのフェースはエッジペアで合っています。この場合に、片方のフェースがエッジの中間で2つに分割され、サイド「A」にはフェースが1つ、サイド「B」には2つの断片が存在するとします。この場合、フラグの組み合わせには、-sidea1-sideb2を使用します。対応する順序でエッジを指定する必要があります。roundConstantRadius-sidea1-sideb2isoAisoB1isoB2;

    -----------------------------------------

    sideb (int): 「-sa」フラグと共に複合エッジに使用します。「-sa」フラグの説明を参照してください。このフラグはPythonでは使用できません。「side」フラグを参照してください。

    -----------------------------------------

    Return Value:
    None: string[](生成される NURBS サーフェスの名前とノード名)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def singleProfileBirailSurface(caching: bool = False,nodeState: int = 1,tangentContinuityProfile1: bool = False,transformMode: int = 1,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1) -> None:
    """
    このコマンドは、2 本のレイル カーブに沿ってプロファイル カーブをスイープすることによって、レイル サーフェスを作成します。サーフェス作成の要件の 1 つは、プロファイル カーブが 2 本のレイル カーブと交差していることです。プロファイルが、アイソパラム、カーブ オンサーフェス、トリム エッジなどのサーフェス カーブである場合、フラグ -tp1 true を使用すると、プロファイルが含まれているサーフェスの接線連続性が維持されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    tangentContinuityProfile1 (boolean): プロファイル全体の接線連続性を維持する必要があります。プロファイルはサーフェスカーブである必要があります。既定:false

    -----------------------------------------

    transformMode (int): トランスフォームモードです(非比例、比例)。非比例が既定値です。既定:0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def smoothTangentSurface(caching: bool = False,direction: int = 1,nodeState: int = 1,parameter: float = 1.0,smoothness: int = 1,constructionHistory: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    smoothTangentSurface コマンドは、各パラメータ値のアイソパラムに沿ってサーフェスを滑らかにします。サーフェスの名前を返し、ヒストリがオンの場合は、作成されたディペンデンシー ノードの名前も返します。このコマンドは、多重ノット値を持つパラメータ値のみに適用されます(与えられたパラメータ値に多重ノットがコネクトされていない場合、ディペンデンシー ノードは作成されますが、サーフェスは変更されません)。 このコマンドを使用する場合: 多数のベジェ パッチからなるサーフェスや、多重度が 1 を超えるノットを持つアイソパラムからなるサーフェスの場合、接線の切断が発生することがあります。したがって、この操作を行う意味があるのは、アイソパラム間ではなく(アイソパラム間のサーフェスはすでに滑らかです)、ノット アイソパラム上だけです。 次数が 3 以上のサーフェスの場合、smoothness に Muximum を指定すると、最高で次数 -1 の 接線連続性や曲率連続性が得られます。smoothness に Tangent を指定すると、接線連続性だけが得られます。smoothness に Tangent を指定すると、接線連続性だけが得られます。 ここで述べているのは「G」連続性ではなく「C」連続性であることに注意してください。したがって、技術的には、サーフェスの次数が低下した場合に接線の切断を視覚的に確認することも可能です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    direction (int): ノットを滑らかにする方向です。0-V方向、1-U方向。既定:1

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    parameter (float): ノットが追加されるパラメータ値です。既定:0.0

    -----------------------------------------

    smoothness (int): 取得する平滑性(smoothness)です。0-接線1-最大(次数に基づく)既定:1

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def sphere(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,degree: int = 1,endSweep: float = 1.0,heightRatio: float = 1.0,nodeState: int = 1,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),radius: float = 1.0,sections: int = 1,spans: int = 1,startSweep: float = 1.0,tolerance: float = 1.0,useTolerance: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1) -> None:
    """
    sphere コマンドは、新しい球を作成します。球の各方向のスパン数は useTolerance アトリビュートによって決まります。-ut が true の場合、-tolerance アトリビュートが使用されます。-ut が false の場合は、-sections アトリビュートが使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): プリミティブの軸です。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    degree (int): 作成されるサーフェスの次数です:1-一次、3-三次既定:3

    -----------------------------------------

    endSweep (angle): 回転サーフェスが終了角度。既定は2πラジアン(360度)です。既定:6.2831853

    -----------------------------------------

    heightRatio (float): 「高さ」と「幅」の比率です。既定:2.0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pivot ([linear, linear, linear]): プリミティブのピボットポイントです。

    -----------------------------------------

    radius (linear): オブジェクトの半径です。既定:1.0

    -----------------------------------------

    sections (int): セクション数によって、サーフェスのスイープ方向の解像度が決まります。useToleranceがfalseの場合のみに使用されます。既定:8

    -----------------------------------------

    spans (int): スパン数によって、サーフェスの逆方向の解像度が決まります。既定:1

    -----------------------------------------

    startSweep (angle): 回転サーフェスの開始角度です。既定:0

    -----------------------------------------

    tolerance (linear): サーフェスの構築で使用するしきい値です。useToleranceがtrueの場合のみに使用されます。既定:0.01

    -----------------------------------------

    useTolerance (boolean): 指定したしきい値を使用して解像度を決定します。指定されていない場合は、セクション数が使用されます。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def squareSurface(caching: bool = False,continuityType1: int = 1,continuityType2: int = 1,continuityType3: int = 1,continuityType4: int = 1,curveFitCheckpoints: int = 1,endPointTolerance: float = 1.0,nodeState: int = 1,rebuildCurve1: bool = False,rebuildCurve2: bool = False,rebuildCurve3: bool = False,rebuildCurve4: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1) -> None:
    """
    このコマンドは、3 つまたは 4 つのカーブによる正方形サーフェスを生成します。この正方形サーフェスは、選択したカーブの交差する領域に作成されます。選択の順番は重要です。また、カーブは交差するか、終端がつながっている必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    continuityType1 (int): curve1で有効な連続性タイプです。1-固定境界2-接線連続性3-暗示接線連続性既定:2

    -----------------------------------------

    continuityType2 (int): curve1で有効な連続性タイプです。2-固定境界2-接線連続性3-暗示接線連続性既定:2

    -----------------------------------------

    continuityType3 (int): curve1で有効な連続性タイプです。3-固定境界2-接線連続性3-暗示接線連続性既定:2

    -----------------------------------------

    continuityType4 (int): curve1で有効な連続性タイプです。4-固定境界2-接線連続性3-暗示接線連続性既定:2

    -----------------------------------------

    curveFitCheckpoints (int): 境界曲線と作成された接線正方形サーフェス間の接触偏差をチェックするために使用する、スパンあたりのポイント数。接線連続タイプのみに使用可能です。既定:5

    -----------------------------------------

    endPointTolerance (linear): endPointアトリビュートがtrueの場合のみ使用される、終点の許容値です。既定:0.1

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    rebuildCurve1 (boolean): 入力カーブ1を(曲率連続性を持つように)再構築するかどうか決定するブーリアン値。既定:false

    -----------------------------------------

    rebuildCurve2 (boolean): 入力カーブ2を(曲率連続性を持つように)再構築するかどうか決定するブーリアン値。既定:false

    -----------------------------------------

    rebuildCurve3 (boolean): 入力カーブ3を(曲率連続性を持つように)再構築するかどうか決定するブーリアン値。既定:false

    -----------------------------------------

    rebuildCurve4 (boolean): 入力カーブ4を(曲率連続性を持つように)再構築するかどうか決定するブーリアン値。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def stitchSurface(bias: float = 1.0,caching: bool = False,cvIthIndex: int = 1,cvJthIndex: int = 1,fixBoundary: bool = False,nodeState: int = 1,parameterU: float = 1.0,parameterV: float = 1.0,positionalContinuity: bool = False,stepCount: int = 1,tangentialContinuity: bool = False,togglePointNormals: bool = False,togglePointPosition: bool = False,toggleTolerance: bool = False,tolerance: float = 1.0,cascade: bool = False,constructionHistory: bool = False,keepG0Continuity: bool = False,keepG1Continuity: bool = False,name: str = "",numberOfSamples: int = 1,object: bool = False,replaceOriginal: bool = False,weight0: float = 1.0,weight1: float = 1.0) -> None:
    """
    stitchSurface コマンドは、サーフェスのコントロール頂点(CV)だけを調整して、2 つのサーフェスを連続的な G (0)および/または G (1)になるように位置合わせします。2 つのサーフェスは、ステッチする 2 つのアイソパラム境界エッジを指定するとステッチできます。2 つのサーフェスがステッチされるエッジは、2 つのエッジの加重平均を求めることで得られます。2 つのエッジのウェイトは、それぞれフラグ -wt0、-wt1 を使用して指定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bias (float): 入力サーフェスとステッチの結果の中間に複数のCVをブレンドします。値0.0は入力サーフェスを返します。既定:1.0

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    cvIthIndex (int): 入力サーフェス上のi番目の境界CVインデックスです。既定:-1

    -----------------------------------------

    cvJthIndex (int): 入力サーフェス上のj番目の境界CVインデックスです。既定:-1

    -----------------------------------------

    fixBoundary (boolean): G1コンストレイントに対して解決するときに複数の境界CVを固定します。既定:false

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    parameterU (float): ポイントコンストレイントに対するサーフェスのUパラメータ値です。既定:-10000

    -----------------------------------------

    parameterV (float): ポイントコンストレイントに対するサーフェスのVパラメータ値です。既定:-10000

    -----------------------------------------

    positionalContinuity (boolean): マルチインデックスに対応したエッジでG0連続性をオン(オフ)に切り替えます。既定:true

    -----------------------------------------

    stepCount (int): 離散化の数に対するステップの回数です。既定:20

    -----------------------------------------

    tangentialContinuity (boolean): マルチインデックスに対応したエッジ間でG1連続性をオン(オフ)に設定します。既定:false

    -----------------------------------------

    togglePointNormals (boolean): サーフェスの法線ポイントコンストレイをオン(オフ)に設定します。既定:false

    -----------------------------------------

    togglePointPosition (boolean): サーフェスの位置ポイントコンストレイントをオン(オフ)に設定します。既定:true

    -----------------------------------------

    toggleTolerance (boolean): 指定した離散化ステップで許容値を使用するためにオン(オフ)に設定します。既定:false

    -----------------------------------------

    tolerance (linear): エッジを離散化する際に使用する許容値です。既定:0.1

    -----------------------------------------

    cascade (boolean): 作成されたステッチノードを重ねます(サーフェスのステッチヒストリがある場合のみ)。既定はfalseです。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    keepG0Continuity (boolean): 位置連続性を使用してステッチします。既定はtrueです。

    -----------------------------------------

    keepG1Continuity (boolean): 接線連続性を使用してステッチします。既定はfalseです。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    numberOfSamples (int): エッジ上のサンプル数。既定は20です。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    weight0 (float): 1番目のエッジのウェイト付け係数。既定は0.5です。

    -----------------------------------------

    weight1 (float): 2番目のエッジのウェイト付け係数。既定は0.5です。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def stitchSurfacePoints(bias: float = 1.0,caching: bool = False,cvIthIndex: int = 1,cvJthIndex: int = 1,fixBoundary: bool = False,nodeState: int = 1,parameterU: float = 1.0,parameterV: float = 1.0,positionalContinuity: bool = False,stepCount: int = 1,tangentialContinuity: bool = False,togglePointNormals: bool = False,togglePointPosition: bool = False,toggleTolerance: bool = False,tolerance: float = 1.0,cascade: bool = False,constructionHistory: bool = False,equalWeight: bool = False,keepG0Continuity: bool = False,keepG1Continuity: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    stitchSurfacePoints コマンドは、複数のサーフェス コマンドを境界に沿って位置合わせし、1 つのポイントにします。このプロセスで、ポイントを平均化するノードが作成されます。ポイントはウェイトをかけて平均化されます。ポイント境界に沿ったコントロール頂点(CV)にすることが可能です。ポイントが CV の場合、それらは位置連続性のみ維持してステッチされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bias (float): 入力サーフェスとステッチの結果の中間に複数のCVをブレンドします。値0.0は入力サーフェスを返します。既定:1.0

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    cvIthIndex (int): 入力サーフェス上のi番目の境界CVインデックスです。既定:-1

    -----------------------------------------

    cvJthIndex (int): 入力サーフェス上のj番目の境界CVインデックスです。既定:-1

    -----------------------------------------

    fixBoundary (boolean): G1コンストレイントに対して解決するときに複数の境界CVを固定します。既定:false

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    parameterU (float): ポイントコンストレイントに対するサーフェスのUパラメータ値です。既定:-10000

    -----------------------------------------

    parameterV (float): ポイントコンストレイントに対するサーフェスのVパラメータ値です。既定:-10000

    -----------------------------------------

    positionalContinuity (boolean): マルチインデックスに対応したエッジでG0連続性をオン(オフ)に切り替えます。既定:true

    -----------------------------------------

    stepCount (int): 離散化の数に対するステップの回数です。既定:20

    -----------------------------------------

    tangentialContinuity (boolean): マルチインデックスに対応したエッジ間でG1連続性をオン(オフ)に設定します。既定:false

    -----------------------------------------

    togglePointNormals (boolean): サーフェスの法線ポイントコンストレイをオン(オフ)に設定します。既定:false

    -----------------------------------------

    togglePointPosition (boolean): サーフェスの位置ポイントコンストレイントをオン(オフ)に設定します。既定:true

    -----------------------------------------

    toggleTolerance (boolean): 指定した離散化ステップで許容値を使用するためにオン(オフ)に設定します。既定:false

    -----------------------------------------

    tolerance (linear): エッジを離散化する際に使用する許容値です。既定:0.1

    -----------------------------------------

    cascade (boolean): 作成されたステッチノードを重ねます(サーフェスのステッチヒストリがある場合のみ)。既定はfalseです。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    equalWeight (boolean): ステッチされるすべてのポイントにウェイトを均等に割り当てます。既定はtrueです。falseの場合、最初のポイントにはウェイト1.0が、残りのポイントには0.0が割り当てられます。

    -----------------------------------------

    keepG0Continuity (boolean): 位置連続性を使用してポイントをステッチします。既定はtrueです。

    -----------------------------------------

    keepG1Continuity (boolean): 接線連続性を使用してポイントをステッチします。既定はfalseです。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def surface(degreeU: int = 1,degreeV: int = 1,formU: str = "",formV: str = "",knotU: float = 1.0,knotV: float = 1.0,name: str = "",objectSpace: bool = False,point: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pointWeight: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0),worldSpace: bool = False) -> None:
    """
    このコマンドは、有理または非有理の NURBS スプライン サーフェスを作成します。サーフェスは、U 方向と V 方向のコントロール頂点(CV)およびノット サーフェスを指定して作成されます。このコマンドでは、サーフェスのプロパティを照会することはできません。下記の例を参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    degreeU (int): U方向のサーフェスの次数です。既定は3です。

    -----------------------------------------

    degreeV (int): V方向のサーフェスの次数です。既定は3です。

    -----------------------------------------

    formU (string): Uの状態。開いている場合は「open」、閉じている場合は「closed」、周期的な場合は「periodic」です。

    -----------------------------------------

    formV (string): Vの状態。開いている場合は「open」、閉じている場合は「closed」、周期的な場合は「periodic」です。

    -----------------------------------------

    knotU (float): U方向のノット値です。ノット値ごとに1フラグ。(numberOfPointsInU+degreeInU-1)個のノットが必要で、ノットベクトルは非減少型である必要があります。

    -----------------------------------------

    knotV (float): V方向のノット値です。ノット値ごとに1フラグ。(numberOfPointsInV+degreeInV-1)個のノットが必要で、ノットベクトルは非減少型である必要があります。

    -----------------------------------------

    name (string): 新しいトランスフォームに使用する名前です。

    -----------------------------------------

    objectSpace (boolean): objectSpaceで操作を実行する必要がありますか?

    -----------------------------------------

    point ([linear, linear, linear]): 非有理CVをX、Y、Z値で指定します。「linear」は、このフラグで単位を伴う値を取ることができることを意味します。任意の方向で(degree+1)個のサーフェスポイントを指定して可視のサーフェススパンを作成しなければならないことに注意してください。例:Uの方向でdegreeは3の場合、この方向で4個のCVを指定する必要があります。ポイントはUの行とVの列で指定されます。単位を含めるには、次のように単位名を値の後ろに追加します。たとえば、「-p3.3in5.5ft6.6yd」

    -----------------------------------------

    pointWeight ([linear, linear, linear, linear]): 有理CVをX、Y、Z、W値で指定します。「linear」は、このフラグで単位を伴う値を取ることができることを意味します。任意の方向で(degree+1)個のサーフェスポイントを指定して可視のサーフェススパンを作成しなければならないことに注意してください。例:Uの方向でdegreeは3の場合、この方向で4個のCVを指定する必要があります。ポイントは、U行V列で指定されます。

    -----------------------------------------

    worldSpace (boolean): worldSpaceで操作を実行する必要がありますか?

    -----------------------------------------

    Return Value:
    None: string新しいサーフェスへのパス
    """
    pass

    
def tolerance(angular: float = 1.0,linear: float = 1.0) -> None:
    """
    このコマンドは、サーフェス フィレットなど、許容値が必要なモデリング操作で使用される許容値を設定します。リニア(Linear)許容値は「位置」の許容値で、角度(Angular)許容値は「接線」の許容値です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    angular (angle): 角度、つまり「接線」の許容値を設定します。

    -----------------------------------------

    linear (linear): リニア、つまり「位置」の許容値を設定します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def torus(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),caching: bool = False,degree: int = 1,endSweep: float = 1.0,heightRatio: float = 1.0,minorSweep: float = 1.0,nodeState: int = 1,pivot: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),radius: float = 1.0,sections: int = 1,spans: int = 1,startSweep: float = 1.0,tolerance: float = 1.0,useTolerance: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,polygon: int = 1) -> None:
    """
    「torus」コマンドは、新しいトーラスやトーラスを作成するディペンデンシー ノードを作成し、その名前を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): プリミティブの軸です。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    degree (int): 作成されるサーフェスの次数です:1-一次、3-三次既定:3

    -----------------------------------------

    endSweep (angle): 回転サーフェスが終了角度。既定は2πラジアン(360度)です。既定:6.2831853

    -----------------------------------------

    heightRatio (float): 「高さ」と「幅」の比率です。既定:2.0

    -----------------------------------------

    minorSweep (angle): トーラスのマイナー円のスイープ角度です。既定:6.2831853

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pivot ([linear, linear, linear]): プリミティブのピボットポイントです。

    -----------------------------------------

    radius (linear): オブジェクトの半径です。既定:1.0

    -----------------------------------------

    sections (int): セクション数によって、サーフェスのスイープ方向の解像度が決まります。useToleranceがfalseの場合のみに使用されます。既定:8

    -----------------------------------------

    spans (int): スパン数によって、サーフェスの逆方向の解像度が決まります。既定:1

    -----------------------------------------

    startSweep (angle): 回転サーフェスの開始角度です。既定:0

    -----------------------------------------

    tolerance (linear): サーフェスの構築で使用するしきい値です。useToleranceがtrueの場合のみに使用されます。既定:0.01

    -----------------------------------------

    useTolerance (boolean): 指定したしきい値を使用して解像度を決定します。指定されていない場合は、セクション数が使用されます。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    polygon (int): この引数の値は、この操作で作成されるオブジェクトのタイプを制御します。0:NURBSサーフェス1:ポリゴン(nurbsToPolygonsPrefを使用して変換用のパラメータを設定)2:サブディビジョンサーフェス(nurbsToSubdivPrefを使用して変換用のパラメータを設定)3:ベジェサーフェス4:サブディビジョンサーフェスソリッド(変換のためのパラメータを設定するには、nurbsToSubdivPrefを使用)

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def trim(caching: bool = False,locatorU: float = 1.0,locatorV: float = 1.0,nodeState: int = 1,selected: int = 1,shrink: bool = False,tolerance: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False) -> None:
    """
    このコマンドは、サーフェスをカーブ オンサーフェスでトリムします。はじめにサーフェスを分割し、次に保持する領域または破棄する領域を選択します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    locatorU (float): サーフェス上に配置するロケータのUパラメータ値です。既定:0.5

    -----------------------------------------

    locatorV (float): サーフェス上に配置するロケータのVパラメータ値です。既定:0.5

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    selected (int): 選択領域を保持するか破棄するかを指定します。既定:0

    -----------------------------------------

    shrink (boolean): trueの場合は、下になるサーフェスをトリムしたサーフェスの外側の境界線まで縮めます。既定:false

    -----------------------------------------

    tolerance (linear): トリムの許容値です。既定:0.001

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def untrim(caching: bool = False,nodeState: int = 1,constructionHistory: bool = False,curveOnSurface: bool = False,name: str = "",noChanges: bool = False,object: bool = False,replaceOriginal: bool = False,untrimAll: bool = False) -> None:
    """
    サーフェスのトリムを解除します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    curveOnSurface (boolean): 可能な場合は、2Dカーブが作成されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    noChanges (boolean): 設定すると、操作ノードが自動的に通過モード内に配置されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    untrimAll (boolean): trueの場合、サーフェスのすべてのトリムを解除します。falseの場合、最後のトリムだけを解除します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def alignCurve(caching: bool = False,curvatureContinuity: bool = False,curvatureScale1: float = 1.0,curvatureScale2: float = 1.0,joinParameter: float = 1.0,nodeState: int = 1,positionalContinuity: bool = False,positionalContinuityType: int = 1,reverse1: bool = False,reverse2: bool = False,tangentContinuity: bool = False,tangentContinuityType: int = 1,tangentScale1: float = 1.0,tangentScale2: float = 1.0,attach: bool = False,constructionHistory: bool = False,keepMultipleKnots: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    curve align コマンドは Maya のカーブを位置合わせするために使用します。主な位置合わせオプションは、位置連続性、接線連続性と曲率連続性です。曲率連続性は接線連続性を含みます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    curvatureContinuity (boolean): trueにすると曲率連続性はオンになり、falseにすると曲率連続性はオフになります。既定:false

    -----------------------------------------

    curvatureScale1 (float): 曲率連続性で1つめのカーブの曲率に適用される曲率スケール。既定:0.0

    -----------------------------------------

    curvatureScale2 (float): 曲率連続性で2つめのカーブの曲率に適用される曲率スケール。既定:0.0

    -----------------------------------------

    joinParameter (float): 修正されたカーブが位置合わせされる参照カーブのパラメータ。既定:123456.0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    positionalContinuity (boolean): trueの場合、位置連続性がオンになり、falseの場合、位置連続性がオフになります。既定:true

    -----------------------------------------

    positionalContinuityType (int): 位置連続性タイプの正当な値は次のとおりです:1-1番目のカーブを移動、2-2番目のカーブを移動、3-両方のカーブを移動、4-1番目のカーブを修正、5-2番目のカーブを修正、6-両方のカーブを修正既定:1

    -----------------------------------------

    reverse1 (boolean): trueの場合、位置合わせする前に1つめの入力カーブを反転します。falseの場合、位置合わせする前に1つめの入力カーブに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    reverse2 (boolean): trueの場合、位置合わせする前に2つめの入力カーブを反転します。falseの場合、位置合わせする前に2つめの入力カーブに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    tangentContinuity (boolean): trueの場合、接線連続性がオンになり、falseの場合、接線連続性がオフになります。既定:true

    -----------------------------------------

    tangentContinuityType (int): 接線連続性タイプの正当な値は次のとおりです:1-1番目のカーブの接線連続性を実行、2-2番目のカーブの接線連続性を実行既定:1

    -----------------------------------------

    tangentScale1 (float): 接線連続性で1つめのカーブの接線に適用される接線スケール。既定:1.0

    -----------------------------------------

    tangentScale2 (float): 接線連続性で2つめのカーブの接線に適用される接線スケール。既定:1.0

    -----------------------------------------

    attach (boolean): カーブをアタッチする場合はtrueです。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    keepMultipleKnots (boolean): 多重ノットをそのまま残す必要がある場合はtrueです。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def arclen(caching: bool = False,constructionHistory: bool = False,nodeState: int = 1) -> None:
    """
    ヒストリ フラグが設定されていない(既定)場合、このコマンドはカーブの円弧長を返します。ヒストリ フラグが設定されている場合、円弧長を生成できるノードが作成されて接続され、その名前が返されます。コンストラクション ヒストリ オプションをオンにすると、このコマンドをエクスプレッションで使う場合に便利です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: float非ヒストリ モードでの長さ。stringヒストリ モードでのノード名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def arcLengthDimension() -> None:
    """
    このコマンドは、円弧長を作成し、カーブまたはサーフェスの指定したポイントで、カーブまたはサーフェスの円弧長を表示するために使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string作成した arcLengthDimension ノードの名前
    """
    pass

    
def attachCurve(blendBias: float = 1.0,blendKnotInsertion: bool = False,caching: bool = False,keepMultipleKnots: bool = False,method: int = 1,nodeState: int = 1,parameter: float = 1.0,reverse1: bool = False,reverse2: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    Attach コマンドは、カーブをアタッチするときに使用します。カーブがアタッチされると、結合ポイントには多重ノットができます。多重ノットは、必要に応じて保持または除去できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    blendBias (float): ブレンドファクトリに応じて1番目または2番目のカーブの方向に結果のオブジェクトを傾斜させて、0.5より小さいまたは0.5より大きい範囲に収めます。既定:0.5

    -----------------------------------------

    blendKnotInsertion (boolean): trueに設定されている場合、少し異なるエフェクトを作成するため、オリジナルカーブの1つ(以下のパラメータアトリビュートで指定される相対的な位置)にノットを挿入します。既定:false

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    keepMultipleKnots (boolean): trueの場合、結合パラメータの多重ノットを維持します。falseの場合、多重ノットを除去します。既定:true

    -----------------------------------------

    method (int): アタッチ方法(接続-0、ブレンド-1)。既定:0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    parameter (float): 新しく挿入されたノットの位置に関するパラメータ値です。既定:0.1

    -----------------------------------------

    reverse1 (boolean): trueの場合、アタッチする前に1つめのInputカーブを反転します。falseの場合、アタッチする前に1つめのInputカーブには何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    reverse2 (boolean): trueの場合、アタッチする前に2つめのInputカーブを反転します。falseの場合、アタッチする前に2つめのInputカーブに何も実行しません。注:このアトリビュートをランダム値に設定すると、予期せぬ結果を引き起こすためサポートされていません。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def circle(caching: bool = False,center: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),centerX: float = 1.0,centerY: float = 1.0,centerZ: float = 1.0,degree: int = 1,first: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),firstPointX: float = 1.0,firstPointY: float = 1.0,firstPointZ: float = 1.0,fixCenter: bool = False,nodeState: int = 1,normal: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),normalX: float = 1.0,normalY: float = 1.0,normalZ: float = 1.0,radius: float = 1.0,sections: int = 1,sweep: float = 1.0,tolerance: float = 1.0,useTolerance: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False) -> None:
    """
    circle コマンドは円または部分的な円(円弧)を作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    center ([linear, linear, linear]): 円の中心点です。

    -----------------------------------------

    centerX (linear): 中心点のX座標です。既定:0

    -----------------------------------------

    centerY (linear): 中心点のY座標です。既定:0

    -----------------------------------------

    centerZ (linear): 中心点のZ座標です。既定:0

    -----------------------------------------

    degree (int): 作成される円の次数です:1-一次、3-三次既定:3

    -----------------------------------------

    first ([linear, linear, linear]): fixCenterがfalseの場合、円の始点です。fixCenterがtrueの場合、円の方向を定義します。

    -----------------------------------------

    firstPointX (linear): 最初のポイントのX座標です。既定:1

    -----------------------------------------

    firstPointY (linear): 最初のポイントのY座標です。既定:0

    -----------------------------------------

    firstPointZ (linear): 最初のポイントのZ座標です。既定:0

    -----------------------------------------

    fixCenter (boolean): 円の中心指定した中心点にを固定します。そうでなければ、円は指定した最初のポイントから開始します。既定:true

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    normal ([linear, linear, linear]): 円があるプレーンの法線です。

    -----------------------------------------

    normalX (linear): 法線方向のX座標です。既定:0

    -----------------------------------------

    normalY (linear): 法線方向のY座標です。既定:0

    -----------------------------------------

    normalZ (linear): 法線方向のZ座標です。既定:1

    -----------------------------------------

    radius (linear): 円の半径です。既定:1.0

    -----------------------------------------

    sections (int): セクション数は、円の解像度を定義します。useToleranceがfalseの場合のみに使用されます。既定:8

    -----------------------------------------

    sweep (angle): スィープ角度は円の完成度を定義します。完全な円は2Piラジアン、つまり360度です。既定:6.2831853

    -----------------------------------------

    tolerance (linear): 円を構築する場合の許容値です。useToleranceがtrueの場合のみに使用されます。既定:0.01

    -----------------------------------------

    useTolerance (boolean): 指定したしきい値を使用して解像度を決定します。指定されていない場合は、セクション数が使用されます。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def closeCurve(blendBias: float = 1.0,blendKnotInsertion: bool = False,caching: bool = False,nodeState: int = 1,parameter: float = 1.0,preserveShape: int = 1,constructionHistory: bool = False,curveOnSurface: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    closeCurve コマンドはカーブを閉じて、周期カーブにします。新しく閉じたカーブのパスの名前と、ディペンデンシー ノードの名前が返されます。このコマンドでカーブが指定されていない場合、最初のアクティブなカーブが使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    blendBias (float): ブレンド値に応じて1つめまたは2つめのカーブの方向に結果のオブジェクトを傾斜させて、0.5より小さいまたは0.5より大きい範囲に収めます。既定:0.5

    -----------------------------------------

    blendKnotInsertion (boolean): trueに設定されている場合、少し異なるエフェクトを作成するため、オリジナルカーブの1つ(以下のパラメータアトリビュートで指定される相対的な位置)にノットを挿入します。既定:false

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    parameter (float): 新しく挿入されたノットの位置に関するパラメータ値です。既定:0.1

    -----------------------------------------

    preserveShape (int): 0-シェイプの保持なし1-シェイプを保持2-ブレンド既定:1

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    curveOnSurface (boolean): 可能な場合は、2Dカーブが作成されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def curve(append: bool = False,bezier: bool = False,degree: float = 1.0,editPoint: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),knot: float = 1.0,name: str = "",objectSpace: bool = False,periodic: bool = False,point: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pointWeight: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0),replace: bool = False,worldSpace: bool = False) -> None:
    """
    curve コマンドを使うと、コントロール頂点(CV)のリストから新規カーブを作成できます。新規作成されたカーブへのパス名を含む文字列が返されます。ワールド座標空間またはオブジェクト(ローカル)空間において、ウェイトを使ってまたは使わずに、ポイントからカーブを作成できます。「-r/replace」フラグを使用すると、既存のカーブを置き換えることができます。「-a/append」フラグを使用すると、ポイントを既存のカーブにアペンドできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    append (boolean): 既存のカーブの端にポイントをアペンドします。このフラグを使用する場合、アペンドするカーブの名前をコマンドの最後に指定する必要があります(以下の例を参照)。

    -----------------------------------------

    bezier (boolean): ベジェカーブが作成されます。

    -----------------------------------------

    degree (float): 新規カーブの次数。既定は3です。目に見えるカーブスパンを作成するには、次数に1を足した数のカーブポイントが必要です。たとえば、3次カーブには、4個のポイントを配置する必要があります。

    -----------------------------------------

    editPoint ([linear, linear, linear]): エディットポイントのx、y、zの位置。「linear」は、このフラグで単位を伴う値を取ることができることを意味します。このフラグは、-pointフラグまたは-pointWeightフラグとは使用できません。

    -----------------------------------------

    knot (float): ノットベクトルにあるノットの値。ノット値ごとに1フラグ。(numberOfPoints+degree-1)個のノットが必要で、ノットベクトルは非減少型である必要があります。

    -----------------------------------------

    name (string): カーブの名前です。

    -----------------------------------------

    objectSpace (boolean): ポイントはオブジェクト内または「ローカル」空間にあります。これは既定です。コマンド内で「-os」と「-ws」を同時に指定することはできません。

    -----------------------------------------

    periodic (boolean): オンの場合、周期的なカーブを作成します。既定はオフです。

    -----------------------------------------

    point ([linear, linear, linear]): ポイントのx、y、zの位置。「linear」は、このフラグで単位を伴う値を取ることができることを意味します。

    -----------------------------------------

    pointWeight ([linear, linear, linear, float]): ポイントのx、y、z、wの値。wはウェイト値です。このフラグを使うと、有理カーブが作成されます。「linear」は、このフラグで単位を伴う値を取ることができることを意味します。

    -----------------------------------------

    replace (boolean): 既存のカーブ全体を置き換えます。このフラグを使用する場合、置き換えるカーブの名前をコマンドの最後に指定する必要があります(以下の例を参照)。

    -----------------------------------------

    worldSpace (boolean): ポイントはワールド空間にあります。既定は「-os」です。コマンド内で「-os」と「-ws」を同時に指定することはできません。

    -----------------------------------------

    Return Value:
    None: string新しいカーブまたは置き換えたカーブへのパス
    """
    pass

    
def curveIntersect(caching: bool = False,constructionHistory: bool = False,direction: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),directionX: float = 1.0,directionY: float = 1.0,directionZ: float = 1.0,nodeState: int = 1,tolerance: float = 1.0,useDirection: bool = False) -> None:
    """
    交差させる 2 本のカーブを指定する必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    direction ([linear, linear, linear]): 交差の前に入力カーブが投影される方向です。このベクトルは、「useDirection」フラグがtrueの場合のみ使用されます。

    -----------------------------------------

    directionX (linear): 交差する前に入力カーブが投影される方向のXコンポーネントです。このベクトルは、「useDirection」フラグがtrueの場合のみ使用されます。

    -----------------------------------------

    directionY (linear): 交差する前に入力カーブが投影される方向のYコンポーネントです。このベクトルは、「useDirection」フラグがtrueの場合のみ使用されます。

    -----------------------------------------

    directionZ (linear): 交差する前に入力カーブが投影される方向のZコンポーネントです。このベクトルは、「useDirection」フラグがtrueの場合のみ使用されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    tolerance (linear): 交差を算出する許容値です。たとえば、2本のカーブのそれぞれの終端で接続する場合、その終端が返される交差の許容値内に収まっている必要があります。既定:0.001

    -----------------------------------------

    useDirection (boolean): trueの場合、Directionフラグを使用します。まず入力カーブを指定の方向に投影してから、交差させます。falseの場合、このコマンドによって真の3D交差のみが検索されます。既定:false

    -----------------------------------------

    Return Value:
    None: string2 つのカーブが交差する部分におけるパラメータ値です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def curveOnSurface(append: bool = False,degree: float = 1.0,knot: float = 1.0,name: str = "",periodic: bool = False,positionUV: Tuple[float, float] = tuple(1.0, 1.0),replace: bool = False) -> None:
    """
    curve コマンドを使うと、コントロール頂点(CV)のリストから新規カーブを作成できます。新規作成されたカーブへのパス名を含む文字列が返されます。ワールド座標空間またはオブジェクト(ローカル)空間において、ウェイトを使ってまたは使わずに、ポイントからカーブを作成できます。「-r/replace」フラグを使用すると、既存のカーブを置き換えることができます。「-a/append」フラグを使用すると、ポイントを既存のカーブにアペンドできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    append (boolean): 既存のカーブの端にポイントをアペンドします。このフラグを使用する場合、アペンドするカーブの名前をコマンドの最後に指定する必要があります(以下の例を参照)。

    -----------------------------------------

    degree (float): 新規カーブの次数。既定は3です。目に見えるカーブスパンを作成するには、次数に1を足した数のカーブポイントが必要です。たとえば、3次カーブには、4個のポイントを配置する必要があります。

    -----------------------------------------

    knot (float): ノットベクトルにあるノットの値。ノット値ごとに1フラグ。(numberOfPoints+degree-1)個のノットが必要で、ノットベクトルは非減少型である必要があります。

    -----------------------------------------

    name (string): カーブの名前です。

    -----------------------------------------

    periodic (boolean): オンの場合、周期的なカーブを作成します。既定はオフです。

    -----------------------------------------

    positionUV ([float, float]): ポイントのUVの位置。

    -----------------------------------------

    replace (boolean): 既存のカーブ全体を置き換えます。このフラグを使用する場合、置き換えるカーブの名前をコマンドの最後に指定する必要があります(以下の例を参照)。

    -----------------------------------------

    Return Value:
    None: string- 新しいカーブ オンサーフェスの名前string新しいカーブまたは置き換えたカーブへのパス
    """
    pass

    
def detachCurve(caching: bool = False,keep: bool = False,nodeState: int = 1,parameter: float = 1.0,constructionHistory: bool = False,curveOnSurface: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    パラメータ値のリストに従って、カーブをデタッチして断片にします。「-k」フラグを使用すると、保存する断片と破棄する断片を指定できます。戻り値は、新しくデタッチされたカーブの名前です。コンストラクション ヒストリがオンの場合は、作成されるディペンデンシー ノード名も返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    keep (boolean): デタッチされた断片を保存するかどうか。このマルチアトリビュートは、パラメータのマルチアトリビュートよりも1要素大きい必要があります。既定:true

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    parameter (float): デタッチするパラメータ値既定:0.0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    curveOnSurface (boolean): 可能な場合は、2Dカーブが作成されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def duplicateCurve(caching: bool = False,constructionHistory: bool = False,local: bool = False,maxValue: float = 1.0,mergeItems: bool = False,minValue: float = 1.0,name: str = "",nodeState: int = 1,range: bool = False,relative: bool = False) -> None:
    """
    サーフェス上のカーブを取り、3D カーブを返します。サーフェス上のカーブとは、アイソパラム コンポーネント、トリム エッジ、カーブ オンサーフェス オブジェクトのことです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    local (boolean): サーフェスのトランスフォームをコピーし、ローカル空間バージョンに接続します。

    -----------------------------------------

    maxValue (float): カーブセグメントに対する最大パラメータ値です。MinValueアトリビュートと等しいか、それよりも大きい必要があります。相対がtrueである場合、このアトリビュートは最大値の1.0になります。既定:-1.0

    -----------------------------------------

    mergeItems (boolean): 可能な場合は、コンポーネントの結果をマージします。たとえば、a[1]およびa[2]を返すのではなく、a[1:2]を返します。

    -----------------------------------------

    minValue (float): カーブセグメントに対する最小パラメータ値です。相対がtrueである場合、このアトリビュートは最小値の0.0になります。既定:1.0

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    relative (boolean): trueの場合は、0.0から1.0までの相対パラメータ範囲を使用します。そうでない場合は、パラメータ値は絶対値です。既定:false

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def extendCurve(caching: bool = False,distance: float = 1.0,extendMethod: int = 1,extensionType: int = 1,inputPoint: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),join: bool = False,nodeState: int = 1,pointX: float = 1.0,pointY: float = 1.0,pointZ: float = 1.0,removeMultipleKnots: bool = False,start: int = 1,constructionHistory: bool = False,curveOnSurface: bool = False,name: str = "",noChanges: bool = False,object: bool = False,range: bool = False,replaceOriginal: bool = False) -> None:
    """
    このコマンドはカーブを延長するか、または延長として新しいカーブを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    distance (linear): 延長する距離です。extendMethodがbyDistanceの場合のみ使用されます。既定:1

    -----------------------------------------

    extendMethod (int): 延長の方法:0-距離に基づく2-3Dポイントに向かう既定:0

    -----------------------------------------

    extensionType (int): 延長のタイプ:0-リニア、1-円形、2-補外既定:0

    -----------------------------------------

    inputPoint ([linear, linear, linear]): 延長先のポイントです(オプション)。

    -----------------------------------------

    join (boolean): trueの場合、延長をオリジナルカーブに結合します。既定:true

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pointX (linear): 延長先のポイントのX値。既定:0

    -----------------------------------------

    pointY (linear): 延長先のポイントのY値。既定:0

    -----------------------------------------

    pointZ (linear): 延長先のポイントのZ値。既定:0

    -----------------------------------------

    removeMultipleKnots (boolean): trueの場合、接合部分の多重ノットを除去します。接合がtrueの場合のみ使用されます。既定:false

    -----------------------------------------

    start (int): 延長するカーブの端:0-終了、1-開始、2-両方既定:1

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    curveOnSurface (boolean): 可能な場合は、2Dカーブが作成されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    noChanges (boolean): 設定すると、操作ノードが自動的に通過モード内に配置されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def filletCurve(bias: float = 1.0,blendControl: bool = False,caching: bool = False,circular: bool = False,curveParameter1: float = 1.0,curveParameter2: float = 1.0,depth: float = 1.0,freeformBlend: bool = False,nodeState: int = 1,radius: float = 1.0,constructionHistory: bool = False,join: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False,trim: bool = False) -> None:
    """
    カーブ フィレット コマンドは 2 つのカーブの間にフィレット カーブを作成します。コマンド ラインでオブジェクトが何も指定されていないと、最初の 2 つのアクティブなカーブが使用されます。作成されるフィレットは、(半径のある)円形にしたり、フリーフォーム(接線またはブレンドのタイプ)にすることができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bias (linear): バイアスの値を調整すると、フレットカーブを入力カーブの1つの方向に曲げることができます。blendControlがtrueの場合にのみ使用可能です。既定:0.0

    -----------------------------------------

    blendControl (boolean): trueの場合、深度とバイアスをコントロールできます。それ以外では、深度とバイアスのオプションは使用できません。既定:false

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    circular (boolean): 作成されるフィレットカーブは、trueの場合には円形になり、falseの場合にはフリーフォームになります。既定:true

    -----------------------------------------

    curveParameter1 (float): フィレットカーブが1次入力カーブに接触するパラメータです。既定:0.0

    -----------------------------------------

    curveParameter2 (float): フィレットカーブが2次入力カーブに接触するパラメータです。既定:0.0

    -----------------------------------------

    depth (linear): フィレットカーブの深度を調整します。blendControlがtrueの場合にのみ使用可能です。既定:0.5

    -----------------------------------------

    freeformBlend (boolean): フリーフォームタイプは、trueの場合はブレンドで、falseの場合は接線になります。フィレットタイプがフリーフォームの場合に使用可能です。既定:false

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    radius (linear): 円形フィレットを作成するときは半径になります。既定:1.0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    join (boolean): フィレットを結合する必要がありますか?

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    trim (boolean): フィレットをトリミングする必要がありますか?

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def fitBspline(caching: bool = False,nodeState: int = 1,tolerance: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False) -> None:
    """
    fitBspline コマンドは、入力カーブの CV を合わせ、3 D カーブを返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    tolerance (linear): 合わせるための許容値。結果のカーブは指定したポイントの許容値内に収まります。既定:0.1

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def hardenPointCurve(caching: bool = False,multiplicity: int = 1,nodeState: int = 1,constructionHistory: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    hardenPointCurve コマンドは、コントロール ポイント インデックスのリストを指定したカーブのノットを変更して、そのコントロール ポイントに対応するノットが指定した多重度になるようにします。多重度 -1 は、カーブの次数に等しい多重度に使われる一般的な値です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    multiplicity (int): カーブノットに必要な多重度既定:-1

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def illustratorCurves(caching: bool = False,constructionHistory: bool = False,illustratorFilename: str = "",nodeState: int = 1,object: bool = False,tolerance: float = 1.0) -> None:
    """
    illustratorCurves コマンドは、入力された Adobe(R) Illustrator(R)ファイルから NURBS カーブを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    illustratorFilename (string): 入力されたAdobe(R)Illustrator(R)ファイル名。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    tolerance (float): 隣接する2つのCVの距離がこの許容値未満である場合、出力カーブのCVがスナップします。既定:0.001f

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def insertKnotCurve(addKnots: bool = False,caching: bool = False,insertBetween: bool = False,nodeState: int = 1,numberOfKnots: int = 1,parameter: float = 1.0,constructionHistory: bool = False,curveOnSurface: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    insertKnotCurve コマンドでは、パラメータ値のリストが指定されている場合に、カーブにノットが挿入されます。パラメータ値 1 つに対して追加されるノットの数と、ノットが追加されるか補完されるかを指定することができます。カーブの名前が返されます。コンストラクション ヒストリがオンの場合、結果として得られるディペンデンシー ノード名も返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addKnots (boolean): ノットまたは補足を追加します。補足とは、指定したノット数に到達するようにノットを追加することです。既定:true

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    insertBetween (boolean): true(真)に設定すると、複数のパラメータ値が指定され、ノットはパラメータ値そのものではなく、所定のパラメータ値の間に均等な間隔で挿入されます。既定:false

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    numberOfKnots (int): 挿入されるノットの数。カーブ上のどのポイントでも、最大「次数」までノットを挿入できます。既定:1

    -----------------------------------------

    parameter (float): ノットが追加されるパラメータ値です。既定:0.0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    curveOnSurface (boolean): 可能な場合は、2Dカーブが作成されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nurbsSquare(caching: bool = False,center: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),centerX: float = 1.0,centerY: float = 1.0,centerZ: float = 1.0,degree: int = 1,nodeState: int = 1,normal: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),normalX: float = 1.0,normalY: float = 1.0,normalZ: float = 1.0,sideLength1: float = 1.0,sideLength2: float = 1.0,spansPerSide: int = 1,constructionHistory: bool = False,name: str = "",object: bool = False) -> None:
    """
    nurbsSquare コマンドは、四角形を作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    center ([linear, linear, linear]): 四角形の中心点です。

    -----------------------------------------

    centerX (linear): 中心点のX座標です。既定:0

    -----------------------------------------

    centerY (linear): 中心点のY座標です。既定:0

    -----------------------------------------

    centerZ (linear): 中心点のZ座標です。既定:0

    -----------------------------------------

    degree (int): 作成される円の次数です:1-一次、2-二次、3-三次、5-五次、7-七次。既定:3

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    normal ([linear, linear, linear]): 四角形があるプレーンの法線です。

    -----------------------------------------

    normalX (linear): 法線方向のX座標です。既定:0

    -----------------------------------------

    normalY (linear): 法線方向のY座標です。既定:0

    -----------------------------------------

    normalZ (linear): 法線方向のZ座標です。既定:1

    -----------------------------------------

    sideLength1 (linear): 四角形の一辺の長さです。既定:1.0

    -----------------------------------------

    sideLength2 (linear): 四角形の隣接する一辺の長さです。既定:1.0

    -----------------------------------------

    spansPerSide (int): 一辺毎のスパン数が四角形の解像度を決定します。既定:1

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def offsetCurve(caching: bool = False,connectBreaks: int = 1,cutLoop: bool = False,cutRadius: float = 1.0,distance: float = 1.0,nodeState: int = 1,normal: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),reparameterize: bool = False,stitch: bool = False,subdivisionDensity: int = 1,tolerance: float = 1.0,useGivenNormal: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False,range: bool = False) -> None:
    """
    offset コマンドは、選択したカーブから新しいオフセット カーブを作成します。オフセットの切れ目の接続タイプはオフ(接続なし)、円形(円弧で接続)、またはリニア(リニア接続して鋭いコーナーに)のいずれかです。ループのカットがオンの場合、オフセット カーブのループはすべてトリミングされます。既定のカットの半径が 0.0 の場合、それぞれの交差に鋭いコーナーが作成されます。0.0 より大きな値の場合、それぞれの交差にその半径の小さな円弧が作成されます。カットの半径の値は、ループのカットがオンの場合にのみ有効です。プラナー カーブのオフセットは、そのカーブのプレーンで計算され、3D カーブは 3D のオフセットになります。subdivisionDensity フラグは、オフセット オブジェクトの最大細分割数です(つまり、オフセットが許容値に到達するまで、または繰り返しがこの最大値に到達するまで、オフセットを計算します)。パラメータの再設定オプションで、オフセット カーブにオリジナルのカーブとは異なるパラメータ設定を行うことができます。これで、カーブの大きなオフセットの場合に起こる、オフセット カーブのパラメータ設定の不均等を避けることができますが、計算に時間がかかります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    connectBreaks (int): 切れ目の接続方法(キャップ間):0-オフ、1-円形、2-リニア、既定:2

    -----------------------------------------

    cutLoop (boolean): ループをカットします。既定:false

    -----------------------------------------

    cutRadius (linear): ループのカット半径です。cutLoopアトリビュートがtrueに設定されている場合にのみ使用されます。既定:0.0

    -----------------------------------------

    distance (linear): オフセット距離既定:1.0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    normal ([linear, linear, linear]): オフセットプレーンの法線です。

    -----------------------------------------

    reparameterize (boolean): パラメータを再設定します。この値を変更することはお勧めしません。既定:false

    -----------------------------------------

    stitch (boolean): カーブセグメントをステッチします。この値を変更することはお勧めしません。既定:true

    -----------------------------------------

    subdivisionDensity (int): スパンごとの最大サブディビジョン密度既定:5

    -----------------------------------------

    tolerance (linear): 許容値既定:0.01

    -----------------------------------------

    useGivenNormal (boolean): 指定した法線(あるいはジオメトリ法線)を使用します。既定:1

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def offsetCurveOnSurface(caching: bool = False,checkPoints: int = 1,connectBreaks: int = 1,cutLoop: bool = False,distance: float = 1.0,nodeState: int = 1,stitch: bool = False,subdivisionDensity: int = 1,tolerance: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False,range: bool = False) -> None:
    """
    offsetCurveOnSurface コマンドは、カーブ オンサーフェスをオフセットして、別のカーブ オンサーフェスを作成します。オフセットの切れ目の接続タイプはオフ(接続なし)、円形(円弧で接続)、またはリニア(リニア接続して鋭いコーナーに)のいずれかです。ループのカットがオンの場合、オフセット カーブのループはすべてトリミングされて、それぞれの交差に鋭いコーナーが作成されます。subdivisionDensity フラグは、オフセット オブジェクトの最大細分割数です(つまり、オフセットが許容値に到達するまで、または繰り返しがこの最大値に到達するまで、オフセットを計算します)。checkPoints フラグは、オリジナル カーブからのオフセット カーブの距離を定義するスパンごとのポイント数を設定します。tolerance フラグは、オフセット カーブが要求されているオフセット距離を満たす精度を定義します。適切なオフセット カーブとは、チェックポイントがすべて要求されるオフセットの指定した許容値内にあるオフセット カーブです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    checkPoints (int): スパンごとのフィット具合のチェックポイントです。この値を変更しないことをお勧めします。既定:3

    -----------------------------------------

    connectBreaks (int): 切れ目の接続方法(キャップ間):0-オフ、1-円形、2-リニア、既定:2

    -----------------------------------------

    cutLoop (boolean): ループをカットします。既定:false

    -----------------------------------------

    distance (linear): オフセット距離既定:1.0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    stitch (boolean): カーブセグメントをステッチします。この値を変更しないことをお勧めします。既定:true

    -----------------------------------------

    subdivisionDensity (int): スパンごとの最大サブディビジョン密度既定:5

    -----------------------------------------

    tolerance (linear): 許容値既定:0.01

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def pointCurveConstraint(caching: bool = False,nodeState: int = 1,pointConstraintUVW: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pointWeight: float = 1.0,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),weight: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    NURBS カーブを直接操作できます。NURBS カーブ上で指定したパラメータ位置に位置制限を適用し、NURBS カーブを直接操作します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    pointConstraintUVW ([float, float, float]): 入力NURBSオブジェクト上のポイントコンストレイントのパラメータ空間における位置

    -----------------------------------------

    pointWeight (float): ポイントコンストレイントのウェイトです。コンストレイントが入力NURBSオブジェクトに与える影響の度合いを定義します。既定:1.0

    -----------------------------------------

    position ([float, float, float]): 指定したパラメータ空間コンポーネントにある、NURBSオブジェクトの空間での新しい位置です。指定しないと、NURBSオブジェクト上のパラメータ空間コンポーネントで評価した位置になります。

    -----------------------------------------

    weight (float): lsqコンストレイントのウェイト。ウェイトが大きいほど、コンストレイントを厳密に適用する正方形の数が少なくなります。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名、およびノード名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def pointOnCurve(caching: bool = False,constructionHistory: bool = False,curvatureCenter: bool = False,curvatureRadius: bool = False,nodeState: int = 1,normal: bool = False,normalizedNormal: bool = False,normalizedTangent: bool = False,parameter: float = 1.0,position: bool = False,tangent: bool = False,turnOnPercentage: bool = False) -> None:
    """
    NURBS カーブ上のポイントの情報を返します。フラグが指定されていない場合、既定の p/position が指定されているものとみなされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    curvatureCenter (boolean): カーブ上で指定したポイントの曲率の中心(x,y,z)を返します。

    -----------------------------------------

    curvatureRadius (boolean): カーブ上で指定したポイントの曲率の半径を返します。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    normal (boolean): カーブ上で指定したポイントの法線(x,y,z)を返します。

    -----------------------------------------

    normalizedNormal (boolean): カーブ上で指定したポイントの正規化された法線(x,y,z)を返します。

    -----------------------------------------

    normalizedTangent (boolean): カーブ上で指定したポイントの正規化された接線(x,y,z)を返します。

    -----------------------------------------

    parameter (float): カーブ上のパラメータ値既定:0.0

    -----------------------------------------

    position (boolean): カーブ上で指定したポイントの位置(x,y,z)を返します。

    -----------------------------------------

    tangent (boolean): カーブ上で指定したポイントの接線(x,y,z)を返します。

    -----------------------------------------

    turnOnPercentage (boolean): パラメータが正規化(0,1)されているかどうか既定:false

    -----------------------------------------

    Return Value:
    None: float[3]ベクトル クエリー結果float単一の浮動小数点のクエリー結果string文字クエリー結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def projectTangent(caching: bool = False,curvature: bool = False,curvatureScale: float = 1.0,ignoreEdges: bool = False,nodeState: int = 1,reverseTangent: bool = False,rotate: float = 1.0,tangentDirection: int = 1,tangentScale: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    project tangent コマンドは、カーブを、他の 2 つのカーブまたはサーフェスに(接線に対して)位置合わせするために使用します。1 つのサーフェス アイソパラムを選択して、位置合わせする方向(U または V)を定義することができます。カーブの端は、他のこれらのオブジェクトと交差している必要があります。必要に応じて曲率連続性を適用することもできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    curvature (boolean): trueにすると曲率連続性はオンになり、falseにすると曲率連続性はオフになります。既定:false

    -----------------------------------------

    curvatureScale (linear): 位置合わせするカーブの曲率に適用される曲率スケールです。曲率オプションがtrueの場合に使用可能です。既定:0.0

    -----------------------------------------

    ignoreEdges (boolean): falseにすると、サーフェスがトリミングされていれば、トリミングエッジカーブの接線を使用します。trueにすると、U/V方向の基本サーフェスの接線を使用します。既定:false

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    reverseTangent (boolean): trueにすると接線方向を反転し、falseにするとそのままになります。既定:false

    -----------------------------------------

    rotate (angle): 位置合わせするカーブの接線の回転量です。法線方向(3)がtangentDirectionに使用されていない場合のみ使用可能です。既定:0.0

    -----------------------------------------

    tangentDirection (int): 使用できる接線位置合わせ方向のタイプの値は、次のとおりです。1=U方向(サーフェスまたは最初のカーブに対する)、2=V方向(サーフェスまたは2番目のカーブの使用に対する)、3=法線方向(交点における)。既定:1

    -----------------------------------------

    tangentScale (linear): 位置合わせするカーブの接線に適用される接線スケールです。既定:1.0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def rebuildCurve(caching: bool = False,degree: int = 1,endKnots: int = 1,fitRebuild: bool = False,keepControlPoints: bool = False,keepEndPoints: bool = False,keepRange: int = 1,keepTangents: bool = False,nodeState: int = 1,rebuildType: int = 1,smartSurfaceCurveRebuild: bool = False,spans: int = 1,tolerance: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False,range: bool = False,replaceOriginal: bool = False) -> None:
    """
    パラメータ設定を修正してカーブをリビルドします。シェイプが変化することもあります。カーブの再構築方法は rebuildType (-rt)で決まります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    degree (int): 結果のカーブの次数。1-一次、2-二次、3-三次、5-五次、7-七次。既定:3

    -----------------------------------------

    endKnots (int): カーブのエンドノットの状態。0-均一エンドノット、1-多重エンドノット。既定:0

    -----------------------------------------

    fitRebuild (boolean): trueの場合、最も正方形に適合しないリビルドを使用します。falseにすると、変換手法が使用されます。既定:true

    -----------------------------------------

    keepControlPoints (boolean): trueにすると、CVがそのまま残ります。rebuildTypeがmatchKnotsでない場合、強制的に均一なパラメータ設定になります。既定:false

    -----------------------------------------

    keepEndPoints (boolean): trueにすると、エンドポイントがそのまま維持されます。既定:true

    -----------------------------------------

    keepRange (int): 再構築されるカーブのパラメータ設定を決定します。0-結果のカーブのパラメータを0から1に再設定、1-オリジナルのカーブパラメータ設定を維持、2-パラメータを0からスパン数に再設定。既定:1

    -----------------------------------------

    keepTangents (boolean): trueにすると、エンドポイントの接線がそのまま維持されます。既定:true

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    rebuildType (int): 入力カーブの再構築方法。0-均一、1-スパンの削減、2-ノット一致ング、3-多重ノットの除去、4-曲率、5-終端のリビルド、6-削除。既定:0

    -----------------------------------------

    smartSurfaceCurveRebuild (boolean): trueの場合、カーブオンサーフェスが3Dでリビルドされ、2D情報はそのまま維持されます。既定:false

    -----------------------------------------

    spans (int): 再構築されるカーブのスパン数。rebuildTypeを均一にした場合に限って使用されます。既定:4

    -----------------------------------------

    tolerance (linear): 再構築する際のオリジナルカーブからの許容差。既定:0.01

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def reverseCurve(caching: bool = False,nodeState: int = 1,constructionHistory: bool = False,curveOnSurface: bool = False,name: str = "",object: bool = False,range: bool = False,replaceOriginal: bool = False) -> None:
    """
    カーブまたはカーブオン サーフェスの方向を反転します。新しく反転したカーブのパス名、および生成されたディペンデンシー ノードの名前を含む文字列が返されます。反転したカーブのパラメータ範囲は、元のカーブと同じです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    curveOnSurface (boolean): 可能な場合は、2Dカーブが作成されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    range (boolean): カーブの範囲を入力カーブ全体に強制します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[](オブジェクト名とノード名)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def smoothCurve(caching: bool = False,nodeState: int = 1,smoothness: float = 1.0,constructionHistory: bool = False,name: str = "",object: bool = False,replaceOriginal: bool = False) -> None:
    """
    スムーズ コマンドは、指定されたコントロール ポイントでカーブをスムーズします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    smoothness (float): 平滑性係数既定:10.0

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    replaceOriginal (boolean): 「同じ位置」に作成(つまり置き換え)します。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def textCurves(font: str = "",name: str = "",object: bool = False,text: str = "") -> None:
    """
    textCurves コマンドは、指定のフォントを使用してテキスト文字列から NURBS カーブを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    font (string): 使用するフォントです。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    text (string): カーブを作成するための文字列です。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト名とノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def changeSubdivComponentDisplayLevel(level: int = 1,relative: bool = False) -> None:
    """
    サブディビジョン サーフェスのコンポーネントを、明示的、強制的に特定の詳細レベルで表示します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    level (int): コンポーネントの表示レベルを指定します。

    -----------------------------------------

    relative (boolean): 設定されていれば、レベルは相対的な表示レベルになります。

    -----------------------------------------

    Return Value:
    None: intコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def changeSubdivRegion(action: int = 1,level: int = 1) -> None:
    """
    サブディビジョン サーフェスの領域をコマンドのパラメータに基づいて変更します。このコマンドは、選択したサブディビジョン サーフェス上で動作します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    action (int): 選択領域へのアクションを指定する1=選択領域を削除する2=選択領域を拡張する

    -----------------------------------------

    level (int): 操作を実行するサブディビジョンサーフェスのレベルを指定します。

    -----------------------------------------

    Return Value:
    None: booleanコマンドの結果
    """
    pass

    
def coarsenSubdivSelectionList() -> None:
    """
    セレクション リストを基に、コンポーネントのサブディビジョン サーフェス セットを粗くします。選択したコンポーネントはより粗いレベルで選択されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: booleanコマンドの結果
    """
    pass

    
def createSubdivRegion() -> None:
    """
    セレクション リストに基づいてサブディビジョン サーフェス領域を作成します。選択領域を作成すると、セレクション リストに存在するまたはセレクション リストから変換されたコンポーネントのみが表示され、UI を使って選択できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: booleanコマンドの結果
    """
    pass

    
def nurbsToSubdiv(addUnderTransform: bool = False,caching: bool = False,collapsePoles: bool = False,constructionHistory: bool = False,matchPeriodic: bool = False,maxPolyCount: int = 1,name: str = "",nodeState: int = 1,object: bool = False,reverseNormal: bool = False) -> None:
    """
    NURBS サーフェスをサブディビジョン サーフェスに変換します。新しいサブディビジョン サーフェスの名前が返されます。コンストラクション ヒストリがオンの場合、新しいディペンデンシー ノードの名前も返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addUnderTransform (boolean): 古いトランスフォームの下で新しいサーフェスを追加するかどうかを指定します。

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    collapsePoles (boolean): 極を1つのポイントに折り畳みます。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    matchPeriodic (boolean): 結果は、周期の一致するサーフェステクスチャマッピングになります。既定:false

    -----------------------------------------

    maxPolyCount (int): 結果のサブディビジョンサーフェス内のベースメッシュフェースの最大数です。既定:1000

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    reverseNormal (boolean): 変換のNURBSサーフェスの法線を反転します。既定:true

    -----------------------------------------

    Return Value:
    None: string[]サブディビジョン サーフェスとオプションのディペンデンシー ノード名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nurbsToSubdivPref(bridge: int = 1,capType: int = 1,collapsePoles: bool = False,matchPeriodic: bool = False,maxPolyCount: int = 1,offset: float = 1.0,reverseNormal: bool = False,solidType: int = 1,trans00: float = 1.0,trans01: float = 1.0,trans02: float = 1.0,trans10: float = 1.0,trans11: float = 1.0,trans12: float = 1.0,trans20: float = 1.0,trans21: float = 1.0,trans22: float = 1.0,trans30: float = 1.0,trans31: float = 1.0,trans32: float = 1.0) -> None:
    """
    このコマンドは、NURBS からサブディビジョン サーフェスへの変換プリファレンスで使用される値を設定します。このプリファレンスは、NURBS 作成コマンドが使用し、Maya のセッション間で保存されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bridge (int): 有効な値は、0、1、2、または3です。

    -----------------------------------------

    capType (int): 有効な値は0または1です。

    -----------------------------------------

    collapsePoles (boolean): 

    -----------------------------------------

    matchPeriodic (boolean): 

    -----------------------------------------

    maxPolyCount (int): 

    -----------------------------------------

    offset (linear): 

    -----------------------------------------

    reverseNormal (boolean): 

    -----------------------------------------

    solidType (int): 有効な値は、0、1、または2です。

    -----------------------------------------

    trans00 (float): 

    -----------------------------------------

    trans01 (float): 

    -----------------------------------------

    trans02 (float): 

    -----------------------------------------

    trans10 (float): 

    -----------------------------------------

    trans11 (float): 

    -----------------------------------------

    trans12 (float): 

    -----------------------------------------

    trans20 (float): 

    -----------------------------------------

    trans21 (float): 

    -----------------------------------------

    trans22 (float): 

    -----------------------------------------

    trans30 (float): 

    -----------------------------------------

    trans31 (float): 

    -----------------------------------------

    trans32 (float): 

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyToSubdiv(absolutePosition: bool = False,applyMatrixToResult: bool = False,caching: bool = False,maxEdgesPerVert: int = 1,maxPolyCount: int = 1,nodeState: int = 1,preserveVertexOrdering: bool = False,quickConvert: bool = False,uvPoints: Tuple[float, float] = tuple(1.0, 1.0),uvPointsU: float = 1.0,uvPointsV: float = 1.0,uvTreatment: int = 1,addUnderTransform: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False) -> None:
    """
    ポリゴンをサブディビジョン サーフェスに変換します。新しいサブディビジョン サーフェスの名前が返されます。コンストラクション ヒストリがオンの場合、新しいディペンデンシー ノードの名前も返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absolutePosition (boolean): trueにすると、ポリゴンのブラインドデータ情報が、相対オフセットではなく、頂点の絶対位置として扱われます。ブラインドデータに絶対位置が含まれていることがわかっていない場合は、既定のfalseを使用してください。既定:false

    -----------------------------------------

    applyMatrixToResult (boolean): trueの場合、入力ジオメトリのマトリックスがオブジェクトに適用されて、作成されるジオメトリはこの単位マトリックスになります。falseの場合、変換はローカル空間オブジェクトで行われ、作成されたジオメトリは入力オブジェクトのマトリックスを持ちます。既定:true

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    maxEdgesPerVert (int): 入力メッシュ上の頂点に対する最大許容結合価です。既定:32

    -----------------------------------------

    maxPolyCount (int): 入力メッシュで受け入れられるポリゴンの最大数です。既定:1000

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    preserveVertexOrdering (boolean): 変換での頂点の順序の保持既定:true

    -----------------------------------------

    quickConvert (boolean): パフォーマンスをテストするためのデバッグフラグ既定:true

    -----------------------------------------

    uvPoints ([float, float]): 詳細レベルの頂点に関連するUVデータの変換で必要となる、キャッシュされたUVポイントです(標準編集モードとポリプロキシモードを切り替える場合)。

    -----------------------------------------

    uvPointsU (float): キャッシュされたUVポイントのU値です。

    -----------------------------------------

    uvPointsV (float): キャッシュされたUVポイントのV値です。

    -----------------------------------------

    uvTreatment (int): プロキシモードのときのサブディビジョンのUV座標の処理:0-サブディビジョンUVを保持する1-ポリゴンUVからサブディビジョンUVを構築する2-サブディビジョン上にUVなし既定:0

    -----------------------------------------

    addUnderTransform (boolean): trueの場合、ポリゴンのトランスフォームの下に新しいサブディビジョンサーフェスが追加されます。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    Return Value:
    None: string- サブディビジョンとオプションのディペンデンシー ノード名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def querySubdiv(action: int = 1,level: int = 1,relative: bool = False) -> None:
    """
    照会パラメータ セットに基づいてサブディビジョン サーフェスを照会し、セレクション リストを更新します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    action (int): 照会パラメータを指定します。1:微調整したすべての頂点をレベル(Level)で検索します。2:すべてのシャープな頂点をレベルで検索します。3:すべてのシャープなエッジをレベルで検索します。4:すべてのフェースをレベルで検索します。レベル(Level)アトリビュートを指定しない場合、照会は現在のコンポーネントの表示レベルに適用されます。アトリビュートを指定した場合、照会は、relativeフラグの状態に基づいて絶対的に、または現在のレベルに相対して、指定したレベルに適用されます。

    -----------------------------------------

    level (int): 操作を実行するサブディビジョンサーフェスのレベルを指定します。

    -----------------------------------------

    relative (boolean): levelフラグを設定すると、現在のコンポーネントの表示レベルに相対したレベルを参照します。

    -----------------------------------------

    Return Value:
    None: booleanコマンドの結果
    """
    pass

    
def refineSubdivSelectionList() -> None:
    """
    セレクション リストに基づいて、コンポーネントのサブディビジョン サーフェス セットを洗練します。選択したコンポーネントは細分割されます。コマンド後のセレクション リストは、より細かいサブディビジョン レベルで新しく作成されたコンポーネントです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: booleanコマンドの結果
    """
    pass

    
def subdAutoProjection(caching: bool = False,nodeState: int = 1,constructionHistory: bool = False,layout: int = 1,layoutMethod: int = 1,name: str = "",optimize: int = 1,percentageSpace: float = 1.0,planes: int = 1,scale: int = 1,skipIntersect: bool = False,worldSpace: bool = False) -> None:
    """
    複数の正射投影を同時に使用して、テクスチャ マップをオブジェクトに投影します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    layout (int): 使用するレイアウトアルゴリズムです。0-UVピースはU軸に沿って位置合わせされます。1UVピースは正方シェイプに移動されます。

    -----------------------------------------

    layoutMethod (int): 使用するレイアウト方法。0:ブロックスタッキング1:シェイプスタッキング

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    optimize (int): 切断の生成に異なる2つのフレーバを使用します。0すべてのフェースが最適なプレーンに割り当てられます。これによりマップの歪みが最適化されます。1小さなUVのピースが大きなピースに統合されます。ここでさらに歪みが発生するのは不思議ではありません。この方法では、UVピースの数は少なくなる傾向があります。

    -----------------------------------------

    percentageSpace (float): レイアウトを正方形に設定した場合、この値は各UVピースの周りに追加されるテクスチャ領域のパーセンテージです。このコマンドを使用して、テクスチャ内の各UVピースがそれぞれ個別のピクセルを使用することを確認できます。最大値は5%です。

    -----------------------------------------

    planes (int): 使用される中間の投影の数。有効な数字は、4、5、6、8、12です。C:既定は6です。

    -----------------------------------------

    scale (int): 投影後にピースをスケールする方法は、次のとおりです。0:スケールは適用されません。1:単位正方形に合わせて均一にスケールします。2:単位正方形に合わせて非比例にスケールします。

    -----------------------------------------

    skipIntersect (boolean): オンの場合、UVピースの交差はテストされません。これにより投影は速くなり、ピースも少なくなりますが、UV空間のオーバーラップが発生することがあります。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def subdCleanTopology() -> None:
    """
    サブディビジョン サーフェスのトポロジの全レベルをクリーニングします。次の条件を満たす頂点のジオメトリをクリーニングします。- 編集なし - 既定の UV (親フェースを細分割することで得られる UV)。- 折り目なし。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: boolean成功または失敗
    """
    pass

    
def subdCollapse(caching: bool = False,level: int = 1,nodeState: int = 1,constructionHistory: bool = False,name: str = "",object: bool = False) -> None:
    """
    このコマンドは、引数として渡されたサブディビジョン サーフェスを取り、階層レベル番号が「除去」されたサブディビジョン サーフェスを生成します。作成されたサブディビジョン サーフェスの名前を返します。また、変換を行った DG ノードもオプションで返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    level (int): ベースメッシュになるレベルです。既定:0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    Return Value:
    None: string[]サブディビジョン サーフェスとオプションのディペンデンシー ノード名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def subdDuplicateAndConnect() -> None:
    """
    入力サブディビジョン サーフェスを複製し、新しく作成された複製シェイプの create アトリビュートにオリジナル サブディビジョンシェイプの outSubdiv アトリビュートを接続して、オリジナルシェイプから新しい複製シェイプにシェーダ割当てをコピーします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def subdEditUV(angle: float = 1.0,pivotU: float = 1.0,pivotV: float = 1.0,relative: bool = False,rotateRatio: float = 1.0,rotation: bool = False,scale: bool = False,scaleU: float = 1.0,scaleV: float = 1.0,uValue: float = 1.0,uvSetName: str = "",vValue: float = 1.0) -> None:
    """
    サブディビジョン サーフェス上の UV を編集します。照会フラグと一緒に使用した場合、指定したコンポーネントにコネクトされた UV 値を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    angle (float): UV値を回転させる角度値を、度単位で指定します。

    -----------------------------------------

    pivotU (float): スケールまたは回転を実行するU方向のピボット値を指定します。

    -----------------------------------------

    pivotV (float): スケールまたは回転を実行するV方向のピボット値を指定します。

    -----------------------------------------

    relative (boolean): 既存の値に対し、値を相対的に編集するかどうかを指定します。既定はtrueです。

    -----------------------------------------

    rotateRatio (float): UV値を回転させる際の比率の値を指定します。既定は1.0です。

    -----------------------------------------

    rotation (boolean): 回転値を使用して値を編集するかどうかを指定します。

    -----------------------------------------

    scale (boolean): スケール値を使用して値を編集するかどうかを指定します。

    -----------------------------------------

    scaleU (float): U方向のスケール値を指定します。

    -----------------------------------------

    scaleV (float): V方向のスケール値を指定します。

    -----------------------------------------

    uValue (float): U方向の値を指定します。relativeフラグがfalseの場合は絶対値として指定します。

    -----------------------------------------

    uvSetName (string): UVを編集するUVセット名を指定します。指定しない場合、現在のUVセットが存在すればそれを使用します。

    -----------------------------------------

    vValue (float): V方向の値を指定します。relativeフラグがfalseの場合は絶対値として指定します。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def subdiv(currentLevel: bool = False,currentSubdLevel: bool = False,deepestLevel: int = 1,displayLoad: bool = False,edgeStats: bool = False,faceStats: bool = False,maxPossibleLevel: int = 1,proxyMode: int = 1,smallOffsets: bool = False) -> None:
    """
    選択したサブディビジョンまたはコンポーネントに関する、分割の最深レベル、現在選択しているコンポーネントの子や親などの、有用な情報を提供します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    currentLevel (boolean): 照会すると、このフラグは現在選択しているサブディビジョンサーフェスコンポーネントのレベルを表す整数を返します。CVの複数のレベルを選択している場合、-1を返します(異なるオブジェクト由来でも同様です)。処理する入力サブディビジョンCVがない場合、-2を返します。

    -----------------------------------------

    currentSubdLevel (boolean): 照会すると、このフラグは、コンポーネントを選択しているかどうかに関係なく、現在選択しているサブディビジョンサーフェスのレベルを表す整数を返します。処理する入力サブディビジョンCVがない場合は、-2を返します。

    -----------------------------------------

    deepestLevel (int): 照会すると、このフラグは照会されたサブディビジョンサーフェスが細分割された最深のレベルを表す整数を返します。

    -----------------------------------------

    displayLoad (boolean): 照会すると、このフラグは選択したサブディビジョンの表示負荷を出力します。

    -----------------------------------------

    edgeStats (boolean): 照会すると、このフラグは現在のサブディビジョンの状態を出力します。

    -----------------------------------------

    faceStats (boolean): 照会すると、このフラグは現在のサブディビジョンの状態を出力します。

    -----------------------------------------

    maxPossibleLevel (int): 照会すると、このフラグは照会されたサブディビジョンサーフェスを細分割できる最深いのレベルを表す整数を返します。

    -----------------------------------------

    proxyMode (int): 照会すると、このフラグはサブディビジョンサーフェスがポリゴンプロキシモードになっているかどうかを返します。プロキシモードでは、ポリゴン編集ツールを使用して、コンストラクションヒストリがないサブディビジョンサーフェスのベースメッシュを編集できます。サブディビジョンサーフェスがポリゴンプロキシモードにある場合は1を返します。サーフェスはプロキシモードになっていなくても、コンストラクションヒストリがないためにプロキシモードへの切り替えが可能な場合は0を返します(この状態を「標準」モードともいいます)。サーフェスがプロキシモードになっておらず、コンストラクションヒストリがあるためにプロキシモードに切り替えることができない場合は2を返します。

    -----------------------------------------

    smallOffsets (boolean): 照会すると、このフラグは、頂点を必要としない程度に小さいオフセットがある階層のサブディビジョン頂点の数を出力します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def subdivCrease(sharpness: bool = False) -> None:
    """
    セレクション リストにあるサブディビジョンのメッシュ エッジまたはメッシュ ポイントに、折り目を設定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    sharpness (boolean): 折り目に設定するシャープネスの値を指定します。

    -----------------------------------------

    Return Value:
    None: booleanコマンドの結果
    """
    pass

    
def subdivDisplaySmoothness(all: bool = False,smoothness: int = 1) -> None:
    """
    セレクション リスト上のサブディビジョン サーフェス、または -all オプションを設定した場合はすべてのサブディビジョン サーフェスについて、表示の平滑性を設定または照会します。平滑性(Smoothness)オプションは、粗(Rough)、中(Medium)、高(Fine)で、既定は粗です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    all (boolean): このフラグを設定した場合、すべてのサブディビジョンサーフェスの平滑性を変更します。

    -----------------------------------------

    smoothness (int): 平滑性(Smoothness)-1粗(Rough)、2中(Medium)、3高(Fine)

    -----------------------------------------

    Return Value:
    None: booleanコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def subdLayoutUV(caching: bool = False,nodeState: int = 1,constructionHistory: bool = False,flipReversed: bool = False,layout: int = 1,layoutMethod: int = 1,name: str = "",percentageSpace: float = 1.0,rotateForBestFit: int = 1,scale: int = 1,separate: int = 1,worldSpace: bool = False) -> None:
    """
    テクスチャ プレーンで UV を移動し、オーバーラップを避けます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    flipReversed (boolean): このフラグをオンにすると、反転したUVピースが反転します。

    -----------------------------------------

    layout (int): カット適用後にUVのピースを移動する方法を指定します。0:移動は適用されません。1:ピースをU軸に沿ってレイアウトします。2:ピースを四角形にレイアウトします。

    -----------------------------------------

    layoutMethod (int): 使用するレイアウト方法。0:ブロックスタッキング1:シェイプスタッキング

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    percentageSpace (float): レイアウトを正方形に設定した場合、この値は各UVピースの周りに追加されるテクスチャ領域のパーセンテージです。このコマンドを使用して、テクスチャ内の各UVピースがそれぞれ個別のピクセルを使用することを確認できます。最大値は5%です。

    -----------------------------------------

    rotateForBestFit (int): 0:回転は適用されません。1:90°回転のみを可能にします。2:自由回転を可能にします。

    -----------------------------------------

    scale (int): 移動とカット後のピースのスケール方法を指定します。0:スケールは適用されません。1:単位正方形に合わせて均一にスケールします。2:単位正方形に合わせて非比例にスケールします。

    -----------------------------------------

    separate (int): カットするUVエッジを指定します。0:カットは実行されません。1:折り目に沿ってカットが実行されます。2:すべての必要なカットですべての交点が回避されます。

    -----------------------------------------

    worldSpace (boolean): trueにすると、ローカル空間ではなく、ワールド空間の座標で操作が実行されます。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def subdListComponentConversion(border: bool = False,fromEdge: bool = False,fromFace: bool = False,fromUV: bool = False,fromVertex: bool = False,internal: bool = False,toEdge: bool = False,toFace: bool = False,toUV: bool = False,toVertex: bool = False,uvShell: bool = False,uvShellBorder: bool = False) -> None:
    """
    このコマンドは、サブディビジョン サーフェス コンポーネントのタイプを 1 つまたは複数のタイプから別の 1 つまたは複数のタイプに変換し、変換のリストを返します。現在選択されているオブジェクトは変更されません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    border (boolean): 境界に変換します。

    -----------------------------------------

    fromEdge (boolean): 変換前のコンポーネントタイプを指定:エッジ

    -----------------------------------------

    fromFace (boolean): 変換前のコンポーネントタイプを指定:フェース

    -----------------------------------------

    fromUV (boolean): 変換前のコンポーネントタイプを指定:UV

    -----------------------------------------

    fromVertex (boolean): 変換前のコンポーネントタイプを指定:頂点

    -----------------------------------------

    internal (boolean): 「より小さな」コンポーネントタイプをより大きなものに変換するときに使用可能です。変換の対象を「接続された」コンポーネントと「含まれた」コンポーネントのどちらにするか指定します。下記の例を参照してください。

    -----------------------------------------

    toEdge (boolean): 変換後のコンポーネントタイプを指定:エッジ

    -----------------------------------------

    toFace (boolean): 変換後のコンポーネントタイプを指定:フェース

    -----------------------------------------

    toUV (boolean): 変換後のコンポーネントタイプを指定:UV

    -----------------------------------------

    toVertex (boolean): 変換後のコンポーネントタイプを指定:頂点

    -----------------------------------------

    uvShell (boolean): 同じUVシェル内にあるUVコンポーネントを返します。-tuvおよび-fuvフラグを指定した場合のみ動作します。

    -----------------------------------------

    uvShellBorder (boolean): 同じUVシェル内の境界線上にあるUVコンポーネントを返します。-tuvおよび-fuvフラグを指定した場合のみ動作します。

    -----------------------------------------

    Return Value:
    None: string[]サブディビジョン サーフェス コンポーネントのリスト
    """
    pass

    
def subdMapCut(caching: bool = False,constructionHistory: bool = False,name: str = "",nodeState: int = 1) -> None:
    """
    テクスチャ マッピングのエッジに沿ってカットします。カットしたエッジはマップ境界となります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def subdMapSewMove(caching: bool = False,nodeState: int = 1,constructionHistory: bool = False,limitPieceSize: bool = False,name: str = "",numberFaces: int = 1,worldSpace: bool = False) -> None:
    """
    このコマンドは、ジオメトリック エッジに沿って個々の UV ピースを移動したり縫合したりするために使用します。同じジオメトリック エッジに対応する UV ピースは、小さなピースをより大きなピースに移動することでマージされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    limitPieceSize (boolean): このフラグをオンにすると、上で説明したフェース数の制限が使用されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    numberFaces (int): UVピース内のフェースの最大数です。2つのUVピースを単一のUVピースに統合しようとすると、小さい方のピースのフェース数がこのフラグで指定した数よりも多い場合、マージ操作が拒否されます。このフラグは、limitPieceSizeがオンに設定されているときだけ有効です。

    -----------------------------------------

    worldSpace (boolean): trueにすると、ローカル空間ではなく、ワールド空間の座標で操作が実行されます。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def subdMatchTopology(frontOfChain: bool = False) -> None:
    """
    複数のサブディビジョン サーフェスに渡って、すべてのレベルにあるトポロジを一致します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    frontOfChain (boolean): このコマンドを使用して、新しいaddTopologyノードを、シェイプのヒストリにおいて既存デフォーマとスキンノードの前(上流)に配置されるように指定します(ただし既存の微調整ノードの上流ではありません)。addTopologyノードの入力は、下流にある可視のシェイプではなく上流のシェイプで、このフラグの動作は、新しいデフォーマを追加するときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感に理解できます。

    -----------------------------------------

    Return Value:
    None: boolean成功または失敗
    """
    pass

    
def subdMirror(caching: bool = False,nodeState: int = 1,xMirror: bool = False,yMirror: bool = False,zMirror: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False) -> None:
    """
    このコマンドは、引数として渡されたサブディビジョン サーフェスを取り、ミラーであるサブディビジョン サーフェスを生成します。作成されたサブディビジョン サーフェスの名前を返します。また、ミラーリングを行った DG ノードもオプションで返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    xMirror (boolean): X軸で頂点をミラーします。既定:false

    -----------------------------------------

    yMirror (boolean): Y軸で頂点をミラーします。既定:false

    -----------------------------------------

    zMirror (boolean): Z軸で頂点をミラーします。既定:false

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    Return Value:
    None: string[]サブディビジョン サーフェスとオプションのディペンデンシー ノード名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def subdPlanarProjection(caching: bool = False,nodeState: int = 1,constructionHistory: bool = False,createNewMap: bool = False,imageCenter: Tuple[float, float] = tuple(1.0, 1.0),imageCenterX: float = 1.0,imageCenterY: float = 1.0,imageScale: Tuple[float, float] = tuple(1.0, 1.0),imageScaleU: float = 1.0,imageScaleV: float = 1.0,insertBeforeDeformers: bool = False,keepImageRatio: bool = False,mapDirection: str = "",name: str = "",projectionCenter: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),projectionCenterX: float = 1.0,projectionCenterY: float = 1.0,projectionCenterZ: float = 1.0,projectionHeight: float = 1.0,projectionScale: Tuple[float, float] = tuple(1.0, 1.0),projectionWidth: float = 1.0,rotate: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rotateX: float = 1.0,rotateY: float = 1.0,rotateZ: float = 1.0,rotationAngle: float = 1.0,smartFit: bool = False,worldSpace: bool = False) -> None:
    """
    TsubProjCmdBase は、選択したサブディビジョン フェースにマッピングを作成するコマンドの基本クラスです。正射投影を使用してマップをオブジェクトに投影します。isu 領域、isv 領域、icx 領域、icy 領域から定義されたマップの断片は、pcx 位置、pcy 位置、pcz 位置に配置されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    createNewMap (boolean): このフラグをtrueに設定すると、マップが存在していない場合は、渡された名前を持つ新しいマップを作成します。

    -----------------------------------------

    imageCenter ([float, float]): 2Dモデルレイアウトの中心ポイントを指定します。C:既定は0.50.5です。Q:照会するとfloat[2]を返します。

    -----------------------------------------

    imageCenterX (float): 2Dモデルレイアウトの中心ポイントのXを指定します。C:既定は0.5です。Q:照会するとfloatを返します。

    -----------------------------------------

    imageCenterY (float): 2Dモデルレイアウトの中心ポイントのYを指定します。C:既定は0.5です。Q:照会するとfloatを返します。

    -----------------------------------------

    imageScale ([float, float]): UVのスケールを指定します。2D中心点を基準にしてU空間またはV空間にある2Dバージョンのモデルを拡大または縮小します。C:既定は1.01.0です。Q:照会するとfloat[2]を返します。

    -----------------------------------------

    imageScaleU (float): Uのスケールを指定します。2D中心点を基準にしてU空間にある2Dバージョンのモデルを拡大または縮小します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    imageScaleV (float): Vのスケールを指定します。2D中心点を基準にしてV空間にある2Dバージョンのモデルを拡大または縮小します。C:既定は1.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    insertBeforeDeformers (boolean): このフラグは、デフォーマノードをシェイプに適用する前か後どちらに投影ノードを挿入するかを指定します。デフォーマの後でノードを挿入すると、アニメーション中にテクスチャがずれて、ほとんどの場合うまくいきません。C:既定はオンです。

    -----------------------------------------

    keepImageRatio (boolean): Trueの場合はイメージ比率が維持されます。

    -----------------------------------------

    mapDirection (string): マッピング方向を指定します。「x」、「y」、「z」では、対応する軸に沿ってマップが投影されます。「c」では、現在のカメラのビュー方向に沿って投影されます。「p」では、現在のカメラがパースビューである場合に投影されます。「b」では、選択したオブジェクトに最適なプレーンに沿って投影されます。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    projectionCenter ([linear, linear, linear]): このプラグは、マップを投影する原点を指定します。C:既定は0.00.00.0です。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    projectionCenterX (linear): マップを投影する原点のXを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    projectionCenterY (linear): マップを投影する原点のYを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    projectionCenterZ (linear): マップを投影する原点のZを指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    projectionHeight (linear): 3D投影軸に関連するマップの高さを指定します。C:既定は1.0ですQ:照会するとfloatを返します。

    -----------------------------------------

    projectionScale ([linear, linear]): 3D投影軸に関連するマップの幅と高さを指定します。C:既定は1.01.0です。Q:照会するとfloat[2]を返します。

    -----------------------------------------

    projectionWidth (linear): 3D投影軸を基準にして、マップの幅を指定します。C:既定は1.0ですQ:照会するとfloatを返します。

    -----------------------------------------

    rotate ([angle, angle, angle]): マッピング回転角度を指定します。C:既定は0.00.00.0です。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    rotateX (angle): Xマッピング回転角度を指定します。C:既定は0.0です。Q:照会するとfloat[3]を返します。

    -----------------------------------------

    rotateY (angle): Yマッピング回転角度を指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    rotateZ (angle): Zマッピング回転角度を指定します。C:既定は0.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    rotationAngle (angle): マッピング空間の回転角度を指定します。マップは、角度を正にするとマップされたモデル上で反時計回りに回転し、負にすると時計回りに回転します。C:既定は10.0です。Q:照会するとfloatを返します。

    -----------------------------------------

    smartFit (boolean): Trueの場合はスマートフィットアルゴリズムを使用します。

    -----------------------------------------

    worldSpace (boolean): このフラグは、使用するリファレンスを指定します。オンの場合:すべてのジオメトリ値はワールドリファレンスで考慮されます。オフの場合:すべてのジオメトリ値はオブジェクトリファレンスで考慮されます。C:既定はオフです。Q:照会するとintを返します。

    -----------------------------------------

    Return Value:
    None: stringノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def subdToBlind(absolutePosition: bool = False,includeCreases: bool = False,includeZeroOffsets: bool = False) -> None:
    """
    サブディビジョン サーフェス階層の編集を、指定したポリゴンのブラインド データにコピーします。ポリゴン フェース数とトポロジは、サブディビジョン サーフェスのベース メッシュのフェース数とトポロジと一致している必要があります。一致していない場合でもブラインド データは表示されますが、サブディビジョン サーフェスに戻した際に、元と同じ結果が得られるとは限りません。 このコマンドは単一のサブディビジョン サーフェスと単一のポリゴン オブジェクトを引数に取ります。それ以外のサブディビジョン サーフェスまたはポリゴン オブジェクトは無視します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absolutePosition (boolean): trueに設定すると、階層別編集はポイントのオフセットではなく、ポイントの位置として表現されます。これはほとんどの場合に望ましくありませんが、たくさんの項目のマージや削除のみが目的で、頂点をまったく移動しない場合は、これをtrueに設定できます。既定はfalseで、オフセットを保存します。

    -----------------------------------------

    includeCreases (boolean): 設定すると、折り目も転写します。falseの場合、ブラインドデータとポリゴンから作成されたサブディビジョンサーフェスは、すべての折り目の情報を失います。既定はfalseです。

    -----------------------------------------

    includeZeroOffsets (boolean): 設定すると、ブラインドデータにゼロオフセットが含まれます。これはブラインドデータのサイズを大幅に増加させますが、ポリゴンに戻した際に作成したすべての頂点を維持できます。レベル2以下の頂点は必ず作成されるため、このフラグは、これらの頂点の動作を変更しません。フラグを設定しない場合、編集した頂点のみがブラインドデータに含まれます。オブジェクトのシェイプは忠実に維持されます。既定はfalseです。

    -----------------------------------------

    Return Value:
    None: booleanコマンドの結果
    """
    pass

    
def subdToPoly(applyMatrixToResult: bool = False,caching: bool = False,copyUVTopology: bool = False,depth: int = 1,extractPointPosition: bool = False,format: int = 1,inSubdCVId: Tuple[int, int] = tuple(1, 1),inSubdCVIdLeft: int = 1,inSubdCVIdRight: int = 1,maxPolys: int = 1,nodeState: int = 1,outSubdCVId: Tuple[int, int] = tuple(1, 1),outSubdCVIdLeft: int = 1,outSubdCVIdRight: int = 1,outv: int = 1,preserveVertexOrdering: bool = False,sampleCount: int = 1,shareUVs: bool = False,subdNormals: bool = False,addUnderTransform: bool = False,connectShaders: bool = False,constructionHistory: bool = False,name: str = "",object: bool = False) -> None:
    """
    このコマンドは サブディビジョン サーフェスに対してテッセレーションを行い、ポリゴンを生成します。戻り値は新しいポリゴンの名前です。コンストラクション ヒストリがオンの場合、新しいディペンデンシー ノードの名前も返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    applyMatrixToResult (boolean): trueの場合、入力ジオメトリのマトリックスがオブジェクトに適用されて、作成されるジオメトリはこの単位マトリックスになります。falseの場合、変換はローカル空間オブジェクトで行われ、作成されたジオメトリは入力オブジェクトのマトリックスを持ちます。既定:true

    -----------------------------------------

    caching (boolean): すべてのアトリビュートのキャッシングを切り替えることで、再計算を不要にします。

    -----------------------------------------

    copyUVTopology (boolean): UVトポロジ(共有/非共有)を、オリジナルのサブディビジョンサーフェスから変換されたポリゴンメッシュにコピーします。既定:false

    -----------------------------------------

    depth (int): 一定の深度でサーフェスをテッセレーションする際の深度です。既定:0

    -----------------------------------------

    extractPointPosition (boolean): メッシュポイントの位置の計算方法を決定します。オンの場合、メッシュポイントの位置を返します。オフの場合、サーフェスポイントの位置を返します。既定:false

    -----------------------------------------

    format (int): フォーマット:0-均一1-適応2-ポリゴン数3-頂点既定:0

    -----------------------------------------

    inSubdCVId ([int, int]): CVIDを入力します。

    -----------------------------------------

    inSubdCVIdLeft (int): 入力CVIDの上位32ビットの整数です。

    -----------------------------------------

    inSubdCVIdRight (int): 入力CVIDの下位32ビットの整数です。

    -----------------------------------------

    maxPolys (int): ポリゴンのテッセレーションが行われる最大ポリゴン数です。このアトリビュートが0より大きい場合、サンプルのcountおよびdepthアトリビュートはこのアトリビュートでオーバーライドされます。既定:0

    -----------------------------------------

    nodeState (int): Mayaのディペンデンシーノードには6種類の設定可能な状態があります。通常(Normal)(0)、エフェクトなし(HasNoEffect)(1)、ブロッキング(Blocking)(2)ステータスは、グラフの評価方法を変更するために使用されます。待機-通常(Waiting-Normal)(3)、待機-エフェクトなし(Waiting-HasNoEffect)(4)、待機-ブロッキング(Waiting-Blocking)(5)は、内部でのみ使用されます。これらは、インタラクション(例:操作)の実行中にグラフのパーツを一時的に遮断します。操作が完了すると、ステータスは適切にリセットされます(例:待機-ブロッキング(Waiting-Blocking)はブロッキング(Blocking)にリセットされます)。通常(Normal)およびブロッキング(Blocking)のケースはすべてのノードに適用できますが、エフェクトなし(HasNoEffect)はノード特定です。多くのノードはこのオプションをサポートしていません。プラグインは状態をMPxNode::stateアトリビュートに保存します。誰もがこのアトリビュートを設定したり確認したりすることができます。これらの3つの状態に関するその他の詳細は次の通りです。状態説明通常(Normal)通常のノードの状態です。これが既定の設定です。エフェクトなし(HasNoEffect)エフェクトなし(HasNoEffect)オプション(別名:通過)は、同じデータタイプの出力を生成する入力を操作している場合に使用されます。ほぼすべてのデフォーマが、他のいくつかのノードと同様に、この状態をサポートします。前に説明したように、すべてのノードでサポートされるわけではありません。ノードの計算メソッドでエフェクトなし(HasNoEffect)状態のサポートを実装し、適切な操作を実行することが一般的です。プラグインはエフェクトなし(HasNoEffect)もサポートします。この状態を普通に実装するには、ノードにアルゴリズムを適用しないで、適合する出力に直接入力をコピーします。デフォーマの場合は、この状態を適用することにより、入力ジオメトリが出力でデフォーム解除されたままになります。ブロッキング(Blocking)これはディペンデンシーノードのベースクラスで実装され、すべてのノードに適用されます。ブロッキング(Blocking)は評価フェーズ中に接続に適用されます。ブロックされた接続に対する評価要求が失敗を返すと、目的プラグが現在の値を保持します。ダーティな伝播はこの状態の間接的な影響を受けますが、ブロックされた接続がクリーンアップされることはありません。ノードをブロッキング(Blocking)に設定すると、すべての送信接続が解除されたのと同じ動作になる可能性があります。ブロックされたノードの評価を直接要求しない限り、その後に再評価されることはありません。ブロックされたノードはgetAttr要求に引き続き応答しますが、下流ノードのgetAttrは、ブロックされたノードを再評価しないことに注意してください。ブロッキング(Blocking)に対して階層のルート変換を設定しても、自動的にはこの階層の子変換に影響しません。これを実行するには、ブロッキング(Blocking)状態に対してすべての子ノードを明示的に設定する必要があります。たとえば、すべての子トランスフォームをブロッキング(Blocking)に設定するには、次のスクリプトを使用します。importmaya.cmdsascmdsdefblockTree(root):nodesToBlock=[]fornodein{child:1forchildincmds.listRelatives(root,path=True,allDescendents=True)}.keys():nodesToBlock+=cmds.listConnections(node,source=True,destination=True)fornodein{source:1forsourceinnodesToBlock}.keys():cmds.setAttr('%s.nodeState'%node,2)このスクリプトを適用してオブジェクトの描画を継続できますが、アニメートは行えません。既定:kdnNormal

    -----------------------------------------

    outSubdCVId ([int, int]): CVのIDを出力します。

    -----------------------------------------

    outSubdCVIdLeft (int): 出力CVIDの上位32ビットの整数です。

    -----------------------------------------

    outSubdCVIdRight (int): 出力CVIDの下位32ビットの整数です。

    -----------------------------------------

    outv (int): inSubDCVに対応する出力頂点です。

    -----------------------------------------

    preserveVertexOrdering (boolean): 変換での頂点の順序の保持既定:true

    -----------------------------------------

    sampleCount (int): フェース単位のサンプル数既定:1

    -----------------------------------------

    shareUVs (boolean): すべての共有頂点上で、UVの共有を強制します。このアトリビュートの値はcopyUVTopologyアトリビュートの値でオーバーライドされます。既定:false

    -----------------------------------------

    subdNormals (boolean): サブディビジョンサーフェスの法線を維持します。既定:false

    -----------------------------------------

    addUnderTransform (boolean): Trueの場合はトランスフォームノードの下に結果を追加します。

    -----------------------------------------

    connectShaders (boolean): trueの場合、すべてのシェーダ割り当てがオリジナルのサブディビジョンサーフェスから変換先のポリゴンサーフェスにコピーされます。既定:true

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    name (string): 新しく作成するノードの名前を設定します。ネームスペースパスを含む場合、指定されたネームスペースの下に新しいノードが作成されます。ネームスペースが存在しない場合は、ネームスペースが作成されます。

    -----------------------------------------

    object (boolean): 結果のオブジェクト、またはディペンデンシーノードのみを作成します。

    -----------------------------------------

    Return Value:
    None: string[]ポリゴンとオプションのディペンデンシー ノード名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def subdTransferUVsToCache() -> None:
    """
    サブディビジョン サーフェスの詳細レベル UV が、引数として与えられた polygonToSubd ノードにコピーされます。 このコマンドは単一のサブディビジョン サーフェスと単一の polygonToSubD ノードを入力として取ります。それ以外の入力は無視します。これは内部コマンドのため、ユーザが直接、細心の注意を払って使用するようにしてください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: booleanコマンドの結果
    """
    pass

    