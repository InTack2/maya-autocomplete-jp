
from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union, Text



def attrCompatibility(addAttr: bool = False,clear: bool = False,dumpTable: bool = False,enable: bool = False,nodeRename: str = "",pluginNode: str = "",removeAttr: bool = False,renameAttr: str = "",type: str = "",version: str = "") -> None:
    """
    Maya ではこのコマンドを使用して、2 つのバージョン間の差違を記述する仕組みを提供することにより、ファイル フォーマット バージョン間の互換性問題を処理します。プラグイン ライタでこのコマンドを使用して、ファイルへのアトリビュートの互換性変更を処理できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addAttr (boolean): 指定したノードに指定したアトリビュートを追加します。

    -----------------------------------------

    clear (boolean): 互換性テーブルをクリアします。これは、デバッグを目的として内部的にのみ使用されます。

    -----------------------------------------

    dumpTable (boolean): 互換性テーブルの現在のコンテンツをダンプします。これは、デバッグを目的として内部的にのみ使用されます。

    -----------------------------------------

    enable (boolean): 互換性テーブルを有効または無効にします。これは、デバッグを目的として内部的にのみ使用されます。

    -----------------------------------------

    nodeRename (string): すべてのノードタイプ'nodeName'を、指定した文字列で置き換えます。

    -----------------------------------------

    pluginNode (string): 文字列引数をプラグインノードタイプとして登録します。これは、アンロードしたプラグインのノードアトリビュートを参照する後続のattrCompatibilityコールに対して必要となります。これは特に、アトリビュートが除去されている場合に有効となります。

    -----------------------------------------

    removeAttr (boolean): 指定したアトリビュートを指定したノードから除去します。

    -----------------------------------------

    renameAttr (string): コマンドの引数で指定されたアトリビュートのショートネームを、このフラグのパラメータとして指定された新しいショートネームに変更します。ショートネーム間のマッピングが設定されている場合、Mayaはロングネームを自動的に処理します。

    -----------------------------------------

    type (string): 指定したアトリビュートのタイプを、指定したタイプに変更します。

    -----------------------------------------

    version (string): 後続コマンドのバージョンターゲットを、指定した文字列に設定します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def autoSave(destination: int = 1,destinationFolder: bool = False,enable: bool = False,folder: str = "",interval: float = 1.0,limitBackups: bool = False,maxBackups: int = 1,perform: bool = False,prompt: bool = False) -> None:
    """
    自動保存メカニズムにインタフェースを提供します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    destination (int): 自動保存ファイルの保存先オプションを設定します。0-ワークスペースの自動保存フォルダに保存1-名前を付けたフォルダ(-folderフラグで設定)に保存2-環境変数(MAYA_AUTOSAVE_FOLDER)で設定したフォルダに保存

    -----------------------------------------

    destinationFolder (boolean): -destinationフラグ、ワークスペースルール、環境変数の現在の設定に基づいて、実際の自動保存先フォルダを照会します。環境変数などを解析し、相対パスを絶対パス(ワークスペースルートに対する相対パス)に変換します。返される文字列の最後にはセパレータ(/)が付きます。

    -----------------------------------------

    enable (boolean): 自動保存を有効/無効にします。

    -----------------------------------------

    folder (string): 保存先オプション1を選択した場合に使用する自動保存用フォルダを設定します。

    -----------------------------------------

    interval (float): 自動保存を行う間隔(秒単位)を設定します。既定の間隔は600秒(10分)です。

    -----------------------------------------

    limitBackups (boolean): 自動保存ファイルの数を制限するかどうかを設定します。

    -----------------------------------------

    maxBackups (int): 制限する場合に、自動保存ファイルの上限数を設定します。

    -----------------------------------------

    perform (boolean): 自動保存プロセスを起動します。

    -----------------------------------------

    prompt (boolean): 自動保存の前にダイアログを表示するかどうかを設定します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dirmap(convertDirectory: str = "",enable: bool = False,getAllMappings: bool = False,getMappedDirectory: str = "",mapDirectory: Tuple[str, str] = tuple("", ""),unmapDirectory: str = "") -> None:
    """
    ディレクトリを別のディレクトリにマップするために使用します。最初の引数はマッピング元のディレクトリで、2 番目の引数はマッピング先の目的ディレクトリです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    convertDirectory (string): ファイルまたはディレクトリを変換します。コマンドが有効な場合は、マップ済みファイルかディレクトリの名前が返されます。指定した文字列にマップ済みディレクトリが含まれている場合、戻り値には、マップ済みのもので置き換えられた従属文字列が含まれます。その他の場合は、指定した引数文字列が返されます。コマンドが無効な場合は、常に指定した引数が返されます。ファイルかディレクトリが存在するかどうかはチェックされません。指定した文字列がディレクトリである場合は、最後に「/」を付ける必要があります。

    -----------------------------------------

    enable (boolean): ディレクトリマッピングが有効になります。ディレクトリマッピングは、Mayaの起動時にオフになります。ディレクトリマッピングが有効な場合にMayaシーンを開くと、シーンを開いた際にファイルテクスチャパス(とその他のファイルパス)が変換されます。-enableがtrueである場合、-cdフラグのみがマップ済みディレクトリを返します。照会時には、マッピングが有効になっているかどうかが返されます。

    -----------------------------------------

    getAllMappings (boolean): すべての現在のマッピングを入手します。現在のマッピングの文字配列が、[redirect1,replacement1,...redirectN,replacementN]というフォーマットで返されます。

    -----------------------------------------

    getMappedDirectory (string): マップ済みディレクトリを入手します。指定する引数は、-mapDirectoryフラグで使用される最初の文字列とまったく同じである必要があります。

    -----------------------------------------

    mapDirectory ([string, string]): ディレクトリがマップされます。最初の引数が次の引数にマップされます。どちらのディレクトリも、起動時にローカルマシン上に存在する必要はありません。

    -----------------------------------------

    unmapDirectory (string): ディレクトリのマップを解除します。指定する引数は、-mapDirectoryフラグで使用される引数とまったく同じである必要があります。

    -----------------------------------------

    Return Value:
    None: stringconvertDirectory を使用する場合照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def file(activate: bool = False,activeProxy: bool = False,add: bool = False,anyModified: bool = False,applyTo: str = "",buildLoadSettings: bool = False,channels: bool = False,cleanReference: str = "",command: Tuple[str, str] = tuple("", ""),compress: bool = False,constraints: bool = False,constructionHistory: bool = False,copyNumberList: bool = False,defaultExtensions: bool = False,defaultNamespace: bool = False,deferReference: bool = False,editCommand: str = "",errorStatus: bool = False,executeScriptNodes: bool = False,exists: bool = False,expandName: bool = False,exportAll: bool = False,exportAnim: bool = False,exportAnimFromReference: bool = False,exportAsReference: bool = False,exportAsSegment: bool = False,exportSelected: bool = False,exportSelectedAnim: bool = False,exportSelectedAnimFromReference: bool = False,exportSelectedNoReference: bool = False,exportSelectedStrict: bool = False,exportUnloadedReferences: bool = False,expressions: bool = False,fileMetaData: bool = False,flushReference: str = "",force: bool = False,groupLocator: bool = False,groupName: str = "",groupReference: bool = False,ignoreVersion: bool = False,i: bool = False,importFrameRate: bool = False,importReference: bool = False,importTimeRange: str = "",lastFileOption: bool = False,lastTempFile: bool = False,list: bool = False,loadAllDeferred: bool = False,loadAllReferences: bool = False,loadNoReferences: bool = False,loadReference: str = "",loadReferenceDepth: str = "",loadReferencePreview: str = "",loadSettings: str = "",location: bool = False,lockContainerUnpublished: bool = False,lockFile: bool = False,lockReference: bool = False,mapPlaceHolderNamespace: Tuple[str, str] = tuple("", ""),mergeNamespaceWithParent: bool = False,mergeNamespaceWithRoot: bool = False,mergeNamespacesOnClash: bool = False,modified: bool = False,moveSelected: bool = False,namespace: str = "",newFile: bool = False,open: bool = False,options: str = "",parentNamespace: bool = False,postSaveScript: str = "",preSaveScript: str = "",preserveName: bool = False,preserveReferences: bool = False,preview: bool = False,prompt: bool = False,proxyManager: str = "",proxyTag: str = "",reference: bool = False,referenceDepthInfo: int = 1,referenceNode: str = "",relativeNamespace: str = "",removeDuplicateNetworks: bool = False,removeReference: bool = False,rename: str = "",renameAll: bool = False,renameToSave: bool = False,renamingPrefix: str = "",renamingPrefixList: bool = False,replaceName: Tuple[str, str] = tuple("", ""),resetError: bool = False,returnNewNodes: bool = False,save: bool = False,saveDiskCache: str = "",saveReference: bool = False,saveReferencesUnloaded: bool = False,saveTextures: str = "",sceneName: bool = False,segment: str = "",selectAll: bool = False,shader: bool = False,sharedNodes: str = "",sharedReferenceFile: bool = False,shortName: bool = False,strict: bool = False,swapNamespace: Tuple[str, str] = tuple("", ""),type: str = "",uiConfiguration: bool = False,unloadReference: str = "",unresolvedName: bool = False,usingNamespaces: bool = False,withoutCopyNumber: bool = False,writable: bool = False) -> None:
    """
    ファイルのオープン、読み込み、書き出し、参照、保存、名前変更を行う



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activate (boolean): このフラグは現在サポートしていません。

    -----------------------------------------

    activeProxy (boolean): このフラグは、ファイルリファレンス中の内部使用に限られます。リファレンスフラグと一緒に使用して、ファイルがロードされるときにアクティブプロキシになるファイルを指定します。また、referenceDepthInfoフラグと一緒に使用して、プリロード情報を参照するファイルでアクティブプロキシになるファイルを指定します。

    -----------------------------------------

    add (boolean): selectAllと一緒に使用すると、アクティブリストの既存の項目を除去することなく、指定した項目をアクティブリストに追加することを示します。

    -----------------------------------------

    anyModified (boolean): このフラグは現在サポートしていません。代わりにfile-q-modifiedを使用してください。

    -----------------------------------------

    applyTo (string): オフライン編集ファイルの読み込み時または参照時に、それを指定のリファレンスに適用します(<main>のマップ先を決定します)。引数としてリファレンスノード名を指定します。メインシーン(ルートネームスペース)のノードに編集を適用するには、「:」で渡します。<main>を折り畳むには(つまり、「なし」にマップするには)、""に渡します。ファイル-i/importまたは-r/referenceフラグと一緒に使用した場合のみ使用できます。

    -----------------------------------------

    buildLoadSettings (boolean): 「o/open」フラグと一緒に使用すると、指定したファイルが階層情報を参照するためにだけ読み込まれるよう指定します。この情報は、「implicitLoadSettings」という名前で一時的なロード設定に格納されます。このフラグを使用すると、指定したシーンファイルがロードされません。つまり、オブジェクトやノードが作成されたり変更されたりすることはありません。注:ほとんどの場合、このフラグまたはこのフラグから作成される「implicitLoadSettings」を使用する必要はありません。ファイル>シーンを開く(File>Open)で表示される開くオプションウィンドウで「選択的プリロード(SelectiveLoad)」オプションを設定すれば、同じ機能にアクセスできます。

    -----------------------------------------

    channels (boolean): exportSelectedと一緒に使用し、アタッチされたチャネルを書き出しに含めるかどうかを指定します。

    -----------------------------------------

    cleanReference (string): 渡されるリファレンスノードから編集箇所を除去します。リファレンスはアンロードされた状態にしてください。特定タイプの編集箇所を除去するには、editCommandフラグを使用します。フラグを指定しない場合は、すべての編集箇所が除去されます。

    -----------------------------------------

    command ([string, string]): ファイル操作の前に実行するコールバックを指定します。これはファイルフォーマットでのみ使用される内部フラグです。

    -----------------------------------------

    compress (boolean): 保存で使用すると、ファイルを圧縮(gzip)して出力します。

    -----------------------------------------

    constraints (boolean): exportSelectedと一緒に使用し、アタッチされたコンストレイントを書き出しに含めるかどうかを指定します。

    -----------------------------------------

    constructionHistory (boolean): exportSelectedと一緒に使用し、アタッチされたコンストラクションヒストリを書き出しに含めるかどうかを指定します。

    -----------------------------------------

    copyNumberList (boolean): 照会すると、このフラグは、ファイルが使用される各インスタンスを固有に識別する番号を含む文字配列を返します。

    -----------------------------------------

    defaultExtensions (boolean): 既定の拡張子を使って、ファイルの名前を変更します。この既定はtrueですが、指定されたMayaのセッション内では設定が持続されます。つまり、これをtrueまたはfalseに設定すると、新しい値が設定されるまでその値がその後のファイルコマンドでも継続して使用されます。

    -----------------------------------------

    defaultNamespace (boolean): 既定のネームスペースを使用して、読み込みと参照を行います。これは詳細設定オプションです。設定してから読み込みまたは参照を行うと、Mayaはネームクラッシュの解決アルゴリズムを呼び出さずに、読み込みまたは参照されたファイルのすべてのノードをルート(既定)のネームスペースに直接配置しようとします。ルートネームスペースに新規オブジェクトのいずれかの名前が存在する場合、エラーが発生します。このフラグを使用する場合、ネームクラッシュなどのエラーを避けるため、Maya以外でネームクラッシュアルゴリズムの手段を作成します。注:このフラグで想定されているのは、APIによって記述されたカスタムファイルトランスレータと一緒に使用する場合だけです。ユーザの責任で使用してください。

    -----------------------------------------

    deferReference (boolean): -referenceフラグと組み合わせて使用すると、このフラグによって、リファレンスをロードするか、またはロードを保留するかどうかが決まります。C:既定はfalseです。Q:照会すると、リファレンスを保留する場合はtrue、保留しない場合はfalseを返します。-rfn/referenceNodeと一緒に使用する場合は、-rfnフラグを-qフラグよりも前に置く必要があります。

    -----------------------------------------

    editCommand (string): cleanReferenceと一緒に使用します。指定したタイプの編集箇所だけを除去します。サポートされている編集は、setAttr、addAttr、deleteAttr、connectAttr、disconnectAttrとparentです。

    -----------------------------------------

    errorStatus (boolean): 最後のファイル読み込みのエラーステータスを照会します。最後のファイル読み込み中にエラーが発生した場合にtrueを返します。

    -----------------------------------------

    executeScriptNodes (boolean): trueの場合、適切なスクリプトノードで実行できます。falseの場合、スクリプトノードのスクリプトでは実行できません。詳細については、scriptノードのマニュアルを参照してください。既定:true

    -----------------------------------------

    exists (boolean): ファイルが存在するかどうかを照会します。ファイルが存在する場合、trueを返します。

    -----------------------------------------

    expandName (boolean): これは、ファイルのファイルパス名を照会するために利用できる照会専用フラグです。

    -----------------------------------------

    exportAll (boolean): すべての項目を単一のファイルに書き出します。書き出されたファイルの名前を返します。

    -----------------------------------------

    exportAnim (boolean): シーン内のすべてのオブジェクトのすべてのアニメーションノードとアニメーションヘルパノードを書き出します。生成されたアニメーションの書き出しファイルには、アニメーションファイルには含まれていないオブジェクトへの接続が含まれています。このため、このファイルを読み込みまたは参照するには、同じ名前のオブジェクトが表示されるように指定する必要があります。そうしないと、エラーが発生します。-sns/swapNamespaceフラグは、指定したオブジェクトのネームスペースを別のネームスペースと入れ替えるために使用できます。このネームスペースは、一貫した命名規則を使用してアニメーションファイルの対象を複数にするために利用できます。exportAnimフラグではアニメーションレイヤは書き出されません。animLayersおよびその他のノードタイプの一般的なファイル書き出しには、レイヤの書き出し機能を使用します。

    -----------------------------------------

    exportAnimFromReference (boolean): すべてのリファレンスオブジェクトからメインシーンのアニメーションノードとアニメーションヘルパノードを書き出します。-rfn/referenceNodeフラグと組み合わせて使用すると、指定したリファレンスファイルからアニメーションノードだけを書き出すように制限できます。アニメーションファイル使用の詳細については、-ean/exportAnimフラグの説明を参照してください。

    -----------------------------------------

    exportAsReference (boolean): 選択したオブジェクトに特定の名前を付けてリファレンスファイルに書き出します。ファイルはプロセス中にディスクに保存されます。作成されたリファレンスの名前を返します。

    -----------------------------------------

    exportAsSegment (boolean): このフラグは現在サポートしていません。

    -----------------------------------------

    exportSelected (boolean): 選択したオブジェクトを指定したファイルに書き出します。書き出されたファイルの名前を返します。

    -----------------------------------------

    exportSelectedAnim (boolean): シーン内の選択したオブジェクトからすべてのアニメーションノードとアニメーションヘルパノードを書き出します。アニメーションファイル使用の詳細については、-ean/exportAnimフラグの説明を参照してください。

    -----------------------------------------

    exportSelectedAnimFromReference (boolean): 選択したリファレンスオブジェクトからメインシーンのアニメーションノードとアニメーションヘルパノードを書き出します。-rfn/referenceNodeフラグと組み合わせて使用すると、指定したリファレンスファイルの選択したノードから、アニメーションノードだけを書き出すように制限できます。アニメーションファイル使用の詳細については、-ean/exportAnimフラグの説明を参照してください。

    -----------------------------------------

    exportSelectedNoReference (boolean): このフラグは現在サポートしていません。

    -----------------------------------------

    exportSelectedStrict (boolean): 選択したオブジェクトを指定したファイルに書き出します。このフラグは、明示的にセレクションリストに含まれているノードのみを書き出すexportSelectedとは異なります。関連ノード(履歴とDAGの両方に関連)は、セレクションリストに含まれない限り、自動的には書き出されません。ノードのリレーションシップは、リレーションシップを持つ両方のノード(親/子、送信元/送信先)が書き出される場合にのみ保持されます。既定では必ずしもすべての関連ノードが書き出されるわけではないため、書き出されたシーンでシーンデータの損失が発生する可能性があることに注意する必要があります。書き出す前にすべての関連ノードを選択しておく必要があります。書き出されたファイルの名前を返します。

    -----------------------------------------

    exportUnloadedReferences (boolean): preserveReferencesの使用時のみ有効です。exportAllフラグと一緒に使用すると、エクスポータに対してアンロードされたリファレンスをすべて書き出すよう通知されます。exportSelectedフラグと一緒に使用すると、エクスポータに対して選択されたノードに関連するアンロードされたプロキシリファレンスをすべて書き出すよう通知されます。

    -----------------------------------------

    expressions (boolean): exportSelectedと一緒に使用し、アタッチされたエクスプレッションを書き出しに含めるかどうかを指定します。

    -----------------------------------------

    fileMetaData (boolean): これはオーディオファイルのメタデータを取得するための照会専用フラグです。referenceTimeを返します。このフィールドはBWAVEファイルからのみ抽出され、その他のファイルには0を返します。

    -----------------------------------------

    flushReference (string): このフラグは、渡されたリファレンスノードに関連するリファレンスファイルをアンロードし、関連するすべてのリファレンスノードとシーンファイルを維持します。**このオプションは、ネームスペースを使用しているときのみ有効です。**詳細:このフラグは、主にカスタムアセット管理システムの一部として使用するように想定されています。このフラグは、子リファレンスを含むリファレンスのロードを、子リファレンスに関する情報を消失することなく保留するために使用できます。子リファレンスを含むフラッシュ済みリファレンスをリロードする前には、子のMayaASCIIファイルから「createNodereference」の行を手動で除去してください。この処理を行わないと、余分なリファレンスノードが作成されます。

    -----------------------------------------

    force (boolean): アクションを強制的に実行させます(新規作成、開く、保存、リファレンスの除去、リファレンスのアンロード)。removeReferenceと一緒に使用し、リファレンスネームスペースを、内容が含まれていても強制的に除去します。リファレンスがルートネームスペースにある場合は、removeReferenceと一緒に使用することはできません。編集内容が失われることをユーザに警告するためのダイアログを表示せず、リファレンスノードがロックされている場合でも、リファレンスを強制的にアンロードするためにunloadReferenceと共に使用します。

    -----------------------------------------

    groupLocator (boolean): -rフラグと-grフラグと一緒にしか使用しません。groupReferenceの出力をロケータの下にグループ化するために使用します。

    -----------------------------------------

    groupName (string): -grフラグと一緒にしか使用しません。オプションとして、読み込みまたは参照した項目をグループ化するトランスフォームの名前を設定するために使用します。

    -----------------------------------------

    groupReference (boolean): -rまたは-iフラグと一緒にしか使用しません。単一のトランスフォームで読み込みまたは参照されたすべての項目をグループ化するために使用されます。

    -----------------------------------------

    ignoreVersion (boolean): 正式にサポートされているバージョンより前または後のバージョンのファイルを開くために使用します。データの損失、破損、またはオープン失敗などの可能性はありますが、できる限り正常に読み込もうとします。-oフラグと一緒に使用した場合のみ使用できます。

    -----------------------------------------

    i (boolean): 指定したファイルを読み込みます。読み込まれたファイルの名前を返します。

    -----------------------------------------

    importFrameRate (boolean): -iフラグと一緒にしか使用しません。フレームレートを読み込み、Mayaのフレームレートとして設定するために使用します。

    -----------------------------------------

    importReference (boolean): 指定したファイル内でデータの周りのリファレンスのカプセル化を除去します。これにより指定したファイルの内容が現在のシーンの一部となり、オリジナルファイルのすべてのリファレンスが失われます。読み込まれたリファレンスの名前が返されます。

    -----------------------------------------

    importTimeRange (string): -iフラグと一緒にしか使用しません。タイムレンジを読み込み、文字列によって指定される3つの異なる方法のうちの1つの方法でMayaの再生範囲に適用するために使用します。有効な文字列は、Mayaの再生範囲を変更せずに維持する「keep」、読み込んだ範囲でMayaの再生範囲をオーバーライドする「override」、Mayaの再生範囲を拡大して読み込んだ範囲を含める「combine」です。

    -----------------------------------------

    lastFileOption (boolean): 照会の場合、ファイルコマンドが最後に使用したオプション文字列を返します。

    -----------------------------------------

    lastTempFile (boolean): 照会されると、このフラグはファイルの保存中に使用された一時的なファイル名を返します。保存に失敗すると、一時的なファイルは同じディレクトリにこのファイル名で残されます。

    -----------------------------------------

    list (boolean): すべてのファイルをリスト表示します。すべてのセグメント/リファレンスファイルの名前を文字配列で返し、複製は除去します。つまり、ファイルが複数回参照され、-withoutCopyNumberフラグを設定している場合は、シーン内で1度リスト表示されます。

    -----------------------------------------

    loadAllDeferred (boolean): このフラグはサポートしていません。loadReferenceDepthフラグに置き換えられました。-openフラグと一緒に使用して、ファイルで読み込み中に-deferReferenceフラグが機能するかどうかを定義します。trueが渡されると、すべてのリファレンスがロードされます。falseが渡されると、-deferReferenceフラグが機能します。

    -----------------------------------------

    loadAllReferences (boolean): このフラグはサポートしていません。loadReferenceDepthフラグに置き換えられました。-openフラグと一緒に使用すると、すべてのリファレンスがロードされます。

    -----------------------------------------

    loadNoReferences (boolean): このフラグはサポートしていません。loadReferenceDepthフラグに置き換えられました。-openフラグと一緒に使用すると、リファレンスがロードされません。-i/import、-r/reference、-lr/loadReferenceフラグと一緒に使用すると、最上位のリファレンスのみがロードされます。

    -----------------------------------------

    loadReference (string): このフラグは、ファイルをロードして渡されたリファレンスノードに接続します。リファレンスノードが存在しない場合、このコマンドは失敗します。ファイルがすでにロードされている場合、同じファイルがリロードされます。ファイルが指定されない場合、このコマンドは最後に使用されたリファレンスファイルをロード(リロード)します。

    -----------------------------------------

    loadReferenceDepth (string): ロードするリファレンスを指定するために使用します。有効なタイプは「all」、「none」、「topOnly」で、それぞれ、すべてのリファレンスのロード、リファレンスをロードしない、最上位のリファレンスのみロードを指定します。-o/open、-i/import、-r/reference、または-lr/loadReferenceフラグと一緒に使用した場合のみ使用できます。「none」を-lr/loadReferenceと一緒に使用すると、パス検証のみが実行されます。これを使用すると、リロードをトリガせずにリファレンスを置き換えることができます。loadReferenceDepthを使用しない場合は、ファイルを保存したときと同じロードまたはアンロード状態でリファレンスをロードします。また、-lr/loadReferenceフラグは4つ目のタイプである「asPrefs」をサポートします。これは、ネストしたリファレンスが、リファレンスファイル自体に保存されている状態ではなく、現在のシーンファイルに保存されている状態(存在する場合)に従ってロードされるようにします。

    -----------------------------------------

    loadReferencePreview (string): このフラグは、リファレンスファイルの特別なプレビューのみのロードを実行します。プレビューのみのリファレンスファイルは完全にはロードされず、含まれるネストされたリファレンスなどの特定の情報を判断できるよう部分的にロードされます。プレビューされたネストされたリファレンスは、プレビューのみの特別な状態で残ります。

    -----------------------------------------

    loadSettings (string): 「o/open」フラグと一緒に使用すると、このフラグはどのリファレンスロード設定を使用するかを指定します。リファレンスロード設定では、どのリファレンスをロードしてどのリファレンスをアンロードするかを指定します。アンロードされるリファレンスファイルは、通常、Mayaで読み込んだり解釈したりする必要はありません。これによって、Mayaがシーン全体のロードに要する時間を短縮できる可能性があります。「ls/loadSettings」フラグが指定されなかったか、または、フラグ引数として空の文字列(「」)を使用した場合は、既定のロード設定が使用されます。既定のロード設定は、ファイルが最後に保存されたときのすべてのリファレンスの状態を示します。ロード設定「implicitLoadSettings」は、「bls/buildLoadSettings」フラグで生成されて「loadSettings」コマンドを使って編集された一時的なロード設定を参照します。現在は、既定で暗黙のロード設定がサポートされています。

    -----------------------------------------

    location (boolean): 特定のファイル名の場所を照会します。

    -----------------------------------------

    lockContainerUnpublished (boolean): このファイルにあるすべてのコンテナに対してパブリッシュ解除のロック状態を設定します。これでメインシーンのアトリビュートが直接ロックされることはありませんが、このシーンを参照する任意のファイルによって、コンテナのすべてがパブリッシュ解除のロック済みとなります。

    -----------------------------------------

    lockFile (boolean): メインのシーンをロックまたはロック解除します。このシーンを参照するすべてのファイルは、すべてのアトリビュートとノードを自動的にロックします。また、編集済みのリファレンスが親ファイルから保存されないようにします。

    -----------------------------------------

    lockReference (boolean): リファレンスファイルのアトリビュートとノードをロックします。

    -----------------------------------------

    mapPlaceHolderNamespace ([string, string]): 指定したリファレンスにplaceHolderNamespaceをマッピングします。作成モードで、ファイルの-i/importと-r/referenceフラグと一緒に使用する必要があります。1番目の文字列はプレースホルダのネームスペースで山括弧(例：「<foo>」)を含みます。2番目の文字列はリファレンスノードで、そのネームスペースはマップ先(例：refRN)を示します。ネームスペースのマップ先がルートのネームスペースである場合は、「:」を使用します。ネームスペースをマップするには(つまり、「なし」に割り当てるには)、""を使用します。照会された場合、「なし」にマップされたネームスペースは、明確にするために「(なし)」を返します。

    -----------------------------------------

    mergeNamespaceWithParent (boolean): removeReferenceフラグと一緒に使用します。ファイルリファレンスとネームスペースを除去する場合、残りのネームスペースの内容を親ネームスペースに移動します。リファレンスがルートネームスペースにある場合は使用できません。

    -----------------------------------------

    mergeNamespaceWithRoot (boolean): removeReferenceフラグと一緒に使用します。ファイルリファレンスとネームスペースを除去する場合、残りのネームスペースの内容をルートネームスペースに移動します。リファレンスがルートネームスペースにある場合は使用できません。

    -----------------------------------------

    mergeNamespacesOnClash (boolean): Mayaに同名のネームスペースが既にある場合に、このオプションをimport、reference、またはeditフラグと一緒に使用すると、新しいネームスペースは作成されません。既定値はfalseです。たとえば、読み込むオブジェクト「pSphere1」がネームスペース「ref」を参照している場合に、「ref」という名前のネームスペースが既にMayaに定義されているとします。mergeNamespacesOnClashがtrueの場合、既存の「ref」というネームスペースは再利用されてpSphere1はこの既存のネームスペースに移動されます。このネームスペースに「pSphere1」という名前のオブジェクトがさらにある場合、読み込まれたものは数字が増分され(「pSphere2」)名前変更されます。一方、mergeNamespacesOnClashがfalseの場合、数字が増分されて新しいネームスペースが作成され(最初の場合では「ref1」)、pShere1はref1というネームスペースに移動されます。このフラグではネストされたネームスペースもサポートしています。たとえば、読み込まれて「ref:foo」というネームスペースを参照する「pSphere1」というオブジェクトでmergeNamespacesOnClashが今回trueの場合、既存の「ref:foo」が再利用されオブジェクトは「ref:foo」に移動されます。mergeNamespacesOnClashがfalseの場合、新しいネームスペース「ref:foo1」が作成されて、「pSphere1」がその新しいネームスペースに移動されます。

    -----------------------------------------

    modified (boolean): シーン全体の変更状態を設定します。シーンが変更された場合、新しいファイルを開いたり作成したりする前に保存しておく必要があります。オブジェクトが作成または修正されるたびにファイルの状態が自動に更新されるため、通常はこのフラグを編集する必要はありません。状態を編集する場合、以下の例に示されるように、編集フラグを使用せずに実行されます。照会モードでは、シーンが修正されていると1を返します。それ以外は0が返されます。

    -----------------------------------------

    moveSelected (boolean): このフラグは現在サポートしていません。

    -----------------------------------------

    namespace (string): 読み込みと参照中に、すべてのオブジェクトをグループ化するために使用されるネームスペース名です。指定したリファレンスファイルのすべてのオブジェクトをグループ化するために使用されるネームスペースを変更します。リファレンスは「ネームスペースの使用」オプションで作成し、ロードしておく必要があります。既存のネームスペースに含まれる参照されないノードも新しいネームスペースに移動されます。このコマンドでは新しいネームスペースが作成されます。既に存在するネームスペースを使用することはできません。古いネームスペースは除去されます。

    -----------------------------------------

    newFile (boolean): シーンを初期化します。無題のシーンが既定位置で返されます。

    -----------------------------------------

    open (boolean): 指定したファイルを開きます。開いたファイルの名前を返します。

    -----------------------------------------

    options (string): 現在設定されているファイルオプションを設定/照会します。Mayaファイルの保存時、ファイルオプションを使用します。現在のファイルのコマンドでサポートされている2つのファイルオプションフラグはvとpです。v(冗長)は、ファイルの保存時、アトリビュート名およびコマンドフラグ名に長い名前を使用したか短い名前を使用したかを示します。MayaASCIIおよびMayaバイナリファイルフォーマットの両方で使用されます。0または1のみ有効です。v=1を設定すると、長いアトリビュート名およびコマンドフラグ名を使用することを示します。既定では、またはv=0を設定すると、短いアトリビュート名が使用されます。p(精度)は、ファイルの保存時のMayaファイルのIOの精度を定義します。MayaASCIIファイルフォーマットでのみ使用します。これは整数値です。既定値は17です。オプションのフォーマットは「flag1=XXX;flag2=XXX」です。Mayaでは最後のvとpを最終結果として使用します。注:1.複数のフラグを区切るにはセミコロン(「;」)を使用します。2.オプション文字列には空のスペース(「」)は許可されません。

    -----------------------------------------

    parentNamespace (boolean): リファレンスファイルの親ネームスペースの名前を返します。

    -----------------------------------------

    postSaveScript (string): saveフラグと一緒に使用すると、ファイルを保存した後に、指定したスクリプトが実行されます。

    -----------------------------------------

    preSaveScript (string): saveフラグと一緒に使用すると、ファイルを保存する前に、指定したスクリプトが実行されます。

    -----------------------------------------

    preserveName (boolean): 圧縮で使用すると、.gzをアペンドせずに、通常の拡張子を保持します。

    -----------------------------------------

    preserveReferences (boolean): このようなリファレンスがコピーとしてではなく、実際のリファレンスとして読み込み/書き出しされるように、さまざまな読み込み/書き出しフラグを変更します。

    -----------------------------------------

    preview (boolean): 任意の-exportXXXフラグと一緒に使用すると、Mayaでは書き出されるファイルをディスクに実際に書き込まずに、書き出されるノードリストを返します。

    -----------------------------------------

    prompt (boolean): このフラグはダイアログを要求するファイルの表示をコントロールします。ダイアログを要求するファイルの例としては、ユーザによる確認や見つからないファイルの参照ダイアログを要求するエラーメッセージが挙げられます。一度このフラグが使用されると、ファイルコマンドのすべてのインスタンスはこのフラグで最後に設定された値を使用します。一部のインタラクティブなファイル操作では、フラグがfalseに設定されていてもダイアログを表示するものがありますが、作成されたファイルコマンドの場合、このフラグがfalseに設定されていればダイアログを表示することはありません。既定値はtrueです。

    -----------------------------------------

    proxyManager (string): 1つまたは複数のプロキシリファレンスを既存のファイルリファレンスに追加する場合に、プロキシ管理ノードを使用してそのリファレンスに接続されたプロキシを定義します。このフラグはactiveProxyフラグとproxyTagフラグと一緒に使用して、目的のproxyManagerを指定します。また、referenceDepthInfoフラグと一緒に使用して、プリロード情報を参照するファイルでプロキシリファレンスのproxyManagerを指定します。

    -----------------------------------------

    proxyTag (string): このフラグはファイルのロードまたはプリロード中の内部使用に限られます。プロキシタグは、プロキシリファレンスをリファレンスエディタから管理しやすいように、プロキシリファレンスに割り当てる名前です。プロキシタグは指定したプロキシセット内で固有です。このフラグはproxyManagerフラグと組み合わせて使用する必要があります。

    -----------------------------------------

    reference (boolean): 指定したファイルにリファレンスを作成します。ファイルリファレンスの名前を返します。指定したファイルからすべてのファイルリファレンスを照会します。

    -----------------------------------------

    referenceDepthInfo (uint): このフラグを使用してMayaASCIIファイル(.ma)と接続されているプリファレンスをロードするリファレンスを格納します。このフラグは、ファイルの読み取り/書き出し中のみに使用されます。必要なければ、使用しなくても構いません。

    -----------------------------------------

    referenceNode (string): このフラグは照会中にのみ使用されます。MELでは、これが-queryの前に表示される場合は、シーンのリファレンスノードの1つの名前が続く必要があります。それにより、-queryの後ろに表示されるフラグによって照会されるリファレンスが決まります。指定したリファレンスノードがシーン内に存在しない場合、コマンドは失敗してエラーが返されます。Pythonでは、リファレンスノードの名前をフラグの値として渡すことによって同等の動作が得られます。MELでは、このフラグが-queryの後ろに表示された場合は引数を取らず、コマンドは、コマンドの引数として指定したファイルにコネクトされたリファレンスノードの名前を返します。ファイルがリファレンスでないか、または何らかの理由(ユーザが削除したなど)でリファレンスノードを持たない場合、空の文字列が返されます。ファイルが現在のシーンの一部でない場合、コマンドは失敗してエラーが返されます。Pythonでは、フラグの値としてTrueを渡すことによって同等の動作が得られます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    relativeNamespace (string): このフラグをexportSelected、exportSelectedStrict、およびexportAll操作と一緒に使用することで、書き出されたファイルのノードが指定されたネームスペースに相対して出力されるように指定することができます。これは、ノード名の書き出し時にノード名からネームスペースの不要なレベルを除去する機能です。relativeNamespace値は、書き出されたノードの相対ルートとして使用されるネームスペースを指定し、絶対ネームスペースとして指定される必要があります。指定の相対ネームスペースに存在しない書き出されたファイルのノードは、絶対ネームスペース名を使用して書き込まれます。注:このフラグはpreserveReferencesフラグと一緒に使用することはできません。

    -----------------------------------------

    removeDuplicateNetworks (boolean): これを設定すると、読み込まれたネットワークと同じネットワークが現在のシーンで検出された場合に、読み込まれたネットワークを除去します。特定のタイプのネットワークをこのフラグによる削除から除外するように明示的に指定できます。たとえば、optionVarremoveDuplicateShadingNetworksOnImportを0に設定すると(またはファイル>オプションの読み込み(File>Importoptions)から重複したシェーディングネットワークの除去(Removeduplicatedshadingnetworks)オプションを無効にする)、このフラグによる削除からシェーディングネットワークが除外されます。このフラグは-i/importフラグと組み合わせる場合にのみ使用できます。

    -----------------------------------------

    removeReference (boolean): 指定したファイルリファレンスを親から除去します。これにより、このファイルが参照するすべての項目も除去されます。除去されたファイルの名前を返します。そのネームスペースにリファレンスのみがある場合、ネームスペースを除去します。ファイルリファレンスの除去後、ネームスペースにオブジェクトが残っている場合、既定で、ネームスペースに残りのオブジェクトを残します。ネームスペースに残っているオブジェクトを親またはルートネームスペースとマージする場合、mergeNamespaceWithParentまたはmergeNamespaceWithRootフラグを使用します。これで空のファイルリファレンスネームスペースが除去されます。すべてのオブジェクトを強制削除するにはforceフラグを使用します。これで空のファイルリファレンスネームスペースが除去されます。

    -----------------------------------------

    rename (string): シーンの名前を変更します。ほとんどの場合、保存中にsaveAsの名前を設定するときに使用されます。シーンの新しい名前を返します。

    -----------------------------------------

    renameAll (boolean): trueの場合、既存のノードとクラッシュする名前のノードだけでなく、新たに作成されたすべてのノードの名前を変更します。-i/importでのみ利用可能です。

    -----------------------------------------

    renameToSave (boolean): trueの場合、シーンを保存する前に、この名前を変更する必要があります。照会すると、このフラグは、シーンを保存する前に名前を変更する必要がある場合に、trueを返します。既定はfalseです。

    -----------------------------------------

    renamingPrefix (string): このファイルのすべてのオブジェクトのプリフィックスとして使用される文字列です。このフラグは-ns/namespaceに置き換えられました。

    -----------------------------------------

    renamingPrefixList (boolean): このフラグはファイルが使用するすべての名前変更プリフィックスのリストを返します。

    -----------------------------------------

    replaceName ([string, string]): 検索/置換文字列を定義します。検索/置換はリーフノード名に適用します。検索文字列には、ネームスペースとワイルドカードを含めることができますが、DAG階層のリーフノードにのみ適用できます。オフラインの編集ファイルと併用します。ファイル-i/importまたは-r/referenceと一緒に使用した場合のみ使用できます。また、ネストしたリファレンスが代入を定義する場合は、ネストしたリファレンスのロード時にアクティブな代入テーブルになります。注:-e/editフラグと併用する場合、置換は次にリファレンスをロードする際にのみ適用されます。例:-replace"*pCube1""prop"は「foo:pCube1」を「foo:prop」に、「|A:pCube1|B:pCube1」を「|A:pCube1|prop」に置換します。

    -----------------------------------------

    resetError (boolean): 既存のグローバルファイルエラーをすべてオフにします。

    -----------------------------------------

    returnNewNodes (boolean): 開く、読み込み、loadReference、とリファレンス操作の戻り値を制御するために使用します。現在のシーンに追加された新規ノードのリストを返すfileコマンドを強制的に発行させます。

    -----------------------------------------

    save (boolean): 指定したファイルを保存します。保存されたファイルの名前を返します。

    -----------------------------------------

    saveDiskCache (string): このフラグはジグルディスクキャッシュのsaveAsオプションを設定します。有効な入力値は次の2つです。「always」-常にファイルテクスチャを新しい位置にコピーする。「never」-まったくコピーしない。C:既定は「always」です。Q:照会すると、文字列(「always」、「never」)を返します。

    -----------------------------------------

    saveReference (boolean): リファレンスノードの編集箇所とリファレンスファイルへの接続を保存します。新たに追加されたヒストリやアニメーションが保存中のリファレンスの外部のオブジェクトに適用されていない場合は、これらも保存対象となります。

    -----------------------------------------

    saveReferencesUnloaded (boolean): このフラグは、saveフラグと一緒に使用した場合のみに使用できます。これはアンロードされたすべてのリファレンスもファイルと一緒に保存するように指定します。

    -----------------------------------------

    saveTextures (string): このフラグは、3DペイントファイルテクスチャのsaveAsオプションを設定します。有効な入力値は次の3つです。「always」-常にファイルテクスチャを新しい位置にコピーします。「unlessRef」-リファレンスファイルテクスチャでない場合にのみコピーします。「never」-まったくコピーしません。C:既定は「unlessRef」です。Q:照会すると、文字列(「always」、「unlessRef」、「never」)を返します。

    -----------------------------------------

    sceneName (boolean): 現在のシーンの名前を返します。

    -----------------------------------------

    segment (string): このフラグは現在サポートしていません。

    -----------------------------------------

    selectAll (boolean): このファイルと子ファイルのすべてのコンポーネントを選択します。指定するファイルは、このMayaセッションですでに開かれているファイルでなければならない点に注意してください。既定では既存のセレクションが置き換えられます。「add」フラグと一緒に使用すると、アクティブなセレクションリストが保持されます。

    -----------------------------------------

    shader (boolean): exportSelectedと一緒に使用し、アタッチされたシェーダを書き出しに含めるかどうかを指定します。

    -----------------------------------------

    sharedNodes (string): このフラグは「-r/reference」フラグを変更して、リファレンス内の特定タイプのノードを共有ノードとして扱うようにします。共有ノードはすべて既定のネームスペースに配置されます。コピーがすでに既定のネームスペースにある場合は、共有ノードのコピーは新しく作成されません。代わって共有ノードと既存のノードがマージされます。2つのノードをマージする場合の動作は、ノードタイプによって異なります。一般的には、アトリビュート値はマージされない、つまり、既存の共有ノードの値セットが保持され、マージされるノードの値は無視されます。有効なオプションは、「displayLayers」、「shadingNetworks」、「renderLayersByName」、「renderLayersById」です。このフラグは多目的に使用できます。つまり複数回指定して、たとえばディスプレイレイヤとシェーディングネットワークの両方を共有することができます。2つのシェーディングネットワークは、同一の場合のみマージされます。つまり、1つのシェーディンググループに属するノードのネットワークを、名前とタイプが同じ等価のノードと同じように配置する必要があります。また、ネットワークがアニメートされていたり、DAGオブジェクトまたはエクスプレッションが含まれる場合は、マージできません。このフラグは-srf/sharedReferenceFileと組み合わせて使用することはできません。

    -----------------------------------------

    sharedReferenceFile (boolean): -r/referenceフラグと-ns/namespaceフラグとの組み合わせでのみ使用できます(プリフィックスはサポートしません)。このフラグは「-r/reference」フラグを変更して、そのリファレンス内のすべてのノードを共有ノードとして扱うようにします。すでにコピーが存在する場合は、そのノードの新しいコピーは作成されません。その代わりに、共有ノードは既存のノードにマージされます。2つのノードをマージする場合の動作は、ノードタイプによって異なります。このフラグは-shd/sharedNodesとは一緒に使用できません。

    -----------------------------------------

    shortName (boolean): メインの照会フラグと一緒に使用すると、返されるファイル名がショートネーム(ディレクトリパスを除いてファイル名だけにした名前)になるように指定します。このフラグが存在しない場合、フルネームとディレクトリパスを返します。

    -----------------------------------------

    strict (boolean): 厳密なファイルパスの解決を設定します。trueにすると、相対パスと絶対パスの両方とも、すべてのパスを正確に一致させます。相対パスは、プロジェクトのルートディレクトリからの相対位置とみなされます。-o/open、-i/import、ir/importReference、または-r/referenceフラグと一緒に使用した場合のみ使用できます。

    -----------------------------------------

    swapNamespace ([string, string]): -r/referenceフラグまたは-i/importフラグと組み合わせる場合にしか使用できません。このフラグは、指定したネームスペースをすべて、代替として指定したネームスペースに置き換えます。このネームスペースの「入れ替え」は、ファイルが参照されたときに発生します。このフラグは2つの文字列引数を取ります。最初の引数は置き換えるネームスペースを指定します。2番目の引数は、代替ネームスペースを指定します。このフラグは暗黙的にネームスペースの使用を可能にし、deferReferenceと一緒に使用することはできません。

    -----------------------------------------

    type (string): このファイルのタイプを設定します。既定では、以下のいずれかになります。「mayaAscii」、「mayaBinary」、「mel」、「OBJ」、「directory」、「plug-in」、「audio」、「move」、「EPS」、「Adobe(R)Illustrator(R)」、「image」のプラグインは、独自のタイプも定義することがあります。このファイルと一致するファイルタイプの文字配列を返します。

    -----------------------------------------

    uiConfiguration (boolean): uiConfigurationスクリプトノードにシーンと一緒にUI設定を保存します（たとえば、panes）。現在の既定はオンで、initialStartup.melに設定されます。

    -----------------------------------------

    unloadReference (string): このフラグは、渡されたリファレンスノードに関連するリファレンスファイルをアンロードします。

    -----------------------------------------

    unresolvedName (boolean): このフラグをメインの照会フラグと一緒に使用すると、返されるファイル名が未解決になるように指定します(つまり、ファイルがMayaにロードされたときに指定したパスになります。このパスは環境変数を含み、ディスクに存在しない場合があります)。このフラグが存在しない場合、解決済みの名前を返します。

    -----------------------------------------

    usingNamespaces (boolean): ブーリアンを返します。指定したリファレンスファイルがネームスペースまたは名前変更プリフィックスを使用するかどうかを照会します。

    -----------------------------------------

    withoutCopyNumber (boolean): このフラグをメインの照会フラグと一緒に使用すると、返されるファイル名の末尾にコピー番号がアペンドされないように指定します。このフラグが存在しない場合、返されたファイル名の最後にコピー番号がアペンドされることがあります。

    -----------------------------------------

    writable (boolean): 現在のシーンで特定のファイルが書き込み可能かどうかを照会します。メインのシーンファイルの場合、これは現在のユーザによってファイルシステムへの書き込みが可能であることを意味します。メインのシーンファイルによって参照されるファイルの場合、常に書き込みは不可能です(リファレンスファイルは元々読み取り専用です)。現在のシーンにないファイルは、常にfalseを返します。

    -----------------------------------------

    Return Value:
    None: string大部分のアクションでは、指定したファイルの名前です。returnNewNodes フラグを使用すると、読み込まれたノードの名前を示す文字配列が返されます。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def fileBrowserDialog(actionName: str = "",dialogStyle: int = 1,fileCommand: str = "",fileType: str = "",filterList: str = "",includeName: str = "",mode: int = 1,operationMode: str = "",tipMessage: str = "",windowTitle: str = "") -> None:
    """
    fileBrowserDialog および fileDialog コマンドは非推奨になりました。両コマンドをコールすることはできますが、代わりに fileDialog2 コマンドを使用することをお勧めします。下位互換を保つため、fileBrowserDialog コマンドと fileDialog コマンドはどちらも、パスされたフラグ/値を fileDialog2 コマンドが使用し、内部コマンドをコールする適切なフラグ/値に変換します。この互換性を将来バージョンでも維持できるかどうかは保証されないため、新しいスクリプトは fileDialog2 コマンドを使って書く必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    actionName (string): ファイルが認証されたときにコールされるスクリプトです。

    -----------------------------------------

    dialogStyle (int): 0-以前のスタイルのダイアログ1-Windows2000のエクスプローラスタイル2-下部に「ショートカット」ヒントが付いたエクスプローラスタイル

    -----------------------------------------

    fileCommand (script): コマンドアクションで実行するスクリプト

    -----------------------------------------

    fileType (string): フィルタリングするファイルのタイプを設定します。既定では、以下のいずれかになります。「mayaAscii」、「mayaBinary」、「mel」、「OBJ」、「directory」、「plug-in」、「audio」、「move」、「EPS」、「Illustrator」、「image」。プラグインの場合も同様に独自のタイプを定義します。

    -----------------------------------------

    filterList (string): ファイルフィルタを指定します。1と2のダイアログスタイルの使用します。各文字列は、説明の後にカンマを付けて、その後ろにワイルドカードを含むファイル拡張子のリストをセミコロンで区切って続ける必要があります。

    -----------------------------------------

    includeName (string): カッコでくくってactionNameの後に特定の文字列を含めます。名前が長過ぎると、ダイアログに収まるように短縮されます(たとえば、/usr/alias/commands/scripts/fileBrowser.melなら/usr/...pts/fileBrowser.melに短縮されることがあります)。

    -----------------------------------------

    mode (int): ファイルブラウザを実行するモードを定義します。0:読出し1:書出し2:パスのない書出し(セグメントファイル)4:アクションと一緒に使用した場合に意味があるディレクトリ+100:ショートネームを返す

    -----------------------------------------

    operationMode (string): オプションダイアログを有効にします。有効な文字列:「Import」「Reference」「SaveAs」「ExportAll」「ExportActive」

    -----------------------------------------

    tipMessage (string): スタイル2のダイアログボックス下部に表示するメッセージです。

    -----------------------------------------

    windowTitle (string): スタイル1または2のダイアログボックスのウィンドウタイトルを設定します。

    -----------------------------------------

    Return Value:
    None: stringダイアログ名
    """
    pass

    
def fileDialog(application: bool = False,defaultFileName: str = "",directoryMask: str = "",mode: int = 1,title: str = "") -> None:
    """
    fileBrowserDialog および fileDialog コマンドは非推奨になりました。両コマンドをコールすることはできますが、代わりに fileDialog2 コマンドを使用することをお勧めします。下位互換を保つため、fileBrowserDialog コマンドと fileDialog コマンドはどちらも、パスされたフラグ/値を fileDialog2 コマンドが使用し、内部コマンドをコールする適切なフラグ/値に変換します。この互換性を将来バージョンでも維持できるかどうかは保証されないため、新しいスクリプトは fileDialog2 コマンドを使って書く必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    application (boolean): これは「Mac」専用のフラグです。このフラグにより、アプリケーションバンドルのみを選択するダイアログが表示されます。

    -----------------------------------------

    defaultFileName (string): 既定のファイル名を設定します。このフラグは「書き込み」モードでのみ有効です。

    -----------------------------------------

    directoryMask (string): これを使用して、ダイアログに表示するディレクトリとファイル名を指定することができます。指定しない場合、現在のディレクトリが使用され、すべてのファイルが表示されます。文字列にはパス名が含まれている場合がありますが、ワイルドカードのファイル識別子(「*.cc」または「/usr/u/*」など)を含める必要があります。パスだけが指定されている場合、パスの最後のディレクトリがファイル識別子とみなされ、目的の結果が得られなくなります。

    -----------------------------------------

    mode (int): ファイルダイアログを実行するモードを定義します。0:読み取り1:書き込み書き込みモードは-applicationフラグとは一緒に使用できません。

    -----------------------------------------

    title (string): タイトルテキストを設定します。「書き込み」モードでの既定値は「名前を付けて保存」です。「読み取り」モードでの既定値は「開く」です。

    -----------------------------------------

    Return Value:
    None: stringダイアログ ボックスの名前
    """
    pass

    
def fileDialog2(buttonBoxOrientation: int = 1,cancelCaption: str = "",caption: str = "",dialogStyle: int = 1,fileFilter: str = "",fileMode: int = 1,fileTypeChanged: str = "",hideNameEdit: bool = False,okCaption: str = "",optionsUICancel: str = "",optionsUICommit: str = "",optionsUICommit2: str = "",optionsUICreate: str = "",optionsUIInit: str = "",returnFilter: bool = False,selectFileFilter: str = "",selectionChanged: str = "",setProjectBtnEnabled: bool = False,startingDirectory: str = "") -> None:
    """
    ファイルまたはディレクトリを選択できるダイアログが設定されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    buttonBoxOrientation (int): 1垂直なボタンボックスレイアウト。[キャンセル(Cancel)]ボタンは[適用(Accept)]ボタンの下にあります。2水平なボタンボックスレイアウト。[キャンセル(Cancel)]ボタンは[適用(Accept)]ボタンの右にあります。

    -----------------------------------------

    cancelCaption (string): dialogStyleフラグを2に設定すると、ダイアログの[キャンセル(Cancel)]ボタンにキャプションが表示されます。

    -----------------------------------------

    caption (string): ダイアログのタイトルを設定します。

    -----------------------------------------

    dialogStyle (int): 1はWindowsまたはMacOSXでは、一般的なスタイルのファイルダイアログが使用されます。2はプラットフォーム間で一致したスタイルのカスタムファイルダイアログが使用されます。

    -----------------------------------------

    fileFilter (string): ダイアログのファイルタイプフィルタのリストを設定します。複数フィルタの場合は、二重のセミコロンで分離する必要があります。例を参照してください。

    -----------------------------------------

    fileMode (int): ダイアログが返す内容を示します。0は任意のファイルが存在するかどうか。1は1つの既存ファイル。2はディレクトリ名。ディレクトリとファイルの両方がダイアログに表示されます。3はディレクトリ名。ディレクトリのみがダイアログに表示されます。4は1つ以上の既存ファイル名。

    -----------------------------------------

    fileTypeChanged (script): MELのみ。文字列はMELコールバックとして解釈され、ユーザが選択したファイルタイプの変更時にコールされます。コールバックの形式は次のとおりです。globalprocMyCustomFileTypeChanged(string$parent,string$newType)親引数は、optionsUICreateフラグを使用してコントロールが追加された親レイアウトです。newType引数は新しいファイルタイプです。

    -----------------------------------------

    hideNameEdit (boolean): 名前編集入力フィールドを非表示にします。

    -----------------------------------------

    okCaption (string): dialogStyleフラグを2に設定すると、ダイアログの[OK]または[適用(Accept)]ボタンにキャプションが表示されます。

    -----------------------------------------

    optionsUICancel (script): MELのみ。文字列は、ダイアログがキャンセルされた([キャンセル(Cancel)]ボタンまたは[閉じる(Close)]ボタンを使用してウィンドウを閉じた)ときにコールされるMELコールバックとして解釈されます。コールバックの形式は次のとおりです。globalprocMyCustomOptionsUICancel()

    -----------------------------------------

    optionsUICommit (script): MELのみ。文字列はMELコールバックとして解釈され、ダイアログの却下に成功するとコールされます。ユーザがダイアログをキャンセルした場合、またはウィンドウタイトルバーのコントロールかその他のウィンドウシステムの手段を使用してウィンドウを閉じた場合は、コールされません。コールバックの形式は次のとおりです。globalprocMyCustomOptionsUICommit(string$parent)親引数は、optionsUICreateフラグを使用してコントロールが追加された親レイアウトです。

    -----------------------------------------

    optionsUICommit2 (script): MELのみ。optionsUICommitとして指定された文字列はMELコールバックとして解釈され、ダイアログの却下に成功するとコールされます。違いは、このコールバックがダイアログの検証前にユーザによって選択されたファイル名を追加引数として1つ取ることです。ユーザがダイアログをキャンセルした場合、またはウィンドウタイトルバーのコントロールかその他のウィンドウシステムの手段を使用してウィンドウを閉じた場合は、コールされません。コールバックの形式は次のとおりです。globalprocMyCustomOptionsUICommit(string$parent,string$selectedFile)親引数は、optionsUICreateフラグを使用してコントロールが追加された親レイアウトです。

    -----------------------------------------

    optionsUICreate (script): MELのみ。文字列はMELコールバックとして解釈され、ファイルダイアログの作成時にコールされます。コールバックの形式は次のとおりです。globalprocMyCustomOptionsUISetup(string$parent)親引数は、コントロールを追加できる親レイアウトです。この親は、ファイルダイアログの右手のペインです。

    -----------------------------------------

    optionsUIInit (script): MELのみ。文字列はMELコールバックとして解釈され、コントロールを初期化するためにファイルダイアログの作成直後にコールされます。コールバックの形式は次のとおりです。globalprocMyCustomOptionsUIInitValues(string$parent,string$filterType)親引数は、optionsUICreateフラグを使用してコントロールが追加された親レイアウトです。filterType引数は初期ファイルフィルタです。

    -----------------------------------------

    returnFilter (boolean): trueの場合、選択したフィルタは選択したファイルとともに、文字配列の最後の項目として返されます。

    -----------------------------------------

    selectFileFilter (string): 初期ファイルフィルタを、選択するように指定します。ワイルドカード仕様全体ではなく、開始テキストのみを指定します。

    -----------------------------------------

    selectionChanged (script): MELのみ。文字列はMELコールバックとして解釈され、ユーザがファイルダイアログでファイルの選択を変更したときにコールされます。コールバックの形式は次のとおりです。globalprocMyCustomSelectionChanged(string$parent,string$selection)親引数は、optionsUICreateフラグを使用してコントロールが追加された親レイアウトです。selection引数は新たに選択されたファイルへのフルパスです。

    -----------------------------------------

    setProjectBtnEnabled (boolean): [プロジェクト]ボタンを有効にするかどうかを定義します。

    -----------------------------------------

    startingDirectory (string): ダイアログの開始ディレクトリを設定します。

    -----------------------------------------

    Return Value:
    None: string配列
    """
    pass

    
def fileInfo(remove: str = "") -> None:
    """
    fileInfo は、Maya シーン ファイルの関連情報を維持する仕組みを提供します。コマンドの起動はキーワードと値のペアで構成され、キーワードと関連する値はともに文字列です。このコマンドは、異なるキーワードで複数回起動することができます。Maya では、作成される各ファイルにこのコマンドが複数回生成されます。これは主に、使用したプログラムのパッケージの種類(「Complete」や「Unlimited」など)、実行したバージョンやビルド情報、実行したオペレーティング システムなどの詳細を提供するためです。Maya は、読み込むファイルにこの情報があれば利用します。fileInfo コマンドで定義したすべてのキーワードと値のペアは、Maya がシーンを保存したときに ASCII またはバイナリ ファイルに保持されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    remove (string): removeフラグを指定した場合、それに続く文字列は、シーンファイルと共に保存されるfileInfoのリストから除去されるキーワードです。

    -----------------------------------------

    Return Value:
    None: string[]コマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def filePathEditor(attributeOnly: bool = False,attributeType: str = "",byType: str = "",copyAndRepath: Tuple[str, str] = tuple("", ""),deregisterType: str = "",force: bool = False,listDirectories: str = "",listFiles: str = "",listRegisteredTypes: bool = False,preview: bool = False,recursive: bool = False,refresh: bool = False,registerType: str = "",relativeNames: bool = False,repath: str = "",replaceAll: bool = False,replaceField: str = "",replaceString: Tuple[str, str] = tuple("", ""),status: bool = False,temporary: bool = False,typeLabel: str = "",unresolved: bool = False,withAttribute: bool = False) -> None:
    """
    Maya では、テクスチャまたはその他の Maya シーンなどの外部ファイルを参照して使用することができます。このコマンドは、これらのファイル パスに関する情報を取得し、一括で修正するために使用されます。既定では、最も頻繁に使用されるタイプのファイルのみがユーザに表示されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attributeOnly (boolean): 「listFiles」と一緒に使用すると、ファイルを使用しているノードおよびアトリビュート名が返されます。

    -----------------------------------------

    attributeType (string): 指定したプラグのアトリビュートタイプを照会します。

    -----------------------------------------

    byType (string): 「listFiles」と一緒に使用すると、指定されたノードタイプまたはアトリビュートタイプで使用されているファイルが照会されます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    copyAndRepath ([string, string]): ソースファイルを宛先パスにコピーし、プラグデータを新しいファイルに再パス設定します。ソースファイルの名前はプラグ内のファイルと同じ名前である必要があります。コマンドは、指定した場所で最初にファイルを検索します。見つからない場合、コマンドはプラグ内の元のファイルを使用しようとします。それでもファイルが見つからない場合は、何も行われません。

    -----------------------------------------

    deregisterType (string): コマンドでの処理を停止するため、登録されているタイプのリストからファイルタイプを登録解除します。「temporary」フラグを使用しない限り、タイプはプリファレンスから除去され、アプリケーションの再起動時に再表示されなくなります。「temporary」フラグを指定する場合、登録解除は現在のセッションでのみ有効になります。タイプが既に登録解除されている場合、登録解除は拒否されます。ただし、一時的に登録解除された後、タイプの(「temporary」フラグを使用しない)永続的な登録解除は有効になります。

    -----------------------------------------

    force (boolean): 「repath」フラグと一緒に使用すると、解決されたファイルを含むすべてのファイルが新しい場所に再パス設定されます。使用しない場合、「repath」は見つからないファイルのみを処理します。「copyAndRepath」フラグと一緒に使用すると、宛先にある衝突するファイルがすべて上書きされます。使用しない場合、「copyAndRepath」は上書きする代わりに宛先にある既存のファイルを使用します。既定値はオフです。

    -----------------------------------------

    listDirectories (string): リストは、指定されたフォルダのすべてのサブフォルダをリストします。タイプが登録されている1つ以上のファイルを含むフォルダのみがリストされます(「registerType」を参照)。フォルダが指定されていない場合、シーンに適用可能なすべてのフォルダが返されます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    listFiles (string): 指定したフォルダ内のファイルをリストします。サブフォルダの再帰は実行されません。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    listRegisteredTypes (boolean): 登録されているアトリビュートタイプのリストを照会します。登録されているタイプには、プリファレンスファイルから自動ロードされたタイプと、「temporary」フラグを使用しているものと使用していないものの両方の、ユーザが明示的に登録したタイプが含まれます。

    -----------------------------------------

    preview (boolean): 「repath」、「replaceString」、または「copyAndRepath」と一緒に使用し、実行する代わりに操作の結果をプレビューします。「repath」または「replaceString」と一緒に使用する場合、コマンドは新しいファイルパスと、新しいファイルが存在する(1)か存在しない(0)かを示すステータスフラグを返します。パス名とファイルステータスはペアでリストされます。「copyAndRepath」と一緒に使用する場合、コマンドはコピーする必要があるファイルを返します。

    -----------------------------------------

    recursive (boolean): 「repath」フラグと一緒に使用し、ターゲットフォルダおよびそのサブフォルダ内のファイルを再帰的に検索します。フラグがオンの場合、コマンドはターゲットフォルダまたはサブフォルダ内で同じ名前を持つファイルにプラグを再パス設定します。フラグがオフの場合、コマンドは結果のファイルが存在することを確認することなくフォルダの変更を適用します。

    -----------------------------------------

    refresh (boolean): シーンのファイル情報をクリアして再収集します。コマンドでは、シーン内のファイルパスの変更は自動的に追跡されません。このため、最新の情報を取得するための更新はユーザが行う必要があります。

    -----------------------------------------

    registerType (string): コマンドで今後処理および認識される新しいファイルタイプを登録します。「temporary」フラグを使用しない限り、登録されたタイプはプリファレンスに保存され、アプリケーションの再起動時に再度表示されます。新しいタイプが既存のタイプまたはラベルと衝突する場合は拒否されます。この1つの例外は、タイプが「temporary」フラグを使用して登録された後に「temporary」フラグなしでタイプを登録する場合です。これは、新しいタイプの登録ではなく、既存のタイプの永続的または一時的なプロパティの修正とみなされます。

    -----------------------------------------

    relativeNames (boolean): 「listDirectories」または「listFiles」と一緒に使用され、各フォルダまたはファイルの相対パスを返します。パスは、現在のプロジェクトフォルダからの相対パスです。ファイルまたはフォルダが現在のプロジェクトフォルダの下にない場合、返されるパスはフルパスになります。

    -----------------------------------------

    repath (string): ファイルパスのフォルダ部分を指定された場所に置き換えます。ファイル名は保持されます。

    -----------------------------------------

    replaceAll (boolean): 「replaceString」フラグと一緒に使用し、一致する文字列を置換する回数を指定します。フラグがfalseの場合、一致する最初の文字列のみが置換されます。それ以外の場合、一致するすべての文字列が置換されます。既定値はfalseです。

    -----------------------------------------

    replaceField (string): 「replaceString」フラグと一緒に使用し、置換の範囲をコントロールします。指定可能な値は次のとおりです。「pathOnly」:フォルダ部分の文字列のみを置換します。「nameOnly」:フォルダを除くファイル名の文字列のみを置換します。「fullPath」:フルネーム内の文字列を置換します。既定の引数は「fullPath」です。

    -----------------------------------------

    replaceString ([string, string]): ファイルパス内でターゲット文字列を新しい文字列に置き換えます。フラグには2つの引数が必要です。1番目の引数はターゲット文字列、2番目の引数は新しい文字列です。置換を実行する方法をコントロールする場合は、「replaceField」フラグと「replaceAll」フラグを参照してください。

    -----------------------------------------

    status (boolean): 「listFiles」と一緒に使用され、これにより、返されるファイルのリストにファイルごとに1つのステータスフラグ(解決できない場合は0、解決できる場合は1)が含められます。「listDirectories」と一緒に使用され、これにより、返されるフォルダのリストにフォルダごとに1つのステータスフラグ(解決できない場合は0、解決できる場合は1、解決が部分的な場合は2)が含められます。ファイル/フォルダ名とともにステータスが交互に配置され、名前が最初に表示されます。「listFiles」の例を参照してください。ファイルごとの情報を取得するもう1つの方法については、「withAttribute」フラグを参照してください。エントリごとに複数の項目がリストに表示される場合(例:プラグ名)、ステータスは常に最後になります。

    -----------------------------------------

    temporary (boolean): 「register」または「deregister」フラグの効果を現在のセッションにのみ適用するようにします。通常、タイプの登録/登録解除は永続的であり、プリファレンスファイルによって維持されます。「temporary」フラグを指定する場合、変更はプリファレンスファイルに保存されません。アプリケーションを再起動すると、前に一時的に登録されていたタイプは表示されず、一時的に登録解除されたタイプは再び表示されます。

    -----------------------------------------

    typeLabel (string): 新しいファイルタイプのラベル名を設定するために、「registerType」とともに使用されます。指定したアトリビュートタイプのタイプラベルを返すには、「query」と一緒に使用します。既定のタイプでは、タイプラベルはローカライズされた文字列です。その他のタイプでは、タイプラベルはユーザによって指定されます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    unresolved (boolean): 「listFiles」と一緒に使用すると、シーンで使用されている未解決ファイルが照会されます。

    -----------------------------------------

    withAttribute (boolean): 「listFiles」と一緒に使用され、特定のファイルを使用するプラグの名前を返します。たとえば、「file.jpg」がプラグ「node1.fileTextureName」によって使用されている場合、返される文字列はペアの「file.jpgnode1.fileTextureName」になります。ファイルごとの情報を取得するもう1つの方法については、「status」フラグを参照してください。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def getFileList(filespec: str = "",folder: str = "") -> None:
    """
    オプションのワイルドカード パターンに一致するファイルのリストを返します。このコマンドは raw システム ファイルで直接動作し、標準的な Maya ファイル パスの解決は行われないことに注意してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    filespec (string): 検索用のワイルドカード指定子です。

    -----------------------------------------

    folder (string): ディレクトリのリストを返します。

    -----------------------------------------

    Return Value:
    None: string[]ファイル名の配列
    """
    pass

    
def imfPlugins(extension: str = "",keyword: str = "",multiFrameSupport: str = "",pluginName: str = "",readSupport: str = "",writeSupport: str = "") -> None:
    """
    このコマンドは、IMF プラグインの名前、キーワードまたはイメージ ファイルの拡張子から、すべての使用可能なプラグインを照会します。一度に照会できるのは、1 つのアトリビュート(名前、キーワードまたは拡張子)のみです。フラグを指定しない場合、使用可能なすべてのプラグイン名のリストを返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    extension (string): イメージファイルの拡張子

    -----------------------------------------

    keyword (string): IMFキーワード

    -----------------------------------------

    multiFrameSupport (string): マルチフレームIOをサポート

    -----------------------------------------

    pluginName (string): IMFプラグイン名

    -----------------------------------------

    readSupport (string): 読み込み操作をサポート

    -----------------------------------------

    writeSupport (string): 書き込み操作をサポート

    -----------------------------------------

    Return Value:
    None: string[]コマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def internalVar(userAppDir: bool = False,userBitmapsDir: bool = False,userHotkeyDir: bool = False,userMarkingMenuDir: bool = False,userPrefDir: bool = False,userPresetsDir: bool = False,userScriptDir: bool = False,userShelfDir: bool = False,userTmpDir: bool = False,userWorkspaceDir: bool = False) -> None:
    """
    このコマンドは、内部変数の値を返します。これらの変数の変更はサポートされていません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    userAppDir (boolean): ユーザアプリケーションディレクトリを返します。

    -----------------------------------------

    userBitmapsDir (boolean): ユーザビットマッププリファレンスディレクトリを返します。

    -----------------------------------------

    userHotkeyDir (boolean): ユーザホットキーディレクトリを返します。

    -----------------------------------------

    userMarkingMenuDir (boolean): ユーザマーキングメニューディレクトリを返します。

    -----------------------------------------

    userPrefDir (boolean): ユーザプリファレンスディレクトリを返します。

    -----------------------------------------

    userPresetsDir (boolean): ユーザプリセットディレクトリを返します。

    -----------------------------------------

    userScriptDir (boolean): ユーザスクリプトディレクトリを返します。

    -----------------------------------------

    userShelfDir (boolean): ユーザシェルフディレクトリを返します。

    -----------------------------------------

    userTmpDir (boolean): 一時ディレクトリを返します。環境変数TMPDIRがチェックされます。この変数がない場合は、現在のディレクトリが返されます。

    -----------------------------------------

    userWorkspaceDir (boolean): ユーザワークスペースディレクトリ(プロジェクトディレクトリとも呼ばれる)が返されます。

    -----------------------------------------

    Return Value:
    None: stringフラグで指定した変数の値。
    """
    pass

    
def launch(directory: str = "",movie: str = "",pdfFile: str = "",webPage: str = "") -> None:
    """
    適切なアプリケーションを起動し、指定したドキュメント、Web ページ、またはディレクトリを開きます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    directory (string): ディレクトリ。

    -----------------------------------------

    movie (string): ムービーファイル。使用可能なムービーのファイル形式は、MPEG、QuicktimeおよびWindowsMediaファイルのみです。ファイル名は.mpg、.mpeg、.mp4、.wmv、.movまたは.qtで終わる必要があります。

    -----------------------------------------

    pdfFile (string): PDF(PortableDocumentFormat)ドキュメント。このファイル名は.pdfで終わる必要があります。

    -----------------------------------------

    webPage (string): Webページ。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def launchImageEditor(editImageFile: str = "",viewImageFile: str = "") -> None:
    """
    指定したイメージ ファイルを編集/表示するために、適切なアプリケーションを起動します。このコマンドは、Macintosh および Windows プラットフォームのみで動作します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    editImageFile (string): ファイルがPSDの場合は、Photoshopの指定したバージョンを起動してファイルを開きます。ファイルがその他のイメージタイプであれば、お好みのイメージエディタを起動してファイルを開きます。

    -----------------------------------------

    viewImageFile (string): イメージを表示するためのイメージエディタを開きます。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def melInfo() -> None:
    """
    このコマンドは、現在文字配列として定義されているすべてのグローバル MEL プロシージャ名を返します。「whatIs」コマンドを使用すると、各 MEL プロシージャの定義を照会できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string[]プロシージャ名
    """
    pass

    
def namespace(absoluteName: bool = False,addNamespace: str = "",collapseAncestors: str = "",deleteNamespaceContent: bool = False,exists: str = "",force: bool = False,isRootNamespace: str = "",mergeNamespaceWithParent: bool = False,mergeNamespaceWithRoot: bool = False,moveNamespace: Tuple[str, str] = tuple("", ""),parent: str = "",recurse: bool = False,relativeNames: bool = False,removeNamespace: str = "",rename: Tuple[str, str] = tuple("", ""),setNamespace: str = "",validateName: str = "") -> None:
    """
    このコマンドを使用して、ネームスペースを作成、設定、または除去できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absoluteName (boolean): コマンドによって返されるネームスペースの目的のフォーマットを指定するために使用できる汎用フラグです。ネームスペースの絶対名は、ルートネームスペース「:」で始まり、すべての親ネームスペースを含むフルネームスペースパスです。たとえば、「:ns:ball」は絶対ネームスペース名ですが、「ns:ball」は絶対ネームスペース名ではありません。

    -----------------------------------------

    addNamespace (string): 指定した名前のネームスペースを作成します。修飾された名前(「A:B」)と修飾されていない名前(「A」)の両方を使用できます。修飾された名前に含まれている高レベルのネームスペースの中にまだ存在しないものがある場合は、それらのネームスペースが作成されます。指定された名前に無効な文字が含まれている場合は、まずvalidateNameフラグに従って修正されます。

    -----------------------------------------

    collapseAncestors (string): 指定されたネームスペースのすべての空の先祖を削除します。空のネームスペースとは、オブジェクトまたはその他のネストされたネームスペースをまったく含まないネームスペースです。

    -----------------------------------------

    deleteNamespaceContent (boolean): ネームスペースの除去時に、ネームスペースの内容も除去されることを示すために、「rm/removeNamespace」フラグと一緒に使用します。

    -----------------------------------------

    exists (string): 指定したネームスペースがある場合はtrue、ない場合はfalseを返します。

    -----------------------------------------

    force (boolean): 名前の衝突を無視する移動操作を強制的に実行するために、「mv/-moveNamespace」と一緒に使用します。

    -----------------------------------------

    isRootNamespace (string): 指定したネームスペースがルートの場合はtrue、ルートでない場合はfalseを返します。

    -----------------------------------------

    mergeNamespaceWithParent (boolean): 「rm/-removeNamespace」フラグと一緒に使用します。ネームスペースを除去する場合、残りのネームスペースの内容を親ネームスペースに移動します。

    -----------------------------------------

    mergeNamespaceWithRoot (boolean): 「rm/-removeNamespace」フラグと一緒に使用します。ネームスペースを除去する場合、残りのネームスペースの内容をルートネームスペースに移動します。

    -----------------------------------------

    moveNamespace ([string, string]): 1番目のネームスペースの内容を2番目のネームスペースに移動します。子ネームスペースも移動されます。参照されたノードを含むネームスペースを移動しようとすると、エラーが発生します。「file」コマンド(「file-edit-namespace」)を使用して、リファレンスネームスペースを変更してください。移動元のネームスペースに移動先のネームスペース内のオブジェクトと同じ名前のオブジェクトが含まれる場合、エラーが発生します。「force」フラグを使用してこのエラーを無効にしてください。オブジェクトの名前を変更して固有な名前にすると、名前の衝突を解決できます。

    -----------------------------------------

    parent (string): 「addNamespace」または「rename」フラグと一緒に使用して、新しいネームスペースの親を指定します。ネームスペースの親のフルパスが必要です。「addNamespace」を絶対名を一緒に使用すると「parent」が無視され、警告が表示されます。

    -----------------------------------------

    recurse (boolean): 「exists」フラグと一緒に使用して、指定したネームスペースを再帰的に探します。

    -----------------------------------------

    relativeNames (boolean): 名前を現在のネームスペースに相対してルックアップする、相対名のルックアップモードをオンにします。既定ではオフのため、名前のルックアップは常にルートネームスペース相対になります。setAttrなどのコマンドの動作が変わるため、この機能をオンにする場合はご注意ください。ネームスペース非依存のカスタムプロシージャを実行する際にrelativeNamesをオンにし、カスタムプロシージャから制御を戻す際にこの機能をオフにすることをお勧めします。なお、相対命名はファイルI/O時にオンになります。relativeNamesをオンのままにしておくことは推奨しませんが、ファイルI/O時に値を切り替えようとすると、Maya内部で一時的に有効にされているために「オン」のままになります。relativeNamesを有効にすると、「ls」コマンドの戻り値は現在のネームスペース相対になります。詳細については、このコマンドの説明を参照してください。

    -----------------------------------------

    removeNamespace (string): 指定したネームスペースを削除します。削除するためには、そのネームスペースは空でなければなりません。

    -----------------------------------------

    rename ([string, string]): 1番目のネームスペースの名前を2番目のネームスペースの名前に変更します。子ネームスペースの名前も変更されます。どちらの名前も現在のネームスペースに相対します。「parent」フラグを使用して、名前を変更したネームスペースの親ネームスペースを指定します。2番目のネームスペース名がすでに存在する場合はエラーになります。指定された名前に無効な文字が含まれている場合は、まずvalidateNameフラグに従って修正されます。

    -----------------------------------------

    setNamespace (string): 現在のネームスペースを設定します。

    -----------------------------------------

    validateName (string): 不正な文字が含まれないように、指定された名前を有効な名前に変換します。先頭の不正な文字は除去され、その他の不正な文字は「_」に変換されます。特別に、先頭の数字と末尾のスペースも除去されます。フルパス名も同様に検証することができます。ただし、パスのネームスペースが存在しない場合、コマンドはベース名のみを返します。たとえば、「:nonExistentNS:name」は「name」に変換されます。先頭の数字のみが含まれる「123」のように、名前全体が不正な文字だけで構成されている場合、返される文字列は空になります。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def namespaceInfo(absoluteName: bool = False,baseName: bool = False,currentNamespace: bool = False,dagPath: bool = False,fullName: bool = False,internal: bool = False,isRootNamespace: bool = False,listNamespace: bool = False,listOnlyDependencyNodes: bool = False,listOnlyNamespaces: bool = False,parent: bool = False,recurse: bool = False,shortName: bool = False) -> None:
    """
    このコマンドは、ネームスペースに関する情報を表示します。必要に応じて、コマンド ラインでターゲット ネームスペースを指定できます。ネームスペースを指定しない場合は、現在のネームスペースに関する情報が表示されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absoluteName (boolean): コマンドによって返されるネームスペースの目的のフォーマットを指定するために使用できる汎用フラグです。ネームスペースの絶対名は、ルートネームスペース「:」で始まり、すべての親ネームスペースを含むフルネームスペースパスです。たとえば、「:ns:ball」は絶対ネームスペース名ですが、「ns:ball」は絶対ネームスペース名ではありません。絶対ネームスペース名は不変であり、現在のネームスペースまたは相対ネームスペースモードの影響を受けません。「baseName」や「fullName」などの他のフォーマットモディファイヤも参照してください。

    -----------------------------------------

    baseName (boolean): コマンドによって返されるネームスペースの目的のフォーマットを指定するために使用できる汎用フラグです。ネームスペースのベース名には、リーフレベルの名前のみが含まれ、その親ネームスペースは含まれません。たとえば、「ns:ball」という名前のオブジェクトの場合、そのベース名は「ball」になります。このモードは、常に同じ方法でベース名を返し、現在のネームスペースモードまたは相対ネームスペースモードの影響を受けません。「absoluteName」や「fullName」などの他のフォーマットモディファイヤも参照してください。「shortName」フラグは「baseName」と同じものです。

    -----------------------------------------

    currentNamespace (boolean): 現在のネームスペースの名前を表示します。

    -----------------------------------------

    dagPath (boolean): 「listNamespace」フラグと「listOnlyDependencyNodes」フラグが変更され、返されるDAGオブジェクト名に、名前が固有になるのに必要なDAGパスが含まれることが示されます。このフラグが存在しない場合、DAGパスが含まれない名前が返されます。

    -----------------------------------------

    fullName (boolean): コマンドによって返されるネームスペースの目的のフォーマットを指定するために使用できる汎用フラグです。ネームスペースのフルネームには、ネームスペースパスとベース名の両方が含まれます。ただし、ルートネームスペースを表す最初のコロンはありません。たとえば、「ns:ball」はフルネームですが、「:ns:ball」は絶対名です。このモードは、現在のネームスペースモードと相対ネームスペースモードの影響を受けます。「baseName」や「absoluteName」などの他のフォーマットモディファイヤも参照してください。

    -----------------------------------------

    internal (boolean): このフラグは「listOnlyDependencyNodes」フラグと一緒に使用します。設定すると、返されるリストに、既定では表示されない内部ノード(itemFiltersなど)が含まれます。

    -----------------------------------------

    isRootNamespace (boolean): ネームスペースがルート(「:」)の場合はtrue、ルートでない場合はfalseを返します。

    -----------------------------------------

    listNamespace (boolean): ネームスペースの内容をリスト表示します。

    -----------------------------------------

    listOnlyDependencyNodes (boolean): ネームスペース内のすべてのディペンデンシーノードをリスト表示します。

    -----------------------------------------

    listOnlyNamespaces (boolean): ネームスペース内のすべてのネームスペースをリスト表示します。

    -----------------------------------------

    parent (boolean): ネームスペースの親を表示します。既定では、このリストには内部ノード(itemFiltersなど)は含まれません。内部ノードを含めるには、「internal」フラグを使用します。

    -----------------------------------------

    recurse (boolean): 「listNamespace」、「listOnlyNamespaces」、または「listOnlyDependencyNode」を指定すると、ネームスペースのすべての子ネームスペースを再帰的にリストに含めることができます。

    -----------------------------------------

    shortName (boolean): このフラグは非推奨になりました。Mayaの将来のリリースで除去される可能性があります。baseNameフラグと同義です。代わりにbaseNameフラグを使用してください。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def reloadImage() -> None:
    """
    ディスクから xpm イメージをリロードします。ディスク上でファイルが変更され、リロードする必要がある場合に使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: booleanイメージが正常にロードされ場合は true を、ロードが失敗した場合は false を返します。
    """
    pass

    
def requires(dataType: str = "",nodeType: str = "") -> None:
    """
    このコマンドは、ファイルの読み取りや書き出し中に使用し、そのファイルをロードするために必要な要件を指定します。ファイルの書き出しに使ったファイル フォーマットのバージョン、シーンをロードするために必要なプラグインなどが定義されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    dataType (string): このプラグインによって定義されているデータ型を指定します。データ型は、プラグインを登録するときにMFnPlugin::registerData()によって指定されます。

    -----------------------------------------

    nodeType (string): このプラグインによって定義されているノードタイプを指定します。ノードタイプは、プラグインを登録するときにMFnPlugin::registerNode()によって指定されます。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def saveImage(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),currentView: bool = False,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),image: str = "",isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,objectThumbnail: str = "",parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,sceneFile: str = "",statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドにより、xpm 以外のファイルで使用されるスタティック イメージが作成されます。ファイル テクスチャ ノードでサポートされているすべてのイメージ ファイル フォーマットは、このコマンドでサポートされています。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    currentView (boolean): 現在のビューのイメージを生成します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    image (string): 指定したファイル名を、イメージに設定します。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    objectThumbnail (string): 可能な場合、指定したオブジェクトのイメージを使用します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    sceneFile (string): アイコンが関連付けられているファイルの名前です。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成されたイメージの名前string作成された saveImage コントロールの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def sceneUIReplacement(clear: bool = False,deleteRemaining: bool = False,getNextFilter: Tuple[str, str] = tuple("", ""),getNextPanel: Tuple[str, str] = tuple("", ""),getNextScriptedPanel: Tuple[str, str] = tuple("", ""),update: str = "") -> None:
    """
    このコマンドは、ロード中のシーンで利用可能な既存のシーンに基づく UI を返します。ロード中のシーンが使用していない UI を削除することもできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    clear (boolean): コマンドによって割り当てられたすべてのリソースを解放します。

    -----------------------------------------

    deleteRemaining (boolean): シーン依存で、最後の更新以降にこのコマンドによって参照されていないUIを削除します。

    -----------------------------------------

    getNextFilter ([string, string]): 指定したタイプで指定した名前を持つ次のフィルタを返します。

    -----------------------------------------

    getNextPanel ([string, string]): 指定したタイプの(なるべく指定したラベルを持つ)次のパネルを返します。

    -----------------------------------------

    getNextScriptedPanel ([string, string]): 指定したスクリプトパネルタイプの(なるべく指定したラベルを持つ)次のスクリプトパネルを返します。

    -----------------------------------------

    update (string): アプリケーションの現在の状態を反映するようにコマンドの状態を更新します。文字列引数は、パネルで構成されるメインウィンドウのペインレイアウトの名前です。

    -----------------------------------------

    Return Value:
    None: stringgetNextScriptedPanel、getNextPanel、getNextFilter と併用する場合
    """
    pass

    
def scriptNode(afterScript: str = "",beforeScript: str = "",executeAfter: bool = False,executeBefore: bool = False,ignoreReferenceEdits: bool = False,name: str = "",scriptType: int = 1,sourceType: str = "") -> str:
    """
    scriptNodes にはファイルのロード時やスクリプト ノードの削除時に実行されるスクリプトが含まれます。スクリプトが参照されたノードを修正した場合、その変更は、scriptNode が ignoreReferenceEdits フラグを使って作成されている場合を除き、リファレンス編集として追跡されます。scriptNode コマンドは、scriptNode の作成、編集、照会、テストに使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    afterScript (string): スクリプトノードの削除時に実行されるスクリプトC:既定は空の文字列です。Q:照会するとstringを返します。

    -----------------------------------------

    beforeScript (string): ファイルのロード時に実行されるスクリプトC:既定は空の文字列です。Q:照会するとstringを返します。

    -----------------------------------------

    executeAfter (boolean): scriptNodeの.afterアトリビュートに格納されているスクリプトを実行します。このスクリプトは、スクリプトノードを削除したときに通常実行されます。

    -----------------------------------------

    executeBefore (boolean): scriptNodeの.beforeアトリビュートに格納されているスクリプトを実行します。このスクリプトは、ファイルがロードされたときに通常実行されます。

    -----------------------------------------

    ignoreReferenceEdits (boolean): スクリプトの実行中に参照されたノードに加えられた変更をリファレンスの編集として記録するかどうかを設定します。このフラグは、scriptNodeの作成時に設定する必要があります。このフラグが設定されていない場合、参照されたノードに加えられた変更は、既定で編集として記録されます。

    -----------------------------------------

    name (string): 新しいscriptNodeの作成時に、このフラグはノードの名前を指定します。固有でない名前を使う場合、その名前は固有性を確保するために修正されます。

    -----------------------------------------

    scriptType (int): スクリプトを実行するタイミングを指定します。次の値を使用できます。0要求に応じて実行します。1ファイルのロード時またはノードの削除時に実行します。2ファイルのロード時またはノードの削除時に実行します(バッチモードではない場合)。3内部4ソフトウェアレンダー時に実行します。5ソフトウェアフレームレンダー時に実行します。6シーンの構成時に実行します。7時間が変更されたときに実行します。C:既定値は0です。Q:照会するとintを返します。

    -----------------------------------------

    sourceType (string): アタッチしたスクリプト両方の言語タイプを設定します。有効な値は「mel」(既定で有効)と「python」です。

    -----------------------------------------

    Return Value:
    str: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def sysFile(copy: str = "",delete: bool = False,makeDir: bool = False,move: str = "",removeEmptyDir: bool = False,rename: str = "") -> None:
    """
    このコマンドはシステムに依存しない方法で、ディレクトリの作成やファイル名の変更、ファイルの削除を行います。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    copy (string): newFileNameパラメータで指定した名前にファイルをコピーします。

    -----------------------------------------

    delete (boolean): ファイルを削除します。

    -----------------------------------------

    makeDir (boolean): パラメータで指定したディレクトリパスを作成します。複数のディレクトリを作成する必要があるときは、すべてのパスが作成されます。

    -----------------------------------------

    move (string): -renameフラグと同じです。古いスクリプトとの互換性のために維持されています。

    -----------------------------------------

    removeEmptyDir (boolean): ディレクトリが空の場合は、パラメータで指定したディレクトリパスを削除します。このコマンドによって、空でないディレクトリが削除されることはありません。

    -----------------------------------------

    rename (string): ファイル名をnewFileNameパラメータで指定した名前に変更します。

    -----------------------------------------

    Return Value:
    None: boolean成功すれば true を、失敗すれば false を返します。
    """
    pass

    
def translator(defaultFileRule: bool = False,defaultOptions: str = "",extension: bool = False,fileCompression: str = "",filter: bool = False,list: bool = False,loaded: bool = False,objectType: bool = False,optionsScript: bool = False,readSupport: bool = False,writeSupport: bool = False) -> None:
    """
    引数として指定されたファイル トランスレータ機能に関連するパラメータを設定、または照会します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    defaultFileRule (boolean): 既定のファイル規則の値を返し、""も返す場合があります。

    -----------------------------------------

    defaultOptions (string): トランスレータを使用して、既定のオプションの文字列を返す、または設定します。

    -----------------------------------------

    extension (boolean): トランスレータの既定の拡張子を返します。

    -----------------------------------------

    fileCompression (string): ファイルが保存されるときの圧縮アクションを指定します。「compressed」、「uncompressed」、「asCompressed」があります。

    -----------------------------------------

    filter (boolean): トランスレータで使用されたfilterstringを返します。

    -----------------------------------------

    list (boolean): ロードされたすべてのトランスレータの文字配列を返します。

    -----------------------------------------

    loaded (boolean): 指定されたトランスレータがロードされていなければtrueを返します。

    -----------------------------------------

    objectType (boolean): このフラグは現在サポートしていません。今後、これはdefaultFileRuleと同じ結果を返します。

    -----------------------------------------

    optionsScript (boolean): オプションUIを提供するために使用するoptionsScriptの名前を照会します。optionsScriptで呼び出すスクリプトには、オプションが表示される親レイアウトの名前と、オプションエリアでボタンを押したときにコールされるコールバック名が予想されます。

    -----------------------------------------

    readSupport (boolean): トランスレータが読み取り操作をサポートしていれば、trueを返します。

    -----------------------------------------

    writeSupport (boolean): トランスレータが書き込み操作をサポートしていれば、trueを返します。

    -----------------------------------------

    Return Value:
    None: booleanまたは、指定したフラグによっては文字配列の場合もあります。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def unknownNode(plugin: bool = False,realClassName: bool = False,realClassTag: bool = False) -> None:
    """
    不明ノード(シーン ファイルをロードするときに Maya がロードできないプラグインで定義されたノード)に格納されたデータを照会できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    plugin (boolean): 照会モードでは、不明なノードが作成されたプラグインの名前を返します。プラグインがない場合は、空の文字列を返します。

    -----------------------------------------

    realClassName (boolean): ノードの実際のクラス名を返します。

    -----------------------------------------

    realClassTag (boolean): ノードの実際のクラスIFFタグを返します。

    -----------------------------------------

    Return Value:
    None: string[](照会モードの場合)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def unknownPlugin(dataTypes: bool = False,list: bool = False,nodeTypes: bool = False,remove: bool = False,version: bool = False) -> None:
    """
    シーンで使用される不明なプラグインを照会し、それらを除去することができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    dataTypes (boolean): 指定された不明なプラグインに関連付けられているデータ型を返します。Maya2014以前のファイルでは、これは常に空になります。

    -----------------------------------------

    list (boolean): シーン内の不明なプラグインをリストします。

    -----------------------------------------

    nodeTypes (boolean): 指定された不明なプラグインに関連付けられているノードタイプを返します。Maya2014以前のファイルでは、これは常に空になります。

    -----------------------------------------

    remove (boolean): 指定された不明なプラグインをシーンから除去します。Maya2014以降のファイルでは、このプラグインによって定義されたノードまたはデータ型がまだ使用中の場合、この処理に失敗します。

    -----------------------------------------

    version (boolean): 指定された不明なプラグインのバージョン文字列を返します。

    -----------------------------------------

    Return Value:
    None: string[](照会モードの場合)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def workspace(active: bool = False,baseWorkspace: str = "",create: str = "",directory: str = "",expandName: str = "",fileRule: Tuple[str, str] = tuple("", ""),fileRuleEntry: str = "",fileRuleList: bool = False,filter: bool = False,fullName: bool = False,list: bool = False,listFullWorkspaces: bool = False,listWorkspaces: bool = False,newWorkspace: bool = False,objectType: Tuple[str, str] = tuple("", ""),objectTypeEntry: str = "",objectTypeList: bool = False,openWorkspace: bool = False,projectPath: str = "",removeFileRuleEntry: str = "",removeVariableEntry: str = "",renderType: Tuple[str, str] = tuple("", ""),renderTypeEntry: str = "",renderTypeList: bool = False,rootDirectory: bool = False,saveWorkspace: bool = False,shortName: bool = False,update: bool = False,updateAll: bool = False,variable: Tuple[str, str] = tuple("", ""),variableEntry: str = "",variableList: bool = False) -> None:
    """
    指定したワークスペース ファイルに従って、ワークスペースを生成したり、開いたり、編集したりします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    active (boolean): このフラグは-o/openWorkspaceフラグと同義です。

    -----------------------------------------

    baseWorkspace (string): ワークスペースは別のワークスペースをベースにしている場合があります。つまり、明示的にオーバーライドされていない場合、ベースのワークスペースのすべてのファイルルールと変数がこのワークスペースに適用されます。既定では、新しいワークスペースにはベースワークスペースとして「Default」というワークスペースがあります。相対パスを含む「複製」ファイルルールは、新しいワークスペースの作成時またはベースワークスペースの変更時に検証または作成されないことに注意してください。

    -----------------------------------------

    create (string): 新しいディレクトリを作成します。ディレクトリの名前がフルパスでなかった場合、このディレクトリは、-dirフラグで設定された現在のディレクトリのサブディレクトリとして作成されます。このフラグは、ワークスペースを作成しないことに注意してください。

    -----------------------------------------

    directory (string): このオプションは、現在のワークスペースディレクトリを指定したパスに設定します。照会すると、現在のワークスペースディレクトリを返します。このディレクトリは、fileBrowserの最初のディレクトリとして使用され、ファイルの位置を指定する検索パスの一部となります。pwdおよびchdirコマンドが使用する現在のワーキングディレクトリと混同しないでください。ファイルブラウザを使用する場合、この値は最後に参照した場所に設定されます。

    -----------------------------------------

    expandName (string): 現在のワークスペース定義を使用してファイル名のフルパスの場所を照会します。パスはプロジェクトの相対的なファイル名、フルパス名、または変数名になります。戻り値は必ずフルパス名となります。パスが空の文字列の場合、戻り値はプロジェクトのルートディレクトリになります。変数の拡張子をサポートしているため、ワークスペースで定義された変数と環境変数の両方が考慮されます。拡張変数名には次の3つのフォーマットがサポートされています:%variableName%、$variableName、${variableName}。まず、現在のワークスペースで定義された変数が検索され、次に環境変数が検索されます。チルダ（~）もサポートしています。変数の冒頭にチルダを入れると、Mayaでは、環境変数のみを考慮して展開し、展開結果にチルダを残します。LinuxおよびMacプラットフォームでは、チルダを使用して~username、~、または~/のフォームでユーザのホームディレクトリを展開できます。~usernameと指定すると該当するユーザのホームディレクトリに置き換えられ、~または~/と指定するとHOME環境変数の値に置き換えられます。

    -----------------------------------------

    fileRule ([string, string]): ファイルの既定位置を設定します。1番目のパラメータはfileRule名(シーン、イメージなど)で、2番目は位置です。照会すると文字列のリストを返します。リストには、fileRule名とその場所が交互に現れます。通常、使用可能なトランスレータ1つにつき、1つのファイル規則があります。環境変数がサポートされています。ファイル規則用に複数のパスを設定する場合、Windowsではセミコロン(;)、MacOSXとLinuxではコロン(:)で区切ります。パスごとに冒頭と末尾にスペースを入れることが重要です。スペースはパス名の一部として扱われます(実際にスペースで始まったりスペースで終わるわけではありません)。有効なfileRule名には、マルチバイト文字を含めることができません。fileRuleを作成してもフォルダは作成されないことに注意してください。すべてのパスが有効かどうかを確認するのはユーザの責任になります。

    -----------------------------------------

    fileRuleEntry (string): 指定したfileRuleの位置を返します。

    -----------------------------------------

    fileRuleList (boolean): 現在定義されているfileRuleのリストを返します。

    -----------------------------------------

    filter (boolean): このフラグは現在サポートしていません。

    -----------------------------------------

    fullName (boolean): ワークスペースのフルネームを返します。

    -----------------------------------------

    list (boolean): このオプションは、現在のワークスペースディレクトリをリストします。「workspaceFile」用にパスが指定されている場合、このディレクトリのコンテンツがリストされます。指定されていなければ、-dirフラグで設定されたディレクトリの内容がリストされます。

    -----------------------------------------

    listFullWorkspaces (boolean): 現在設定されている、すべてのワークスペースの名前のフルパスのリストを返します。

    -----------------------------------------

    listWorkspaces (boolean): 現在設定されているワークスペースの名前のリストを返します。

    -----------------------------------------

    newWorkspace (boolean): これにより、指定されたパス(「現在」のディレクトリへの絶対パスまたは相対パス)を使用して新しいワークスペースが作成されます。このパスにワークスペースが既に存在する場合、コマンドは失敗します。このアプリケーションは新しいフォルダを作成することなく、仮想ワークスペースを作成することに注意してください。相対パスを指定すると、新しいワークスペースは-dirフラグで設定された「現在」のフォルダに指定されたパスが連結されたパスにマップされます。パスが存在しない場合は、既定でワークスペースのルートフォルダ-rdがシステムのルートパス(例:C:¥または「/」)に設定されます。すべてのパスが存在するかどうかを確認するのはユーザの責任になります。

    -----------------------------------------

    objectType ([string, string]): このフラグは現在サポートしていません。今後、既定位置はすべてfileRulesに追加されます。

    -----------------------------------------

    objectTypeEntry (string): このフラグは現在サポートしていません。これは、fileRuleEntryと同じ結果を返します。

    -----------------------------------------

    objectTypeList (boolean): このフラグは現在サポートしていません。今後、これはfileRuleListと同じ結果を返します。

    -----------------------------------------

    openWorkspace (boolean): ワークスペースを開きます。開かれたワークスペースが現在のワークスペースになります。

    -----------------------------------------

    projectPath (string): 引数として渡されたfilePathを、(可能な場合は)プロジェクトルートディレクトリを基準にしたファイル名に変換して返します。ファイルパスがプロジェクトのルートディレクトリの下にない場合、フルパス名を返します。

    -----------------------------------------

    removeFileRuleEntry (string): 指定したワークスペースから指定したファイル規則を除去します。ワークスペース名が指定されていない場合、現在のワークスペースから指定したファイル規則が除去されます。

    -----------------------------------------

    removeVariableEntry (string): 指定したワークスペースから指定した変数を除去します。ワークスペース名が指定されていない場合、現在のワークスペースから指定した変数が除去されます。

    -----------------------------------------

    renderType ([string, string]): このフラグは現在サポートしていません。既定のレンダータイプは今後すべてfileRulesに追加されます。

    -----------------------------------------

    renderTypeEntry (string): このフラグはサポートしていません。今後はfileRuleEntryを使用してください。

    -----------------------------------------

    renderTypeList (boolean): このフラグはサポートしていません。今後はfileRuleListを使用してください。

    -----------------------------------------

    rootDirectory (boolean): ワークスペースのルートディレクトリを返します。

    -----------------------------------------

    saveWorkspace (boolean): ワークスペースを保存します。通常、ワークスペースはMayaが終了するときに保存されますが、このフラグを使用するとデータは確実にディスクに保存されます。

    -----------------------------------------

    shortName (boolean): ワークスペースのショートネームを照会します。

    -----------------------------------------

    update (boolean): このフラグはプロジェクトディレクトリから、すべてのワークスペース設定を読み込みます。Mayaではスタートアップ時に使用し、使用可能なワークスペースを検索します。

    -----------------------------------------

    updateAll (boolean): このフラグは-u/updateと同義です。

    -----------------------------------------

    variable ([string, string]): プロジェクト変数を設定または照会します。プロジェクト変数は、名前の展開時に使用されます。次の-en/expandNameを参照してください。

    -----------------------------------------

    variableEntry (string): 変数名を指定すると、その値が返されます。

    -----------------------------------------

    variableList (boolean): ワークスペースのすべての変数のリストを返します。

    -----------------------------------------

    Return Value:
    None: string「shortName」フラグを照会する場合は、プロジェクトのショート ネームです。string「fullName」 フラグを照会する場合は、プロジェクトのフル ネームです。string「openWorkspace」フラグを照会する場合は、現在のワークスペース名です(現在のワークスペースがある場合)。string「directory」フラグを照会する場合は、作業スペースのディレクトリです。string「renderTypeEntry」、「fileRuleEntry」、または「objectTypeEntry」フラグを照会する場合は、現在のワークスペースのファイル ルールです。string「variableEntry」フラグを照会する場合は、現在のワークスペースのファイル ルールです。string「expandName」フラグを照会する場合は、指定したファイル名または現在のルート ディレクトリ(名前が指定されていない場合)の解決済みのフル ネームです。string「projectPath」フラグを照会する場合は、現在のプロジェクト ワークスペースのパスです。string「baseWorkspace」フラグを照会する場合は、現在のベース ワークスペースの名前です。string「rootDirectory」フラグを照会する場合は、現在のワークスペースのルート ディレクトリです。string[]「fileRule」フラグを照会する場合は、ファイル ルールのリストです。string[]「variableList」フラグを照会する場合は、変数のリストです。string[]「listWorkspaces」フラグを照会すると、すべてのワークスペースのリストです。string[]「listFullWorkspaces」フラグを照会する場合は、すべてのワークスペースのフルネームのリストです。string[]「list」フラグを照会する場合は、指定されたディレクトリ内のすべてのワークスペースのパス名のリストです。ディレクトリが指定されていない場合は、現在のワークスペースのパス名のリストです。string[]現在のワークスペースのファイル ルールに対応する代替(ファイル ルール、ルールの位置)文字列のリストです。string[]現在のワークスペースの変数に対応する代替(変数、値)文字列のリストです。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def assignInputDevice(clutch: str = "",continuous: bool = False,device: str = "",immediate: bool = False,multiple: bool = False) -> None:
    """
    このコマンドは、コマンド文字列(すなわち MEL スクリプト)を入力デバイスに関連付けます。デバイスが移動するかデバイスのボタンが押されると、あたかもコマンドをウィンドウに入力したかのようにコマンド文字列が実行されます。コマンド文字列がボタンの名前またはデバイスの軸を含む場合、これらのボタン/軸の現在値が代入されます。ボタンの値は boolean、軸の値は double として通知されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    clutch (string): クラッチボタンを指定します。コマンド文字列を実行するためには、このボタンが押されている必要があります。クラッチが指定されていない場合、デバイスの状態が変化する度にコマンド文字列が実行されます。

    -----------------------------------------

    continuous (boolean): このフラグが設定されている場合、コマンド文字列は連続的に実行されます(デバイスの状態が変化するごとに一度)。既定では、クラッチボタンが指定されている場合、コマンド文字列はボタンが押されたときに一度だけ実行されます。

    -----------------------------------------

    device (string): コマンド文字列を割り当てるデバイスを指定します。

    -----------------------------------------

    immediate (boolean): 待ち行列を使わずに即座にコマンドを実行します。

    -----------------------------------------

    multiple (boolean): このフラグが設定されている場合、このデバイスに関連付けられている他のコマンド文字列は削除できません。既定では、新規コマンド文字列がデバイスにアタッチされるときは、他のコマンド文字列はすべて削除されます。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def attachDeviceAttr(attribute: str = "",axis: str = "",camera: bool = False,cameraRotate: bool = False,cameraTranslate: bool = False,clutch: str = "",device: str = "",selection: bool = False) -> None:
    """
    このコマンドは、デバイス/軸ペアをノード/アトリビュート ペアに関連付けます。デバイス軸が移動するときに、アトリビュートの値は軸の値に設定されます。この値は、setAttrScale コマンドを使用してスケールとオフセットすることができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): アタッチ先のアトリビュートを指定します。

    -----------------------------------------

    axis (string): アタッチ元の軸を指定します。

    -----------------------------------------

    camera (boolean): このフラグはデバイス/軸を現在のカメラにアタッチします。デバイス軸とカメラコントロールの間のマッピングでは、デバイス記述に基づいて経験則を利用します。そのインタラクションは、マウスやカメラのナビゲーションコントロールのコピーです。

    -----------------------------------------

    cameraRotate (boolean): このフラグは、現在のカメラの回転コントロールにデバイス/軸をアタッチします。

    -----------------------------------------

    cameraTranslate (boolean): このフラグは、現在のカメラの移動コントロールにデバイス/軸をアタッチします。

    -----------------------------------------

    clutch (string): クラッチボタンを指定します。コマンド文字列を実行するためには、このボタンが押されている必要があります。クラッチが指定されていない場合、デバイスの状態が変化する度にコマンド文字列が実行されます。

    -----------------------------------------

    device (string): コマンド文字列を割り当てるデバイスを指定します。

    -----------------------------------------

    selection (boolean): このフラグはセレクションリストのノードにアタッチします。選択を変更するとアタッチメントも変更されるので、コマンドの既定の引数とは異なります。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def detachDeviceAttr(all: bool = False,attribute: str = "",axis: str = "",device: str = "",selection: bool = False) -> None:
    """
    デバイス軸とノード アトリビュートの間で接続がデタッチされます。コマンド ライン引数は対応する attachDeviceAttr と同じですが、クラッチ引数はこのコマンドで使用できません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    all (boolean): 各デバイス上のすべてのアタッチメントを削除します。

    -----------------------------------------

    attribute (string): デタッチのアトリビュート。このフラグは、-d/deviceフラグと一緒に使用する必要があります。

    -----------------------------------------

    axis (string): デタッチの軸。このフラグは、-d/deviceフラグと一緒に使用する必要があります。

    -----------------------------------------

    device (string): このデバイスのアタッチメントが削除されます。-ax/axisフラグを使用しないと、このデバイスに接続された、すべてのアタッチメントがデタッチされます。

    -----------------------------------------

    selection (boolean): 選択アタッチメントがデタッチされます。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def deviceEditor(control: bool = False,defineTemplate: str = "",docTag: str = "",exists: bool = False,filter: str = "",forceMainConnection: str = "",highlightConnection: str = "",lockMainConnection: bool = False,mainListConnection: str = "",panel: str = "",parent: str = "",selectionConnection: str = "",stateString: bool = False,takePath: str = "",unParent: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,useTemplate: str = "") -> None:
    """
    入力デバイスのアタッチメントの作成や修正に使用するエディタが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    takePath (string): 取得したデータをエディタを通して書き込み/読み込みするために使用されるパスです。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringエディタの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def devicePanel(control: bool = False,copy: str = "",createString: bool = False,defineTemplate: str = "",docTag: str = "",editString: bool = False,exists: bool = False,init: bool = False,isUnique: bool = False,label: str = "",menuBarRepeatLast: bool = False,menuBarVisible: bool = False,needsInit: bool = False,parent: str = "",popupMenuProcedure: str = "",replacePanel: str = "",tearOff: bool = False,tearOffCopy: str = "",tearOffRestore: bool = False,unParent: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドは廃止されました。ファイル互換性のためだけに含まれています。このコマンドはブランク パネルを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    control (boolean): このパネルの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:パネルにはコントロールがないことがあります。コントロールが存在しない場合、このフラグは""を返します。

    -----------------------------------------

    copy (string): このパネルを指定したパネルのコピーにします。両方のパネルは同じタイプである必要があります。

    -----------------------------------------

    createString (boolean): パネルの作成に使用するコマンド文字列

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): Mayaのパネルにタグをアタッチします。

    -----------------------------------------

    editString (boolean): パネルの編集に使用するコマンド文字列

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    init (boolean): パネルの既定の状態を初期化します。これは、file-newとfile-openによって自動的に実行されます。

    -----------------------------------------

    isUnique (boolean): このパネルタイプのインスタンスが1つだけ許可されている場合、trueを返します。

    -----------------------------------------

    label (string): ユーザが読みやすいパネル用ラベルを指定します。

    -----------------------------------------

    menuBarRepeatLast (boolean): メニューヘッダを中マウスボタンでクリックしたときに、最後に選択したメニュー項目を繰り返すかどうかをコントロールします。

    -----------------------------------------

    menuBarVisible (boolean): パネルのメニューバーを表示するかどうかを制御します。

    -----------------------------------------

    needsInit (boolean): (内部)OnEditは、初期化が必要なものとしてパネルをマークします。照会すると、初期化が必要なものとしてパネルがマークされているかどうかを返します。file-newとfile-openで使用されます。

    -----------------------------------------

    parent (string): このパネルの親のレイアウトを指定します。

    -----------------------------------------

    popupMenuProcedure (script): パネルのポップアップメニューを作成するためにコールされるプロシージャを指定します。既定値は「buildPanelPopupMenu」です。プロシージャは、パネル名である文字列引数を持つ必要があります。

    -----------------------------------------

    replacePanel (string): 指定したパネルをこのパネルと置き換えます。ターゲットパネルが同じレイアウト内にある場合、入れ替えを実行します。

    -----------------------------------------

    tearOff (boolean): このパネルを切り離し、パネルの親としてのpaneLayoutを持つフローティングウィンドウにします。照会すると、パネルが独自のウィンドウに切り離されたかどうかを返します。

    -----------------------------------------

    tearOffCopy (string): このパネルを、指定したソースパネルのコピーを切り離したウィンドウとして作成します。

    -----------------------------------------

    tearOffRestore (boolean): パネルが切り離されていて、フォーカスされている場合に、パネルを復元します。パネルがドッキングされている場合は、ドッキングされたウィンドウ内でアクティブなパネルになります。パネルを切り離す場合のみに使用される-to/-tearOffフラグではなく、このフラグをすべてのパネルに追加される既定のフラグにする必要があります。

    -----------------------------------------

    unParent (boolean): パネルをそのレイアウトから除去するように指定します。照会には使用できません。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringパネル名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def getInputDeviceRange(maxValue: bool = False,minValue: bool = False) -> None:
    """
    このコマンドはデバイス軸が返す最小値と最大値を表示します。この値はマッピングを適用する前の未加工のデバイス値です。軸を指定しないと、すべてのデバイス軸の値が返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    maxValue (boolean): 軸の最大値のみを表示します。

    -----------------------------------------

    minValue (boolean): 軸の最小値のみを表示します。

    -----------------------------------------

    Return Value:
    None: float[]コマンドの結果
    """
    pass

    
def getModifiers() -> None:
    """
    このコマンドは、モディファイア キーの現在の状態を返します。各モディファイアの状態は、戻り値内の対応するビットの値をテストすることによって取得することができます。Shift はビット 1、Ctrl はビット 3、Alt はビット 4、Windows キーボードでは「Windows」キーで Mac キーボードではコマンド キーがビット 5 です。各モディファイアのビット値のテストに関する詳細については、下の例を参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: intどのモディファイア キーが押されたかを示します。
    """
    pass

    
def listDeviceAttachments(attribute: str = "",axis: str = "",clutch: str = "",device: str = "",file: str = "",selection: bool = False,write: bool = False) -> None:
    """
    デバイス アタッチメントの現在のセットがリストされます。リストは、デバイス アタッチメントの再作成に必要となるコマンドの形式になります。これには、アタッチメント マッピングとデバイス マッピングの両方が含まれます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): リストするアトリビュートアタッチメントを指定します。

    -----------------------------------------

    axis (string): リストする軸アタッチメントを指定します。

    -----------------------------------------

    clutch (string): このボタンでつかまるアタッチメントのみがリストされます。

    -----------------------------------------

    device (string): リストするデバイスアタッチメントを指定します。

    -----------------------------------------

    file (string): デバイスアタッチメントを書き出すファイルの名前を指定します。

    -----------------------------------------

    selection (boolean): 選択したアタッチメントのみがリストされます。

    -----------------------------------------

    write (boolean): -fフラグを設定している場合は、-fフラグで指定したファイルにデバイスアタッチメントが書き出されます。-fフラグを設定していない場合は、デバイスに指定したファイルに書き出されます。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def listInputDeviceAxes() -> None:
    """
    指定した入力デバイスのすべての軸がリスト表示されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string[]コマンドの結果
    """
    pass

    
def listInputDeviceButtons() -> None:
    """
    このコマンドは、引数として指定した入力デバイスのボタンをすべてリスト表示します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string[]コマンドの結果
    """
    pass

    
def listInputDevices(free: bool = False,primary: bool = False,secondary: bool = False) -> None:
    """
    Maya が認識しているすべての入力デバイスがすべてリスト表示されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    free (boolean): 無償のデバイスをリスト

    -----------------------------------------

    primary (boolean): プライマリデバイスをリスト

    -----------------------------------------

    secondary (boolean): セカンダリデバイスをリスト

    -----------------------------------------

    Return Value:
    None: string[]コマンドの結果
    """
    pass

    
def mouse(enableScrollWheel: bool = False,mouseButtonTracking: int = 1,mouseButtonTrackingStatus: bool = False,scrollWheelStatus: bool = False) -> None:
    """
    このコマンドは、マウスの環境設定を行います。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    enableScrollWheel (boolean): スクロールホイールサポートを有効または無効にします。

    -----------------------------------------

    mouseButtonTracking (int): トラックするマウスボタンの数(1、2、または3)を設定します。注:これはMacintoshでのみサポートされます。

    -----------------------------------------

    mouseButtonTrackingStatus (boolean): トラックされるマウスボタンの現在の数を返します。

    -----------------------------------------

    scrollWheelStatus (boolean): スクロールホイールサポートの現在のステータスを返します。

    -----------------------------------------

    Return Value:
    None: int-scrollWheelStatus フラグを使用すると、スクロール ホイール サポートが有効な場合は 1、無効の場合は 0 が返されます。-mouseButtonTrackingStatus フラグを使用しすると、トラックされるマウス ボタンの数が返されます。
    """
    pass

    
def recordAttr(attribute: str = "",delete: bool = False) -> None:
    """
    記録するアトリビュートをセットアップします。記録コマンドを実行すると、このアトリビュートのすべての変更内容が記録されます。記録が停止すると、この変更内容はキーフレームに変わります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): 記録するアトリビュートを指定します。

    -----------------------------------------

    delete (boolean): 指定したアトリビュートを記録しません。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def setAttrMapping(absolute: bool = False,attribute: str = "",axis: str = "",clutch: str = "",device: str = "",offset: float = 1.0,relative: bool = False,scale: float = 1.0,selection: bool = False) -> None:
    """
    このコマンドは、指定したデバイス アタッチメントにオフセットとスケールを適用します。このコマンドは、デバイスの軸にマッピングを適用する setInputDeviceMapping コマンドとは異なります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absolute (boolean): 絶対マッピングを行います。

    -----------------------------------------

    attribute (string): アタッチメントで使用するアトリビュートです。

    -----------------------------------------

    axis (string): アタッチメントで使用するデバイス軸です。

    -----------------------------------------

    clutch (string): アタッチメントで使用するクラッチボタンです。

    -----------------------------------------

    device (string): アタッチメントで使用するデバイスです。

    -----------------------------------------

    offset (float): オフセット値を指定します。

    -----------------------------------------

    relative (boolean): 相対マッピングを行います。

    -----------------------------------------

    scale (float): スケール値を指定します。

    -----------------------------------------

    selection (boolean): このフラグは、選択したオブジェクト上でマッピングを行うように指定します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def setInputDeviceMapping(absolute: bool = False,axis: str = "",device: str = "",offset: float = 1.0,relative: bool = False,scale: float = 1.0,view: bool = False,world: bool = False) -> None:
    """
    このコマンドは、指定したデバイス軸に作成されるすべてのアタッチメントのスケールとオフセットを設定します。マップされるデバイス軸に作成されるアタッチメントに、スケール値とオフセット値が適用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absolute (boolean): 絶対軸の値を報告します。

    -----------------------------------------

    axis (string): マップする軸を指定します。

    -----------------------------------------

    device (string): マップするデバイスを指定します。

    -----------------------------------------

    offset (float): 軸のオフセット値を指定します。

    -----------------------------------------

    relative (boolean): 最後のサンプリング以降の軸値の変更を報告します。

    -----------------------------------------

    scale (float): 軸のスケール値を指定します。

    -----------------------------------------

    view (boolean): デバイスの座標をアクティブなカメラの座標に変換します。

    -----------------------------------------

    world (boolean): デバイスの座標をワールド空間座標に変換します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def unassignInputDevice(clutch: str = "",device: str = "") -> None:
    """
    このコマンドは、指定したデバイスに関連付けられたすべてのコマンド文字列を削除します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    clutch (string): このクラッチを持つコマンドアタッチメントだけを削除します。

    -----------------------------------------

    device (string): 作業するデバイスを指定します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def getModulePath(moduleName: str = "") -> None:
    """
    指定したモジュール名のモジュール パスを返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    moduleName (string): パスを取得するモジュールの名前です。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def loadModule(allModules: bool = False,load: str = "",scan: bool = False) -> None:
    """
    Maya プラグインは、Maya の標準プラグイン フォルダのいずれかに個別にインストールしたり、「モジュール」内の他のリソースとともにパッケージ化することができます。各モジュールは独自のフォルダに存在し、モジュールが提供するプラグインを Maya に認識させるモジュール定義ファイルを提供します。Maya を起動すると検出されたすべてのモジュール ファイルがロードされ、モジュールのプラグイン、スクリプト、およびその他のリソースが使用できるようになります。この時点でプラグイン自体はロードされず、必要に応じてロードできるように Maya に認識されるだけということに注意してください。loadModule コマンドは、Maya を起動してから追加された新しいモジュールをリストおよびロードする機能を提供します。これにより、これらのモジュールを使用できるように Maya を再起動する必要がなくなります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allModules (boolean): Mayaにまだロードされていないすべての新しいモジュールをロードします。新しいモジュールは、-scanオプションによって返されるモジュールです。

    -----------------------------------------

    load (string): モジュール定義ファイルで指定されたモジュールをロードします。

    -----------------------------------------

    scan (boolean): モジュールの存在を再スキャンします。Mayaにまだロードされていない検出されたモジュール定義ファイルのリストを返します。新たに検出されたこれらのモジュールはロードされず、Mayaの状態は変更されません。

    -----------------------------------------

    Return Value:
    None: string[]コマンドの結果
    """
    pass

    
def loadPlugin(addCallback: str = "",allPlugins: bool = False,name: str = "",quiet: bool = False,removeCallback: str = "") -> None:
    """
    Maya にプラグインがロードされます。このコマンドのパラメータは、プラグイン ファイルの名前かパス名のどちらかです。プラグインの命名規則として、Linux では .so 拡張子、Windows では .mll 拡張子、Mac OS X では .bundle 拡張子が使用されます。拡張子がない場合、プラットフォームの既定の拡張子が使用されます。Python プラグインをロードするには、明示的に「.py」拡張子を使用する必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addCallback (script): MELまたはPythonのコールバックスクリプトを追加し、プラグインがロードされた後でコールされるようにします。MELでは、このプロシージャには次のシグニチャが必要です。globalprocprocedureName(string$pluginName)Pythonでは、スクリプトを文字列として指定するか、または関数などのコール可能なPythonオブジェクトを指定することができます。文字列を指定する場合は、プラグイン名を挿入する場所にフォーマット識別子「%s」を配置します。関数などのコール可能なオブジェクトを指定する場合は、プラグイン名を引数として渡します。

    -----------------------------------------

    allPlugins (boolean): MAYA_PLUG_IN_PATHで指定した検索パスにあるすべてのプラグインがロードされます。

    -----------------------------------------

    name (string): ロードされたプラグインに対してユーザ定義の名前を設定します。その名前がすでに使用されている場合は、名前の末尾に数値が追加されて固有になります。

    -----------------------------------------

    quiet (boolean): すでにロードされているプラグインをロードしようとしても、警告メッセージは出力されません。

    -----------------------------------------

    removeCallback (script): 以前に-addCallbackで追加されたプロシージャを除去します。

    -----------------------------------------

    Return Value:
    None: string[]正常にロードされたプラグインの内部名
    """
    pass

    
def moduleInfo(definition: bool = False,listModules: bool = False,moduleName: str = "",path: bool = False,version: bool = False) -> None:
    """
    Maya によって検出されたモジュールの情報を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    definition (boolean): -moduleNameパラメータによって指定されたモジュールのモジュール定義ファイル名を返します。

    -----------------------------------------

    listModules (boolean): 現在ロードされているすべてのモジュールの名前を含む配列を返します。

    -----------------------------------------

    moduleName (string): 情報を取得するモジュールの名前です。-definition/-path/-versionのいずれかのフラグとともに使用する必要があります。

    -----------------------------------------

    path (boolean): -moduleNameパラメータによって指定されたモジュールのモジュールパスを返します。

    -----------------------------------------

    version (boolean): -moduleNameパラメータによって指定されたモジュールのモジュールバージョンを返します。

    -----------------------------------------

    Return Value:
    None: string[]コマンドの結果
    """
    pass

    
def openMayaPref(errlog: bool = False,lazyLoad: bool = False,oldPluginWarning: bool = False) -> None:
    """
    API プリファレンスを設定または照会します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    errlog (boolean): 失敗したAPIメソッドコールのエラーログを作成するかどうかを切り替えます。trueに設定すると、Mayaの現在のワーキングディレクトリに「OpenMayaErrorLog」というファイルが作成されます。APIメソッドが失敗するたびに、失敗するメソッドを呼び出したルーチンを示す小さなスタックトレースと共に、エラーの詳しい説明がファイルに書き込まれます。既定はfalse(オフ)です。

    -----------------------------------------

    lazyLoad (boolean): dlopen(3C)のRTLD_NOWフラグまたはRTLD_LAZYフラグでプラグインをロードするかどうかを切り替えます。trueに設定すると、RTLD_LAZYが使用されます。このモードでは、ロード時に解析できない関数への参照はエラーとはみなされません。ただし、このシンボルのうちいずれかが実行時にプラグインによって参照されない場合、Mayaはクラッシュします。既定はfalse(オフ)です。

    -----------------------------------------

    oldPluginWarning (boolean): 古いバージョンに対してコンパイルされたため、Mayaとの互換性がない恐れのあるプラグインがロードされた場合に、loadPluginが警告メッセージを生成するかどうかを切り替えます。既定はtrue(オン)です。

    -----------------------------------------

    Return Value:
    None: int成功か失敗かを示します。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def pluginDisplayFilter(classification: str = "",deregister: bool = False,exists: bool = False,label: str = "",listFilters: bool = False,register: bool = False) -> None:
    """
    プラグイン表示フィルタを登録、登録解除、または照会します。プラグインはこのコマンドを使用して、Maya のモデル パネルの[表示]メニューに表示される専用の表示フィルタを登録できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    classification (string): ビューポート2.0のオブジェクトをフィルタするために使用する分類。この分類はMFnPlugin::registerNode()と同じです。ノードが複数の分類で登録されている場合は、「drawdb」で始まるものを使用します。このフラグの既定値は空の文字列("")です。この場合、ビューポート2.0のオブジェクトはフィルタされません。

    -----------------------------------------

    deregister (boolean): プラグイン表示フィルタを登録解除します。

    -----------------------------------------

    exists (boolean): 指定されたフィルタが存在する場合はtrueを返し、存在しない場合はfalseを返します。他のフラグは無視されます。

    -----------------------------------------

    label (string): UIで表示されるこのフィルタの文字列(モデルパネルの[表示]メニューなど)。このフラグの既定値は、プラグイン表示フィルタの名前と同じです。

    -----------------------------------------

    listFilters (boolean): すべてのプラグイン表示フィルタの配列を返します。

    -----------------------------------------

    register (boolean): プラグイン表示フィルタを登録します。-registerおよび-deregisterの両方のフラグが作成モードで表示されない場合は、-registerが暗黙的に定義されます。ユーザが登録したフィルタはそのユーザによって登録解除される必要があります。フィルタではリファレンスがカウントされます。つまり、同じフィルタを2回登録した場合は、そのフィルタを2回登録解除する必要があります。

    -----------------------------------------

    Return Value:
    None: stringstring[]照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def pluginInfo(activeFile: bool = False,animCurveInterp: str = "",apiVersion: bool = False,autoload: bool = False,cacheFormat: bool = False,changedCommand: str = "",command: str = "",constraintCommand: bool = False,controlCommand: bool = False,data: Tuple[str, str] = tuple("", ""),dependNode: bool = False,dependNodeByType: str = "",dependNodeId: str = "",device: bool = False,dragAndDropBehavior: bool = False,iksolver: bool = False,listPlugins: bool = False,listPluginsPath: bool = False,loadPluginPrefs: bool = False,loaded: bool = False,modelEditorCommand: bool = False,name: str = "",path: str = "",pluginsInUse: bool = False,referenceTranslators: bool = False,registered: bool = False,remove: bool = False,renderer: bool = False,savePluginPrefs: bool = False,serviceDescriptions: bool = False,settings: bool = False,tool: str = "",translator: bool = False,unloadOk: bool = False,userNamed: bool = False,vendor: str = "",version: bool = False,writeRequires: bool = False) -> None:
    """
    このコマンドでアプリケーションのプラグイン レジストリにアクセスできます。登録されているプラグインの特徴を照会するために主に使用します。プラグインは、初めてロードされた際に自動的に登録されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activeFile (boolean): コマンドをシーン全体ではなくアクティブなファイルのみに制限します。これは、dependNode/dnとpluginsInUse/puフラグのみに影響します。書き出しが選択されている場合のみ使用されます。

    -----------------------------------------

    animCurveInterp (string): このプラグインで登録されている、すべてのアニメーションカーブの補間名を含む文字配列を返します。

    -----------------------------------------

    apiVersion (boolean): プラグインをコンパイルしたAPIのバージョンを含む文字列を返します。この値の解釈方法については、MTypes.hのコメントを参照してください。

    -----------------------------------------

    autoload (boolean): アプリケーションを起動するたびにこのプラグインをロードする必要があるかどうかを設定します。照会モードではブーリアンを返します。

    -----------------------------------------

    cacheFormat (boolean): 登録されているすべてのジオメトリキャッシュフォーマットの名前を含む文字配列を返します。

    -----------------------------------------

    changedCommand (script): プラグインレジストリが変更されるたびに実行されるコールバックを追加します。以前登録された、その他すべてのコールバックもコールされます。

    -----------------------------------------

    command (string): このプラグインで登録されたすべてのノーマルコマンドの名前を含む文字列配列を返します。コンストレイント、コントロール、コンテキスト、モデルエディタのコマンドは含まれません。

    -----------------------------------------

    constraintCommand (boolean): このプラグインで登録された、すべてのコンストレイントコマンドの名前を含む文字配列を返します。

    -----------------------------------------

    controlCommand (boolean): このプラグインで登録された、すべてのコントロールコマンドの名前を含む文字配列を返します。

    -----------------------------------------

    data ([string, string]): このプラグインで登録されている、すべてのデータタイプの名前を含む文字配列を返します。

    -----------------------------------------

    dependNode (boolean): このプラグインで登録されている、すべてのカスタムノードタイプの名前を含む文字配列を返します。

    -----------------------------------------

    dependNodeByType (string): ノードの指定されたクラス内のすべての登録ノードタイプの文字配列を返します。プラグインによって登録された各カスタムノードタイプは、MPxNode::Typeで指定されているようなノードタイプの、より一般的なクラスに属します。フラグの引数は、文字列としてのMPxNode::Typeです。たとえば、登録ロケータノードをすべてリスト表示する場合、このフラグの引数としてkLocatorNodeを指定する必要があります。

    -----------------------------------------

    dependNodeId (string): このプラグインで登録されている、すべてのカスタムノードタイプのIDを含む整数の配列を返します。

    -----------------------------------------

    device (boolean): このプラグインで登録されている、すべてのデバイスの名前を含む文字配列を返します。

    -----------------------------------------

    dragAndDropBehavior (boolean): このプラグインで登録されている、すべてのドラッグ＆ドロップ動作の名前を含む文字配列を返します。

    -----------------------------------------

    iksolver (boolean): このプラグインで登録されている、すべてのIKソルバの名前を含む文字配列を返します。

    -----------------------------------------

    listPlugins (boolean): 現在ロードされているすべてのプラグインを含む文字配列を返します。

    -----------------------------------------

    listPluginsPath (boolean): 現在ロードされているすべてのプラグインのフルパスを含む文字配列を返します。

    -----------------------------------------

    loadPluginPrefs (boolean): プラグインのプリファレンス(自動ロード)をpluginPrefs.melからMayaにロードします。

    -----------------------------------------

    loaded (boolean): プラグインがロードされているかどうかを表すブーリアンを返します。

    -----------------------------------------

    modelEditorCommand (boolean): このプラグインで登録された、すべてのモデルエディタコマンドの名前を含む文字配列を返します。

    -----------------------------------------

    name (string): プラグインが登録された内部名を含む文字列を返します。

    -----------------------------------------

    path (string): プラグインの絶対パス名を含む文字列を返します。

    -----------------------------------------

    pluginsInUse (boolean): シーンで現在使用されているすべてのプラグインを含む文字配列を返します。

    -----------------------------------------

    referenceTranslators (boolean): このフラグをpluginsInUse/puフラグとともに使用すると、出力が修正されます。trueの場合、参照ファイルをロードするために使用されるトランスレータを含む、現在使用中のプラグインのみが表示されます。falseの場合、そのようなトランスレータを含まないプラグインのみが表示されます。

    -----------------------------------------

    registered (boolean): プラグインがシステムで登録されているかどうかを表すブーリアンを返します。

    -----------------------------------------

    remove (boolean): 指定したプラグインのレコードをレジストリから除去します。戻り値はありません。

    -----------------------------------------

    renderer (boolean): このプラグインで登録されている、すべてのレンダラの名前を含む文字配列を返します。

    -----------------------------------------

    savePluginPrefs (boolean): プラグインのプリファレンス(自動ロード)をpluginPrefs.melに保存します。

    -----------------------------------------

    serviceDescriptions (boolean): サービスが使用されている場合は、このフラグはそれらのサービスが何であるかを表す、短い説明を含む文字配列を返します。

    -----------------------------------------

    settings (boolean): loaded、autoload、registeredのフラグの値を持つ配列を返します。

    -----------------------------------------

    tool (string): このプラグインで登録されている、すべてのツールコンテキストの名前を含む文字配列を返します。

    -----------------------------------------

    translator (boolean): このプラグインで登録されている、すべてのファイルトランスレータの名前を含む文字配列を返します。

    -----------------------------------------

    unloadOk (boolean): プラグインを問題なくアンロードできるかどうかを表すブーリアンを返します。プラグインが現在使用されている場合はfalseを返します。たとえば新しいディペンデンシーノードタイプをプラグインで追加し、そのノードタイプのインスタンスがシーン内に存在する場合は、照会するとfalseを返します。

    -----------------------------------------

    userNamed (boolean): ユーザがプラグインに名前を割り当てたかどうかを表すブーリアンを返します。

    -----------------------------------------

    vendor (string): プラグインのベンダーを含む文字列を返します。

    -----------------------------------------

    version (boolean): プラグインのバージョンを含む文字列を返します。

    -----------------------------------------

    writeRequires (boolean): このプラグインを使用して、「requires」コマンドを保存済みのファイルに書き込むかどうかを指定します。「requires」コマンドを書き込むと、この保存済みファイルを開いたとき、または読み込んだときに、プラグインを自動ロードできます。この方法では、カスタマイズされたUIを作成する場合や、どのノードやアトリビュートにも保存されていないプラグインデータの一部をロードする場合のように、何らかの特定の理由があってファイルのロードが必要なときに、Mayaがプラグインをロードします。たとえば、「stereoCamera」は、このフラグを使用してカスタマイズされたUIを要求します。

    -----------------------------------------

    Return Value:
    None: Any要求されたアクションによって異なります。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def unloadPlugin(addCallback: str = "",force: bool = False,removeCallback: str = "") -> None:
    """
    Maya からプラグインをアンロードします。このコマンドの実行が成功した後は、プラグインは利用できなくなります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addCallback (script): プラグインをアンロードする直前に、コールするプロシージャを追加します。プロシージャは、プラグインの名前になる1つの文字列引数を持つ必要があります。

    -----------------------------------------

    force (boolean): プラグインが稼動中でもプラグインをアンロードします。これはお勧めしません。シーン内のノードやデータ型を実装したプラグインをアンロードした場合、それらのインスタンスは未知のノードまたは未知のデータに変換され、シーンが適切に動作しなくなってしまいます。Mayaが不安定になり、クラッシュする場合もあります。このフラグを使用する場合は、シーンをMayaAsciiフォーマットで保存して、できるだけ早くMayaを再起動することをお勧めします。

    -----------------------------------------

    removeCallback (script): 前に-addCallbackで追加されたプロシージャを除去します。

    -----------------------------------------

    Return Value:
    None: string[]正常にアンロードしたプラグインの内部名です。
    """
    pass

    
def displayString(delete: bool = False,exists: bool = False,keys: bool = False,replace: bool = False,value: str = "") -> None:
    """
    文字列識別子に文字列値を割り当てます。文字列を 1 箇所で定義し、識別子を使用することで別の位置でも参照できます。フォーマット文字列もサポートしています(注: この機能は format コマンドによって、より一般的な形で提供されるようになりました。format の使用をお勧めします)。最大 3 つの特殊文字シーケンス ^1、^2、^3 を埋め込んで、文字列を自動置換できます。埋め込まれた文字は追加のコマンド引数に置換されます。詳細については、例を参照してください。追加のコマンド引数は、表示文字列識別子である必要はありません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    delete (boolean): このフラグを使用して、識別子文字列を除去します。識別子が存在しない場合は失敗します。

    -----------------------------------------

    exists (boolean): 指定した識別子の存在の有無によって、trueかfalseを返します。

    -----------------------------------------

    keys (boolean): 識別子文字列に一致するすべてのdisplayStringキーをリスト表示します。識別文字列はキー文字列の全体でもその一部でもかまいません。このコマンドは、識別文字列を従属文字列とするすべての識別キーのリストを返します。

    -----------------------------------------

    replace (boolean): 既存の識別子に新しい値を割り当てようとするとdisplayStringコマンドが失敗するため、既存の識別子の値に対する更新を許可するためには、このフラグが必要です。識別子が存在しない場合は、-replaceフラグが存在しないかのように、新しい識別子が追加されます。

    -----------------------------------------

    value (string): 表示文字列の値。表示文字列の作成時にこのフラグを指定しない場合、値は識別子と同じになります。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def format(stringArg: str = "") -> None:
    """
    このコマンドは、フォーマット指定子を含むフォーマット文字列を取得します。フォーマット指定子には、表すパラメータに関する番号が関連付けられています。フォーマット文字列を変更するだけで、渡された値を他の言語用に順序を変更できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    stringArg (string): フォーマット文字列の引数を指定します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def allNodeTypes(includeAbstract: bool = False) -> None:
    """
    このコマンドは、システムに登録されている、作成可能なノードのタイプ名を含むリストを返します。ノード タイプの中には作成できない抽象的なノードも含まれるのでご注意ください。これらはリストに含まれません(例: transform と polyShape はともに dagObject を継承しますが、dagObject は直接作成できないため、リストには含まれません)。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    includeAbstract (boolean): createNodeコマンドで作成できない抽象的なノードも含め、すべてのノードタイプを表示します。リスト内でこれらには接尾辞「(abstract)」が付加されています。

    -----------------------------------------

    Return Value:
    None: string[]ノード タイプのリスト
    """
    pass

    
def clearCache(allNodes: bool = False,computed: bool = False,dirty: bool = False) -> None:
    """
    ディペンデンシー グラフの値が計算された後でも、または値がダーティでも、ノード内の容量を占有することがあります。このコマンドは、必要に応じて再生成可能なすべてのデータを検索してキャッシュ(データ ブロック)から除去し、メモリの容量を空けます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allNodes (boolean): 切り替えた場合、グラフのすべてのノードがクリアされます。それ以外の場合は、選択したノードのみがクリアされます。

    -----------------------------------------

    computed (boolean): 切り替えた場合、計算可能なすべてのデータを除去します(警告:再描画のためにデータが要求されると、再計算によりデータは即座に埋められます)。

    -----------------------------------------

    dirty (boolean): 切り替えた場合、すべてのダーティで重いデータを除去します。

    -----------------------------------------

    Return Value:
    None: intキャッシュから除去された項目数
    """
    pass

    
def convertUnit(fromUnit: str = "",toUnit: str = "") -> None:
    """
    このコマンドを使うと、異なる測定単位間で値が変換されます。値だけでなく単位名も使用できるため、このコマンドは文字列を取ります(例を参照)。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    fromUnit (string): 変換前の単位。指定しない場合は、システム既定とみなされます。11.2m(11.2メートル)のように、値の一部として変換前の単位を指定できます。

    -----------------------------------------

    toUnit (string): 変換後の単位。指定しない場合は、システム既定とみなされます。

    -----------------------------------------

    Return Value:
    None: floatまたは文字列
    """
    pass

    
def crashInfo(crashFile: bool = False,savedBeforeCrash: bool = False) -> None:
    """
    クラッシュ ファイル情報に対するインタフェースを提供します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    crashFile (boolean): クラッシュファイルのフルパス名を返します。

    -----------------------------------------

    savedBeforeCrash (boolean): クラッシュが発生する前に、保存したファイルのフルパス名を返します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dagObjectCompare(attribute: bool = False,bail: str = "",connection: bool = False,namespace: str = "",relative: bool = False,short: bool = False,type: bool = False) -> None:
    """
    dagObjectCompare を使用して、以下に基づいてオブジェクトを比較できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (boolean): DAGオブジェクトアトリビュートを比較

    -----------------------------------------

    bail (string): 最初のエラーで中断、またはカテゴリで中断。正当な値は「never」、「first」、「category」です。

    -----------------------------------------

    connection (boolean): DAG接続を比較

    -----------------------------------------

    namespace (string): ベースラインネームスペース

    -----------------------------------------

    relative (boolean): DAG相対

    -----------------------------------------

    short (boolean): 出力を短い(冗長でない)形式に圧縮します

    -----------------------------------------

    type (boolean): DAGオブジェクトタイプに基づいて比較

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def date(date: bool = False,format: str = "",shortDate: bool = False,shortTime: bool = False,time: bool = False) -> None:
    """
    現在のタイムと日付の情報を返します。定義済みフォーマットまたは -format フラグで出力フォーマットを指定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    date (boolean): 現在の日付を返します。フォーマットはYYYY/MM/DDです。

    -----------------------------------------

    format (string): 日付と時間の表示方法を定義する文字列を指定します。以下のキーワードの出現場所は、すべて対応する値に置換されます。キーワード置換後YYYY現在の年(4桁)YY現在の年(下2桁)MM現在の月。該当する場合、先頭に0が追加されます。DD現在の日。該当する場合、先頭に0が追加されます。hh現在の時間。該当する場合、先頭に0が追加されます。mm現在の分。該当する場合、先頭に0が追加されます。ss現在の秒。該当する場合、先頭に0が追加されます。

    -----------------------------------------

    shortDate (boolean): 現在の日付を返します。フォーマットはMM/DDです。

    -----------------------------------------

    shortTime (boolean): 現在のタイムを返します。フォーマットはhh:mmです。

    -----------------------------------------

    time (boolean): 現在のタイムを返します。フォーマットはhh:mm:ssです。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def dbcount(enabled: bool = False,file: str = "",keyword: str = "",list: bool = False,maxdepth: int = 1,quick: bool = False,reset: bool = False,spreadsheet: bool = False) -> None:
    """
    dbcount コマンドは、カウント操作用に収集された統計のリストを出力して管理するのに使用します。これらの統計は、マウス ポインタ、文字列などの参考情報を追加したコード内の特定の位置のヒット リストとして表示します。-reset を指定しない場合は、統計が出力されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    enabled (boolean): カウンタを有効な状態に設定します(有効化は「オン」、無効化は「オフ」)。影響を受けるカウンタの全リストを返します。

    -----------------------------------------

    file (string): 有効なカウントオブジェクトの目的ファイル。コマンドウィンドウにリダイレクトするには、特殊名stdoutとstderrを使用します。NTでは、DeveloperStudioの出力ウィンドウのデバッグタブに出力する特殊名msdevも使用できます。

    -----------------------------------------

    keyword (string): 名前がこのキーワードに一致するカウンタのみを出力します(既定はすべて)。

    -----------------------------------------

    list (boolean): 使用可能なカウンタとその現在の有効なステータスをすべてリスト表示します(カウンタが無効な場合はこの操作のみ行えます)。

    -----------------------------------------

    maxdepth (uint): 移動およびレポートする最大レベル数。既定は0で、これは要求に応じて何度でも反復し続けることを意味します。

    -----------------------------------------

    quick (boolean): 完全なディテールの代わりに各カウンタタイプの概要のみを表示します。

    -----------------------------------------

    reset (boolean): すべてのカウンタを0にリセットし、最上位レベルを除くすべてのカウンタを除去します。影響を受けるカウンタの全リストを返します。

    -----------------------------------------

    spreadsheet (boolean): 通常のネストされた中カッコの代わりに、スプレッドシート形式で表示します。これには「カウントレベル1レベル2レベル3...」を含むヘッダー行があり、これを使用してスプレッドシート表でデータを直接開くことができます。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def dbfootprint(allObjects: bool = False,outputFile: str = "",type: str = "") -> None:
    """
    このコマンドにより、シーンの特定のパーツのメモリ使用状況を調べることができます。「タイプ」フラグを照会してどのような異なるタイプがあるのかを確認したり、特定のタイプを照会してそれが提供する情報の説明を取得します。すべての出力は JSON 形式であるため、処理や書式設定を簡単に行って関心のある部分をハイライトできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allObjects (boolean): 指定または選択したオブジェクトを無視し、該当するすべてのオブジェクトを計測します。「allObjects」の定義は計測するオブジェクトのタイプに応じて変わります。タイプの意味の詳細については、タイプのドキュメントを参照してください。既定では、オブジェクトを選択または指定していない場合、このフラグが設定されているものとして動作します。

    -----------------------------------------

    outputFile (string): 情報がダンプされるファイルの場所を指定します。既定では、コマンドから値が返されます。特別な名前であるstdout、cout、stderr、cerrを使用して、標準出力またはエラーの場所にリダイレクトします。

    -----------------------------------------

    type (string): 計測するオブジェクトのフットプリントのタイプを指定します。さまざまなタイプが実行時に登録され、値なしでこのフラグを照会することによって表示することができます。値を使って照会した場合は、どの特定のタイプが計測されるかの説明を取得できます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    Return Value:
    None: string要求されたオブジェクトのメモリ使用状況を示す JSON データstring[]フットプリントの計測を実施できるタイプのリスト(フラグなしの照会)string特定のタイプが計測するものの説明(「タイプ」フラグによる照会)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dbmessage(file: str = "",list: bool = False,monitor: bool = False,type: str = "") -> None:
    """
    dbmessage コマンドは、特定のメッセージ タイプ用のモニタ をインストールし、デバッグ情報をダンプしてメッセージ フローを調べられるように送信するのに使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    file (string): メッセージのモニタ情報の目的ファイル。コマンドウィンドウにリダイレクトするには、特殊名stdoutとstderrを使用します。NTでは、DeveloperStudioの出力ウィンドウのデバッグタブに出力する特殊名msdevも使用できます。既定値はstdoutです。

    -----------------------------------------

    list (boolean): 使用可能なメッセージタイプとその現在の有効なステータスをすべてリスト表示します。

    -----------------------------------------

    monitor (boolean): メッセージタイプのモニタ状態を設定します(有効化は「オン」、無効化は「オフ」)。状態の変化後にモニタされているすべてのメッセージタイプのリストを返します。

    -----------------------------------------

    type (string): 名前がこのキーボードと一致するメッセージのみをモニタします(既定ではすべて)。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def dbpeek(allObjects: bool = False,argument: str = "",count: int = 1,evaluationGraph: bool = False,operation: str = "",outputFile: str = "") -> None:
    """
    dbpeek コマンドは、注目する情報について Maya データを分析するために使用します。分析できる情報のタイプの詳細については、フラグの説明を参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allObjects (boolean): 指定または選択したオブジェクトを無視し、該当するすべてのオブジェクトを調べます。「allObjects」の定義は実行するピーク操作に応じて変わります。指定した操作での意味の詳細については、フラグのドキュメントを参照してください。既定では、オブジェクトを選択または指定していない場合、このフラグが設定されているものとして動作します。

    -----------------------------------------

    argument (string): 操作に渡される1つまたは複数の引数を指定します。argument文字列に使用できる値は、値が適用されるフラグ内に記述します。引数自体が値を取る場合、値の形式は「argname=argvalue」になります。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    count (uint): テストで使用する数を指定します。テストによって異なる用途で数が使用され、操作を照会すると値がどのように解釈されるのかが分かります。たとえば、パフォーマンステストではテストで実行する反復回数として使用され、出力操作では生成する出力量を制限するために使用されます。

    -----------------------------------------

    evaluationGraph (boolean): 明示的に評価グラフの一部として指定されていないすべてのノードを無視します。通常、これは、アニメーションによって直接的または間接的に影響を受けるノードを意味します。DGの構造がEMの構造と異なる場合(プラグ設定など)に、操作をEM固有に調整することもできます。これは、「allObjects」フラグの使用を含む、現在選択されているノードに関するフィルタです。

    -----------------------------------------

    operation (string): 実行するピーク操作を指定します。さまざまな操作が実行時に登録され、値なしでこのフラグを照会することによって表示することができます。値を使用して照会する場合、ピーク操作が受け取る詳細の値と、ピーク操作の内容の説明が得られます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    outputFile (string): 情報がダンプされるファイルの場所を指定します。既定では、コマンドから値が返されます。コマンドウィンドウにリダイレクトするには、特殊名stdoutとstderrを使用します。Windowsのデバッグでは、特殊名msdevを使用し、VisualStudioの出力ウィンドウ内のデバッグタブに出力を指示することができます。

    -----------------------------------------

    Return Value:
    None: string[]操作の照会では、使用可能な操作を含む文字配列が得られます。string[]引数の照会では、指定した操作で使用できる引数の定義を含む文字配列が得られます。string出力ファイルなしで特定の操作を照会すると、その操作に関するヘルプ情報を含む文字列が返されます。int出力ファイルありで特定の操作を照会すると、その操作に関するヘルプ情報がダンプされ、発生したエラーの数が返されます。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dbtrace(filter: str = "",info: bool = False,keyword: str = "",level: int = 1,mark: bool = False,off: bool = False,output: str = "",timed: bool = False,title: str = "",verbose: bool = False) -> None:
    """
    dbtrace コマンドを使用して、トレース オブジェクトを操作します。keyword は、変更対象のトレース オブジェクトを示す、唯一の必須引数です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    filter (string): これらのトレースオブジェクトにフィルタオブジェクトを設定します(「dgfilter」を参照)。

    -----------------------------------------

    info (boolean): 照会モードでは、トレースオブジェクトの簡単な説明を返します。

    -----------------------------------------

    keyword (string): 作用させるトレースオブジェクトのキーワード照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    level (uint): 作用させるトレーシングオブジェクトのレベル。level以上のレベルが作用されます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    mark (boolean): 定義済みトレースオブジェクトのすべての出力にマークを表示します。

    -----------------------------------------

    off (boolean): トレースをオフに切り替えます。省略した場合はオンになります。

    -----------------------------------------

    output (string): 作用させるトレースオブジェクトの目的ファイル。コマンドウィンドウにリダイレクトするには、特殊名stdoutとstderrを使用します。Windowsでは、特殊名msdevを使用し、VisualStudioの出力ウィンドウ内のデバッグタブに出力を指示することができます。

    -----------------------------------------

    timed (boolean): 指定したトレースオブジェクトの出力にあるトリミング情報のオンとオフを切り替えます。

    -----------------------------------------

    title (string): 定義済みトレースオブジェクトのすべての出力にタイトルマークを表示します。

    -----------------------------------------

    verbose (boolean): オンにするだけでなく、出力およびフィルタの照会にすべてのトレースを含めます。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dgdirty(allPlugs: bool = False,clean: bool = False,implicit: bool = False,list: str = "",propagation: bool = False,showTiming: bool = False,verbose: bool = False) -> None:
    """
    dgdirty コマンドは、ノードまたはプラグ上でディペンデンシー グラフのダーティ メッセージを強制するために使用します。評価の問題を検索するデバッグに使用します。ノードを指定しないと、現在のセレクション リストが使用されます。list フラグを使用すると、現在ダーティとマークされているデータのリストが返されます(clean フラグも使用した場合は、クリーンなデータも返されます)。返される値は、クリーン/ダーティな接続の両端にある、それ自身がダーティ/クリーンなプラグの名前です。ノード上のクリーン/ダーティなデータの場所を表すこともあります。このオプションを all フラグと一緒に使用するとリストが長くなる可能性があるため、注意してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allPlugs (boolean): 選択したオブジェクトや指定したオブジェクトは無視され、すべてのプラグがダーティ(またはクリーン)になります。

    -----------------------------------------

    clean (boolean): このフラグが設定されると、アトリビュートがクリーンになります。設定しない場合、アトリビュートはダーティに設定されます。

    -----------------------------------------

    implicit (boolean): このフラグが設定されている場合は、暗黙のノードまたは既定のノードも処理できます。このフラグが設定されていない場合は、効率化のためにこれらのノードはスキップされます。

    -----------------------------------------

    list (string): このフラグが指定されていると、ダーティ/クリーンなメッセージを送信する代わりに現在ダーティ/クリーンなオブジェクトのリストが返されます。返される値をガイドして絞り込むにはallPlugsおよびcleanフラグを使用します。フラグの値は、何がレポートされるかを示します。「data」または「d」=ダーティ/クリーンなデータを持つプラグを表示する「plug」または「p」=ダーティ/クリーンな状態のプラグを表示する「connection」または「c」=ダーティ/クリーンな状態の接続を持つプラグを表示するこのフラグを照会すると、このフラグの有効値をすべて特定できます。既に設定された値を指定してこのフラグを照会すると、この値の意味に関する説明を表示できます。「p」および「c」モードは、接続を持つプラグ、または非標準の状態情報を持つプラグに限定されます。その他のアトリビュートには、データはありますが、チェックする状態情報がありません。配列アトリビュートの場合は、現在設定されている値を持つ子のみが考慮されます。使用可能な子のリストを更新するための評価は試行されません。たとえば、トランスフォームT1、シェイプS1のDAGの場合、インスタンス化されたアトリビュートS1.wm[0]がレポートされます。スクリプトで2番目のインスタンスT2->S1を作成し、すぐにプラグを再びリストしてから評価を行うと、引き続きS1.wm[0]のみが表示されます。新しいS1.wm[1]は、評価によって作成されるまではレポートされません。評価は通常、リフレッシュ、特定のgetAttrコマンド、またはエディタの更新によって行われます。リストは、選択したノードのみに対応します。ダーティなメッセージが送信される場合とは異なり、下流には伝わりません。

    -----------------------------------------

    propagation (boolean): このフラグが設定されている場合、グラフをフローするというダーティなメッセージの機能が有効なままになります。

    -----------------------------------------

    showTiming (boolean): このフラグを使用すると、ダーティなメッセージの伝播に要する時間が表示されます。

    -----------------------------------------

    verbose (boolean): ダーティに設定されているすべてのプラグが標準出力にプリントされます。

    -----------------------------------------

    Return Value:
    None: string[]プラグ リスト モードでは、ダーティ/クリーンなプラグのリストです。string[]データ リスト モードでは、ダーティ/クリーンなデータを持つプラグのリストです。string[]接続リスト モードでは、ダーティ/クリーンな接続プラグのペアです。int通常モードでは、送信されたダーティ/クリーンなメッセージの数です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dgeval(src: bool = False,verbose: bool = False) -> None:
    """
    dgeval コマンドは、ノードまたはプラグのディペンデンシー グラフ評価を強制するために使用します。伝播の問題を検索するデバッグに使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    src (boolean): このフラグは現在サポートしていません。使用しないでください。

    -----------------------------------------

    verbose (boolean): このフラグを使用すると、評価結果が標準出力にプリントされます。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def dgfilter(attribute: str = "",list: bool = False,logicalAnd: Tuple[str, str] = tuple("", ""),logicalNot: str = "",logicalOr: Tuple[str, str] = tuple("", ""),name: str = "",node: str = "",nodeType: str = "",plug: str = "") -> None:
    """
    dgfilter コマンドを使用して、特定の基準に基づいて DG オブジェクトを選択するディペンデンシー グラフ フィルタを定義します。このコマンドで、オブジェクトをフィルタすることも、dbtrace オブジェクトにアタッチしてトレースする出力をフィルタすることもできます。オブジェクトを指定した場合、それらのオブジェクトにフィルタが適用され、通過したかどうかを示すブーリアン値が返されます。指定しなかった場合、フィルタの名前が返されます。無効なフィルタの場合、すべてのオブジェクトが通過します。複数のオブジェクトの場合、戻り値は全オブジェクトの戻り値の論理積です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): アトリビュート名がパターンに一致するオブジェクトを選択します。

    -----------------------------------------

    list (boolean): 使用可能なフィルタをリスト表示します。-nameフラグと一緒に使用すると、フィルタの説明を表示します。

    -----------------------------------------

    logicalAnd ([string, string]): 2つのフィルタの論理積です。

    -----------------------------------------

    logicalNot (string): 2つのフィルタの否定です。

    -----------------------------------------

    logicalOr ([string, string]): 2つのフィルタの論理和です。

    -----------------------------------------

    name (string): FILTERという名前のフィルタを使用します(または、その名前のフィルタを新規作成します)。オブジェクトを指定していない場合、フィルタに指定した名前が返されます。

    -----------------------------------------

    node (string): ノード名がパターンに一致するオブジェクトを選択します。

    -----------------------------------------

    nodeType (string): ノードタイプ名がパターンに一致するオブジェクトを選択します。

    -----------------------------------------

    plug (string): プラグ名がパターンに一致するオブジェクトを選択します。

    -----------------------------------------

    Return Value:
    None: stringフィルタを作成、またはフィルタ情報を取得する場合string[]フィルタをリスト表示する場合booleanフィルタを適用する場合
    """
    pass

    
def dgInfo(allNodes: bool = False,connections: bool = False,dirty: bool = False,nodes: bool = False,nonDeletable: bool = False,outputFile: str = "",propagation: bool = False,short: bool = False,size: bool = False,subgraph: bool = False,type: str = "") -> None:
    """
    このコマンドは、DG に関する情報をプレーン テキストで出力します。出力される情報の範囲は、all フラグを使用した場合はグラフ全体、ノードやプラグを指定した場合はコマンド ライン上のノードやプラグ、そしてセレクション リストの順序で出力されます。接続の各プラグには、出力ラインの末尾に一緒に表示される状態情報が 2 つあります。2 つの各状態の 2 つの有効値が表示されます。DG がこれらの値からデータをプルした場合(通常は評価を使用)、またはこれらの値を使用してダーティ メッセージをプッシュした場合、値は更新されます。接続を通してデータをプルする方法には細かな点がいくつかありますが、わかりやすくするためにこれを「評価」と呼ぶことにします表示される値は、CLEAN または DIRTY の後に PROP または BLOCK が続きます。最初のキーワードの意味は、次のとおりです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allNodes (boolean): グラフ全体をコンテキストとして使用します。

    -----------------------------------------

    connections (boolean): 接続情報を出力します。

    -----------------------------------------

    dirty (boolean): ダーティかクリーンのノード、プラグ、接続のみを出力します。既定では両方を出力します。

    -----------------------------------------

    nodes (boolean): 指定したノードを出力します。-allを使用した場合はグラフ全体を出力します。

    -----------------------------------------

    nonDeletable (boolean): 削除できないノードも含まれます(通常は無視します)。

    -----------------------------------------

    outputFile (string): STDERRではなく、ファイルFILEに出力を送信します。

    -----------------------------------------

    propagation (boolean): 伝播、非伝播のノード、プラグ、接続のみを出力します。既定では両方を出力します。

    -----------------------------------------

    short (boolean): ロングフォーマットではなく、ショートフォーマットで出力します。

    -----------------------------------------

    size (boolean): 指定したすべてのノードのデータブロックサイズを表示します。選択したすべてのノードのタプルの値が返されます(NumberOfNodes、NumberOfDatablocks、TotalDatablockMemory)。

    -----------------------------------------

    subgraph (boolean): ノードまたはプラグが影響するサブグラフを出力します。-allを使用した場合は、サブグラフにグループ化されたグラフにすべてのノードを出力します。

    -----------------------------------------

    type (string): NODETYPEタイプのノードのみを表示するよう、出力をフィルタします。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def dgmodified() -> None:
    """
    dgmodified コマンドを使用して、ディペンデンシー グラフ内の修正されたノードを検索します。これは、file new がシーンに変更がないときに保存を要求しているとき、インスタンスを修正する場合に便利です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string[]修正したすべてのノードのリスト
    """
    pass

    
def dgtimer(combineType: bool = False,hide: str = "",hierarchy: bool = False,maxDisplay: int = 1,name: str = "",noHeader: bool = False,outputFile: str = "",overhead: bool = False,rangeLower: float = 1.0,rangeUpper: float = 1.0,reset: bool = False,returnCode: str = "",returnType: str = "",show: str = "",sortMetric: str = "",sortType: str = "",threshold: float = 1.0,timerOff: bool = False,timerOn: bool = False,trace: bool = False,type: str = "",uniqueName: bool = False,updateHeatMap: int = 1) -> None:
    """
    このコマンドは、ノード単位でタイマーを管理することにより、ディペンデンシー グラフ(DG)ノードのパフォーマンスを計測します。論理的には、各 DG ノードに関連付けられたタイマーがあり、これがプラグ上での各種操作にかかる実時間の合計を記録します。この時間計測は、ノードが起動するエクスプレッションに含まれるエクスプレッションが実行する MEL コマンドのような、操作のためにノードにデータをコピーする損失時間を含みます。また、fileTexture ノードがディスクからイメージ ファイルをロードする場合などの待ち時間も含みます。計算、描画、およびダーティな伝播を含むほぼすべての DG 操作をレポートします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    combineType (boolean): animCurveTAなど、同タイプのすべてのノードが、出力ディスプレイで結合されます。

    -----------------------------------------

    hide (string): このフラグは-showの反対です。-showと同様に、何度でも指定できる照会専用のフラグです。-hideを指定すると、-hideフラグでリストした列以外のすべての列が表示されます。

    -----------------------------------------

    hierarchy (boolean): ディペンデンシーグラフの階層が作用されるように指定することができます。「-reset-hierarchy-nameball」とすれば、「ball」という名前のノードと、ディペンデンシーグラフにあるすべての子孫のタイマーがリセットされます。

    -----------------------------------------

    maxDisplay (int): 処理コストが最も高い「n」エントリのみを出力ディスプレイに出力するように、ディスプレイを切り捨てます。

    -----------------------------------------

    name (string): -resetや-queryと一緒に使用し、タイマー値をリセットまたは出力するノード名を指定します。単一のタイマーを照会する場合は、一列のみ出力します(すなわち、グローバルタイマーとヘッダーは省略されます)。「-outputFileMEL」オプションを使用して、出力をスクリプトエディタ(ScriptEditor)ウィンドウに強制し、MELスクリプトで値を簡単に取得できます。注:-nameフラグと-typeフラグを一緒に使用することはできません。

    -----------------------------------------

    noHeader (boolean): -queryフラグと一緒に使用し、ヘッダー情報やフッター情報の出力を防止します。ノード単位のタイミングデータのみが出力されます。このオプションは、-outputFileオプションでディスク上のファイルに照会結果を出力する場合など、出力の解析をを容易にします。

    -----------------------------------------

    outputFile (string): タイミングまたはトレースの出力を表示する場所を指定します。このフラグは文字列引数を取ります。引数として有効な値は以下の3つです。ディスク上のファイル名。キーワード「stdout」。この場合、出力結果はターミナルウィンドウ(LinuxとMacintosh)またはステータスウィンドウ(Windows)に表示されます。キーワード「MEL」。この場合、出力結果はMayaのスクリプトエディタ(-queryでのみサポート)に表示されます。「stdout」が既定の動作です。このフラグは-queryフラグや-traceフラグと一緒に使用できます。-traceフラグと一緒に使用した場合、すべてのトレース結果は-outputFile(または-outputFileを省略した場合はstdout)で指定した出力先に表示されます。トレース操作の結果は、再度-traceフラグと-outputFileフラグを指定するまでは引き続きこの出力先に出力されます。-queryフラグと一緒に使用した場合、タイミングの出力結果は-outputFile(または-outputFileを省略した場合は「stdout」)で指定した出力先に出力されます。以下にフラグ-query、-trace、-outputFileの使用例をいくつか挙げます。例:タイミング情報をディスク上の単一のファイルに出力:dgtimer-on;//タイミングをオンにします。アニメート化したシーンコンテンツをいくつか作成します;play-wait;//シーンを以下で再生します。dgtimer-query-outputFile"/tmp/timing.txt"//ノードのタイミング情報をディスク上のファイルに出力します。例:トレース情報をディスク上の単一のファイルに出力:dgtimer-on;//タイミングをオンにします。アニメート化したシーンコンテンツをいくつか作成します;dgtimer-traceon-outputFile"/tmp/trace.txt"//トレースをオンにして結果をファイルに出力します。play-wait;//シーンを再生します。トレース情報を/tmp/trace.txtに出力します。dgtimer-query;//しかし、タイミング情報はターミナルウィンドウに出力します。play-wait;//シーンを再度再生し、トレース情報を/tmp/trace.txtに出力します。例:2つの実行結果のトレース情報とタイミング情報を別個のファイルに出力:dgtimer-on;//タイミングをオンにします。アニメート化したシーンコンテンツをいくつか作成します;dgtimer-traceon-outputFile"/tmp/trace1.txt"//トレースをオンにして結果をファイルに出力します。play-wait;//シーンを再生します。dgtimer-query-outputFile"/tmp/query1.txt"//ノードのタイミング情報を別のファイルに出力します。dgtimer-reset;dgtimer-traceon-outputFile"/tmp/trace2.txt"//トレース結果を別のファイルに出力します。play-wait;//シーンを再生します。dgtimer-query-outputFile"/tmp/query2.txt"//ノードのタイミング情報を別のファイルに出力します。ヒントとコツ:タイミングの結果をスクリプトエディタに出力すると、その結果をMELで利用しやすくなります。例:string$timing[]=`dgtimer-query-outputFileMEL`-outputFileを-traceと一緒に指定した場合、-queryで指定したものとはまったく関係なくなることに注意してください。指定したファイルがすでに存在する場合、データを出力する前にまずそのファイルが削除されます(そのファイルが書き込み不可の場合、代わってエラーが発生します)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    overhead (boolean): タイミングオーバーヘッドの計測をオン/オフにします。通常の環境では、タイミングオーバーヘッドの合計は計測されるイベントより小さいですが、複雑なシーンでは、計測可能なオーバーヘッドが見つかることがあります。既定では、このオプションはオフです。有効にするには、タイミングの開始前に「dgtimer-overheadtrue」を指定します。タイミングを照会すると、dgtimer出力のSECTION1.2にオーバーヘッドがレポートされます。個々の操作には分けられません。

    -----------------------------------------

    rangeLower (float): このフラグは、照会で表示するノードの範囲を制限したり、-updateHeatMapと一緒に使用してヒートマップを制限したりするのに使用します。この値は処理されるノードの下限のパーセンテージです。範囲の下限を設定する-rangeLowerフラグもあります。既定値は0で、範囲の上限より下のタイミング値を持つすべてのノードが対象になります。

    -----------------------------------------

    rangeUpper (float): このフラグは、照会で表示するノードの範囲を制限したり、-updateHeatMapと一緒に使用してヒートマップを制限したりするのに使用します。この値は処理されるノードの上限のパーセンテージです。範囲の下限を設定する-rangeLowerフラグもあります。既定値は100で、範囲の下限より上のタイミング値を持つすべてのノードが対象になります。

    -----------------------------------------

    reset (boolean): ノードタイマーをゼロにリセットします。既定では、グローバルタイマーだけでなく全ノードのタイマーがリセットされますが、-nameフラグや-typeフラグで指定した場合、指定したノードのタイマーのみがリセットされます。

    -----------------------------------------

    returnCode (string): このフラグは、より一般的な-returnTypeフラグに置き換えられました。-returnCodeフラグは計算メトリックにしか使用できなかったためです。これは下位互換性のためだけに残してあります。今後のリリースでは除去される予定です。次に便利な比較表を示します。ノードの合計数を取得するには:古い方法:dgtimer-rcnodecount-q;//Result:325//新しい方法:dgtimer-returnTypetotal-sortTypenone-q;//Result:325//古い方法:dgtimer-rccount-q;//Result:1270//count計算列の合計を取得するには:新しい方法:dgtimer-returnTypetotal-sortMetriccompute-sortTypecount-q;//Result:1270//古い方法:dgtimer-rcselftime-q;//Result:0.112898//self計算列の合計を取得するには:新しい方法:dgtimer-returnTypetotal-sortMetriccompute-sortTypeself-q;//Result:0.112898//

    -----------------------------------------

    returnType (string): このフラグは、dgtimerコマンドが返すdouble値が何を表すかを指定します。既定では、SECTION1に表示される、ノード単位の出力のソート列のグローバル合計が返されます(ソート列は-sortMetricおよび-sortTypeフラグで指定できます)。ただし、合計の代わりに列の個々のエントリを返すように指定することもできます。このフラグは、おもに出力を強制せずに照会で使用するのに役立ちます。フラグに値「total」を指定すると列の合計のみが表示され、「all」を指定すると個々のエントリがすべて表示されます。たとえば、描画のself時間の合計以外は何も出力したくない場合には、単純に次のように指定します。dgtimer-returnTypetotal-sortMetricdraw-sortTypeself-threshold100-noHeader-query;//Result:7718.01//反対に個々のエントリを取得するには、上記のクエリを次のように変更します。dgtimer-returnTypeall-sortMetricdraw-sortTypeself-threshold100-noHeader-query;//Result:6576.0121.9111.171108.92//特定のノードの子を含めたダーティ時間を取得するには、-returnTypeallと-nameを一緒に使用します。dgtimer-name"virginia"-returnTypeall-sortMetricdirty-sortTypeinclusive-threshold100-noHeader-query;注:ノードの合計数を取得するには、「-sortTypenone-returnTypetotal」を使用します。各ノードのオン/オフ状態を取得するには、「-sortTypenone-returnTypeall」を使用します。

    -----------------------------------------

    show (string): -queryフラグと一緒に使用し、出力のノード単位のセクションに表示される列を指定します。-showには次の引数を使用できます。「all」(すべての列を出力)、「callback」(評価ではなくノードのコールバック処理にかかる時間を表示)、「compute」(ノードの計算にかかる時間を表示)、「dirty」(ノードの代わりにダーティの伝播にかかる時間を表示)、「draw」(ノードの描画にかかる時間を表示)、「compcb」(計算のためにノードのコールバック処理にかかる時間を-showフラグは複数回使用できますが、-hideを使用して指定することはできません。既定では、-show、-hide、または-sortを指定した場合の有効な表示モードは、「dgtimer-showcompute-query」です。

    -----------------------------------------

    sortMetric (string): -queryフラグと一緒に使用し、出力のノード単位のセクションを生成する場合にどのメトリックでソートするかを指定します(例:「draw」時間)。-sortTypeフラグを指定して、どのタイマーでソートするか定義することもできます。たとえば、「dgtimer-sortMetricdraw-sortTypecount-query」は、各ノードを描画した回数によって出力をソートします。-sortMetricと-sortTypeはどちらもオプションで、どちらか1つのみ指定することもできます。-sortMetricフラグは1回しか指定できません。このフラグは次の引数をとります。「callback」(ノードのコールバック処理中にかかる時間でソート)、「compute」(ノードの計算にかかる時間でソート)、「dirty」(ノードの代わりのダーティの伝播にかかる時間でソート)、「draw」(ノードの描画にかかる時間でソート)、「fetch」(データをデータブロックからコピーするのにかかる時間でソート)。-sortMetricを省略すると、既定として最初に表示された列でソートします。sortMetricは、-showおよび-hideフラグによる列の表示/非表示には依存しません。非表示の列でソートすることも可能です。-sortMetricおよび-sortTypeで選択した列が、MELコマンド行のdgtimerコマンドで返される合計列になります。このフラグは、-updateHeatMapと一緒に使用してヒートマップを構築するメトリックを指定することもできます。

    -----------------------------------------

    sortType (string): -queryフラグと一緒に使用して、出力のノード単位のセクションを生成するときに、どのタイマーでソートするかを指定します(例:「self」時間)。-sortMetricフラグを指定して、どのメトリックでソートするか定義することもできます。たとえば、「dgtimer-sortMetricdraw-sortTypecount-query」は、各ノードを描画した回数によって出力をソートします。-sortMetricと-sortTypeはどちらもオプションで、どちらか1つのみ指定することもできます。-sortTypeフラグは1回しか指定できません。このフラグは次の引数をとります。「self」(セルフタイムでソート。これはノードに特定した時間で、その子は含まない)、「inclusive」(ノードの子を含む時間でソート)、「count」(ノードが起動された回数でソート)、「none」(self時間でソートするが、ノード単位の表示でPercent列とCumulative列は表示しない、またコマンドラインにMayaのノードの合計数を返す)。-sortTypeを省略すると、既定でself時間でソートされます。-sortMetricおよび-sortTypeで選択した列が、MELコマンド行のdgtimerコマンドで返される合計列になります。リストのSECTION1に表示されるグローバル合計が返されます。例外として、「-sortTypenone」を使用すると、代わりにMayaのノード数が返されます。このフラグは、-updateHeatMapと一緒に使用してヒートマップを構築するメトリックを指定することもできます。

    -----------------------------------------

    threshold (float): 値がしきい値より小さくなると、表示を切り捨てます。しきい値はソートに使用するすべてのタイマーに適用されます。たとえば、ソートキーがself計算時間(つまり、-sortMetricが「compute」で-sortTypeが「self」)で、しきい値のパラメータが20.0の場合、計算結果のself時間が20.0以上のノードのみ表示します。（-thresholdは絶対時間を使用することに注意してください。これと似た-rangeUpperおよび-rangeLowerパラメータは、パーセンテージを使用して範囲を指定します）。

    -----------------------------------------

    timerOff (boolean): ノードタイマーをオフにします。既定ではすべてのノード上のタイマーがオフになりますが、-nameフラグか-typeフラグで指定した場合は、指定したノードタイマーのみがオフになります。すべてのノード上のタイマーがオフになると、グローバルタイマーもオフになります。

    -----------------------------------------

    timerOn (boolean): ノードタイマーをオンにします。既定ではすべてのノード上のタイマーがオンになりますが-nameフラグか-typeフラグで指定した場合は、指定したノードタイマーのみがオンになります。このコマンドによってグローバルタイマーもオンになります。タイマーをオンにしても、タイマーはゼロにリセットされません。タイマーをリセットするには、-resetフラグを使用します。タイマーがリセットされない理由は、タイミングを任意でオンとオフに切り替えて、既存のタイマー値に追加できるようにするためです。

    -----------------------------------------

    trace (boolean): トレーシングの詳細設定のオンオフを切り替えます。既定では、トレーシングはオフです。有効にすると、時間を記録できる各操作の開始時と終了時にログが記録されます。このフラグは-outputFileと一緒に使用して、出力結果の生成先を指定することができます。次に出力のフォーマット例を示します。dgtimer:begin:compute3particleShape1DeformedparticleShape1Deformed.lastPosition上記は、操作の開始を記録する-traceがtrueの場合の出力例です。各フィールドの詳細を次に示します。「dgtimer:begin:」文字列は、これが操作記録の開始であることを示す識別マーカーです。例中の2番目の引数「compute」は、操作のメトリックです。「dgtimer-q」に-showフラグを指定すると、指定した各メトリックの出力を表示できます。後に続く整数(この例では3)は操作スタックの深さで、3番目の引数はノードの名前です(particleShape1Deformed)。4番目の引数はメトリックによって異なります。「compute」では、計算するプラグ名を指定します。「callback」では、Mayaの内部的なコールバック名です。「dirty」では、ダーティの伝播元のプラグ名です。dgtimer:end:compute3particleShape1Deformed0.0003056850.000305685上記は操作の終了の記録です。「compute」、「3」、「particleShapeDeformed」引数については、上述の「dgtimer:begin」の概要で説明しました。2つの浮動小数点の引数は、秒単位で計測された操作のself時間とinclusive時間です。inclusive計測では合計時間をリストします。これはこの操作の「dgtimer:begin:」エントリと一致します。一方、self計測はinclusive時間から現在の操作の実行中に発生した子の操作によって消費された時間を引いた時間をリストします。このマニュアルの別の場所で注記したように、この2つの時間は「実経過時間」で、Mayaがアイドル状態かシステムコールを実行中かに関係なく、すべての時間を含めた経過時間を計測します。dgtimerは、グローバルメッセージコールバックなど、Mayaのノード以外の精度も計測できるので、このような場合は通常ノード名が表示される場所に「-」を表示します。「-」は「適用不可」を意味します。

    -----------------------------------------

    type (string): -resetフラグや-queryフラグと一緒に使用して、タイマー値をリセットまたは出力するノードタイプ(animCurveTAなど)を指定します。照会時には、-combineTypeフラグを使用すると同じタイプの全ノードが1つのエントリに統合され、一列のみを出力します(すなわち、グローバルタイマーやヘッダーは省略されます)。注:-nameフラグと-typeフラグを一緒に使用することはできません。

    -----------------------------------------

    uniqueName (boolean): 出力にリストされるDAGノードを固有の名前でリストするように指定することができます。ノード名の代わりに、オブジェクトへのDAGのフルパスを出力します。

    -----------------------------------------

    updateHeatMap (int): 指定したパラメータに基づいてMayaのヒートマップを再構築するよう強制します。ヒートマップは内部のdgtimer構造で、ハイパーグラフ(HyperGraph)エディタで表示中に、強度値をカラーマップエントリにマッピングするのに使用します。ヒートマップ表示モードを使用するすべてのエディタが1つのヒートマップを共有します。ヒートマップを更新すると、すべてのノード上のタイマー値が分析され、ヒートマップのエントリが均等に分配されます。パラメータはマップの分割数(整数)で、これはヒートマップの表示に使用可能なカラー数と同じにする必要があります。このフラグを-rangeLowerおよび-rangeUpperフラグと一緒に使用して、表示可能な範囲が指定した比率の範囲内に収まるように制限できます。dgtimerコマンドは、指定したメトリックとタイプに対して、Mayaのすべてのノードの最大タイミング値を返します。注:表示範囲に0が含まれる場合は、ヒートマップ内の特殊な0番目(正確にゼロ)のスロットを使用できます。

    -----------------------------------------

    Return Value:
    None: float既定は、すべてのノードの self 計算時間の合計です。-returnType、-sortMetric、および -sortType フラグにより変更できます。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def error(noContext: bool = False,showLineNumber: bool = False) -> None:
    """
    error コマンドは、ユーザが自分で記述したスクリプトからエラー メッセージを出力し、ランタイム エラーが発生した場合の実行を制御できるように用意されています。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    noContext (boolean): エラーメッセージにコンテキスト情報を含めません。

    -----------------------------------------

    showLineNumber (boolean): 廃止されました。Mayaの次バージョンでは削除予定です。代わりに、行番号を表示できるようにするチェックボックスをスクリプトエディタで使用します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def fcheck() -> None:
    """
    イメージを別のウィンドウに表示するために fcheck プログラムを起動します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def findType(deep: bool = False,exact: bool = False,forward: bool = False,type: str = "") -> None:
    """
    findType コマンドは、特定のノードのディペンデンシー サブグラフを検索し、指定したタイプのすべてのノードを見つけます。検索は、上流(入力接続)または下流(出力接続)に向かって行うことができます。一致するノードを検索する場合、プラグ/アトリビュートの依存関係は考慮されません。考慮されるのは接続のみです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    deep (boolean): 最初のノードだけではなく、指定したタイプのすべてのノードを検索します。

    -----------------------------------------

    exact (boolean): ノード階層内のいずれかではなく、ノードタイプを正確に一致させます。

    -----------------------------------------

    forward (boolean): 一致するノードをグラフ内の後方(上流)でなく前方(下流)に向かって探します。

    -----------------------------------------

    type (string): 検索するノードのタイプです(例:transform)。このフラグは必須です。

    -----------------------------------------

    Return Value:
    None: string[]指定したノードに接続されている、要求されたタイプのノードのリストです。
    """
    pass

    
def flushUndo() -> None:
    """
    元に戻す待ち行列からすべてを除去して、メモリを解放します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def hardware(brdType: bool = False,cpuType: bool = False,graphicsType: bool = False,megaHertz: bool = False,numProcessors: bool = False) -> None:
    """
    マシンで使用可能なハードウェアの記述を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    brdType (boolean): CPUマザーボードを識別するIP番号を返します。

    -----------------------------------------

    cpuType (boolean): CPUのタイプを返します。

    -----------------------------------------

    graphicsType (boolean): グラフィックスハードウェアタイプを識別する文字列を返します。

    -----------------------------------------

    megaHertz (boolean): CPUチップの速度を識別する文字列を返します。

    -----------------------------------------

    numProcessors (boolean): プロセッサの数を識別する文字列を返します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def help(documentation: bool = False,language: str = "",list: bool = False,popupDisplayTime: int = 1,popupMode: bool = False,popupPauseTime: int = 1,popupSimpleMode: bool = False,rolloverMode: bool = False,syntaxOnly: bool = False) -> None:
    """
    引数がない場合、ヘルプにはヘルプの使用方法が表示されます。コマンド名を指定すると、ヘルプはそのコマンドのクイック ヘルプを返します。他のフラグは、オンライン マニュアルを開いたり、使用可能なコマンドをパターンに基づいてリストしたりするために使うことができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    documentation (boolean): ブラウザを使用し、指定した1つのコマンド名に関連したマニュアルを表示します。パターンをこのフラグと一緒に使うことはできません。コマンド名が指定されていない場合、このフラグはマニュアルのメインインデックスに進みます。

    -----------------------------------------

    language (string): このコマンドのヘルプを指定した言語で表示します。有効な値は、「mel」と「python」です。既定はMelです。docフラグと一緒に使用します。

    -----------------------------------------

    list (boolean): 名前が正規表現に一致するコマンドをすべてリスト表示します。正規表現を最初の引数として指定したコマンドに渡します。

    -----------------------------------------

    popupDisplayTime (uint): ポップアップヘルプが表示される時間を秒単位で設定します。既定は4秒です。このフラグは、listフラグとdocフラグとは相互に排他的です。

    -----------------------------------------

    popupMode (boolean): ポップアップヘルプモードをオンまたはオフにします。このフラグは、listフラグとdocフラグとは相互に排他的です。

    -----------------------------------------

    popupPauseTime (uint): ポップアップヘルプが表示されるまでの時間をミリ秒単位で設定します。既定は800ミリ秒です。このフラグは、listフラグとdocフラグとは相互に排他的です。

    -----------------------------------------

    popupSimpleMode (boolean): 簡易ポップアップヘルプモードをオンまたはオフにします。設定すると、ツールクリップに名前とキーボードショートカットだけが表示されます。

    -----------------------------------------

    rolloverMode (boolean): ロールオーバーヘルプモードをオンまたはオフにします。このフラグは、listフラグとdocフラグとは相互に排他的です。

    -----------------------------------------

    syntaxOnly (boolean): その他のフラグを指定しないと、クイックヘルプの構文部分のみを返します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def hitTest() -> None:
    """
    hitTest コマンドは、指定したコントロール内のポイントをヒット テストし、ポイントの下にある項目のリストを返します。ポイントは左上隅を原点(0,0)とし、ピクセルで指定されます。この位置は、ドロップ コールバックの座標と互換性があります。返される項目のタイプは、特定のコントロールに依存します。現在、ヒット テストはすべてのコントロールによってサポートされていません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string[]ヒット ポイントの下の項目
    """
    pass

    
def memory(adjustedVirtualMemory: bool = False,asFloat: bool = False,debug: bool = False,freeMemory: bool = False,gigaByte: bool = False,heapMemory: bool = False,kiloByte: bool = False,megaByte: bool = False,pageFaults: bool = False,pageReclaims: bool = False,physicalMemory: bool = False,processVirtualMemory: bool = False,summary: bool = False,swapFree: bool = False,swapLogical: bool = False,swapMax: bool = False,swapPhysical: bool = False,swapReserved: bool = False,swapVirtual: bool = False,swaps: bool = False) -> None:
    """
    メモリの使用可能量と使用量に関する、必要不可欠な統計の照会に使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustedVirtualMemory (boolean): プロセスによって割り当てられた調整済み仮想メモリのサイズを返します。調整はアプリケーションが起動されたときにオフセットを計算することで行われ、調整された値を与えるためにプロセスの仮想メモリから差し引かれます。返されるサイズは、たとえばディスプレイドライバが広い範囲のメモリアドレスを予約できるプラットフォームなど、場合によってはより信頼性の高いプロセスによって使用されるメモリ量の近似値です。そのため、これらのアドレスが実際には使用されなくても、プロセスの仮想メモリのサイズが大きくなります。

    -----------------------------------------

    asFloat (boolean): 数値が整数ではなくfloatとして返されるようになります。これは、単位サイズフラグを使用するときに失われる一部の有効数字を保持する場合に役立ちます。

    -----------------------------------------

    debug (boolean): アリーナメモリのデバッグ統計情報を出力します(存在する場合)。

    -----------------------------------------

    freeMemory (boolean): 空きメモリのサイズが返されます。

    -----------------------------------------

    gigaByte (boolean): メモリサイズがギガバイト(1024*1024*1024バイト)単位で返されます。

    -----------------------------------------

    heapMemory (boolean): メモリヒープのサイズが返されます。

    -----------------------------------------

    kiloByte (boolean): メモリサイズがキロバイト(1024バイト)単位で返されます。

    -----------------------------------------

    megaByte (boolean): メモリサイズがメガバイト(1024*1024バイト)単位で返されます。

    -----------------------------------------

    pageFaults (boolean): ページエラーの数が返されます。

    -----------------------------------------

    pageReclaims (boolean): ページリクレームの数が返されます。

    -----------------------------------------

    physicalMemory (boolean): 物理メモリのサイズが返されます。

    -----------------------------------------

    processVirtualMemory (boolean): プロセスによって割り当てられた仮想メモリのサイズを返します。

    -----------------------------------------

    summary (boolean): メモリ使用量の概要が返されます。サイズフラグは無視され、すべてのメモリサイズがメガバイト単位で示されます。

    -----------------------------------------

    swapFree (boolean): 空きスワップのサイズが返されます。

    -----------------------------------------

    swapLogical (boolean): 論理スワップのサイズが返されます。

    -----------------------------------------

    swapMax (boolean): 最大スワップサイズが返されます。

    -----------------------------------------

    swapPhysical (boolean): 物理スワップのサイズが返されます。

    -----------------------------------------

    swapReserved (boolean): 予約スワップのサイズが返されます。

    -----------------------------------------

    swapVirtual (boolean): 仮想スワップのサイズが返されます。

    -----------------------------------------

    swaps (boolean): スワップの数が返されます。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def redo() -> None:
    """
    最後に取り消されたコマンドを元に戻すリストから取り出して再実行します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def showHelp(absolute: bool = False,docs: bool = False,helpTable: bool = False,version: bool = False) -> None:
    """
    Web ブラウザを起動し、オンライン マニュアルとヘルプ ファイルを開きます 指定した項目のヘルプ ページを開くか、ブラウザで特定の URL を開きます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absolute (boolean): 指定した「URL」は絶対URLで、Webブラウザへと直接渡されます。

    -----------------------------------------

    docs (boolean): オンラインマニュアルのルートに関連するヘルプファイルを直接指定します。

    -----------------------------------------

    helpTable (boolean): このフラグを使用して、-d/docsフラグと-a/absoluteフラグを使用していないときに、ヘルプ項目の検索に使うファイルを指定します。ファイル名のみを指定し、パスを指定していない場合、ファイルはMayaアプリケーションディレクトリにあると仮定されます。このフラグは、照会された場合は引数を受け取りません。既定値は「helpTable」です。

    -----------------------------------------

    version (boolean): このフラグを使用して、showHelpコマンドが使用するMayaのバージョンを取得します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timer(endTimer: bool = False,lapTime: bool = False,name: str = "",startTimer: bool = False) -> None:
    """
    スクリプトとコマンドの簡単なタイミングを可能にします。このタイマーの精度は、使用している OS の gettimeofday() 関数のレベルと同じです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    endTimer (boolean): タイマーを停止し、開始時刻からの経過時間を返します(秒単位)。タイマーはオフにすると削除され、新たに開始したときに再作成されます。

    -----------------------------------------

    lapTime (boolean): タイマーの経過時間を取得します(開始からの経過時間を秒単位で)。endフラグとは異なり、このフラグではタイマーの実行は継続されます。

    -----------------------------------------

    name (string): 操作に名前を付けたタイマーを使用します。これを省略すると、既定のタイマーが使用されます。

    -----------------------------------------

    startTimer (boolean): タイマーを開始します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def timerX(startTime: float = 1.0) -> None:
    """
    経過時間の算出に使用されます。値は、1 秒未満の精度で返されます。スクリプトからオペレーション時間を計るのに便利です。このコマンドを計測するオペレーションの前と後でコールしてください。最初のコールでは、フラグを使用しません。開始時刻を返します。この値を保存しておきます。オペレーションの後、コマンドを再びコールし、-st ラグを使ってこの保存した開始時刻を渡します。これで、経過時間が返ります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    startTime (float): このフラグを使用すると、コマンドは、指定した開始時間からの経過時間を返します。

    -----------------------------------------

    Return Value:
    None: floatこのコマンドは、使用されるフラグによって異なった値を返します。フラグが使用されない場合は、開始時刻を返します。「-st」フラグが使用された場合は、開始時刻からの経過時間を返します。
    """
    pass

    
def undo() -> None:
    """
    最近実行したコマンドを元に戻すリストから取り出して取り消しを行います。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def undoInfo(chunkName: str = "",closeChunk: bool = False,infinity: bool = False,length: int = 1,openChunk: bool = False,printQueue: bool = False,printRedoQueue: bool = False,redoName: str = "",redoQueueEmpty: bool = False,state: bool = False,stateWithoutFlush: bool = False,undoName: str = "",undoQueueEmpty: bool = False) -> None:
    """
    このコマンドは undo/redo のパラメータを制御します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    chunkName (string): チャンクを開くときに、元に戻す、またはやり直す目的でチャンクを識別するために使用される名前を設定します。

    -----------------------------------------

    closeChunk (boolean): 以前、openChunkにより開かれたチャンクを閉じます。チャンクのクローズがコールされると、チャンク内の元に戻すことができる操作はすべて、単一の元に戻す操作として元に戻されます。この機能の使用には注意が必要です。このコマンドを不適切に使用すると、元に戻す待ち行列が状態不良になることがあります。

    -----------------------------------------

    infinity (boolean): 待ち行列の長さ(取り消しできる回数)を無限にします。

    -----------------------------------------

    length (uint): 元に戻す待ち行列の項目の最大数を指定します。infinityフラグを使用すると、このフラグはオーバーライドされます。

    -----------------------------------------

    openChunk (boolean): チャンクを開きます。このコール後、元に戻すことができる操作はすべて、チャンクのクローズがコールされるまで、新しく開かれたチャンクに入るようになります。チャンクのクローズがコールされると、チャンク内の元に戻すことができる操作はすべて、単一の元に戻す操作として元に戻されます。この機能の使用には注意が必要です。このコマンドを不適切に使用すると、元に戻す待ち行列が状態不良になることがあります。

    -----------------------------------------

    printQueue (boolean): 元に戻す待ち行列の内容をスクリプトエディタに出力します。

    -----------------------------------------

    printRedoQueue (boolean): やり直し待ち行列の内容をスクリプトエディタに出力します。

    -----------------------------------------

    redoName (string): やり直されるものがあれば、その名前を返します。

    -----------------------------------------

    redoQueueEmpty (boolean): 再実行の待ち行列が空であれば、trueを返します。待ち行列に再実行するコマンドが1つでもあれば、falseを返します。

    -----------------------------------------

    state (boolean): 元に戻す/再実行のオンとオフを切り替えます。

    -----------------------------------------

    stateWithoutFlush (boolean): 待ち行列の内容を消去せずに、undo/redoのオンとオフを切り替えます。この機能の使用には注意が必要です。stateWithoutFlushを無効にして破壊的な操作を実行し、再びこのフラグを有効にした場合、破壊的操作を遡って元に戻す操作を実行しても、元に戻す操作はシーンの以前の状態を正しく再構築できないため、結果が不安定になる恐れがあります。

    -----------------------------------------

    undoName (string): 元に戻す対象取り消しされるものがあれば、その名前を返します。

    -----------------------------------------

    undoQueueEmpty (boolean): 元に戻す待ち行列が空であれば、trueを返します。待ち行列に元に戻すコマンドが1つでもあれば、falseを返します。

    -----------------------------------------

    Return Value:
    None: stringundoName または redoName を照会する場合int状態、インフィニティ、または長さを照会する場合照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def warning(noContext: bool = False,showLineNumber: bool = False) -> None:
    """
    ユーザ独自のスクリプトから警告するメッセージを出せるように、警告コマンドが提供されます。文字列引数は、言語に適切なセパレータ(Python の場合は #、Mel の場合は //)で囲まれたエラー メッセージを前につけた後、コマンド ウィンドウに表示されます(またはバッチ モードで実行した場合、stdout)。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    noContext (boolean): 警告メッセージにコンテキスト情報を含めません。

    -----------------------------------------

    showLineNumber (boolean): 廃止されました。Mayaの次バージョンでは削除予定です。代わりに、行番号を表示できるようにするチェックボックスをスクリプトエディタで使用します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def whatsNewHighlight(highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),highlightOn: bool = False,showStartupDialog: bool = False) -> None:
    """
    このコマンドは、新機能のハイライト機能、およびスタートアップ時に表示される機能の設定ダイアログの表示を切り替えるために使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    highlightColor ([float, float, float]): 新機能のハイライト表示のカラーを設定します。引数は、赤、緑、青のカラー成分に対応しています。それぞれのカラーコンポーネントの値は、0.0～1.0です。

    -----------------------------------------

    highlightOn (boolean): 新機能のハイライト機能を切り替えます。オンにすると、最新バージョンで導入されたメニュー項目とボタンがハイライトされます。

    -----------------------------------------

    showStartupDialog (boolean): スタートアップ時にこの機能の設定ダイアログを表示するかどうかを設定します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def xpmPicker(fileName: str = "",parent: str = "") -> None:
    """
    ダイアログを開き、xpm ファイルを選択するように求めます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    fileName (string): ダイアログで表示する既定のファイル名です。

    -----------------------------------------

    parent (string): モーダルダイアログの親ウィンドウです。

    -----------------------------------------

    Return Value:
    None: stringxpm ファイルのフル ネーム
    """
    pass

    