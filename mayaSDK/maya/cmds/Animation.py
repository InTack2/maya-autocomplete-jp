
from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union, Text



def animCurveEditor(areCurvesSelected: bool = False,autoFit: str = "",autoFitTime: str = "",classicMode: bool = False,clipTime: str = "",constrainDrag: int = 1,control: bool = False,curvesShown: bool = False,curvesShownForceUpdate: bool = False,defineTemplate: str = "",denormalizeCurvesCommand: str = "",displayActiveKeyTangents: str = "",displayActiveKeys: str = "",displayInfinities: str = "",displayKeys: str = "",displayNormalized: bool = False,displayTangents: str = "",displayValues: str = "",docTag: str = "",exists: bool = False,filter: str = "",forceMainConnection: str = "",highlightConnection: str = "",keyingTime: str = "",lockMainConnection: bool = False,lookAt: str = "",mainListConnection: str = "",menu: str = "",normalizeCurvesCommand: str = "",outliner: str = "",panel: str = "",parent: str = "",preSelectionHighlight: bool = False,renormalizeCurves: bool = False,resultSamples: float = 1.0,resultScreenSamples: int = 1,resultUpdate: str = "",selectionConnection: str = "",showActiveCurveNames: bool = False,showBufferCurves: str = "",showCurveNames: bool = False,showResults: str = "",showUpstreamCurves: bool = False,smoothness: str = "",snapTime: str = "",snapValue: str = "",stackedCurves: bool = False,stackedCurvesMax: float = 1.0,stackedCurvesMin: float = 1.0,stackedCurvesSpace: float = 1.0,stateString: bool = False,unParent: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,useTemplate: str = "",valueLinesToggle: str = "") -> None:
    """
    グラフ エディタの特性を編集します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    areCurvesSelected (boolean): グラフエディタで、少なくとも1つのカーブが選択されていることを確認するためのブール値を返します。

    -----------------------------------------

    autoFit (string): on|off|tglはビューへの自動フィットのオン/オフを切り替えます。

    -----------------------------------------

    autoFitTime (string): on|off|tglは時間軸に沿ってビューへの自動フィットのオン/オフも切り替えます。

    -----------------------------------------

    classicMode (boolean): オンのとき、グラフエディタは「クラシックモード」で表示され、オフのときは「スィートモード」が使用されます。

    -----------------------------------------

    clipTime (string): 有効な値:「on」、「off」クリップ内のアニメーションカーブに適用されたオフセットとスケールを持つクリップを表示します。

    -----------------------------------------

    constrainDrag (uint): グラフエディタでの、すべてのアニメーションカーブのドラッグ操作を、X軸またはY軸にコンストレイントするか、どちらの軸にもコンストレイントしないよう設定します。指定する値は、どちらの軸にもコンストレイントしない場合0、X軸にコンストレイントする場合1、Y軸にコンストレイントする場合2です。照会時に使用すると、このフラグは後の方の値を返します。値の解釈は前述の場合と同じです。注:アニメーションカーブをドラッグする前にShiftキーを押すと、最初のマウス動作で、ここで説明した動作に代わって以前に設定されたコンストレイント済みの軸を調べ、オーバーライドします。

    -----------------------------------------

    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    curvesShown (boolean): 現在、グラフエディタ(GraphEditor)で表示されているアニメーションカーブノードの名前を含む文字配列を返します。

    -----------------------------------------

    curvesShownForceUpdate (boolean): 現在、グラフエディタ(GraphEditor)で表示されているアニメーションカーブノードの名前を含む文字配列を返します。curvesShownフラグとは異なり、最後にリフレッシュされた後にmainListConnectionが変更された場合、グラフエディタを強制的に更新します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    denormalizeCurvesCommand (string): グラフエディタ(GraphEditor)でカーブを非正規化するために実行するスクリプトを設定します。Maya内部での使用に限られます。

    -----------------------------------------

    displayActiveKeyTangents (string): on|off|tglはエディタのアクティブキー接線の表示/非表示を切り替えます。

    -----------------------------------------

    displayActiveKeys (string): on|off|tglはエディタのアクティブキーの表示/非表示を切り替えます。

    -----------------------------------------

    displayInfinities (string): on|off|tglはエディタのインフィニティの表示/非表示を切り替えます。

    -----------------------------------------

    displayKeys (string): on|off|tglはエディタのキーフレームの表示/非表示を切り替えます。

    -----------------------------------------

    displayNormalized (boolean): オンにすると、すべてのカーブは-1～+1の範囲に正規化して表示されます。

    -----------------------------------------

    displayTangents (string): on|off|tglはエディタの接線の表示/非表示を切り替えます。

    -----------------------------------------

    displayValues (string): on|off|tglはエディタのアクティブキーおよび接線の値の表示/非表示を切り替えます。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    keyingTime (string): グラフエディタでキー設定される、指定されたカーブの現在のタイム。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    lookAt (string): FitViewヘルパーを、「all」、「selected」、「currentTime」のいずれかで指定できます。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    menu (script): エディタの作成時に実行されるスクリプトを指定します。関数は、新しいエディタの名前である文字列引数を渡します。

    -----------------------------------------

    normalizeCurvesCommand (string): グラフエディタ(GraphEditor)でカーブを非正規化するために実行するスクリプトを設定します。Maya内部での使用に限られます。

    -----------------------------------------

    outliner (string): グラフエディタ(GraphEditor)に関連するアウトライナ(Outliner)の名前です。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    preSelectionHighlight (boolean): オンにすると、マウスポインタの下にあるカーブ/キー/接線が選択しやすいようにハイライトされます。

    -----------------------------------------

    renormalizeCurves (boolean): このフラグを使用すると、カーブの正規化係数が再計算されます。

    -----------------------------------------

    resultSamples (time): 結果のカーブのサンプリングを指定します注:この数値が小さければ小さいほど、ディスプレイの更新にかかる時間が長くなります

    -----------------------------------------

    resultScreenSamples (int): 結果のカーブに対するスクリーンベースの結果サンプリングを指定します。0の場合、結果は時間内にサンプリングされます。

    -----------------------------------------

    resultUpdate (string): 有効な値:「interactive」、「delayed」アニメーションカーブに対する変更が結果のカーブにどのように反映されるかをコントロールします(結果が表示される場合)。resultUpdateが「interactive」の場合、アニメーションカーブはインタラクティブに変更されて、結果のカーブが更新されます。modelUpdateが「delayed」の場合(これは既定設定です)、結果のカーブはアニメーションカーブへの最終的な変更が行われたときに更新されます。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    showActiveCurveNames (boolean): アクティブカーブ名を表示します。

    -----------------------------------------

    showBufferCurves (string): 有効な値:「on」、「off」、「tgl」バッファカーブを表示します。

    -----------------------------------------

    showCurveNames (boolean): カーブ名を表示します。

    -----------------------------------------

    showResults (string): 有効な値:「on」、「off」、「tgl」エクスプレッション、またはその他のキー設定されていないアクションの結果のカーブを表示します。

    -----------------------------------------

    showUpstreamCurves (boolean): trueの場合は、ディペンデンシーグラフを上流に向かって選択済みプラグをドライブするすべてのカーブを検索します(たとえば、通常のドリブンキーセットアップでは複数のカーブが表示されますが、最初にドリブンキーカーブが見つかり、それからソースオブジェクトをドライブする実際のアニメーションカーブが見つかります)。falseの場合は、見つかった最初のカーブのみが表示されます。falseの場合でも、たとえばblendWeightedノードを使用して複数のカーブを結合すれば、複数のカーブを表示できます。

    -----------------------------------------

    smoothness (string): 有効な値:「coarse」、「rough」、「medium」、「fine」アニメーションカーブの表示の平滑性を指定します。

    -----------------------------------------

    snapTime (string): 時間におけるキーフレームの移動スナップを「none」、「integer」、「keyframe」のいずれかで指定できます。

    -----------------------------------------

    snapValue (string): 値におけるキーフレームの移動スナップを「none」、「integer」、「keyframe」のいずれかで指定できます。

    -----------------------------------------

    stackedCurves (boolean): 法線間(軸のセットを共有するすべてのカーブ)で表示モードを切り替えてスタックさせます(各カーブをその値の軸上に、垂直方向にスタック)。

    -----------------------------------------

    stackedCurvesMax (float): スタックモードの場合に、カーブごとの値の軸に最大値を設定します。

    -----------------------------------------

    stackedCurvesMin (float): スタックモードの場合に、カーブごとの値の軸に最小値を設定します。

    -----------------------------------------

    stackedCurvesSpace (float): スタックモードの場合に、カーブの間隔を設定します。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    valueLinesToggle (string): on|off|tglは、エディタで選択したカーブの高/低/ゼロの値の行を表示します。

    -----------------------------------------

    Return Value:
    None: stringエディタ名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def animDisplay(modelUpdate: str = "",refAnimCurvesEditable: bool = False,timeCode: str = "",timeCodeOffset: str = "") -> None:
    """
    アニメーション ウィンドウで使われる特定の表示オプションを変更します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    modelUpdate (string): アニメーションカーブへの変更を、ディペンデンシーグラフによりどのようにモデルに反映させていくか制御します。有効なモードは「none(なし)」、「interactive(インタラクティブ)」、「delayed(遅延)」です。modelUpdateのオプションが「none」(なし)の場合、アニメーションカーブを変更してもモデルは更新されません(モデルを更新するにはcurrentTimeを変更します)。modelUpdateのオプションが「interactive」の場合(これが既定の設定です)、アニメーションカーブがインタラクティブに変更されて、それにつれてモデルが更新されます。modelUpdateのオプションが「delayed」の場合、アニメーションカーブへの最終変更が行われると、モデルが更新されます。modelUpdateが「interactive」または「delayed」のいずれかに設定されている場合、各コマンドによりアニメーションカーブに変更が加えられると、モデルは更新されます。

    -----------------------------------------

    refAnimCurvesEditable (boolean): リファレンスファイルのアニメーションカーブを編集できるかどうかを指定します。

    -----------------------------------------

    timeCode (string): 時間の値を表示する方法をコントロールします。有効な値は、「frame」、「timecode」、「fulltimecode」です。値が「frame」の場合、任意の場所のフレーム内に時間が表示されます。値が「timecode」の場合、タイムスライダ、グラフエディタ、ドープシート内のタイムコードに時間が表示されます。値が「fulltimecode」の場合、任意の場所のタイムコード内に時間が表示されます。

    -----------------------------------------

    timeCodeOffset (string): このフラグは非推奨になりました。レガシースクリプトは破棄されず存在していますが、このフラグは何も実行しません。タイムコードを設定および照会するには、新しいtimeCodeコマンドを参照してください。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def animLayer(addRelatedKG: bool = False,addSelectedObjects: bool = False,affectedLayers: bool = False,animCurves: bool = False,attribute: str = "",baseAnimCurves: bool = False,bestAnimLayer: bool = False,bestLayer: bool = False,blendNodes: bool = False,children: str = "",collapse: bool = False,copy: str = "",copyAnimation: str = "",copyNoAnimation: str = "",excludeBoolean: bool = False,excludeDynamic: bool = False,excludeEnum: bool = False,excludeRotate: bool = False,excludeScale: bool = False,excludeTranslate: bool = False,excludeVisibility: bool = False,exists: bool = False,extractAnimation: str = "",findCurveForPlug: str = "",forceUIRebuild: bool = False,forceUIRefresh: bool = False,layeredPlug: str = "",lock: bool = False,maxLayers: bool = False,moveLayerAfter: str = "",moveLayerBefore: str = "",mute: bool = False,override: bool = False,parent: str = "",passthrough: bool = False,preferred: bool = False,removeAllAttributes: bool = False,removeAttribute: str = "",root: str = "",selected: bool = False,solo: bool = False,weight: float = 1.0,writeBlendnodeDestinations: bool = False) -> None:
    """
    アニメーション レイヤを作成および編集します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addRelatedKG (boolean): レイヤにアトリビュートを追加するために使用されます。関連付けられたキーグループをレイヤに追加するかどうかを決定します。

    -----------------------------------------

    addSelectedObjects (boolean): 選択したオブジェクトをレイヤに追加します。

    -----------------------------------------

    affectedLayers (boolean): 現在選択しているオブジェクトがメンバーであるレイヤを返します。

    -----------------------------------------

    animCurves (boolean): 照会モードでは、このレイヤに接続されたアニメーションカーブを返します。

    -----------------------------------------

    attribute (string): オブジェクト上の特定のアトリビュートをレイヤに追加します。

    -----------------------------------------

    baseAnimCurves (boolean): 照会モードでは、このレイヤに接続されたベースレイヤアニメーションカーブを返します(存在する場合)。

    -----------------------------------------

    bestAnimLayer (boolean): 照会モードでは、選択したオブジェクトのキーに最適なアニメーションレイヤを返します。-atを付けて使用すると、指定した特定のプラグ(アトリビュート)のキーに最適なアニメーションレイヤを返します。

    -----------------------------------------

    bestLayer (boolean): 指定したアトリビュートにキー設定するレイヤを返します。

    -----------------------------------------

    blendNodes (boolean): 照会モードでは、このレイヤに接続されたブレンドノードを返します。

    -----------------------------------------

    children (string): 子レイヤのリストを取得します。戻り値は文字配列です。

    -----------------------------------------

    collapse (boolean): レイヤエディタ(LayerEditor)でレイヤが折り畳まれているかどうかを判断します。

    -----------------------------------------

    copy (string): レイヤからコピーします。

    -----------------------------------------

    copyAnimation (string): 指定したレイヤから目的のレイヤにアニメーションをコピーします。対象となる両方のレイヤに属するアトリビュート上のアニメーションのみをコピーします。

    -----------------------------------------

    copyNoAnimation (string): レイヤからアニメーションカーブを除いてコピーします。

    -----------------------------------------

    excludeBoolean (boolean): 選択したオブジェクトをレイヤに追加するときに、すべてのブーリアンアトリビュートを除外します。

    -----------------------------------------

    excludeDynamic (boolean): 選択したオブジェクトをレイヤに追加するときに、すべてのダイナミックアトリビュートを除外します。

    -----------------------------------------

    excludeEnum (boolean): 選択したオブジェクトをレイヤに追加するときに、すべてのenumアトリビュートを除外します。

    -----------------------------------------

    excludeRotate (boolean): 選択したオブジェクトをレイヤに追加するときに、回転アトリビュートを除外します。

    -----------------------------------------

    excludeScale (boolean): 選択したオブジェクトをレイヤに追加するときに、スケールアトリビュートを除外します。

    -----------------------------------------

    excludeTranslate (boolean): 選択したオブジェクトをレイヤに追加するときに、移動アトリビュートを除外します。

    -----------------------------------------

    excludeVisibility (boolean): 選択したオブジェクトをレイヤに追加するときに、可視性アトリビュートを除外します。

    -----------------------------------------

    exists (boolean): レイヤが存在すれば、それを定義します。

    -----------------------------------------

    extractAnimation (string): 指定したレイヤから目的のレイヤにアニメーションを移動します。対象となる両方のレイヤに属するアトリビュート上のアニメーションのみを移動します。

    -----------------------------------------

    findCurveForPlug (string): 特定のレイヤ上の指定したプラグのアニメーションデータを含むパラメータカーブを検索します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    forceUIRebuild (boolean): アニメーションレイヤのユーザインタフェースをリビルドします。

    -----------------------------------------

    forceUIRefresh (boolean): アニメーションレイヤのユーザインタフェースをリフレッシュします。

    -----------------------------------------

    layeredPlug (string): 指定したレイヤに対応したブレンドノード上のプラグを返します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    lock (boolean): 指定したレイヤのロックの状態を設定します。ロックされたレイヤは、キーを受け取ることはできません。既定はfalseです。

    -----------------------------------------

    maxLayers (boolean): この製品でサポートされているアニメーションレイヤの最大数を返します。

    -----------------------------------------

    moveLayerAfter (string): 指定したレイヤの次のレイヤを移動します。

    -----------------------------------------

    moveLayerBefore (string): 指定したレイヤの前のレイヤを移動します。

    -----------------------------------------

    mute (boolean): 指定したレイヤのミュートの状態を設定します。既定はfalseです。

    -----------------------------------------

    override (boolean): 指定したレイヤのオーバーライドの状態を設定します。既定はfalseです。

    -----------------------------------------

    parent (string): 指定したレイヤの親を設定します。既定はアニメーションレイヤのルートです。

    -----------------------------------------

    passthrough (boolean): 指定したレイヤの通過の状態を設定します。既定はtrueです。

    -----------------------------------------

    preferred (boolean): レイヤが優先レイヤであるかどうかを判断します。最良のレイヤアルゴリズムは、最初に優先レイヤにキーフレームを設定しようとします。

    -----------------------------------------

    removeAllAttributes (boolean): すべてのオブジェクトをレイヤから除去します。

    -----------------------------------------

    removeAttribute (string): オブジェクトをレイヤから除去します。

    -----------------------------------------

    root (string): ベースレイヤが存在すれば、それを返します。

    -----------------------------------------

    selected (boolean): レイヤが選択されているかどうかを判断します。選択されたレイヤがグラフエディタ(GraphEditor)のタイムコントロールに表示されます。

    -----------------------------------------

    solo (boolean): 指定したレイヤのソロの状態を設定します。既定はfalseです。

    -----------------------------------------

    weight (float): 指定したレイヤのウェイトを0.0～1.0の間に設定します。既定は1です。

    -----------------------------------------

    writeBlendnodeDestinations (boolean): 編集モードでは、そのレイヤに属するブレンドノードの目的のプラグをブレンドノードに書き込みます。これはレイヤの読み込み/書き出しの目的で使用するもので、一般的には使用しません。

    -----------------------------------------

    Return Value:
    None: string現在文書化されていない値を返します照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def animView(endTime: float = 1.0,maxValue: float = 1.0,minValue: float = 1.0,nextView: bool = False,previousView: bool = False,startTime: float = 1.0) -> None:
    """
    アニメーション エディタ(Animation Editor)で、現在選択しているビューの範囲を指定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    endTime (time): エディタに表示するアニメーションの終了時間

    -----------------------------------------

    maxValue (float): エディタに表示する上限値

    -----------------------------------------

    minValue (float): エディタに表示する下限値

    -----------------------------------------

    nextView (boolean): 次のビューに切り替えます。

    -----------------------------------------

    previousView (boolean): 前のビューに切り替えます。

    -----------------------------------------

    startTime (time): エディタに表示するアニメーションの開始時間

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def autoKeyframe(addAttr: str = "",listAttr: bool = False,noReset: bool = False,state: bool = False) -> None:
    """
    フラグがない場合、このコマンドは、「autoKeyframe -state on」コマンドの発行後に変更された、すべてのアトリビュートにキーフレームを設定します。修正されたアトリビュートの追跡を中止する場合は、「autoKeyframe -state off」を使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addAttr (name): autoKeyframeが現在自動キー設定を検討しているプラグのリスト(node.attribute)に追加します。このリストは一時的なもので、存続期間は短時間です。autoKeyframeによりキーフレームが設定されるか、設定するキーフレームがないと判断された場合は、次のアトリビュート設定の完了時にリセットされます。

    -----------------------------------------

    listAttr (boolean): autoKeyframeが現在自動キー設定を検討しているプラグのリスト(node.attribute)を返します。このリストは一時的なもので、存続期間は短時間です。autoKeyframeによりキーフレームが設定されるか、設定するキーフレームがないと判断された場合は、次のアトリビュート設定の完了時にリセットされます。

    -----------------------------------------

    noReset (boolean): state/stフラグと一緒に使用する必要があります。noReset/nrを指定すると、状態が変化したときに自動キー設定するプラグのリストがクリアされません。

    -----------------------------------------

    state (boolean): 修正されたアトリビュートの記憶のオン/オフを指定します。

    -----------------------------------------

    Return Value:
    None: intキーフレーム セットの数。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def bakeResults(animation: str = "",attribute: str = "",bakeOnOverrideLayer: bool = False,controlPoints: bool = False,destinationLayer: str = "",disableImplicitControl: bool = False,float: Tuple[float, float] = tuple(1.0, 1.0),hierarchy: str = "",includeUpperBound: bool = False,index: int = 1,minimizeRotation: bool = False,oversamplingRate: int = 1,preserveOutsideKeys: bool = False,removeBakedAnimFromLayer: bool = False,removeBakedAttributeFromLayer: bool = False,resolveWithoutLayer: str = "",sampleBy: float = 1.0,shape: bool = False,simulation: bool = False,smart: Tuple[bool, float] = tuple(False, 1.0),sparseAnimCurveBake: bool = False,time: Tuple[float, float] = tuple(1.0, 1.0)) -> None:
    """
    このコマンドで、アトリビュート値を定義する一連のディペンデンシー ノードを単一のアニメーション カーブに置き換えることができます。また、このコマンドによって、サンプリングの範囲と頻度を指定することもできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animation (string): このコマンドが、自身が影響を与えるアニメーションを取得する場所です。有効な値は「objects」、「keys」、「keysOrObjects」で、既定は「keysOrObjects」です。詳細については、コマンドの説明を参照してください。

    -----------------------------------------

    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    bakeOnOverrideLayer (boolean): trueの場合、レイヤ処理およびベイク処理されたすべてのアトリビュートが上部のオーバーライドレイヤとして追加されます。

    -----------------------------------------

    controlPoints (boolean): このフラグは、アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    destinationLayer (string): このフラグを使用して、ベイク処理された結果が格納される場所で既存のレイヤを指定できます。このフラグは慎重に使用してください。合成先のレイヤに最終結果に含まれるアニメーションが既に存在する場合、ベイク処理の出力によって置き換えられます。結果として、シーンに組み込まれて表示されるアニメーションがベイク処理の前後で異なることがあります。

    -----------------------------------------

    disableImplicitControl (boolean): このコマンドを実行した結果として、アニメーションカーブの取得後にインプリシットのコントロールを無効にするかどうか。アトリビュートのインプリシットコントロ－ルは、明示的なディペンデンシーグラフの接続を使用せずにアトリビュートに作用する機能です。たとえば、IKハンドルによるIKの制御があります。

    -----------------------------------------

    float (floatrange): 時間ベースのanimCurve上の時間ベースでないキー(またはキーレンジ)を固有に表す値です。有効なfloatRangeは、単一の値(-f10)、または上下限をコロンで区切った文字列(-f"10:20")です。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    hierarchy (string): 階層展開オプションです。有効な値は、「above」、「below」、「both」、「none」です。(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    includeUpperBound (boolean): -t/timeまたは-f/floatフラグがキーの範囲を表す場合に、範囲の上限のキーをキーセットに含めるかどうかを定義します。既定値:true。このフラグは、-t/timeフラグの引数が上下限が指定したタイムレンジである場合に限り有効です注:「pasteKey」コマンドでこのフラグを使用するときに「replace」、「fitReplace」、「scaleReplace」などのオプションを指定すると、このフラグは、置き換えられるターゲットカーブの時間範囲のみを参照します。このフラグは、クリップボードからペーストされたカーブには影響しません。

    -----------------------------------------

    index (uint): アニメーションカーブ上のキーのインデックス照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    minimizeRotation (boolean): 回転チャネルのベイク処理中に、キー間でローカルオイラーコンポーネントを最小化するかどうかを指定します。

    -----------------------------------------

    oversamplingRate (uint): sampleBy期間ごとのサンプル量です。既定値は1です。

    -----------------------------------------

    preserveOutsideKeys (boolean): 直接接続されたアニメーションカーブや、アニメーションカーブを直接入力として持つpairBlendノードが存在する場合、ベイク処理範囲の外側にあるキーを保持するかどうか。既定(false)では、ベイク処理範囲外のフレームは除去されます。ベイク処理中のチャネルが単一のアニメーションカーブでコントロールされていない場合は、ベイク処理範囲内のキーで新しいアニメーションカーブが作成されます。pairBlendドリブンチャネルの場合、pokをtrueを設定すると、pairBlendとその入力であるアニメーションカーブが両方保持されます。ブレンド値はanimCurveにベイク処理され、pairBlendウェイトのウェイトは、ベイク処理範囲内のアニメーションカーブにキー設定されます。

    -----------------------------------------

    removeBakedAnimFromLayer (boolean): trueの場合、ベイク処理されたすべてのアニメーションがレイヤから除去されます。そうでない場合、ベイク処理されたアニメーションに関連付けられたすべてのレイヤはミュートされます。

    -----------------------------------------

    removeBakedAttributeFromLayer (boolean): trueの場合、ベイク処理されたすべてのアトリビュートがレイヤから除去されます。そうでない場合、ベイク処理されたアトリビュートに接続されたすべてのレイヤはミュートされます。

    -----------------------------------------

    resolveWithoutLayer (string): このフラグを使用して、ベイク処理中に一緒にマージするレイヤのリストを指定できます。これは多目的フラグです。このフラグの名前は、キー設定する値を解決するときに、目的のレイヤでキー設定する適切な値を決定し、マージされたレイヤと同じ結果を達成する事実を反映しています。

    -----------------------------------------

    sampleBy (time): サンプリングの量。既定は現在の時間単位の1.0です。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    simulation (boolean): このフラグを使用して、コマンドで、タイムレンジ全体での各アトリビュートの個別評価ではなく、シミュレーションを行います。シミュレーションフラグは、ダイナミクスのような各時間ステップで評価されるシーン全体に依存する、アニメーションのベイク処理に必要です。既定はfalseです。

    -----------------------------------------

    smart ([[, boolean, float, ]]): スマートベイク処理およびオプションのスマートベイク処理の許容度を有効にするかどうかを指定します。

    -----------------------------------------

    sparseAnimCurveBake (boolean): このフラグがtrueでアニメーションカーブをベイク処理するとき、アニメーションが定義されているカーブの領域にはキーを挿入しないでください。また、プリインフィニティとポストインフィニティをベイク処理するときは、使用するキーをなるべく少なくしてください。このフラグがfalseのときは、各時間ステップにつき1つのキーが挿入されます。既定はfalseです。

    -----------------------------------------

    time (timerange): 時間ベースのアニメーションカーブ上のキー(またはキーレンジ)を固有に表す時間です。単一のフレームまたはフレーム範囲の設定方法については、以下のコード例を参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    Return Value:
    None: int- ベイク処理するチャネルの数照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def bakeSimulation(animation: str = "",attribute: str = "",bakeOnOverrideLayer: bool = False,controlPoints: bool = False,destinationLayer: str = "",disableImplicitControl: bool = False,float: Tuple[float, float] = tuple(1.0, 1.0),hierarchy: str = "",includeUpperBound: bool = False,index: int = 1,minimizeRotation: bool = False,preserveOutsideKeys: bool = False,removeBakedAnimFromLayer: bool = False,removeBakedAttributeFromLayer: bool = False,resolveWithoutLayer: str = "",sampleBy: float = 1.0,shape: bool = False,simulation: bool = False,smart: Tuple[bool, float] = tuple(False, 1.0),sparseAnimCurveBake: bool = False,time: Tuple[float, float] = tuple(1.0, 1.0)) -> None:
    """
    このコマンドは、キーセット上に作用します。キーセットは、1 つまたは複数のアニメーション カーブ上の指定したタイム レンジ内のキー グループとして定義されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animation (string): このコマンドが、自身が影響を与えるアニメーションを取得する場所です。有効な値は「objects」、「keys」、「keysOrObjects」で、既定は「keysOrObjects」です(詳細については、説明を参照してください)。

    -----------------------------------------

    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    bakeOnOverrideLayer (boolean): trueの場合、レイヤ処理およびベイク処理されたすべてのアトリビュートが上部のオーバーライドレイヤとして追加されます。

    -----------------------------------------

    controlPoints (boolean): このフラグは、アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    destinationLayer (string): このフラグを使用して、ベイク処理された結果が格納される場所で既存のレイヤを指定できます。

    -----------------------------------------

    disableImplicitControl (boolean): このコマンドを実行した結果として、アニメーションカーブの取得後にインプリシットのコントロールを無効にするかどうか。アトリビュートのインプリシットコントロ－ルは、明示的なディペンデンシーグラフの接続を使用せずにアトリビュートに作用する機能です。たとえば、IKハンドルによるIKの制御があります。

    -----------------------------------------

    float (floatrange): 時間ベースのanimCurve上の時間ベースでないキー(またはキーレンジ)を固有に表す値です。有効なfloatRangeは、単一の値(-f10)、または上下限をコロンで区切った文字列(-f"10:20")です。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    hierarchy (string): 階層展開オプションです。有効な値は、「above」、「below」、「both」、「none」です。(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    includeUpperBound (boolean): -t/timeまたは-f/floatフラグがキーの範囲を表す場合に、範囲の上限のキーをキーセットに含めるかどうかを定義します。既定値:true。このフラグは、-t/timeフラグの引数が上下限が指定したタイムレンジである場合に限り有効です（「pasteKey」コマンドでこのフラグを使用するときに「replace」、「fitReplace」、「scaleReplace」などのオプションを指定すると、このフラグは、置き換えられるターゲットカーブの時間範囲のみを参照します。このフラグは、クリップボードからペーストされたカーブには影響しません）。

    -----------------------------------------

    index (uint): アニメーションカーブ上のキーのインデックス照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    minimizeRotation (boolean): 回転チャネルのベイク処理中に、キー間でローカルオイラーコンポーネントを最小化するかどうかを指定します。

    -----------------------------------------

    preserveOutsideKeys (boolean): 直接接続されているアニメーションカーブがあるときに、ベイク処理範囲外のキーを保持するかどうかです。既定(false)では、ベイク処理範囲外のフレームは除去されます。ベイク処理中のチャネルが単一のアニメーションカーブでコントロールされていない場合は、ベイク処理範囲内のキーで新しいアニメーションカーブが作成されます。

    -----------------------------------------

    removeBakedAnimFromLayer (boolean): trueの場合、ベイク処理されたすべてのアニメーションがレイヤから除去されます。

    -----------------------------------------

    removeBakedAttributeFromLayer (boolean): trueの場合、ベイク処理されたすべてのアトリビュートがレイヤから除去されます。

    -----------------------------------------

    resolveWithoutLayer (string): このフラグを使用して、ベイク処理中に一緒にマージするレイヤのリストを指定できます。これは多目的フラグです。このフラグの名前は、キー設定する値を解決するときに、目的のレイヤでキー設定する適切な値を決定し、マージされたレイヤと同じ結果を達成する事実を反映しています。

    -----------------------------------------

    sampleBy (time): サンプリングの量。既定は現在の時間単位の1.0です。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    simulation (boolean): このフラグを使用して、コマンドで、タイムレンジ全体での各アトリビュートの個別評価ではなく、シミュレーションを行います。シミュレーションフラグは、ダイナミクスのような各時間ステップで評価されるシーン全体に依存する、アニメーションのベイク処理に必要です。既定はtrueです。

    -----------------------------------------

    smart ([[, boolean, float, ]]): スマートベイク処理およびオプションのスマートベイク処理の許容度を有効にするかどうかを指定します。

    -----------------------------------------

    sparseAnimCurveBake (boolean): アニメーションカーブをベイク処理するとき、アニメーションが定義されているカーブの領域にキーを挿入しないでください。また、プリインフィニティとポストインフィニティをベイク処理するときは、使用するキーをなるべく少なくしてください。このフラグがfalseのときは、各時間ステップにつき1つのキーが挿入されます。既定はfalseです。

    -----------------------------------------

    time (timerange): 時間ベースのアニメーションカーブ上のキー(またはキーレンジ)を固有に表す時間です。単一のフレームまたはフレーム範囲の設定方法については、以下のコード例を参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def blendTwoAttr(attribute: str = "",attribute0: str = "",attribute1: str = "",blender: str = "",controlPoints: bool = False,driver: int = 1,name: str = "",shape: bool = False,time: Tuple[float, float] = tuple(1.0, 1.0)) -> None:
    """
    blendTwoAttr ノードは 2 つの入力を取り、その出力値は1 つの入力からもう 1 つの入力へ値をブレンドしたものになります。2 つの入力のブレンドでは、ブレンド関数を使用します。形式は次のとおりです。     (1 - blendFunction) * input[0]  +  blendFunction * input[1]



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): blendTwoAttrノードが作成される、選択したノードのアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    attribute0 (name): 新しいblendTwoAttrノードの最初の入力に接続するアトリビュートです。照会するとstringを返します。

    -----------------------------------------

    attribute1 (name): 新しいblendTwoAttrノードの2番目の入力に接続するアトリビュートです。照会するとstringを返します。

    -----------------------------------------

    blender (name): ブレンダアトリビュートです。これは、新しく作成されたblendTwoAttrノードのブレンダアトリビュートに接続されるアトリビュートです。このアトリビュートは、2つのアトリビュートをそれぞれどれだけブレンドで使用するかを制御します。このフラグが指定されていない場合、値が-tフラグで指定したタイムレンジの1から0までで変化する、新しいアニメーションカーブが作成されます。-tを指定していない場合にこのコマンドが発行されると、最初のアトリビュートの値から2つめのアトリビュートの値に移るときに、現在のタイムで急激な変化が起こります。

    -----------------------------------------

    controlPoints (boolean): アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false

    -----------------------------------------

    driver (int): このブレンドノードのドライバアトリビュートのインデックス(0または1)です。照会すると、整数値を返します。

    -----------------------------------------

    name (string): 新しいブレンドノードの名前です。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)もすべて考慮します。既定:true

    -----------------------------------------

    time (timerange): 2つのアトリビュート間のブレンドが作成されるタイムレンジです。1つのタイムが指定されている場合、その時点で、最初のアトリビュートから2つめのアトリビュートへのブレンドに急激な変化が起こります。1つのレンジが指定されている場合、そのタイムレンジに渡ってスムーズなブレンディングが作成されます。既定では、現在のタイムでの突然のトランジションが作成されます。

    -----------------------------------------

    Return Value:
    None: string[]作成された blendTwoAttr ディペンデンシーノードの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def bufferCurve(animation: str = "",attribute: str = "",controlPoints: bool = False,exists: bool = False,float: Tuple[float, float] = tuple(1.0, 1.0),hierarchy: str = "",includeUpperBound: bool = False,index: int = 1,overwrite: bool = False,shape: bool = False,swap: bool = False,time: Tuple[float, float] = tuple(1.0, 1.0),useReferencedCurve: bool = False) -> None:
    """
    このコマンドは、キーセット上に作用します。キーセットは、1 つまたは複数のアニメーション カーブ上の指定したタイム レンジ内のキー グループとして定義されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animation (string): このコマンドが、自身が影響を与えるアニメーションを取得する場所です。有効な値は「objects」、「keys」、「keysOrObjects」で、既定は「keysOrObjects」です(詳細については、説明を参照してください)。

    -----------------------------------------

    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    controlPoints (boolean): このフラグは、アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    exists (boolean): 指定したアトリビュートに現在バッファカーブが存在する場合、trueを返します。それ以外はfalseを返します。

    -----------------------------------------

    float (floatrange): 時間ベースのanimCurve上の時間ベースでないキー(またはキーレンジ)を固有に表す値です。有効なfloatRangeは、単一の値(-f10)、または上下限をコロンで区切った文字列(-f"10:20")です。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    hierarchy (string): 階層展開オプションです。有効な値は、「above」、「below」、「both」、「none」です。(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    includeUpperBound (boolean): -t/timeまたは-f/floatフラグがキーの範囲を表す場合に、範囲の上限のキーをキーセットに含めるかどうかを定義します。既定値:true。このフラグは、-t/timeフラグの引数が上下限が指定したタイムレンジである場合に限り有効です（「pasteKey」コマンドでこのフラグを使用するときに「replace」、「fitReplace」、「scaleReplace」などのオプションを指定すると、このフラグは、置き換えられるターゲットカーブの時間範囲のみを参照します。このフラグは、クリップボードからペーストされたカーブには影響しません）。

    -----------------------------------------

    index (uint): アニメーションカーブ上のキーのインデックス照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    overwrite (boolean): バッファカーブを作成します。trueは、バッファカーブがすでに存在するかどうかに関係なく、バッファカーブを作成することを意味します。falseは、バッファカーブがすでに存在する場合は、そのバッファカーブをそのままにしておくことを意味します。フラグが指定されていないときは、コマンドは既定で-overwritefalseになります

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    swap (boolean): バッファカーブのあるアニメートされたアトリビュートに対して、バッファカーブを現在のアニメーションカーブと入れ替えます。

    -----------------------------------------

    time (timerange): 時間ベースのアニメーションカーブ上のキー(またはキーレンジ)を固有に表す時間です。単一のフレームまたはフレーム範囲の設定方法については、以下のコード例を参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    useReferencedCurve (boolean): 作成モードでは、参照カーブにバッファカーブを設定します。ファイルからの参照ではないカーブではこのフラグは無視されます。照会モードでは、選択したキーが参照カーブをバッファカーブとして表示している場合はtrueを返し、そうでない場合はfalseを返します。

    -----------------------------------------

    Return Value:
    None: intバッファ カーブの数照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def buildBookmarkMenu(editor: str = "",type: str = "") -> None:
    """
    このコマンドは、指定したタイプ(「sets -text」)のブックマーク(「sets」)をすべて表示する、「ダイナミック」ブックマーク メニューの構築を処理します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    editor (string): このメニューが属するエディタの名前

    -----------------------------------------

    type (string): 表示するブックマークのタイプ(sets-text)

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def buildKeyframeMenu() -> None:
    """
    このコマンドは、現在指定しているオブジェクトの、現在のマニピュレータによってフィルタされたアトリビュートを表示する「ダイナミック」キーフレーム メニューの構築を処理します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def choice(attribute: str = "",controlPoints: bool = False,index: int = 1,name: str = "",selector: str = "",shape: bool = False,sourceAttribute: str = "",time: float = 1.0) -> None:
    """
    choice コマンドは、入力を特定の基準(通常は時間ベース)に基づいたアトリビュートに変更するメカニズムを提供します。たとえば、オブジェクトをフレーム 1 から 30 までモーション パスでアニメートし、フレーム 30 から 50 までキーフレーム アニメーションに追従させ、フレーム 50 の後はモーション パスに戻します。または、リボルブ サーフェスであれば、トランスフォームの回転値の一部に従って Input カーブを変更することもできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): choiceノードを作成する必要のあるアトリビュートを指定します。既定は、指定したオブジェクトのキー設定可能なすべてのアトリビュートです。このフラグが照会可能でなくても、指定したオブジェクトのどのアトリビュートを照会するかを指定することができます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    controlPoints (boolean): アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false

    -----------------------------------------

    index (uint): ソースアトリビュートを接続する、choiceノードのマルチ入力インデックスを指定します。照会すると、指定した-t/timeごとに整数のリストを返します。これは、その時間に使用するchoiceノードのマルチインデックスを示します。

    -----------------------------------------

    name (string): 新しく作成されたchoiceノードに付ける名前です。照会すると、文字列のリストを返します。

    -----------------------------------------

    selector (name): choiceノードのセレクタとして使用されるアトリビュートを指定します。指定した時間のセレクタの値で、choiceノードのマルチインデックスのうちどれを使用するかを定義します。このフラグは編集のみ可能です(作成時間に指定できません)。照会すると、文字列のリストを返します。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)もすべて考慮します。既定:true

    -----------------------------------------

    sourceAttribute (name): -t/timeで指定した時間に選択される、choiceノードに接続するアトリビュートを指定します。

    -----------------------------------------

    time (time): choiceノードが、指定したソースアトリビュート、またはソースアトリビュートが指定されていない場合は現在接続されているアトリビュートを使用する時間を指定します。既定は現在時間です。このフラグは照会できませんが、ほかのアトリビュートを照会する時間を指定することができます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    Return Value:
    None: string[]セレクタ キーフレームが作成されたアトリビュートの、新しく作成/変更された choice ノードです。例:choice1.input[3] choice2.input[3]照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def controller(allControllers: bool = False,children: bool = False,group: bool = False,index: int = 1,isController: str = "",parent: bool = False,pickWalkDown: bool = False,pickWalkLeft: bool = False,pickWalkRight: bool = False,pickWalkUp: bool = False,unparent: bool = False) -> None:
    """
    アニメーション ソースを管理するためのコマンドです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allControllers (boolean): このフラグを照会すると、シーンのコントローラにアタッチされたすべてのdependNodeが返されます。

    -----------------------------------------

    children (boolean): 指定したdependNodeがコントローラの場合はtrueを返します。

    -----------------------------------------

    group (boolean): どのオブジェクトにも関連付けられていないコントローラを作成します。この新しいコントローラが、すべての選択したオブジェクトの親になります。

    -----------------------------------------

    index (int): 照会モードでは、子の親コントローラのリストからコントローラのインデックスを返します。編集モードでは、現在のコントローラに指定したインデックスが割り当てられるように、親コントローラの子接続を並べ替えます。

    -----------------------------------------

    isController (string): 指定したdependNodeがコントローラである場合は、trueを返します。

    -----------------------------------------

    parent (boolean): 選択したコントローラノードの親コントローラを設定または照会します。

    -----------------------------------------

    pickWalkDown (boolean): 最初の子を返します。

    -----------------------------------------

    pickWalkLeft (boolean): 前の兄弟を返します。

    -----------------------------------------

    pickWalkRight (boolean): 次の兄弟を返します。

    -----------------------------------------

    pickWalkUp (boolean): 親を返します。

    -----------------------------------------

    unparent (boolean): 選択したすべてのコントローラオブジェクトをそれぞれの親からペアレント化解除します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def copyKey(animLayer: str = "",animation: str = "",attribute: str = "",clipboard: str = "",controlPoints: bool = False,float: Tuple[float, float] = tuple(1.0, 1.0),forceIndependentEulerAngles: bool = False,hierarchy: str = "",includeUpperBound: bool = False,index: int = 1,option: str = "",shape: bool = False,time: Tuple[float, float] = tuple(1.0, 1.0)) -> None:
    """
    このコマンドは、キーセットに作用します。キーセットは、1 つまたは複数のアニメーション カーブ上の指定したタイム レンジ内のキー グループとして定義されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animLayer (string): 指定したこのアニメーションレイヤからコピーするキーを取得するよう指定します。このレイヤのオブジェクトにキーがない場合、キーはコピーされません。

    -----------------------------------------

    animation (string): このコマンドが、自身が影響を与えるアニメーションを取得する場所です。有効な値は「objects」、「keys」、「keysOrObjects」で、既定は「keysOrObjects」です(詳細については、説明を参照してください)。

    -----------------------------------------

    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    clipboard (string): アニメーションをコピーするクリップボードを指定します。有効なクリップボードは「api」と「anim」です。既定のクリップボードは「anim」です。

    -----------------------------------------

    controlPoints (boolean): このフラグは、アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    float (floatrange): 時間ベースのanimCurve上の時間ベースでないキー(またはキーレンジ)を固有に表す値です。有効なfloatRangeは、単一の値(-f10)、または上下限をコロンで区切った文字列(-f"10:20")です。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    forceIndependentEulerAngles (boolean): 回転カーブが常に独立オイラー角度としてクリップボードに配置される必要があることを指定します。既定値はfalseです。

    -----------------------------------------

    hierarchy (string): 階層展開オプションです。有効な値は、「above」、「below」、「both」、「none」です。(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    includeUpperBound (boolean): -t/timeまたは-f/floatフラグがキーの範囲を表す場合に、範囲の上限のキーをキーセットに含めるかどうかを定義します。既定値:true。このフラグは、-t/timeフラグの引数が上下限が指定したタイムレンジである場合に限り有効です（「pasteKey」コマンドでこのフラグを使用するときに「replace」、「fitReplace」、「scaleReplace」などのオプションを指定すると、このフラグは、置き換えられるターゲットカーブの時間範囲のみを参照します。このフラグは、クリップボードからペーストされたカーブには影響しません）。

    -----------------------------------------

    index (uint): アニメーションカーブ上のキーのインデックス照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    option (string): copyKeyの実行時に使用するオプションです。有効なオプションは「keys」と「curve」です。既定のコピーオプション:keysです。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    time (timerange): 時間ベースのアニメーションカーブ上のキー(またはキーレンジ)を固有に表す時間です。単一のフレームまたはフレーム範囲の設定方法については、以下のコード例を参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    Return Value:
    None: intコピーしたアニメーション カーブの数。
    """
    pass

    
def currentTime(update: bool = False) -> float:
    """
    time 引数(-edit フラグを伴う場合も伴わない場合もある)を指定するとき、このコマンドを使うと現在のグローバル時間が設定されます。コマンド ラインに「-update off」が表示されない限り、モデルは新しい時間で更新、表示されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    update (boolean): 現在のタイムは変更しますが、グローバル時間は変更しません。既定はtrueです。

    -----------------------------------------

    Return Value:
    float: timeコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def curveRGBColor(hueSaturationValue: bool = False,list: bool = False,listNames: bool = False,remove: bool = False,resetToFactory: bool = False,resetToSaved: bool = False) -> None:
    """
    このコマンドは、グラフ エディタ(Graph Editor)でカーブを描画するために使用されるカスタム カーブ カラーを作成、変更、除去します。カスタム カーブの名前は単一の文字に相当する「?」ワイルドカードや任意数の文字に相当する「*」を含むことができます。このカラーは UI の一部であって、モデルの保存データの一部ではありません。このコマンドは元に戻せません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    hueSaturationValue (boolean): RGB値が実際にはHSV値であることを示します。

    -----------------------------------------

    list (boolean): すべてのカーブカラー名とその値のリストを書き出します。

    -----------------------------------------

    listNames (boolean): すべてのカーブカラー名の配列を返します。

    -----------------------------------------

    remove (boolean): 指定したカーブカラーを除去します。

    -----------------------------------------

    resetToFactory (boolean): すべてのカーブカラーを既定にリセットします。

    -----------------------------------------

    resetToSaved (boolean): すべてのカーブカラーを保存した値にリセットします。

    -----------------------------------------

    Return Value:
    None: float[]HSV フラグの照会から取得される HSV 値照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def cutKey(animation: str = "",attribute: str = "",clear: bool = False,controlPoints: bool = False,float: Tuple[float, float] = tuple(1.0, 1.0),hierarchy: str = "",includeUpperBound: bool = False,index: int = 1,option: str = "",selectKey: bool = False,shape: bool = False,time: Tuple[float, float] = tuple(1.0, 1.0)) -> None:
    """
    このコマンドは、キーセット上に作用します。キーセットは、1 つまたは複数のアニメーション カーブ上の指定したタイム レンジ内のキー グループとして定義されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animation (string): このコマンドが、自身が影響を与えるアニメーションを取得する場所です。有効な値は「objects」、「keys」、「keysOrObjects」で、既定は「keysOrObjects」です(詳細については、説明を参照してください)。

    -----------------------------------------

    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    clear (boolean): 単純にキーフレームを除去します(クリップボードは上書きされません)。

    -----------------------------------------

    controlPoints (boolean): このフラグは、アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    float (floatrange): 時間ベースのanimCurve上の時間ベースでないキー(またはキーレンジ)を固有に表す値です。有効なfloatRangeは、単一の値(-f10)、または上下限をコロンで区切った文字列(-f"10:20")です。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    hierarchy (string): 階層展開オプションです。有効な値は、「above」、「below」、「both」、「none」です。(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    includeUpperBound (boolean): -t/timeまたは-f/floatフラグがキーの範囲を表す場合に、範囲の上限のキーをキーセットに含めるかどうかを定義します。既定値:true。このフラグは、-t/timeフラグの引数が上下限が指定したタイムレンジである場合に限り有効です（「pasteKey」コマンドでこのフラグを使用するときに「replace」、「fitReplace」、「scaleReplace」などのオプションを指定すると、このフラグは、置き換えられるターゲットカーブの時間範囲のみを参照します。このフラグは、クリップボードからペーストされたカーブには影響しません）。

    -----------------------------------------

    index (uint): アニメーションカーブ上のキーのインデックス照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    option (string): cutKey操作の実行方法についてのオプションです。このフラグの有効な値は、「keys」、「curve」、「curveCollapse」、「curveConnect」、「areaCollapse」です。既定のオプションは、keysです。

    -----------------------------------------

    selectKey (boolean): キーが除去されているカーブのキーフレームを選択します。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    time (timerange): 時間ベースのアニメーションカーブ上のキー(またはキーレンジ)を固有に表す時間です。単一のフレームまたはフレーム範囲の設定方法については、以下のコード例を参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    Return Value:
    None: intカットしたアニメーション カーブの数。
    """
    pass

    
def deformerEvaluator(chains: bool = False,meshes: bool = False) -> None:
    """
    デフォーマ エバリュエータ ステータスに関するデバッグ情報を出力します。照会モードの場合、デバッグ情報は string[] として返されます。照会モードでない場合、デバッグ情報はスクリプト エディタに表示されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    chains (boolean): サポートされているすべてのデフォメーションチェーンに関する情報を出力します。

    -----------------------------------------

    meshes (boolean): すべてのメッシュに関する情報を出力します。

    -----------------------------------------

    Return Value:
    None: string[]照会モードが使用されている場合は、デバッグ情報です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dopeSheetEditor(autoFit: str = "",autoFitTime: str = "",control: bool = False,defineTemplate: str = "",displayActiveKeyTangents: str = "",displayActiveKeys: str = "",displayInfinities: str = "",displayKeys: str = "",displayTangents: str = "",displayValues: str = "",docTag: str = "",exists: bool = False,filter: str = "",forceMainConnection: str = "",hierarchyBelow: bool = False,highlightConnection: str = "",lockMainConnection: bool = False,lookAt: str = "",mainListConnection: str = "",outliner: str = "",panel: str = "",parent: str = "",selectionConnection: str = "",selectionWindow: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0),showScene: bool = False,showSummary: bool = False,showTicks: bool = False,snapTime: str = "",snapValue: str = "",stateString: bool = False,unParent: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,useTemplate: str = "") -> None:
    """
    ドープ シート(Dope Sheet)エディタの特性が編集されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    autoFit (string): on|off|tglはビューへの自動フィットのオン/オフを切り替えます。

    -----------------------------------------

    autoFitTime (string): on|off|tglは時間軸に沿ってビューへの自動フィットのオン/オフも切り替えます。

    -----------------------------------------

    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    displayActiveKeyTangents (string): on|off|tglはエディタのアクティブキー接線の表示/非表示を切り替えます。

    -----------------------------------------

    displayActiveKeys (string): on|off|tglはエディタのアクティブキーの表示/非表示を切り替えます。

    -----------------------------------------

    displayInfinities (string): on|off|tglはエディタのインフィニティの表示/非表示を切り替えます。

    -----------------------------------------

    displayKeys (string): on|off|tglはエディタのキーフレームの表示/非表示を切り替えます。

    -----------------------------------------

    displayTangents (string): on|off|tglはエディタの接線の表示/非表示を切り替えます。

    -----------------------------------------

    displayValues (string): on|off|tglはエディタのアクティブキーおよび接線の値の表示/非表示を切り替えます。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    hierarchyBelow (boolean): オブジェクトのアニメーションが階層構造で表示されます。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    lookAt (string): FitViewヘルパーを、「all」、「selected」、「currentTime」のいずれかで指定できます。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    outliner (string): ドープシートに関連するアウトライナ(Outliner)の名前

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    selectionWindow ([float, float, float, float]): 上下左右それぞれで指定した選択範囲の領域。

    -----------------------------------------

    showScene (boolean): シーンの概要オブジェクトが表示されます。

    -----------------------------------------

    showSummary (boolean): サマリーオブジェクトが表示されます。

    -----------------------------------------

    showTicks (boolean): アニメーションごとにチャネル内のキーマークディバイダを表示します。

    -----------------------------------------

    snapTime (string): 時間におけるキーフレームの移動スナップを「none」、「integer」、「keyframe」のいずれかで指定できます。

    -----------------------------------------

    snapValue (string): 値におけるキーフレームの移動スナップを「none」、「integer」、「keyframe」のいずれかで指定できます。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringエディタ名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def evaluationManager(cycleCluster: str = "",enabled: bool = False,idleBuild: bool = False,invalidate: bool = False,manipulation: bool = False,mode: str = "",downstreamFrom: str = "",nodeTypeGloballySerialize: bool = False,nodeTypeParallel: bool = False,nodeTypeSerialize: bool = False,nodeTypeUntrusted: bool = False,upstreamFrom: str = "",safeMode: bool = False) -> None:
    """
    DG を評価する評価マネージャ メソッドをオン/オフにします。使用可能なすべての評価モードを表示するには、「mode」フラグを照会します。特別なモード「off」を指定すると、評価マネージャは無効になります。スケジュール オーバーライド フラグ ノード「nodeTypeXXX」は、ノード記述の内容に関係なく、特定のノード タイプに特定のスケジュール タイプの使用を強制します。この機能の使用には注意が必要です。ノードによっては、代替のスケジュール タイプに適切に反応しないことがあります。一度に強制されるのは、制限が最も厳しい 1 つのスケジュール タイプ オーバーライドのみです。制限が厳しい順番は、「信頼できない」、「グローバル シリアル化」、「ローカル」、「シリアル化」、「並列」です。ただし、これらのノード タイプではすべてのオーバーライドが記憶されます。たとえば、ノード タイプ オーバーライドを「信頼できない」に設定してから、「並列」に設定した場合は、信頼できないオーバーライドが引き続き使用されます。その後、信頼できないオーバーライドをオフにすると、スケジュールが並列スケジュールになります。実際のノード スケジュール タイプよりも、常にオーバーライドの方が優先します。たとえば、ノード タイプに並列オーバーライドが設定されている場合は、「シリアル」の方が制限の厳しいスケジュール タイプであるにも関わらず、シリアル ノードは並列とみなされます。オーバーライドおよびネイティブ スケジュール タイプの階層を適用した後に、特定のノードが最後に使用するスケジュール タイプを確認するには、「dbpeek」コマンドの「graph」操作に引数「evaluationGraph」および「scheduling」を指定する例を参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    cycleCluster (string): サイクルクラスタ内に指定ノードと一緒に格納されているノードのリストを返します。評価モードがアクティブでない場合、またはノードがサイクル内に存在しない場合、リストは空になります。

    -----------------------------------------

    enabled (boolean): 照会モードのみで有効です。評価マネージャが現在有効かどうかを確認します。これは、現在のモードに依存しません。

    -----------------------------------------

    idleBuild (boolean): このフラグはrebuildオプションを設定します。trueに設定されている場合、評価グラフは可能になるとすぐに、アイドルイベント時にリビルドされます。falseに設定されている場合は、再生の開始時など、必要なときのみリビルドされます。注;これは標準コンテキストにアタッチされているグラフにのみ適用されます。その他のすべてのグラフは、それぞれ独自のルールに従って構築されます。アイドルイベント時に構築することの欠点は、グラフを頻繁に変更するワークフローや非常に大きなグラフがある場合に、グラフの構築時間がワークフローに影響する可能性があることです。既定ではidleBuildはオンになっています。構築時間が影響を受ける場合は、このフラグをオフにすることができます。

    -----------------------------------------

    invalidate (boolean): このフラグを使用すると、グラフが無効になります。値を使用すると、自動リビルドをアイドル時に行うのか(false)、または強制的に行うのか(true)を制御できます。このコマンドは、最後の手段として使用する必要があります。照会モードでグラフが有効かどうかを確認します。

    -----------------------------------------

    manipulation (boolean): このフラグは、評価マネージャ操作のサポートを有効にするために使用されます。

    -----------------------------------------

    mode (string): 評価マネージャの現在の評価モードを変更します。サポートされる値は、「off」、「serial」、「serialUncached」、「parallel」です。

    -----------------------------------------

    downstreamFrom (string): 評価グラフ内の指定ノードのすぐ下流にあるDGノードを検索します。接続にはDG接続ではなく、評価モード接続が使用されます。照会モードでは、グラフが走査され、指定ノードのすぐ下流にあるすべてのノードが返されます。戻り値のタイプは、グラフのレベルおよびノード名を表す値の代替ペアです。たとえば、グラフA->B->CのAから下流に向かって走査する場合、戻り値は文字列の配列("0","A","1","B","2","C")になります。スクリプトを使用すると、この情報をさらに視覚的に認識しやすい形式に分解できます。このようなスクリプトで処理する必要があるサイクルが存在する可能性があります。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    nodeTypeGloballySerialize (boolean): このフラグは、評価マネージャが「parallel」モードの場合にのみ使用できますが、設定はいつでも可能です。評価マネージャでクラス名引数に対してグローバルシリアルスケジュールを強制するオーバーライドを、アクティブまたは非アクティブにします。有効なオブジェクト値は「transform」、「skinCluster」、「mesh」などのクラスタイプ名です。ノードを指定しないで照会すると、グローバルシリアルスケジュールオーバーライドがアクティブなノードのリストを返します。スケジュールのオーバーライドは、すべてのノードおよびノードタイプのスケジュールルールよりも優先します。この機能の使用には注意が必要です。ノードによっては、代替のスケジュールタイプに適切に反応しないことがあります。

    -----------------------------------------

    nodeTypeParallel (boolean): このフラグは、評価マネージャが「parallel」モードの場合にのみ使用できますが、設定はいつでも可能です。評価マネージャでクラス名引数に対して並列スケジュールを強制するオーバーライドを、アクティブまたは非アクティブにします。有効なオブジェクト値は「transform」、「skinCluster」、「mesh」などのクラスタイプ名です。ノードを指定しないで照会すると、並列スケジュールオーバーライドがアクティブなノードのリストを返します。スケジュールのオーバーライドは、すべてのノードおよびノードタイプのスケジュールルールよりも優先します。この機能の使用には注意が必要です。ノードによっては、代替のスケジュールタイプに適切に反応しないことがあります。

    -----------------------------------------

    nodeTypeSerialize (boolean): このフラグは、評価マネージャが「parallel」モードの場合にのみ使用できますが、設定はいつでも可能です。評価マネージャでクラス名引数に対してローカルシリアルスケジュールを強制するオーバーライドを、アクティブまたは非アクティブにします。有効なオブジェクト値は「transform」、「skinCluster」、「mesh」などのクラスタイプ名です。ノードを指定しないで照会すると、ローカルシリアルスケジュールオーバーライドがアクティブなノードのリストを返します。スケジュールのオーバーライドは、すべてのノードおよびノードタイプのスケジュールルールよりも優先します。この機能の使用には注意が必要です。ノードによっては、代替のスケジュールタイプに適切に反応しないことがあります。

    -----------------------------------------

    nodeTypeUntrusted (boolean): このフラグは、評価マネージャが「parallel」モードの場合にのみ使用できますが、設定はいつでも可能です。評価マネージャでクラス名引数に対して信頼できないスケジュールを強制するオーバーライドを、アクティブまたは非アクティブにします。有効なオブジェクト値は「transform」、「skinCluster」、「mesh」などのクラスタイプ名です。ノードを指定しないで照会すると、信頼できないスケジュールオーバーライドがアクティブなノードのリストを返します。スケジュールのオーバーライドは、すべてのノードおよびノードタイプのスケジュールルールよりも優先します。この機能の使用には注意が必要です。ノードによっては、代替のスケジュールタイプに適切に反応しないことがあります。信頼できないスケジュールを使用すると、他のどの評価にも依存しないで、「危険域」にあるノードを評価できます。信頼できないノードによって並列性が失われると、パフォーマンスが大幅に低下することがあるため、これは最後の手段としてのみ使用する必要があります。

    -----------------------------------------

    upstreamFrom (string): 評価グラフ内の指定ノードのすぐ上流にあるDGノードを検索します。接続にはDG接続ではなく、評価モード接続が使用されます。照会モードでは、グラフが走査され、指定ノードのすぐ上流にあるすべてのノードが返されます。戻り値のタイプは、グラフのレベルおよびノード名を表す値の代替ペアです。たとえば、グラフA->B->CのCから上流に向かって走査する場合、戻り値は文字列の配列("0","C","1","B","2","A")になります。スクリプトを使用すると、この情報をさらに視覚的に認識しやすい形式に分解できます。このようなスクリプトで処理する必要があるサイクルが存在する可能性があります。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    safeMode (boolean): このフラグは、並列評価のセーフモードをアクティブ/非アクティブにします。有効にすると、評価グラフの依存関係が失われている場合、並列実行がシリアル実行にフォールバックします。検出は、並列評価のスケジュール中に行われます。つまり、次の評価でフォールバックが発生する可能性があります。警告:このモードを無効にする場合は、特に注意する必要があります。無効な評価が検出された場合、パラレルモードからシリアルモードにフォールバックできなくなります。このような状況でも評価が適切に機能することがあります。このフラグを使用すると、パラレル動作のパフォーマンスが最大に保たれます。ただし、セーフモードは無効な評価を検出するために使用されるため、これを無効にすると、評価時に問題が発生したり、無効な値からの取得、評価の消失、クラッシュが発生することもあります。

    -----------------------------------------

    Return Value:
    None: string[]すべての評価マネージャ モードの名前です(フラグを指定しないで照会)。string[]選択したノードを含むクラスタ サイクル内のすべてのノードの名前です。boolean操作のアクティブ化または非アクティブ化に成功したかどうかを示します(「manipulation」フラグを指定)。boolean操作がアクティブ状態であるか、または非アクティブ状態であるかを示します(「manipulation」フラグを指定して照会)。boolean評価マネージャ モードの設定に成功したかどうかを示します(「mode」フラグを指定)。boolean評価マネージャの待機リフレッシュ ビルド モードの設定に成功したかどうかを示します(「idleBuild」フラグを指定)。boolean待機リフレッシュ ビルド モードがアクティブであるかどうかを指定します(「idleBuild」フラグを指定して照会)。boolean評価グラフは現在有効ですか?(「invalidate」フラグを指定して照会)booleanノード タイプの並列スケジュール モードの設定に成功したかどうかを示します(「nodeTypeParallel」フラグを指定)。boolean[]指定したノード タイプの並列スケジュールの状態です(オブジェクトを指定して「nodeTypeParallel」フラグを照会)。string[]並列スケジュール モードのすべてのノード タイプの名前です(「nodeTypeParallel」フラグを単独で照会)。booleanノード タイプのシリアル化モードの設定に成功したかどうかを示します(「nodeTypeSerialize」フラグを指定)。boolean[]指定したノード タイプのシリアル化状態です(オブジェクトを指定して「nodeTypeSerialize」フラグを照会)。string[]シリアル スケジュール モードのすべてのノード タイプの名前です(「nodeTypeSerialize」フラグを単独で照会)。booleanノード タイプのグローバル シリアル化モードの設定に成功したかどうかを示します(「nodeTypeGloballySerialize」フラグを指定)。boolean[]指定したノード タイプのグローバルシリアル化状態です(オブジェクトを指定して「nodeTypeGloballySerialize」フラグを照会)。string[]グローバル シリアル化スケジュール モードのすべてのノード タイプの名前です(「nodeTypeGloballySerialize」フラグを単独で照会)。booleanノード タイプを信頼できないモードに設定することに成功したかどうかを示します(「nodeTypeUntrusted」フラグを指定)。boolean[]指定されたノード タイプが信頼できないかどうかを示します(オブジェクトを指定して「nodeTypeUntrusted」フラグを照会)。string[]信頼できないスケジュール モードのすべてのノード タイプの名前です(「nodeTypeUntrusted」フラグを単独で照会)。string評価マネージャ モードです(「mode」フラグを指定して照会)。string[]指定ノードのすぐ下流または上流にあるすべてのノードの名前です(「upstreamFrom」/「downstreamFrom」フラグを指定)。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def evaluator(clusters: bool = False,configuration: str = "",enable: bool = False,info: bool = False,name: str = "",nodeType: str = "",nodeTypeChildren: bool = False,priority: int = 1,valueName: str = "") -> None:
    """
    評価マネージャで使用されるカスタム評価のオーバーライドをオン/オフにします。すべての使用可能なカスタム エバリュエータを表示するには、フラグを指定しないで照会します。エバリュエータが現在有効かどうかを確認するには、「enable」フラグを照会します。「name」フラグを使用しない場合は、すべてのモードおよび現在のアクティブ状態を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    clusters (boolean): このフラグは、指定されたカスタムエバリュエータに現在割り当てられているクラスタのリストを照会します。戻り値は一連の(number,string[])グループで構成された、文字列の配列です。たとえば、エバリュエータに2つのクラスタがあり、それぞれに2つのノードと3つのノードが含まれている場合、出力は(2,'transform2','transform3',3,'joint1','joint2','joint3')のようになります。

    -----------------------------------------

    configuration (string): カスタムエバリュエータに構成情報を送信します。構成情報の意味を把握するのは、エバリュエータの役割です。複数の構成メッセージを1つのコマンドで送信することができます。指定されたエバリュエータで使用できる構成メッセージを特定するには、このエバリュエータに対してこのフラグを照会します。

    -----------------------------------------

    enable (boolean): フラグの状態に応じて、特定のグラフ評価ランタイムフラグを有効または無効にします。このフラグを使用するには、「name」引数で名前を指定する必要もあります。「enable」フラグを「nodeType」フラグと一緒に使用すると、指定されたエバリュエータに対して、指定タイプのノードの処理機能を選択的にオンまたはオフにすることができます(つまり、エバリュエータの有効状態が切り替わることはなくなります)。「enable」フラグを「configuration」フラグと一緒に使用すると、カスタムエバリュエータによって解釈された構成メッセージとともに「enable」フラグが渡されます。

    -----------------------------------------

    info (boolean): エバリュエータの情報を照会します。この情報はエバリュエータの内部状態によって生成され、変更できないため、照会モードでのみ有効です。このフラグを使用するには、「name」引数も指定する必要があります。

    -----------------------------------------

    name (string): 特定のDG評価オーバーライドエバリュエータを指定します。エバリュエータは名前で自動的に登録されます。使用可能なランタイムのリストを取得するには、このフラグを照会します。ランタイムが登録されている場合、そのランタイムは既定で有効です。有効な状態を変更するには、「enable」フラグを使用します。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    nodeType (string): エバリュエータ要求に渡す特定のノードタイプを指定します。エバリュエータは渡されたこのノードタイプの情報を使用することも、無視することもできます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    nodeTypeChildren (boolean): このフラグが有効で、かつ「nodeType」フラグを使用している場合は、指定したノードタイプから派生したすべてのノードタイプも処理します。既定では、指定されたノードタイプのみを処理します。

    -----------------------------------------

    priority (int): エバリュエータの優先順位を照会または設定します。優先順位が最も高いカスタムエバリュエータが、ノードを最初に要求する機会を取得します。エバリュエータには一意の優先順位の値が必要です。このフラグを使用するには、「name」引数で名前を指定する必要もあります。

    -----------------------------------------

    valueName (string): 指定したエバリュエータに対して値を照会します。エバリュエータは自身が応答する値のセットを定義できます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    Return Value:
    None: string[]使用可能なエバリュエータのリストです(エバリュエータ フラグを指定しないで、または無効なエバリュエータ名を指定して照会)。boolean指定したエバリュエータの前のアクティブ状態です(「name」および「enable」フラグを指定)。boolean指定したエバリュエータのアクティブ状態です(「name」および「enable」フラグを指定して照会)。string[]要求されたアクティブ状態にあるエバリュエータのリストです(「enable」フラグを指定して照会)。string[]エバリュエータがアクティブな、または非アクティブなノードのリストです(「nodeType」または「nodeTypeChildren」フラグを指定)。stringエバリュエータに対して照会された値です(「name」および「valueName」フラグを指定)。booleanエバリュエータによって構成要求が受け入れられた場合は、true です(「name」フラグおよび「configuration」フラグを指定)。string[]エバリュエータによって受け入れられた構成パラメータのリストです(た照会モードで「name」フラグおよび「configuration」フラグを指定)。string[]エバリュエータに現在割り当てられているクラスタを含む、中間サブリスト サイズのリストです(「name」フラグおよび「clusters」フラグを指定した照会モード)。stringエバリュエータから提供されるヘルプ情報です(「name」フラグおよび「info」フラグを指定した照会モード)。intエバリュエータの優先度の値です(「name」フラグと「priority」フラグを指定した照会モード)。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def filterCurve(endTime: float = 1.0,filter: str = "",kernel: str = "",maxTimeStep: float = 1.0,minTimeStep: float = 1.0,period: float = 1.0,startTime: float = 1.0,timeTolerance: float = 1.0,tolerance: float = 1.0) -> None:
    """
    filterCurve コマンドはアニメーション カーブのリストをフィルタします。現在、サポートしているのはオイラー フィルタのみです。オイラー フィルタは非連続の回転アニメーション カーブを滑らかなカーブに修正します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    endTime (time): フィルタリングするセクションの終了時間を指定します。指定していない場合、アニメーションカーブの最後のキーを使用して終了時間を定義します。

    -----------------------------------------

    filter (string): 使用するフィルタタイプを指定します。使用可能なフィルタはオイラー(Euler)、簡略化(Simplify)、リサンプル(Resample)です。既定ではオイラーが使用されます。

    -----------------------------------------

    kernel (string): リサンプルカーネルは高密度データをリサンプリングする、デシメーションフィルタです。キーフレームに動作し、まばらなデータで使用すると、期待するような結果が出ない場合があります。リサンプルフィルタは、均一性を問わず、時間ステップ入力データサンプルを指定した均一timeStepへと変換します。さまざまな時間領域フィルタが使用可能で、アニメーションカーブのキーフレームに適用されるリサンプリングカーネルを選択するカーネルフラグで指定できます。カーネル値closest出力タイムスタンプに最も近いサンプルlirp最も近いサンプル間のリニア補間boxボックスフィルタ:移動平均triangle三角フィルタ:(1-|x|)ウェイト付けされた移動平均gaussian2Gaussian2フィルタ:(2^(-2x*x))ウェイト付けされた移動平均gaussian4Gaussian4フィルタ:(2^(-4x*x))ウェイト付けされた移動平均このフィルタはデシメーションのリサンプリングのみが対象で、補間のリサンプリングは基本的にサポートしていません。出力フレームレートが入力フレームレートよりも高い場合は(入力時間ステップは規則的と仮定されないので概算)通常、lirpと三角は補間され、残りは入力のフェーズと頻度によって平均化、または最も近いサンプルを使用します。ただし、この操作モードでは期待する結果が得られない場合があります。

    -----------------------------------------

    maxTimeStep (float): 簡略化(Simplify)フィルタ。

    -----------------------------------------

    minTimeStep (float): 簡略化(Simplify)フィルタ。

    -----------------------------------------

    period (float): リサンプル(Resample)フィルタ。

    -----------------------------------------

    startTime (time): フィルタリングの開始時間を指定します。指定していない場合、アニメーションカーブの最初のキーを使用して開始時間を取得します。

    -----------------------------------------

    timeTolerance (float): 簡略化(Simplify)フィルタ。

    -----------------------------------------

    tolerance (float): 簡略化(Simplify)フィルタ。

    -----------------------------------------

    Return Value:
    None: intフィルタされたカーブの数
    """
    pass

    
def findKeyframe(animation: str = "",attribute: str = "",controlPoints: bool = False,curve: bool = False,float: Tuple[float, float] = tuple(1.0, 1.0),hierarchy: str = "",includeUpperBound: bool = False,index: int = 1,shape: bool = False,time: Tuple[float, float] = tuple(1.0, 1.0),timeSlider: bool = False,which: str = "") -> None:
    """
    このコマンドは、キーセット上に作用します。キーセットは、1 つまたは複数のアニメーション カーブ上の指定したタイム レンジ内のキー グループとして定義されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animation (string): このコマンドが、自身が影響を与えるアニメーションを取得する場所です。有効な値は「objects」、「keys」、「keysOrObjects」で、既定は「keysOrObjects」です(詳細については、説明を参照してください)。

    -----------------------------------------

    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    controlPoints (boolean): このフラグは、アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    curve (boolean): 選択したオブジェクトやアトリビュートをドライブする既存のカーブのリストを返します。このフラグを使用すると、which、index、floatRange、timeRange、とincludeUpperBoundフラグは無視されます。

    -----------------------------------------

    float (floatrange): 時間ベースのanimCurve上の時間ベースでないキー(またはキーレンジ)を固有に表す値です。有効なfloatRangeは、単一の値(-f10)、または上下限をコロンで区切った文字列(-f"10:20")です。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    hierarchy (string): 階層展開オプションです。有効な値は、「above」、「below」、「both」、「none」です。(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    includeUpperBound (boolean): -t/timeまたは-f/floatフラグがキーの範囲を表す場合に、範囲の上限のキーをキーセットに含めるかどうかを定義します。既定値:true。このフラグは、-t/timeフラグの引数が上下限が指定したタイムレンジである場合に限り有効です（「pasteKey」コマンドでこのフラグを使用するときに「replace」、「fitReplace」、「scaleReplace」などのオプションを指定すると、このフラグは、置き換えられるターゲットカーブの時間範囲のみを参照します。このフラグは、クリップボードからペーストされたカーブには影響しません）。

    -----------------------------------------

    index (uint): アニメーションカーブ上のキーのインデックス照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    time (timerange): 時間ベースのアニメーションカーブ上のキー(またはキーレンジ)を固有に表す時間です。単一のフレームまたはフレーム範囲の設定方法については、以下のコード例を参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    timeSlider (boolean): タイムスライダに表示されているキーマークから次のキータイムを選びます。このフラグが設定されると、-an/animationフラグは無視されます。

    -----------------------------------------

    which (string): キーの検索方法で、「next」、「previous」、「first」、または「last」を指定します。

    -----------------------------------------

    Return Value:
    None: timeコマンドの結果
    """
    pass

    
def flow(divisions: Tuple[int, int, int] = tuple(1, 1, 1),localCompute: bool = False,localDivisions: Tuple[int, int, int] = tuple(1, 1, 1),objectCentered: bool = False) -> None:
    """
    flow コマンドは、モーション パス アニメーションのカーブに沿ってアニメートされるオブジェクトを「ベンドする」デフォメーション ラティスを作成します。モーション パス アニメーションには、オンに設定するための追従オプションがなければなりません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    divisions ([uint, uint, uint]): このフラグはx、y、zにおけるラティススライスの数を指定します。既定値は252です。照会するとTuInt32TuInt32TuInt32を返します。

    -----------------------------------------

    localCompute (boolean): このフラグは、オブジェクトデフォメーションにローカルコントロールを持たせるかどうかを指定します。既定値:ラティスがカーブの周りにあるときはオンで、オブジェクトの周りにあるときはオフです。照会するとbooleanを返します。

    -----------------------------------------

    localDivisions ([uint, uint, uint]): このフラグは影響範囲を指定します。既定値は222です。照会するとTuInt32TuInt32TuInt32を返します。

    -----------------------------------------

    objectCentered (boolean): このフラグは選択したオブジェクトの中心の周りにラティスを作成するか、またはカーブの周りにラティスを作成するかを指定します。既定はtrueです。照会するとbooleanを返します。

    -----------------------------------------

    Return Value:
    None: string[]作成されたフロー ノードと関連するラティス ノードの名前です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def freezeOptions(displayLayers: bool = False,downstream: str = "",explicitPropagation: bool = False,invisible: bool = False,referencedNodes: bool = False,runtimePropagation: bool = False,upstream: str = "") -> None:
    """
    このコマンドは、ノードがフリーズ状態の場合に伝搬と認識を処理するために評価マネージャが使用するオプションへのアクセスを提供します。利用可能な各種のオプションについては、それぞれのフラグを参照してください。これらの値は、すべてのユーザ プリファレンスとして格納され、セッション間で維持されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    displayLayers (boolean): このオプションを有効にすると、有効で非表示の表示レイヤにあるすべてのノードはフリーズ状態とみなされ、それに従ってフリーズ状態が伝搬されます。

    -----------------------------------------

    downstream (string): 現在フリーズ状態のノードの下流にフリーズ状態を伝搬する方法を制御します。有効な値は、伝播しない場合は「none」、すべての上流ノードがフリーズ状態の場合にのみ下流に伝播する場合は「safe」、すべての上流ノードがフリーズ状態の場合に下流に伝播する場合は「force」です。

    -----------------------------------------

    explicitPropagation (boolean): オンにすると、現在有効になっている評価グラフのオプションで指定されているとおりにフリーズ状態を関連ノードにインテリジェントに伝播するための評価グラフを構築する際に、追加のパスを実行します。「runtimePropagation」も参照してください。このオプションは、フリーズ状態のより完全な伝播を実行しますが、評価グラフの再計算に余分な時間がかかります。

    -----------------------------------------

    invisible (boolean): このオプションを有効にすると、直接または非表示の親ノードを介して非表示になっているすべてのノードがフリーズ状態とみなされ、それに従ってフリーズ状態が伝搬されます。

    -----------------------------------------

    referencedNodes (boolean): このオプションを有効にすると、フリーズ状態のリファレンスノードから参照されるすべてのノードはフリーズ状態とみなされ、それに従ってフリーズ状態が伝搬されます。

    -----------------------------------------

    runtimePropagation (boolean): オンにすると、評価グラフの実行中にフリーズ状態が伝搬されます。「explicitPropagation」も参照してください。このオプションにより、フリーズ状態のノードの評価をスケジュールできますが、フリーズ状態のノードが検出されると、現在有効なオプションのセットに基づいて評価が削減されます。これは下流方向でのみ機能します。

    -----------------------------------------

    upstream (string): 現在フリーズ状態のノードの上流にフリーズ状態を伝搬する方法を制御します。有効な値は、伝播しない場合は「none」、すべての下流ノードがフリーズ状態の場合にのみ上流に伝播する場合は「safe」、すべての下流ノードがフリーズ状態の場合に上流に伝播する場合は「force」です。

    -----------------------------------------

    Return Value:
    None: string下流または上流のフラグを照会する場合は、オプションの現在の値booleandisplayLayers、invisible、referencedNodes、explicitPropagation、または runtimePropagaton フラグを照会する場合は、オプションの現在の値boolean作成モードでは、すべてのオプションが正常に設定された場合に True を返します照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def hikGlobals(releaseAllPinning: bool = False) -> None:
    """
    アプリケーションのグローバル HumanIK フラグを設定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    releaseAllPinning (boolean): すべての固定hikフラグをグローバルに解除するよう設定します。このフラグを設定すると、すべての固定状態が無視されます。

    -----------------------------------------

    Return Value:
    None: booleanオプションの状態を指定照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def keyframe(absolute: bool = False,adjustBreakdown: bool = False,animation: str = "",attribute: str = "",breakdown: bool = False,clipTime: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),controlPoints: bool = False,eval: bool = False,float: Tuple[float, float] = tuple(1.0, 1.0),floatChange: float = 1.0,hierarchy: str = "",includeUpperBound: bool = False,index: int = 1,indexValue: bool = False,keyframeCount: bool = False,lastSelected: bool = False,name: bool = False,option: str = "",relative: bool = False,selected: bool = False,shape: bool = False,tickDrawSpecial: bool = False,time: Tuple[float, float] = tuple(1.0, 1.0),timeChange: float = 1.0,valueChange: float = 1.0) -> None:
    """
    このコマンドは、キーセット上に作用します。キーセットは、1 つまたは複数のアニメーション カーブ上の指定したタイム レンジ内のキー グループとして定義されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absolute (boolean): 移動量は絶対値です。

    -----------------------------------------

    adjustBreakdown (boolean): falseのときは、キーを移動してもブレークダウンタイミングは保持されません。true(既定)のときは、ブレークダウンタイミングリレーションが保持されるように調整されます。

    -----------------------------------------

    animation (string): このコマンドが、自身が影響を与えるアニメーションを取得する場所です。有効な値は「objects」、「keys」、「keysOrObjects」で、既定は「keysOrObjects」です(詳細については、説明を参照してください)。

    -----------------------------------------

    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    breakdown (boolean): キーのブレークダウン状態を設定します。整数を返します。既定はfalseです。キーのブレークダウン状態は、-tcや-fcフラグを使ったキーの移動コマンドでは設定できません。

    -----------------------------------------

    clipTime ([time, time, float]): オフセット、ピボット、およびスケールを使用してキーを挿入する最終的な時間を変更します。

    -----------------------------------------

    controlPoints (boolean): このフラグは、アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    eval (boolean): 入力接続と無関係に、-t/timeまたは-f/floatフラグで指定される時間で評価されるときのアニメーションカーブの値を返します。他の照会フラグと一緒に使ったり、タイムレンジ(-t"5:10")と共に使うことはできません。コマンドラインに-tまたは-fフラグが使われていないとき、evalは現在のタイムに照会されます。照会するとfloat[]を返します。

    -----------------------------------------

    float (floatrange): 時間ベースのanimCurve上の時間ベースでないキー(またはキーレンジ)を固有に表す値です。有効なfloatRangeは、単一の値(-f10)、または上下限をコロンで区切った文字列(-f"10:20")です。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    floatChange (float): x(float)軸に沿ったキーの(非時間入力アニメーションカーブ上での)移動量(-relativeで)または移動場所(-absoluteで)を指定します。照会するとfloat[]を返します。

    -----------------------------------------

    hierarchy (string): 階層展開オプションです。有効な値は、「above」、「below」、「both」、「none」です。(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    includeUpperBound (boolean): -t/timeまたは-f/floatフラグがキーの範囲を表す場合に、範囲の上限のキーをキーセットに含めるかどうかを定義します。既定値:true。このフラグは、-t/timeフラグの引数が上下限が指定したタイムレンジである場合に限り有効です（「pasteKey」コマンドでこのフラグを使用するときに「replace」、「fitReplace」、「scaleReplace」などのオプションを指定すると、このフラグは、置き換えられるターゲットカーブの時間範囲のみを参照します。このフラグは、クリップボードからペーストされたカーブには影響しません）。

    -----------------------------------------

    index (uint): アニメーションカーブ上のキーのインデックス照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    indexValue (boolean): キーのインデックスに対して整数を返す照会専用のフラグです。

    -----------------------------------------

    keyframeCount (boolean): ターゲット用に見つかったキーの数に対して整数を返します。

    -----------------------------------------

    lastSelected (boolean): このフラグが照会で使われた場合、最後に選択したキーに対して要求された値を返します。

    -----------------------------------------

    name (boolean): 指定したノード、アトリビュート、キーのアニメーションカーブの名前を返します。

    -----------------------------------------

    option (string): 有効な値は、「move」、「insert」、「over」、「segmentOver」です。キーに「move」を設定しても、そのキーは前後でほかのキーを越えては移動しません。キーを「insert」すると、(-timeChangeの値に応じて)その前後にあるキーがすべて、同等の量、移動します。キーを「over」すると、このキーは(他のキーがその場所に既に存在しない限り)いつでも移動することができます。複数のキーのセットを「segmentOver」すると(このオプションは、複数のキーを移動する場合のみ、明らかなエフェクトを生み出します)、タイムレンジを指定しない限り、(時間的に)最初のキーと、最後のキーにより、セグメントが定義されます。その後、このセグメントは他のキーの上に移動できるようになり、このセグメントのための余地を作るために、キーは移動します。

    -----------------------------------------

    relative (boolean): 移動量は、キーの現行位置を基準にした相対値です。

    -----------------------------------------

    selected (boolean): このフラグが照会で使われた場合、どんなアクティブなキーに対しても要求された値を返します。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    tickDrawSpecial (boolean): タイムスライダの表示がキーマークに変わると、このキーに特殊な描画状態が設定されます。

    -----------------------------------------

    time (timerange): 時間ベースのアニメーションカーブ上のキー(またはキーレンジ)を固有に表す時間です。単一のフレームまたはフレーム範囲の設定方法については、以下のコード例を参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    timeChange (time): x(時間)軸に沿ったキーの(時間入力アニメーションカーブ上での)移動量(-relativeで)または移動場所(-absoluteで)を指定します。照会するとfloat[]を返します。

    -----------------------------------------

    valueChange (float): y(値)軸に沿ったキーの移動量(-relativeで)または移動場所(-absoluteで)を指定します。照会するとfloat[]を返します。

    -----------------------------------------

    Return Value:
    None: int(下記に記述があるもの以外)キーが修正されたカーブの数。照会モードでは、このコマンドは、下記の照会可能なフラグで記述されたとおり、さまざまなオブジェクトを返すことがあります。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def keyframeOutliner(animCurve: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",display: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、キーフレーム アウトライナ コントロールを作成/編集/照会します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animCurve (string): キーフレームを表示するアニメーションカーブの名前を指定します。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    display (string): narrow、wideのどのカラムで表示するかを指定します。「narrow」のときは、時間と値が表示され、「wide」のときは接線情報も表示されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringアウトライナ(Outliner)コントロールの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def keyframeStats(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,animEditor: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),classicMode: bool = False,columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,precision: int = 1,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",timeAnnotation: str = "",useTemplate: str = "",valueAnnotation: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    animEditor (string): コントロールに接続されるアニメーションエディタの名前を指定します。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    classicMode (boolean): 表示モードを編集します。trueの場合は状態のみ、それ以外の場合は時間値を表示します。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    precision (int): 浮動小数値のチャネルで表示される、小数点の右側の桁数を制御します。既定は3です。照会すると、整数を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    timeAnnotation (string): この時間フィールドに文字列値で注釈を付けます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    valueAnnotation (string): この値フィールドに文字列値で注釈を付けます。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成された詳細コントロールの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def keyingGroup(activator: str = "",addElement: str = "",afterFilters: bool = False,category: str = "",clear: str = "",color: int = 1,copy: str = "",edges: bool = False,editPoints: bool = False,empty: bool = False,excludeDynamic: bool = False,excludeRotate: bool = False,excludeScale: bool = False,excludeTranslate: bool = False,excludeVisibility: bool = False,facets: bool = False,flatten: str = "",forceElement: str = "",include: str = "",intersection: str = "",isIntersecting: str = "",isMember: str = "",layer: bool = False,minimizeRotation: bool = False,name: str = "",noSurfaceShader: bool = False,noWarnings: bool = False,nodesOnly: bool = False,remove: str = "",removeActivator: str = "",renderable: bool = False,setActiveFilter: str = "",size: bool = False,split: str = "",subtract: str = "",text: str = "",union: str = "",vertices: bool = False) -> None:
    """
    このコマンドは、キー設定グループのメンバーシップを管理するために使用されます。キー設定グループを使用すると、関連するキーフレーム データを効率的に管理し、キー設定グループのアトリビュートのキーを 1 つのエンティティとして設定したり編集したりできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activator (name): 選択したノードを、指定したキー設定グループのアクティベータとして設定します。照会モードでは、指定したキー設定グループをアクティブ化するオブジェクトのリストを返します。

    -----------------------------------------

    addElement (name): 指定したセットに項目のリストを追加します。一部の項目が編集対象のセットと同じパーティション内の別のセットにあるためにそれらの項目をセットに追加できない場合、コマンドは失敗します。

    -----------------------------------------

    afterFilters (boolean): 既定の状態はfalseです。このフラグは編集モードのみに有効です。このフラグは、スカルプト、ラティス、ブレンドシェイプなどのデフォーマが適用されるセットに対して使用します。既定の編集モードでは、デフォーマが適用されるグループのメンバー関係が編集されます。グループを編集するがデフォーマのメンバー関係を変更しない場合は、このフラグをtrueに設定します。

    -----------------------------------------

    category (string): キー設定グループのカテゴリを設定します。これは、グローバルなアクティブキー設定グループフィルタに合致させるために使用します。

    -----------------------------------------

    clear (name): 指定したセットからすべての項目を除去してセットを空にします。

    -----------------------------------------

    color (int): セットのハイライトカラーを定義します。値は[-1,7]の範囲の値(いずれかのユーザ定義カラー)である必要があります。-1は、カラーが未定義で、影響がないことを示します。頂点セットの頂点だけがこのカラーで表示されます。

    -----------------------------------------

    copy (name): 指定したセットのメンバーを新しいセットにコピーします。このフラグは作成モードのみに使用します。

    -----------------------------------------

    edges (boolean): 新しいセットにエッジだけを含めることができることを示します。このフラグは、作成モードまたは照会モードのみに使用します。既定値はfalseです。

    -----------------------------------------

    editPoints (boolean): 新しいセットにエディットポイントだけを含めることができることを示します。このフラグは、作成モードまたは照会モードのみに使用します。既定値はfalseです。

    -----------------------------------------

    empty (boolean): 作成されるセットが空でなければならないことを示します。つまり、セットに追加するオブジェクトを識別する引数はいずれも無視されます。このフラグは、新しいセットを作成する操作のみに有効です。

    -----------------------------------------

    excludeDynamic (boolean): キー設定グループを作成するときに、Dynamicアトリビュートを除外します。

    -----------------------------------------

    excludeRotate (boolean): キー設定グループを作成するときに、Transform-typeノードからRotateアトリビュートを除外します。

    -----------------------------------------

    excludeScale (boolean): キー設定グループを作成するときに、Transform-typeノードからScaleアトリビュートを除外します。

    -----------------------------------------

    excludeTranslate (boolean): キー設定グループを作成するときに、Transform-typeノードから移動Translateアトリビュートを除外します。たとえば、キー設定グループにジョイントだけが含まれている場合に、そのキー設定グループに回転だけを含めたいことがあります。

    -----------------------------------------

    excludeVisibility (boolean): キー設定グループを作成するときに、Transform-typeノードからVisibilityアトリビュートを除外します。

    -----------------------------------------

    facets (boolean): 新しいセットにファセットだけを含めることができることを示します。このフラグは、作成モードまたは照会モードのみに使用します。既定値はfalseです。

    -----------------------------------------

    flatten (name): 指定したセットの構造を平らにします。つまり、指定したセットに含まれているすべてのセットをセットのメンバーで置き換えて、セットにその他のセットではなくその他のセットのメンバーが含まれるようにします。

    -----------------------------------------

    forceElement (name): 編集モードのみで使用してください。項目を強制的にセットに追加します。指定したセットと同じパーティション内の別のセットにその項目がある場合、メンバー関係の観点からパーティション内の各セットの相互排他性を保つために、その項目は別のセットから除去されます。

    -----------------------------------------

    include (name): 指定したセットに項目のリストを追加します。セットに追加できない項目がある場合は、警告が発せられます。これは、-add/addElement操作よりも厳密性に欠けます。

    -----------------------------------------

    intersection (name): リストのセットすべてのメンバーである項目のリストを返します。

    -----------------------------------------

    isIntersecting (name): リスト内の各セットが共通のメンバーを持っているかどうかをテストします。

    -----------------------------------------

    isMember (name): 指定した項目すべてが指定したセットのメンバーであるかどうかをテストします。

    -----------------------------------------

    layer (boolean): 廃止されました。使用しないでください。

    -----------------------------------------

    minimizeRotation (boolean): このフラグは、直接のkeyingGroupに含まれているアトリビュートにのみ影響します。サブkeyingGroupのアトリビュートには影響しません。これらのアトリビュートは、それぞれのkeyingGroupでminimizeRotationを設定する必要があります。

    -----------------------------------------

    name (string): 新しいセットの名前として文字列を割り当てます。このフラグは、新しいセットを作成する操作のみに有効です。

    -----------------------------------------

    noSurfaceShader (boolean): セットがレンダリング可能な場合、セットを既定のサーフェスシェーダマテリアルに接続しません。レンダリング不可能なセットの場合は、フラグに意味または効果はありません。このフラグは作成モードのみに使用します。既定値はfalseです。

    -----------------------------------------

    noWarnings (boolean): セットに無効な項目を追加しようとするときなどに、警告メッセージを報告しないことを示します(UIで使用)。

    -----------------------------------------

    nodesOnly (boolean): このフラグは、-q/queryフラグと一緒に使用できますが、照会可能な別のフラグと一緒に使用した場合は無視されます。このフラグは、セットのメンバー関係の照会結果を修正して、ノードのアトリビュート(sphere1.txなど)またはコンポーネントがセットに含まれているときにノードだけがリストされるようにします。セットにノードのアトリビュートまたはコンポーネントが複数存在する場合、各ノードは一度だけリストされます。

    -----------------------------------------

    remove (name): 指定したセットの項目リストを除去します。

    -----------------------------------------

    removeActivator (name): 選択したノードを、指定したキー設定グループのアクティベータとして除去します。

    -----------------------------------------

    renderable (boolean): このフラグは、特殊なタイプのセットを作成することを示します。このタイプのセット(objectSetとはまったく異なるshadingEngine)には、ライトやジオメトリなどのレンダリング可能な要素だけを含めることができるという、メンバー関係に関する特定の制約があります。作成時に、これらのセットはシェーディンググループとして参照され、「renderPartition」ノードに自動的に接続されます(セットのメンバーとパーティションのその他のセットとの相互排他性を確保するため)。このフラグは、作成モードまたは照会モードのみに使用します。既定値はfalseで、通常のセットを作成することを意味します。

    -----------------------------------------

    setActiveFilter (string): グローバルなアクティブキー設定グループフィルタを設定し、キー設定グループのアクティブ化に影響を与えます。フィルタに合致するカテゴリを持つキー設定グループのみがアクティブ化されます。setActiveFilterが「NoKeyingGroups」に設定されている場合、キー設定グループはまったくアクティブ化されません。setActiveFilterが「AllKeyingGroups」に設定されている場合、合致したカテゴリを持つキー設定グループではなく、すべてのキー設定グループがアクティブ化されます。

    -----------------------------------------

    size (boolean): sizeフラグはセットの長さを照会する場合に使用します。

    -----------------------------------------

    split (name): 項目リストを持つ新しいセットを作成し、指定したセットから項目リスト内の各項目を除去します。

    -----------------------------------------

    subtract (name): 2つのセットを比較して、2番目のセットにはない1番目のセットのメンバーを返します。

    -----------------------------------------

    text (string): セットとともに格納する注釈文字列を定義します。

    -----------------------------------------

    union (name): リストされたセットすべてのリストを返します。

    -----------------------------------------

    vertices (boolean): 新しいセットに頂点だけを含めることができることを示します。このフラグは、作成モードまたは照会モードのみに使用します。既定値はfalseです。

    -----------------------------------------

    Return Value:
    None: string作成操作(作成または編集されたキー設定グループの名前)string[]照会操作(キー設定グループ内の項目名)booleanisMember 操作照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def keyTangent(absolute: bool = False,animation: str = "",attribute: str = "",controlPoints: bool = False,float: Tuple[float, float] = tuple(1.0, 1.0),g: bool = False,hierarchy: str = "",inAngle: float = 1.0,inTangentType: str = "",inWeight: float = 1.0,includeUpperBound: bool = False,index: int = 1,ix: float = 1.0,iy: float = 1.0,lock: bool = False,outAngle: float = 1.0,outTangentType: str = "",outWeight: float = 1.0,ox: float = 1.0,oy: float = 1.0,pluginTangentTypes: str = "",relative: bool = False,shape: bool = False,stepAttributes: bool = False,time: Tuple[float, float] = tuple(1.0, 1.0),unify: bool = False,weightLock: bool = False,weightedTangents: bool = False) -> None:
    """
    このコマンドは、キーセット上に作用します。キーセットは、1 つまたは複数のアニメーション カーブ上の指定したタイム レンジ内のキー グループとして定義されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absolute (boolean): 接線位置への変更が現行位置に絶対的になります。

    -----------------------------------------

    animation (string): このコマンドが、自身が影響を与えるアニメーションを取得する場所です。有効な値は「objects」、「keys」、「keysOrObjects」で、既定は「keysOrObjects」です(詳細については、説明を参照してください)。

    -----------------------------------------

    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    controlPoints (boolean): このフラグは、アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    float (floatrange): 時間ベースのanimCurve上の時間ベースでないキー(またはキーレンジ)を固有に表す値です。有効なfloatRangeは、単一の値(-f10)、または上下限をコロンで区切った文字列(-f"10:20")です。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    g (boolean): グローバル接線タイプを操作する場合に指定します。グローバル接線タイプは、カーブのシェイプを保持する「i/insert」などのフラグと組み合わせる場合を除いて、接線タイプが特別に適用されていない場合に、setKeyframeコマンドで使用されます。キーをメニューから設定するときにも使われます。keyTangentコマンドで「g/global」フラグと一緒に使用できるフラグは、「itt/inTangentType」、「ott/outTangentType」、および「wt/weightedTangents」のみです。

    -----------------------------------------

    hierarchy (string): 階層展開オプションです。有効な値は、「above」、「below」、「both」、「none」です。(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    inAngle (angle): イン接線の角度用の新規の値を指定します。照会するとfloat[]を返します。

    -----------------------------------------

    inTangentType (string): イン接線タイプを指定します。有効な値は、「spline」、「linear」、「fast」、「slow」、「flat」、「step」、「stepnext」、「fixed」、「clamped」、「plateau」、「auto」です。照会するとstring[]を返します。

    -----------------------------------------

    inWeight (float): イン接線のウェイトの新しい値を指定します。照会するとfloat[]を返します。

    -----------------------------------------

    includeUpperBound (boolean): -t/timeまたは-f/floatフラグがキーの範囲を表す場合に、範囲の上限のキーをキーセットに含めるかどうかを定義します。既定値:true。このフラグは、-t/timeフラグの引数が上下限が指定したタイムレンジである場合に限り有効です（「pasteKey」コマンドでこのフラグを使用するときに「replace」、「fitReplace」、「scaleReplace」などのオプションを指定すると、このフラグは、置き換えられるターゲットカーブの時間範囲のみを参照します。このフラグは、クリップボードからペーストされたカーブには影響しません）。

    -----------------------------------------

    index (uint): アニメーションカーブ上のキーのインデックス照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    ix (float): イン接線のxコンポーネントの新しい値を指定します。接線コンポーネントの単位に依存しない表現です。照会するとfloat[]を返します。

    -----------------------------------------

    iy (float): イン接線のyコンポーネントの新しい値を指定します。接線コンポーネントの単位に依存しない表現です。照会するとfloat[]を返します。

    -----------------------------------------

    lock (boolean): イン接線とアウト接線が一緒に動くように接線をロックします。照会するとint[]を返します。

    -----------------------------------------

    outAngle (angle): アウト接線の角度の新しい値を指定します。照会するとfloat[]を返します。

    -----------------------------------------

    outTangentType (string): アウト接線タイプを指定します。有効な値は、「spline」、「linear」、「fast」、「slow」、「flat」、「step」、「stepnext」、「fixed」、「clamped」、「plateau」、「auto」です。照会するとstring[]を返します。

    -----------------------------------------

    outWeight (float): アウト接線のウェイトの新しい値を指定します。照会するとfloat[]を返します。

    -----------------------------------------

    ox (float): アウト接線のxコンポーネントの新しい値を指定します。接線コンポーネントの単位に依存しない表現です。照会するとfloat[]を返します。

    -----------------------------------------

    oy (float): アウト接線のyコンポーネントの新しい値を指定します。接線コンポーネントの単位に依存しない表現です。照会するとfloat[]を返します。

    -----------------------------------------

    pluginTangentTypes (string): ロードされたプラグイン接線タイプのリストを返します。戻り値は文字配列です。

    -----------------------------------------

    relative (boolean): 接線位置への変更が現行位置に相対的になります。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    stepAttributes (boolean): setKeyframeコマンドは、ブーリアンと列挙型アトリビュート用の接線をステップに自動的に設定します。このフラグは、この動作をkeyTangentコマンド用にミラーリングします。falseに設定すると、これらのアトリビュート用の接線は編集されません。true(既定)に設定すると、これらのアトリビュート用の接線は編集されます。

    -----------------------------------------

    time (timerange): 時間ベースのアニメーションカーブ上のキー(またはキーレンジ)を固有に表す時間です。単一のフレームまたはフレーム範囲の設定方法については、以下のコード例を参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    unify (boolean): イン接線とアウト接線が等しくなって、一緒に移動するよう接線を統一します。

    -----------------------------------------

    weightLock (boolean): 接線が固定するように接線のウェイトをロックします。照会するとint[]を返します。注:weightLockはグラフエディタ内でだけ有効です。-inWeight/-outWeightがコマンドから使用されたときは、無効です。

    -----------------------------------------

    weightedTangents (boolean): アニメーションカーブ上の接線がウェイトをかけられているかどうかを指定します。注:カーブのweightedTangentsをtrueからfalseにし、またtrueに戻すと、固定された接線を正しく保持できません。元に戻すを使用してください。

    -----------------------------------------

    Return Value:
    None: int接線が修正されたカーブの数。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def listAnimatable(active: bool = False,manip: bool = False,manipHandle: bool = False,shape: bool = False,type: bool = False) -> None:
    """
    ノードのアニメート可能アトリビュートがリストされます。フラグを指定すると、現在のマニピュレータまたはノード タイプでフィルタリングできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    active (boolean): このフラグはサポートしていません。

    -----------------------------------------

    manip (boolean): 現在のマニピュレータから影響されるアトリビュートのみが返されます。アクティブなマニピュレータが存在せず、別のフラグを指定した場合、出力は、「-manip」フラグを指定しない場合と同じです。

    -----------------------------------------

    manipHandle (boolean): 現在のマニピュレータハンドルに影響されるアトリビュートのみが返されます。アクティブなマニピュレータハンドルが存在せず、別のフラグを指定した場合、出力は、「-manipHandle」フラグを指定しない場合と同じです。

    -----------------------------------------

    shape (boolean): このフラグはサポートしていません。

    -----------------------------------------

    type (boolean): アトリビュートは返されず、現在アニメート可能なノードのタイプが返されます。

    -----------------------------------------

    Return Value:
    None: string[]検索されたすべてのアニメート可能アトリビュート
    """
    pass

    
def marker(attach: bool = False,detach: bool = False,frontTwist: float = 1.0,orientationMarker: bool = False,positionMarker: bool = False,sideTwist: float = 1.0,time: float = 1.0,upTwist: float = 1.0,valueU: float = 1.0) -> None:
    """
    指定した時間と場所で、モーション パス カーブ上に 1 つか 2 つのマーカーが作成されます。オプションの文字列引数は親オブジェクトの名前です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attach (boolean): 選択した3D位置マーカーを親ジオメトリにアタッチすることを指定します。

    -----------------------------------------

    detach (boolean): 親ジオメトリから3次元空間に、選択した位置マーカーをデタッチすることを指定します。

    -----------------------------------------

    frontTwist (angle): マーカーのフロントベクトルを中心にしたツイスト角度を指定します。既定は0です。照会するとangleを返します。

    -----------------------------------------

    orientationMarker (boolean): 方向のマーカーの作成を指定します。既定では設定されません。照会するとbooleanを返します。

    -----------------------------------------

    positionMarker (boolean): 位置マーカーの作成を指定します。既定で設定されます。照会するとbooleanを返します。

    -----------------------------------------

    sideTwist (angle): マーカーのサイドベクトルを中心にしたツイスト角度を指定します。既定は0です。照会するとangleを返します。

    -----------------------------------------

    time (time): マーカーの時間を指定します。既定は現在のタイムです。照会するとtimeを返します。

    -----------------------------------------

    upTwist (angle): マーカーのアップベクトルを中心にしたツイスト角度を指定します。既定は0です。照会するとangleを返します。

    -----------------------------------------

    valueU (float): 位置マーカーの位置(w.r.t)を指定します。親ジオメトリのUパラメータ設定。既定は現在のタイムの値です。照会するとlinearを返します。

    -----------------------------------------

    Return Value:
    None: string[](作成されたマーカーの名前)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def movieInfo(counter: bool = False,dropFrame: bool = False,frameCount: bool = False,frameDuration: bool = False,height: bool = False,movieTexture: bool = False,negTimesOK: bool = False,numFrames: bool = False,quickTime: bool = False,timeCode: bool = False,timeCodeTrack: bool = False,timeScale: bool = False,twentyFourHourMax: bool = False,width: bool = False) -> None:
    """
    movieInfo はムービー ファイルに関する情報を照会するメカニズムを提供します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    counter (boolean): ムービーのタイムコードフォーマットの「counter」フラグを照会します。これがtrueの場合、-timeCodeフラグによって返されるタイムコードは単純なカウンタです。falseの場合、返されるタイムコードは整数の配列(時間、分、秒、フレーム)です。

    -----------------------------------------

    dropFrame (boolean): ムービーのタイムコードフォーマットの「dropframe」フラグを照会します。

    -----------------------------------------

    frameCount (boolean): ムービーファイルのフレーム数を照会します。

    -----------------------------------------

    frameDuration (boolean): ムービーのタイムコードフォーマットのフレーム期間を照会します。

    -----------------------------------------

    height (boolean): ムービーの高さを照会します。

    -----------------------------------------

    movieTexture (boolean): 設定した場合、文字列引数はムービーテクスチャノードの名前と見なされ、コマンドはそのノードによってロードされたムービーに対して動作します。

    -----------------------------------------

    negTimesOK (boolean): ムービーのタイムコードフォーマットの「negtimesOK」フラグを照会します。

    -----------------------------------------

    numFrames (boolean): ムービーのタイムコードフォーマットの1秒あたりの全フレーム数を照会します。

    -----------------------------------------

    quickTime (boolean): ムービーがQuickTimeムービーかどうかを照会します。

    -----------------------------------------

    timeCode (boolean): 現在のムービーフレームのタイムコードを照会します。

    -----------------------------------------

    timeCodeTrack (boolean): ムービーにタイムコードトラックがあるかどうかを照会します。

    -----------------------------------------

    timeScale (boolean): ムービーのタイムコードフォーマットのタイムスケールを照会します。

    -----------------------------------------

    twentyFourHourMax (boolean): ムービーのタイムコードフォーマットの「24hourmax」フラグを照会します。

    -----------------------------------------

    width (boolean): ムービーの幅を照会します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def mute(disable: bool = False,force: bool = False) -> None:
    """
    mute コマンドを使用して、チャネルでの再生を無効/有効にします。チャネルをミュートしても、ミュート前の値は保持されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    disable (boolean): チャネルのミュートを無効にします。

    -----------------------------------------

    force (boolean): チャネルのミュートを強制的に無効にします。ミュートチャネルにキーが存在する場合、アニメーションノードとミュートノードの両方が除去されます。フラグを設定していない場合、アニメーションを持つミュートノードのみが無効化されます。

    -----------------------------------------

    Return Value:
    None: string[]ミュート ノードの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def pairBlend(attribute: str = "",input1: bool = False,input2: bool = False,node: str = "") -> None:
    """
    pairBlend ノードは、2 つの入力のウェイト付けされた組み合わせをブレンドすることができます。既に接続されているアトリビュートをキー設定またはコンストレイントするときに、自動的に作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): ブレンドがドライブするアトリビュートの名前。このフラグは、ブレンドの作成時に必要です。

    -----------------------------------------

    input1 (boolean): 入力1(Input1)に接続されているノードの文字配列を返します。

    -----------------------------------------

    input2 (boolean): 入力2(Input2)に接続されているノードの文字配列を返します。

    -----------------------------------------

    node (string): ブレンドがドライブするノードの名前。このフラグは、ブレンドの作成時に必要です。

    -----------------------------------------

    Return Value:
    None: stringpairBlend ノードの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def pasteKey(animLayer: str = "",animation: str = "",attribute: str = "",clipboard: str = "",connect: bool = False,copies: int = 1,float: Tuple[float, float] = tuple(1.0, 1.0),floatOffset: float = 1.0,includeUpperBound: bool = False,index: int = 1,matchByName: bool = False,option: str = "",time: Tuple[float, float] = tuple(1.0, 1.0),timeOffset: float = 1.0,valueOffset: float = 1.0) -> None:
    """
    クリップボードから別のオブジェクトかカーブにカーブ セグメント階層をペーストします。コピーかカットを行ったカーブ セグメントのオブジェクト階層が、ペースト先のオブジェクト階層と一致しない場合、pasteKey は階層内で一致する部分をペーストします。1 つのオブジェクトのアニメーションがクリップボード上にある場合は、それぞれの対象オブジェクトにペーストされます。複数のオブジェクトのアニメーションがクリップボード上にある場合は、どのアニメーションがどのオブジェクトにペーストされるかがセレクション リストの順序で決まります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animLayer (string): 貼り付けるキーが指定したアニメーションレイヤ上のカーブに貼り付けられるよう指定します。指定したオブジェクトまたはアトリビュートに対してそのレイヤが存在しない場合、キーは貼り付けられません。

    -----------------------------------------

    animation (string): このコマンドが、自身が影響を与えるアニメーションを取得する場所です。有効な値は「objects」、「keys」、「keysOrObjects」で、既定は「keysOrObjects」です(詳細については、説明を参照してください)。

    -----------------------------------------

    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    clipboard (string): アニメーションのペースト元になるクリップボードを指定します。有効なクリップボードは「api」と「anim」です。既定のクリップボードは「anim」です。

    -----------------------------------------

    connect (boolean): trueに設定すると、ペースト時にソースカーブがペースト先カーブの値に接続されます。(これには、クリップボードのカーブがその値だけシフトし、ペースト先カーブに接続するという効果があります。)falseに設定すると、ソースカーブのオリジナルキーフレーム値が保持されます。既定はfalseです。

    -----------------------------------------

    copies (uint): ソースカーブをペーストする回数。

    -----------------------------------------

    float (floatrange): 時間ベースのanimCurve上の時間ベースでないキー(またはキーレンジ)を固有に表す値です。有効なfloatRangeは、単一の値(-f10)、または上下限をコロンで区切った文字列(-f"10:20")です。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    floatOffset (float): ペーストされたキーをオフセットする時間(時間入力アニメーションカーブ以外)。

    -----------------------------------------

    includeUpperBound (boolean): -t/timeまたは-f/floatフラグがキーの範囲を表す場合に、範囲の上限のキーをキーセットに含めるかどうかを定義します。既定値:true。このフラグは、-t/timeフラグの引数が上下限が指定したタイムレンジである場合に限り有効です（「pasteKey」コマンドでこのフラグを使用するときに「replace」、「fitReplace」、「scaleReplace」などのオプションを指定すると、このフラグは、置き換えられるターゲットカーブの時間範囲のみを参照します。このフラグは、クリップボードからペーストされたカーブには影響しません）。

    -----------------------------------------

    index (uint): アニメーションカーブ上のキーのインデックス照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    matchByName (boolean): trueの場合は、ノード名およびアトリビュート名がクリップボード内の対応する項目と厳密に一致するシーン内の項目にのみ貼り付けます。階層情報は使用されません。既定はfalseです。この場合、階層による通常の照合が実行されます。

    -----------------------------------------

    option (string): 有効な値は、「insert」、「replace」、「replaceCompletely」、「merge」、「scaleInsert」、「scaleReplace」、「scaleMerge」、「fitInsert」、「fitReplace」、「fitMerge」です。既定のペーストオプションは、「insert」です。

    -----------------------------------------

    time (timerange): 時間ベースのアニメーションカーブ上のキー(またはキーレンジ)を固有に表す時間です。単一のフレームまたはフレーム範囲の設定方法については、以下のコード例を参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    timeOffset (time): ペーストされたキーをオフセットする時間(時間入力アニメーションカーブのみ)。

    -----------------------------------------

    valueOffset (float): ペーストされたキーをオフセットする値。

    -----------------------------------------

    Return Value:
    None: int貼り付けられたカーブの数照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def pathAnimation(bank: bool = False,bankScale: float = 1.0,bankThreshold: float = 1.0,curve: str = "",endTimeU: float = 1.0,endU: float = 1.0,follow: bool = False,followAxis: str = "",fractionMode: bool = False,inverseFront: bool = False,inverseUp: bool = False,name: str = "",startTimeU: float = 1.0,startU: float = 1.0,upAxis: str = "",useNormal: bool = False,worldUpObject: str = "",worldUpType: str = "",worldUpVector: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0)) -> None:
    """
    pathAnimation コマンドは必要なグラフ ノード、およびモーション パス アニメーションの相互接続を作成します。モーション パス アニメーションには、1 つのカーブ、および 1 つ以上のその他のオブジェクトが必要です。アニメーション中は、そのオブジェクトが、3D カーブかカーブ オンサーフェスに沿って移動します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bank (boolean): trueに設定すると、移動オブジェクトのアップ軸をパスジオメトリの曲率に合わせることができます。既定はfalseです。照会するとbooleanを返します。

    -----------------------------------------

    bankScale (float): このフラグはバンクアングルの角度をスケールする係数を指定します。既定は1.0です。照会するとfloatを返します。

    -----------------------------------------

    bankThreshold (angle): このフラグはバンクアングルの限度を指定します。既定は90°です。照会するとangleを返します。

    -----------------------------------------

    curve (string): このフラグはパスのカーブの名前を指定します。既定はNONEです。照会するとstringを返します。

    -----------------------------------------

    endTimeU (time): アニメーションのUパラメータの終了時間を指定します。既定はnoneです。照会するとtimeを返します。

    -----------------------------------------

    endU (float): アニメーションのUパラメータ設定の終了値を指定します。既定は、カーブのパラメータ設定の終了値です。照会するとlinearを返します。

    -----------------------------------------

    follow (boolean): trueに設定すると、移動オブジェクトの前軸の位置が揃います。既定はfalseです。照会するとbooleanを返します。

    -----------------------------------------

    followAxis (string): このフラグはパスカーブの接線に位置合わせる、オブジェクトのローカル軸を指定します。既定はyです。照会するとstringを返します。

    -----------------------------------------

    fractionMode (boolean): trueに設定すると、パスカーブの長さの一部に基づいてパスが評価されます。既定はfalseです。照会するとbooleanを返します。

    -----------------------------------------

    inverseFront (boolean): このフラグは移動オブジェクトの前軸をパスジオメトリの接線ベクトルと反対方向に位置合わせるかどうかを指定します。既定はfalseです。照会するとbooleanを返します。

    -----------------------------------------

    inverseUp (boolean): このフラグは移動オブジェクトのアップ軸をパスジオメトリの法線ベクトルと反対方向に位置合わせるかどうかを指定します。既定はfalseです。照会するとbooleanを返します。

    -----------------------------------------

    name (string): このフラグは新しいモーションパスノードの名前を指定します(既定名の代わり)照会するとstringを返します。

    -----------------------------------------

    startTimeU (time): アニメーションのUパラメータの開始時間を指定します。既定は現在の時間です。照会するとtimeを返します。

    -----------------------------------------

    startU (float): アニメーションのUパラメータ設定の開始値を指定します。既定は、カーブのパラメータ設定の開始値です。照会するとlinearを返します。

    -----------------------------------------

    upAxis (string): このフラグは算出された上方向に位置合わせる、オブジェクトのローカル軸を指定します。既定はzです。照会するとstringを返します。

    -----------------------------------------

    useNormal (boolean): このフラグは現在ではサポートしていません。-wut/worldUpTypeを使用してください。

    -----------------------------------------

    worldUpObject (name): DAGオブジェクトをworldUpTypeの「object」および「objectrotation」で使用するように設定します。詳細については、-wut/worldUpTypeを参照してください。既定値は、ワールド空間座標として解釈される非アップオブジェクトです。

    -----------------------------------------

    worldUpType (string): ワールドアップベクトル計算のタイプを設定します。worldUpTypeは、「scene」、「object」、「objectrotation」、「vector」、または「normal」のいずれかです。「scene」の場合、upVectorはシーンのアップ軸に位置合わせ、worldUpVectorおよびworldUpObjectは無視されます。「object」の場合、upVectorはworldUpObjectの空間の原点にできるだけ近い位置に配置され、worldUpVectorは無視されます。「objectrotation」の場合、worldUpVectorはworldUpObjectの座標空間にあるものと解釈され、ワールド空間にトランスフォームされてupVectorはその結果にできるだけ近く位置合わせます。「vector」の場合、upVectorはworldUpVectorにできるだけ近く位置合わせ、worldUpObjectは無視されます。値を「normal」にすると、upVectorがパスジオメトリに位置合わせます。既定のworldUpTypeは「vector」です。

    -----------------------------------------

    worldUpVector ([float, float, float]): ワールドアップベクトルを設定します。これは、アップベクトルと位置合わせする必要のあるワールド座標内のベクトルです。詳細については、-wut/worldUpTypeを参照してください。作成時に指定していない場合、既定値の(1.0,0.0,0.0)が使用されます。

    -----------------------------------------

    Return Value:
    None: string(作成された motionPath ノードの名前)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def play(forward: bool = False,playSound: bool = False,record: bool = False,sound: str = "",state: bool = False,wait: bool = False) -> None:
    """
    再生の開始と停止を行います。再生のフレーム範囲を変更する場合は、playbackOptions コマンドを参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    forward (boolean): trueに設定すると、現在の時間から再生範囲の最大値までアニメーションが再生されます。falseに設定すると、現在の時間から再生範囲の最低値まで再生されます。照会するとintを返します。

    -----------------------------------------

    playSound (boolean): 再生の際にサウンドを使用すべきかどうかを指定します。

    -----------------------------------------

    record (boolean): 記録システムを有効にし、1つの再生ループを開始します。

    -----------------------------------------

    sound (string): 再生中に使用する音声ノードを指定します。

    -----------------------------------------

    state (boolean): 再生の開始/停止を行います。

    -----------------------------------------

    wait (boolean): 完了するまで待機してからコマンドウィンドウに制御を返します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def playbackOptions(animationEndTime: float = 1.0,animationStartTime: float = 1.0,blockingAnim: bool = False,by: float = 1.0,framesPerSecond: bool = False,loop: str = "",maxPlaybackSpeed: float = 1.0,maxTime: float = 1.0,minTime: float = 1.0,playbackSpeed: float = 1.0,view: str = "") -> None:
    """
    ループ スタイル、開始時間、終了時間など、再生に関連する特定値の設定か照会を行います。-minTime/maxTime、-animationStartTime/animationEndTime、-by の値を修正するコマンドのみ元に戻すことができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animationEndTime (time): アニメーションの終了時間を設定します。照会すると、このフラグはfloatを返します。

    -----------------------------------------

    animationStartTime (time): アニメーションの開始時間を設定します。照会すると、このフラグはfloatを返します。

    -----------------------------------------

    blockingAnim (boolean): アニメーションを純粋なポーズごとのフォームで表示できるように、すべての接線がステップごとに再生されます。

    -----------------------------------------

    by (float): 再生時の時間を増分します。(既定＝1.0)。

    -----------------------------------------

    framesPerSecond (boolean): 実際の再生速度を照会します。照会すると、このフラグはfloatを返します。

    -----------------------------------------

    loop (string): 再生の繰り返しの実行および繰り返し方法を制御します。有効な値は、「once」、「continuous」、および「oscillate」です。照会すると、このフラグはstringを返します。

    -----------------------------------------

    maxPlaybackSpeed (float): 好みの最大再生スピードを設定します。照会すると、このフラグはfloatを返します。maxPlaybackSpeedは、playbackSpeedが0(すべてのフレームを再生)のときにのみMayaにより使用されます。maxPlaybackSpeedは最大再生レートをクランプし、ある特定の値を越えないようにします。maxPlaybackSpeedが0の場合、自由な(クランプされない)再生が行われます。

    -----------------------------------------

    maxTime (time): 再生のタイムレンジの終了時間を設定します。照会すると、このフラグはfloatを返します。

    -----------------------------------------

    minTime (time): 再生のタイムレンジの開始時間を設定します。照会すると、このフラグはfloatを返します。

    -----------------------------------------

    playbackSpeed (float): 好みの再生スピードを設定します。照会すると、このフラグはfloatを返します。

    -----------------------------------------

    view (string): 再生中のモデリングビューの更新回数を制御します。有効な値は「all」と「active」です。照会すると、このフラグは文字列を返します。

    -----------------------------------------

    Return Value:
    None: stringまたは float 編集済みオプションの照会。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def playblast(activeEditor: bool = False,cameraSetup: Tuple[str, str] = tuple("", ""),clearCache: bool = False,codecOptions: bool = False,combineSound: bool = False,completeFilename: str = "",compression: str = "",editorPanelName: str = "",endTime: float = 1.0,filename: str = "",forceOverwrite: bool = False,format: str = "",frame: float = 1.0,framePadding: int = 1,height: int = 1,indexFromZero: bool = False,offScreen: bool = False,options: bool = False,percent: int = 1,quality: int = 1,rawFrameNumbers: bool = False,replaceAudioOnly: bool = False,replaceEndTime: float = 1.0,replaceFilename: str = "",replaceStartTime: float = 1.0,sequenceTime: bool = False,showOrnaments: bool = False,sound: str = "",startTime: float = 1.0,throwOnError: bool = False,useTraxSounds: bool = False,viewer: bool = False,width: int = 1,widthHeight: Tuple[int, int] = tuple(1, 1)) -> None:
    """
    現在の再生範囲をプレイブラストします。サウンドはオプションです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activeEditor (boolean): このフラグはプレイブラストで使用される現在のモデルエディタを返します。プレイブラスト自体を起動することはありません。

    -----------------------------------------

    cameraSetup ([string, string]): カメラのセットアップに関する情報。1番目の文字列は、カメラセットアップMELプロシージャを定義します。カメラセットアッププロシージャは、プレイブラストの実行前に起動されます。2番目の文字列引数はカメラ識別子として使用されるもので、最終的な出力ファイル名を指定するために、ルートファイル名にアペンドされます。引数に文字列のペアが提供されていない場合、このコマンドは失敗します。

    -----------------------------------------

    clearCache (boolean): trueに設定すると、以前のすべての一時プレイブラストファイルが削除されてから新規プレイブラストファイルが作成され、残りの一時プレイブラストファイルはアプリケーションの終了時に削除されます。ユーザが名前を明確に指定したプレイブラストファイルは削除されません。

    -----------------------------------------

    codecOptions (boolean): プレイブラストコーデックオプションを設定するためのOS固有のダイアログが表示され、プレイブラストは実行されません。

    -----------------------------------------

    combineSound (boolean): トラックスサウンドを1つのトラックに結合します。サウンドのパラメータが調和していない場合、サウンドが強制的にリサンプルされることがあります。

    -----------------------------------------

    completeFilename (string): 設定されている場合、この文字列は出力イメージの正確な名前を表します。-f/filenameフラグタグと対称的に、-cf/completeFilenameはファイル名の末尾にこれ以上数字や拡張子文字列をアペンドしません。また、プレイブラストはイメージの表示後、これをディスクから削除しません。このフラグは、-f/filenameと一緒に使用できません。

    -----------------------------------------

    compression (string): ムービーファイルに使用される圧縮方法を指定します。システムで利用可能な設定を確認するには、「playblast-options」コマンドを使用します。これにより、サポートされる圧縮形式でシステム固有のダイアログが表示されます。「format」フラグが「image」の場合は、このフラグを使用して目的のイメージフォーマットで渡します。formatが「image」で圧縮フラグが省略されている場合、レンダーグローバルプリファレンス(-formatを参照)で指定した出力フォーマットが使用されます。圧縮を「none」に設定している場合は、iffイメージフォーマットが使用されます。

    -----------------------------------------

    editorPanelName (string): このオプションのフラグは、プレイブラストで使用されるモデルエディタまたはパネルの名前を指定します。名前を指定しない限り、現在のモデルエディタまたはパネルはプレイブラストに使用されません。フラグの使用法は起動元のプレイブラストによって異なります。

    -----------------------------------------

    endTime (time): プレイブラストの終了時間を指定します。既定は、タイムスライダに表示されている再生範囲の終了時間です。-frameによって変換。

    -----------------------------------------

    filename (string): プレイブラストの出力に使用するファイル名。そのファイルがすでに存在する場合は、プレイブラストをインタラクティブに実行するかどうかを確認するボックスが表示されます。コマンドラインからプレイブラストを実行した場合にファイルがすでに存在すると、異常終了します。

    -----------------------------------------

    forceOverwrite (boolean): 「-f」フラグで指定したものと同じ名前の既存プレイブラストファイルを上書きします。

    -----------------------------------------

    format (string): プレイブラスト出力のフォーマット。値説明「movie」このオプションでは、プラットフォーム固有の既定のムービーフォーマットが選択されます。LinuxおよびMacOSXの既定のムービーフォーマットはQuickTimeです。Windowsの既定のムービーフォーマットはAudioVideoInterleaveです。「avi」フォーマットをAudioVideoInterleave(Windowsのみ)に設定します「qt」フォーマットをQuickTime(全プラットフォーム)に設定します。「avfoundation」AVFoundationでムービーを書き込みます(Mac版のみ)。「image」イメージファイルのシーケンスを出力します。イメージフォーマットは、ウィンドウ(Window)>レンダーエディタ(RenderEditors)>レンダー設定(RenderSettings)>共通(Common)タブを使用して指定した出力フォーマットになります。出力ファイルでは、「myFile.0007.iff」のように、フレーム番号を追加し、プリフィックスとして「-f」フラグの値を使用します「iff」「image」と同じ-fmt/formatフラグの既定値は「movie」です。選択したフォーマットによっては、プラットフォーム固有の既定のアプリケーションを使用して結果が表示されます。イメージシーケンスの場合、既定のアプリケーションは「fcheck」です。ムービーの場合、既定のアプリケーションはそれぞれ、WindowsMediaPlayer(Windows)、QuickTimePlayer(MacOSX)、Lqtplay(Linux)です。ユーザはMayaのアプリケーションのプリファレンスを使用して別のアプリケーションを指定することができます。

    -----------------------------------------

    frame (time): ブラストするフレームのリスト。1フラグごとに1フレーム指定します。フレームの指定順序に決まりはありませんが、順番に出力されます。このフラグが指定されている場合、開始/終了範囲をすべてオーバーライドします。

    -----------------------------------------

    framePadding (int): ファイル名を埋めるために使用される0の数。通常、fcheckをサポートするために4に設定されます。

    -----------------------------------------

    height (int): 最終イメージの高さ。この値がアクティブウィンドウの幅よりも大きい場合は、固定値になります。Windows:fcheckを使用していない場合、幅と高さは4で割り切れる必要があります。

    -----------------------------------------

    indexFromZero (boolean): フレームを、file.0000.extから始まり1ずつ数字が増えるファイル名で出力します。一般に、フレームはフレーム番号としてMaya時間を使用します。このオプションは、フレームベースの出力フォーマットでのみ使用できます。

    -----------------------------------------

    offScreen (boolean): 設定されている場合、プレイブラストでオフスクリーンバッファを使用して、ビューをレンダーできるようになります。これにより、アプリケーションがアイコン化された場合、または覆い隠された場合でも、プレイブラストは動作できるようになります。

    -----------------------------------------

    options (boolean): WindowsNTのみ。プレイブラストオプションを設定するダイアログが表示され、プレイブラストは実行されません。

    -----------------------------------------

    percent (int): プレイブラスト中に使用する、現在のビューサイズのパーセンテージ。許容される値は、10～100の整数です。すべての他の値はこの範囲内に当てはめられます。値「25」は、現在選択しているビューの大きさの1/4を表します。値「50」は、現在選択しているビューの大きさの半分を表します。値「100」は、フルサイズを表します。既定は50です。

    -----------------------------------------

    quality (int): ムービーファイルに使用される圧縮画質の精度を指定します。値は0-100の範囲です。

    -----------------------------------------

    rawFrameNumbers (boolean): 通常プレイブラストは、フレームにゼロから始まる連続した番号を付けます。このフラグは既定のアクションを無効にし、-frameまたは-startFrame/-endFrameフラグで指定した実際のフレームを使用して、フレームに番号が付けられます。

    -----------------------------------------

    replaceAudioOnly (boolean): 設定すると、この文字列はシーンが再プレイブラストされるときに置き換えられるオーディオのみを指定します。

    -----------------------------------------

    replaceEndTime (time): 既存のプレイブラストの再プレイブラスト終了時間を指定します。既定は、タイムスライダに表示されている再生範囲の開始時間です。-frameによって変換。

    -----------------------------------------

    replaceFilename (string): 設定すると、この文字列は置換開始時間/終了時間に従ってフレームが置き換えられる入力プレイブラストファイルの名前を指定します。

    -----------------------------------------

    replaceStartTime (time): 既存のプレイブラストの再プレイブラスト開始時間を指定します。既定は、タイムスライダに表示されている再生範囲の開始時間です。-frameによって変換。

    -----------------------------------------

    sequenceTime (boolean): シーケンス時間を使用します。

    -----------------------------------------

    showOrnaments (boolean): モデルビューの装飾(軸アイコンなど)を表示するかどうかを設定します。

    -----------------------------------------

    sound (string): プレイブラスト中に使用するサウンドノードを指定します。

    -----------------------------------------

    startTime (time): プレイブラストの開始時間を指定します。既定は、タイムスライダに表示されている再生範囲の開始時間です。-frameによって変換。

    -----------------------------------------

    throwOnError (boolean): ほとんどの状況で、プレイブラストは失敗を許容します。設定されている場合、この切り替えにより、プレイブラストがそのような失敗に対するエラーを報告するようになります。

    -----------------------------------------

    useTraxSounds (boolean): TRAXのサウンドを使用します。

    -----------------------------------------

    viewer (boolean): プレイブラスト用にビューアを起動するかどうかを指定します。既定はtrueです。-fmtが「image」の場合は「fcheck」が実行されます。ムービーファイルのプレーヤはOSによって決まります。WindowsではMicrosoftMediaPlayer、Irixではムービープレーヤ、OSXではQuickTimeが使用されます。

    -----------------------------------------

    width (int): 最終イメージの幅。この値がアクティブウィンドウの幅よりも大きい場合は、固定値になります。Windows:fcheckを使用していない場合、幅と高さは4で割り切れる必要があります。

    -----------------------------------------

    widthHeight ([int, int]): 最終イメージの幅と高さ。アクティブなウィンドウの寸法より大きい値は縮小されます。幅と高さを0にすると、ウィンドウの現在のサイズが使用されます。Windows:fcheckを使用していない場合、幅と高さは4で割り切れる必要があります。

    -----------------------------------------

    Return Value:
    None: string作成される moviefile の名前。
    """
    pass

    
def rotationInterpolation(convert: str = "") -> None:
    """
    rotationInterpolation コマンドは、回転カーブを目的の回転補間の表現に変換します。たとえばオイラー角表現をクオータニオンに変換できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    convert (string): 変換後のカーブの回転補間モードを指定します。選択肢は、「none」(Maya4.0以前に作成されたカーブと互換性のある非同期化オイラーカーブ)、「euler」(キーフレームが同期化されたオイラーカーブ)、「quaternion」(キーフレームが同期化されているが、正確な補間は個々の接線に依存するクォータニオンカーブ)、「quaternionSlerp」(クォータニオン球面リニア補間をカーブに適用し、接線設定を無視)、「quaternionSquad」(キュービック補間をクォータニオン空間のカーブに適用し、接線設定を無視)です。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def scaleKey(animation: str = "",attribute: str = "",controlPoints: bool = False,float: Tuple[float, float] = tuple(1.0, 1.0),floatPivot: float = 1.0,floatScale: float = 1.0,hierarchy: str = "",includeUpperBound: bool = False,index: int = 1,newEndFloat: float = 1.0,newEndTime: float = 1.0,newStartFloat: float = 1.0,newStartTime: float = 1.0,scaleSpecifiedKeys: bool = False,shape: bool = False,time: Tuple[float, float] = tuple(1.0, 1.0),timePivot: float = 1.0,timeScale: float = 1.0,valuePivot: float = 1.0,valueScale: float = 1.0) -> None:
    """
    このコマンドは、キーセット上に作用します。キーセットは、1 つまたは複数のアニメーション カーブ上の指定したタイム レンジ内のキー グループとして定義されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animation (string): このコマンドが、自身が影響を与えるアニメーションを取得する場所です。有効な値は「objects」、「keys」、「keysOrObjects」で、既定は「keysOrObjects」です(詳細については、説明を参照してください)。

    -----------------------------------------

    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    controlPoints (boolean): このフラグは、アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    float (floatrange): 時間ベースのanimCurve上の時間ベースでないキー(またはキーレンジ)を固有に表す値です。有効なfloatRangeは、単一の値(-f10)、または上下限をコロンで区切った文字列(-f"10:20")です。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    floatPivot (float): 浮動小数点数で入力するアニメーションカーブのX軸に沿ってピボットをスケールします。

    -----------------------------------------

    floatScale (float): 浮動小数点数で入力するアニメーションカーブのX軸に沿ってスケールする量です。

    -----------------------------------------

    hierarchy (string): 階層展開オプションです。有効な値は、「above」、「below」、「both」、「none」です。(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    includeUpperBound (boolean): -t/timeまたは-f/floatフラグがキーの範囲を表す場合に、範囲の上限のキーをキーセットに含めるかどうかを定義します。既定値:true。このフラグは、-t/timeフラグの引数が上下限が指定したタイムレンジである場合に限り有効です（「pasteKey」コマンドでこのフラグを使用するときに「replace」、「fitReplace」、「scaleReplace」などのオプションを指定すると、このフラグは、置き換えられるターゲットカーブの時間範囲のみを参照します。このフラグは、クリップボードからペーストされたカーブには影響しません）。

    -----------------------------------------

    index (uint): アニメーションカーブ上のキーのインデックス照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    newEndFloat (float): 浮動小数点数で入力する接線をスケールした後の浮動小数点数範囲の終了位置です。

    -----------------------------------------

    newEndTime (time): 時間で入力する接線をスケールした後のタイムレンジの終了位置です。

    -----------------------------------------

    newStartFloat (float): 浮動小数点数で入力する接線をスケールした後の浮動小数点数範囲の開始位置です。

    -----------------------------------------

    newStartTime (time): 時間で入力する接線をスケールした後のタイムレンジの開始位置です。

    -----------------------------------------

    scaleSpecifiedKeys (boolean): 指定したキーだけがスケールによる影響を受けるようにするかどうかを定義します。falseの場合、その他のキーがスケールによって調整されることがあります。既定はtrueです。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    time (timerange): 時間ベースのアニメーションカーブ上のキー(またはキーレンジ)を固有に表す時間です。単一のフレームまたはフレーム範囲の設定方法については、以下のコード例を参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    timePivot (time): 時間で入力するアニメーションカーブの時間軸に沿ってピボットをスケールします。

    -----------------------------------------

    timeScale (float): 時間で入力するアニメーションカーブの時間軸に沿ってスケールする量です。

    -----------------------------------------

    valuePivot (float): 値の軸に沿ってピボットをスケールします。

    -----------------------------------------

    valueScale (float): 値の軸に沿ってスケールする量です。

    -----------------------------------------

    Return Value:
    None: intスケールが実行されたカーブの数。
    """
    pass

    
def setDrivenKeyframe(attribute: str = "",controlPoints: bool = False,currentDriver: str = "",driven: bool = False,driver: bool = False,driverValue: float = 1.0,hierarchy: str = "",inTangentType: str = "",insert: bool = False,insertBlend: bool = False,outTangentType: str = "",shape: bool = False,value: float = 1.0) -> None:
    """
    このコマンドは、ドリブン キーフレームを設定します。ドリブン キーフレームは、通常のキーフレームと似ています。ただし、標準キーフレームではグラフ エディタ(Graph Editor)の X 軸が常に時間に設定されているのに対して、drivenkeyframe の場合、グラフ エディタの X 軸としてユーザが任意のアトリビュートを選択することができます。 たとえば、蛇口からの水の放出にキーフレームを設定して、蛇口のハンドルを y 軸中心に回転したときに蛇口から水を放出させることができます。この例では、蛇口からの水の放出はドリブン アトリビュートと呼ばれます。ハンドルの回転はドライバと呼ばれます。setDrivenKeyframe を使用して蛇口からの水の放出とハンドルの回転との間にリレーションを設定したら、グラフ エディタを使用して、キーフレーム設定されたオブジェクトのアニメーション カーブを修正するのと同じように、アトリビュート間のリレーションを修正します。 単一のドライバによってドライブされるアトリビュートの場合、ディペンデンシー グラフは次のように接続されます。 driver attribute ---> animCurve ---> driven attribute  ドリブン キーフレームは複数のドライバを使用して設定できます。複数のドライバによるエフェクトは、ブレンド ノードによって結合されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): キーフレームを設定するアトリビュート名です。

    -----------------------------------------

    controlPoints (boolean): アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false

    -----------------------------------------

    currentDriver (string): 現在のドリブンキーフレームで使用するドライバを、引数として渡すアトリビュートに設定します。

    -----------------------------------------

    driven (boolean): 選択した項目のドリブンアトリビュートのリストを返します。

    -----------------------------------------

    driver (boolean): アトリビュートの使用可能なドライバのリストを返します。

    -----------------------------------------

    driverValue (float): このキーフレームで使用するドライバの値。既定は現在値です。

    -----------------------------------------

    hierarchy (string): このコマンドが作用するオブジェクトを、指定した(またはアクティブな)ターゲットオブジェクトからの相対位置に基づいて制御します。有効な値は、「above」、「below」、「both」、「none」です。既定は「hierarchy-query」です。

    -----------------------------------------

    inTangentType (string): このコマンドによって設定されるキーフレームのイン接線タイプです。有効な値は、「auto」、「clamped」、「fast」、「flat」、「linear」、「plateau」、「slow」、「spline」、および「stepnext」です。既定では「keyTangent-q-g-inTangentType」です。

    -----------------------------------------

    insert (boolean): 所定の時間にキーを挿入し、アニメーションカーブのシェイプを保持します。注:挿入されたキーの接線のタイプは固定されるため、カーブシェイプを保持できます。

    -----------------------------------------

    insertBlend (boolean): trueの場合、pairBlendノードは、チャネルをドライブするアニメーションカーブ以外のノードを持つチャネルに挿入されるので、そのチャネルでアニメーションがブレンドされるようにできます。falseの場合、これらのチャネルではキーが挿入されません。このフラグを指定しないと、アニメーションのブレンド用のグローバルプリファレンスに基づいて、ブレンドが挿入されます。

    -----------------------------------------

    outTangentType (string): このコマンドによって設定されるキーフレームのアウト接線タイプです。有効な値は、「auto」、「clamped」、「fast」、「flat」、「linear」、「plateau」、「slow」、「spline」、「step」、および「stepnext」です。既定は「keyTangent-q-g-outTangentType」です。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true

    -----------------------------------------

    value (float): キーフレームを設定する値。既定は現在値です。

    -----------------------------------------

    Return Value:
    None: intキーフレーム設定の数照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def setInfinity(attribute: str = "",controlPoints: bool = False,hierarchy: str = "",postInfinite: str = "",preInfinite: str = "",shape: bool = False) -> None:
    """
    paramCurve の最初(最後)のキーフレームの前(後)に無限タイプを設定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    controlPoints (boolean): このフラグは、アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    hierarchy (string): 階層展開オプションです。有効な値は、「above」、「below」、「both」、「none」です。(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    postInfinite (string): paramCurveの最後のキーフレームの後に無限タイプを設定します。有効な値は、「constant」、「linear」、「cycle」、「cycleRelative」および「oscillate」です。

    -----------------------------------------

    preInfinite (string): paramCurveの最初のキーフレームの前に無限タイプを設定します。有効な値は、「constant」、「linear」、「cycle」、「cycleRelative」および「oscillate」です。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def setKeyframe(animLayer: str = "",animated: bool = False,attribute: str = "",breakdown: bool = False,clip: str = "",controlPoints: bool = False,dirtyDG: bool = False,float: float = 1.0,hierarchy: str = "",identity: bool = False,inTangentType: str = "",insert: bool = False,insertBlend: bool = False,minimizeRotation: bool = False,noResolve: bool = False,outTangentType: str = "",respectKeyable: bool = False,shape: bool = False,time: float = 1.0,useCurrentLockedWeights: bool = False,value: float = 1.0) -> None:
    """
    このコマンドは、指定したオブジェクト(コマンド ラインでオブジェクトが指定されていない場合は、アクティブなオブジェクト)にキーフレームを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animLayer (string): 新しいキーが指定したアニメーションレイヤに配置されるよう指定します。キーフレーム設定されるオブジェクトがすでにレイヤの一部ではない場合、このフラグは無視されます。

    -----------------------------------------

    animated (boolean): 既にキーフレームがオンになっているアトリビュートにのみキーフレームを追加します。既定:false

    -----------------------------------------

    attribute (string): キーフレームを設定するアトリビュート名です。

    -----------------------------------------

    breakdown (boolean): キーのブレークダウン状態を設定します。既定はfalseです。

    -----------------------------------------

    clip (string): 新しいキーが指定したクリップに配置されるよう指定します。キーフレーム設定されるオブジェクトがすでにクリップの一部である場合は、このフラグは無視されます。

    -----------------------------------------

    controlPoints (boolean): アトリビュートのリストにシェイプのコントロールポイントを含明示的に指定します(「-s」フラグを参照)。既定:false

    -----------------------------------------

    dirtyDG (boolean): キーフレームが設定されていると、ダーティなメッセージを送信できます。

    -----------------------------------------

    float (float): 浮動小数点数ベースのアニメーションカーブ上でキーフレームを設定する時間(float)。

    -----------------------------------------

    hierarchy (string): このコマンドが作用するオブジェクトを、指定した(またはアクティブな)ターゲットオブジェクトからの相対位置に基づいて制御します。有効な値は、「above」、「below」、「both」、「none」です。既定は「hierarchy-query」です。

    -----------------------------------------

    identity (boolean): アニメーションレイヤにIDキーを設定します。IDキーはアニメーションレイヤのエフェクトを無効にするものです。このフラグは、キー設定されるアトリビュートがアニメーションレイヤによりドライブされているときのみに効果を持ちます。

    -----------------------------------------

    inTangentType (string): このコマンドによって設定されるキーフレームのイン接線タイプです。有効な値は、「auto」、「clamped」、「fast」、「flat」、「linear」、「plateau」、「slow」、「spline」、および「stepnext」です。既定では「keyTangent-q-g-inTangentType」です。

    -----------------------------------------

    insert (boolean): 所定の時間にキーを挿入し、アニメーションカーブのシェイプを保持します。注:挿入されたキーの接線のタイプは固定されるため、カーブシェイプを保持できます。

    -----------------------------------------

    insertBlend (boolean): trueの場合、pairBlendノードは、チャネルをドライブするアニメーションカーブ以外のノードを持つチャネルに挿入されるので、そのチャネルでアニメーションがブレンドされるようにできます。falseの場合、これらのチャネルではキーが挿入されません。このフラグを指定しないと、アニメーションのブレンド用のグローバルプリファレンスに基づいて、ブレンドが挿入されます。

    -----------------------------------------

    minimizeRotation (boolean): 回転の場合は、設定されたキーが必ず以前のキーから最短距離になるようにします。既定はfalseです。

    -----------------------------------------

    noResolve (boolean): -valueフラグを一緒に使用すると、アニメーションレイヤ全体の値を解決しようとせず、指定した値をアニメーションカーブに直接設定します。

    -----------------------------------------

    outTangentType (string): このコマンドによって設定されるキーフレームのアウト接線タイプです。有効な値は、「auto」、「clamped」、「fast」、「flat」、「linear」、「plateau」、「slow」、「spline」、「step」、および「stepnext」です。既定は「keyTangent-q-g-outTangentType」です。

    -----------------------------------------

    respectKeyable (boolean): -attributeフラグを一緒に使用すると、キー設定不可のアトリビュートのキー設定が行われないようにします。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true

    -----------------------------------------

    time (time): 時間ベースのアニメーションカーブ上でキーフレームを設定する時間。

    -----------------------------------------

    useCurrentLockedWeights (boolean): 既存のキーにキーを設定する場合、新しいロックされたウェイト値に、そのキー接線のロックされたウェイト値を使用します。既定はfalseです。

    -----------------------------------------

    value (float): キーフレームを設定する値。値フラグを使用しても、シーンが再評価されるまではキー設定されたアトリビュートは指定した値に変更されません。したがって、アトリビュートの値を直ちに新しい値に更新したい場合は、キー設定に加えてsetAttrコマンドを使用します。

    -----------------------------------------

    Return Value:
    None: intこのコマンドで設定されたキーフレームの数。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def setKeyframeBlendshapeTargetWts() -> None:
    """
    このコマンドを使用して、ポイント単位のブレンド シェイプ ターゲット ウェイトにキーフレームを設定します。現在選択されているオブジェクトに対し、次のように動作します。ベース オブジェクトを選択すると、すべてのターゲットにターゲット ウェイトがキー設定されます。ターゲット シェイプのみを選択すると、それらのターゲットのウェイトのみにキーフレームが設定されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: intターゲット ウェイトがキー設定されている頂点の数です
    """
    pass

    
def setKeyPath() -> None:
    """
    setKeyPath コマンドは、現在のタイムの選択されているオブジェクトの現在位置に基づいてパス(NURBS カーブ)を作成または編集します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string[](作成されたカーブ ノードと motionPath ノードの名前)
    """
    pass

    
def simplify(animation: str = "",attribute: str = "",controlPoints: bool = False,float: Tuple[float, float] = tuple(1.0, 1.0),floatTolerance: float = 1.0,hierarchy: str = "",includeUpperBound: bool = False,index: int = 1,shape: bool = False,time: Tuple[float, float] = tuple(1.0, 1.0),timeTolerance: float = 1.0,valueTolerance: float = 1.0) -> None:
    """
    このコマンドは、キーセット上に作用します。キーセットは、1 つまたは複数のアニメーション カーブ上の指定したタイム レンジ内のキー グループとして定義されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animation (string): このコマンドが、自身が影響を与えるアニメーションを取得する場所です。有効な値は「objects」、「keys」、「keysOrObjects」で、既定は「keysOrObjects」です(詳細については、説明を参照してください)。

    -----------------------------------------

    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    controlPoints (boolean): このフラグは、アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    float (floatrange): 時間ベースのanimCurve上の時間ベースでないキー(またはキーレンジ)を固有に表す値です。有効なfloatRangeは、単一の値(-f10)、または上下限をコロンで区切った文字列(-f"10:20")です。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    floatTolerance (float): ドリブンキーフレームの設定(SetDrivenKeyframe)で作成するような、floatで入力するanimCurveのX軸の許容値(既定は0.05秒)を指定します。時間でドライブされるanimCurveでは、このフラグは無視されます。floatToleranceの値を大きくするとキーがまばらになり、最初のカーブを表現する精度が低くなります。

    -----------------------------------------

    hierarchy (string): 階層展開オプションです。有効な値は、「above」、「below」、「both」、「none」です。(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    includeUpperBound (boolean): -t/timeまたは-f/floatフラグがキーの範囲を表す場合に、範囲の上限のキーをキーセットに含めるかどうかを定義します。既定値:true。このフラグは、-t/timeフラグの引数が上下限が指定したタイムレンジである場合に限り有効です（「pasteKey」コマンドでこのフラグを使用するときに「replace」、「fitReplace」、「scaleReplace」などのオプションを指定すると、このフラグは、置き換えられるターゲットカーブの時間範囲のみを参照します。このフラグは、クリップボードからペーストされたカーブには影響しません）。

    -----------------------------------------

    index (uint): アニメーションカーブ上のキーのインデックス照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    time (timerange): 時間ベースのアニメーションカーブ上のキー(またはキーレンジ)を固有に表す時間です。単一のフレームまたはフレーム範囲の設定方法については、以下のコード例を参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    timeTolerance (time): 時間で入力するanimCurveのX軸の許容値(既定は0.05秒)を指定します。floatでドライブされるanimCurveでは、このフラグは無視されます。時間の許容値を大きくするとキーがまばらになり、最初のカーブを表現する精度が低くなります。

    -----------------------------------------

    valueTolerance (float): 値の許容値(既定は0.01)を指定します。

    -----------------------------------------

    Return Value:
    None: int簡略化されたアニメーション カーブの数
    """
    pass

    
def snapKey(animation: str = "",attribute: str = "",controlPoints: bool = False,float: Tuple[float, float] = tuple(1.0, 1.0),hierarchy: str = "",includeUpperBound: bool = False,index: int = 1,shape: bool = False,time: Tuple[float, float] = tuple(1.0, 1.0),timeMultiple: float = 1.0,valueMultiple: float = 1.0) -> None:
    """
    このコマンドは、キーセット上に作用します。キーセットは、1 つまたは複数のアニメーション カーブ上の指定したタイム レンジ内のキー グループとして定義されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animation (string): このコマンドが、自身が影響を与えるアニメーションを取得する場所です。有効な値は「objects」、「keys」、「keysOrObjects」で、既定は「keysOrObjects」です(詳細については、説明を参照してください)。

    -----------------------------------------

    attribute (string): 選択するアトリビュートのリストです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    controlPoints (boolean): このフラグは、アトリビュートのリストにシェイプのコントロールポイントを含めるかどうかを明示的に指定します(「-s」フラグを参照)。既定:false(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    float (floatrange): 時間ベースのanimCurve上の時間ベースでないキー(またはキーレンジ)を固有に表す値です。有効なfloatRangeは、単一の値(-f10)、または上下限をコロンで区切った文字列(-f"10:20")です。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    hierarchy (string): 階層展開オプションです。有効な値は、「above」、「below」、「both」、「none」です。(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    includeUpperBound (boolean): -t/timeまたは-f/floatフラグがキーの範囲を表す場合に、範囲の上限のキーをキーセットに含めるかどうかを定義します。既定値:true。このフラグは、-t/timeフラグの引数が上下限が指定したタイムレンジである場合に限り有効です（「pasteKey」コマンドでこのフラグを使用するときに「replace」、「fitReplace」、「scaleReplace」などのオプションを指定すると、このフラグは、置き換えられるターゲットカーブの時間範囲のみを参照します。このフラグは、クリップボードからペーストされたカーブには影響しません）。

    -----------------------------------------

    index (uint): アニメーションカーブ上のキーのインデックス照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    shape (boolean): トランスフォームの下にあるシェイプのアトリビュート(「controlPoints」以外)も考慮します。既定:true(「pasteKey」コマンドでは無効)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    time (timerange): 時間ベースのアニメーションカーブ上のキー(またはキーレンジ)を固有に表す時間です。単一のフレームまたはフレーム範囲の設定方法については、以下のコード例を参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    timeMultiple (float): このフラグがある場合、キーの時間は指定したfloat値の倍数にスナップされます。

    -----------------------------------------

    valueMultiple (float): このフラグがある場合、キーの値は指定したfloat値の倍数にスナップされます。

    -----------------------------------------

    Return Value:
    None: int時間スナップの不整合によってスナップされなかったキーを持つアニメーション カーブの数です。
    """
    pass

    
def snapshot(constructionHistory: bool = False,endTime: float = 1.0,increment: float = 1.0,motionTrail: bool = False,name: str = "",startTime: float = 1.0,update: str = "") -> None:
    """
    このコマンドは、コマンド フラグで指定した時間に評価される一連のサーフェス、または指定した時間のオブジェクトのピボット ポイントの軌道を表示するモーション軌道のいずれかを作成するために使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    constructionHistory (boolean): オリジナルジオメトリに加えられた変更で更新します。

    -----------------------------------------

    endTime (time): ターゲットジオメトリのコピーを停止する時間です。既定:10.0

    -----------------------------------------

    increment (time): 各コピー間の時間の増分です。既定:1.0

    -----------------------------------------

    motionTrail (boolean): 一連のサーフェスではなく、指定したタイムステップでオブジェクトのピボットポイントの位置を表示するモーション軌道を作成します。既定はfalseです。

    -----------------------------------------

    name (string): スナップショットノードの名前です。照会すると、このフラグはstringを返します。

    -----------------------------------------

    startTime (time): ターゲットジオメトリのコピーを開始する時間です。既定:1.0

    -----------------------------------------

    update (string): このフラグは、スナップショットがコンストラクションヒストリを持つ場合のみに使用できます。このフラグは、スナップショットノードの更新値を設定します。更新値は、スナップショットを要求に応じて更新するか(最も効率的)、キーフレームが変更されたときに更新するか(効率的)、またはヒストリが変更されたときに常に更新するか(最も非効率的)を制御します。有効な値は、「demand」、「animCurve」、「always」です。既定:always

    -----------------------------------------

    Return Value:
    None: string[]作成または編集されたノードの名前: transform-name [snapshot-node-name]照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def snapshotBeadCtx(exists: bool = False,history: bool = False,image1: str = "",image2: str = "",image3: str = "",inTangent: bool = False,name: str = "",outTangent: bool = False) -> None:
    """
    モーション軌跡でイン接線かアウト接線、またはその両方のビーズを操作するためのコンテキストを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    exists (boolean): 指定したオブジェクトが存在するかどうかによって、trueまたはfalseを返します。他のフラグは無視されます。

    -----------------------------------------

    history (boolean): ツールコマンドの場合、対象となるツールのコンストラクションヒストリをオンにします。

    -----------------------------------------

    image1 (string): コンテキストに関連付けられているツールを表す3つの可能なアイコンの中の最初のアイコンです。

    -----------------------------------------

    image2 (string): コンテキストに関連付けられているツールを表す3つの可能なアイコンの中の2番目のアイコンです。

    -----------------------------------------

    image3 (string): コンテキストに関連付けられているツールを表す3つの可能なアイコンの中の3番目のアイコンです。

    -----------------------------------------

    inTangent (boolean): コンテキストの入力時にイン接線のビーズを表示することを示します

    -----------------------------------------

    name (string): これがツールコマンドの場合、ツールに適切に名前を付けます。

    -----------------------------------------

    outTangent (boolean): コンテキストの入力時にアウト接線のビーズを表示することを示します。

    -----------------------------------------

    Return Value:
    None: string(新しいコンテキストの名前)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def snapshotModifyKeyCtx(exists: bool = False,history: bool = False,image1: str = "",image2: str = "",image3: str = "",name: str = "") -> None:
    """
    編集可能なモーション軌跡にキーを挿入/削除するためのコンテキストを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    exists (boolean): 指定したオブジェクトが存在するかどうかによって、trueまたはfalseを返します。他のフラグは無視されます。

    -----------------------------------------

    history (boolean): ツールコマンドの場合、対象となるツールのコンストラクションヒストリをオンにします。

    -----------------------------------------

    image1 (string): コンテキストに関連付けられているツールを表す3つの可能なアイコンの中の最初のアイコンです。

    -----------------------------------------

    image2 (string): コンテキストに関連付けられているツールを表す3つの可能なアイコンの中の2番目のアイコンです。

    -----------------------------------------

    image3 (string): コンテキストに関連付けられているツールを表す3つの可能なアイコンの中の3番目のアイコンです。

    -----------------------------------------

    name (string): これがツールコマンドの場合、ツールに適切に名前を付けます。

    -----------------------------------------

    Return Value:
    None: string(新しいコンテキストの名前)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def sound(endTime: float = 1.0,file: str = "",length: bool = False,mute: bool = False,name: str = "",offset: float = 1.0,sourceEnd: float = 1.0,sourceStart: float = 1.0) -> None:
    """
    サウンド スクラブおよび再生中のサウンドをサポートする soundControl や timeControl などの UI コマンドで使用できるオーディオ ノードを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    endTime (time): サウンドを終了する時間です。

    -----------------------------------------

    file (string): サウンドファイルの名前です。

    -----------------------------------------

    length (boolean): サウンドの長さを照会します(現在のタイム単位で)。

    -----------------------------------------

    mute (boolean): オーディオクリップをミュートします。

    -----------------------------------------

    name (string): 作成するオーディオノードに付与する名前です。

    -----------------------------------------

    offset (time): サウンドを起動する時間です。

    -----------------------------------------

    sourceEnd (time): サウンドを終了する位置にあるサウンドファイルの先頭からのオフセット時間。

    -----------------------------------------

    sourceStart (time): サウンドを開始する位置にあるサウンドファイルの先頭からのオフセット時間。

    -----------------------------------------

    Return Value:
    None: string作成されたオーディオ ノードの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timeEditor(allClips: str = "",clipId: int = 1,commonParentTrack: bool = False,composition: str = "",drivingClipsForAttr: str = "",drivingClipsForObj: Tuple[str, int] = tuple("", 1),includeParent: bool = False,mute: bool = False,selectedClips: str = "",topLevelClips: str = "") -> None:
    """
    一般的なタイム エディタ コマンド



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allClips (string): アクティブな合成からすべてのクリップIDの包括的な(再帰的)リストを返します。返される結果をフィルタするために、引数が使用されることがあります。空の文字列を指定すると、すべてのクリップタイプのクリップIDが返されます:リストコンテナグループ

    -----------------------------------------

    clipId (int): 編集するクリップのIDです。

    -----------------------------------------

    commonParentTrack (boolean): 共通の親トラックノード、および指定されたクリップIDのトラックインデックスを検索します。クリップIDのリストはclipIdフラグを使用して指定する必要があります。返された文字列の形式は「track_node:track_index」です。指定したクリップは同じトラックノード上にありますが、別のトラックインデックスではトラックノードのみが返されます。

    -----------------------------------------

    composition (string): 使用する合成の名前を示すために-dca/drivingClipsForObjと一緒に使用するフラグです。既定では、このフラグを指定しない場合、現在アクティブな合成が使用されます。

    -----------------------------------------

    drivingClipsForAttr (string): 指定したアトリビュートをドライブしているクリップのリストを返します。合成を指定しない場合、現在アクティブな合成が使用されます。

    -----------------------------------------

    drivingClipsForObj ([string, int]): 一致するモードを示す整数値を持つ、指定したオブジェクトをドライブしているクリップのリストを返します。オブジェクトを明示的に指定しない場合、選択したオブジェクトが使用されます。クリップによってドライブできないオブジェクトは無視されます。合成を指定しない場合、現在アクティブな合成が使用されます。既定の一致モードは0(ゼロ)です。0:完全一致を含むクリップのみを含める1:指定したオブジェクトがすべて含まれているすべてのクリップを含める2:指定したオブジェクトのいずれかが含まれているすべてのクリップを含める3:指定したオブジェクトのいずれも含まれていないすべてのクリップを含める

    -----------------------------------------

    includeParent (boolean): -dca/drivingClipsForObjと一緒に使用する切り替えフラグです。切り替えると、親クリップが選択に含まれます(階層全体が選択されます)。

    -----------------------------------------

    mute (boolean): タイムエディタ(TimeEditor)をミュート/ミュート解除します。

    -----------------------------------------

    selectedClips (string): 現在選択されているタイムエディタクリップのクリップIDのリストを返します。返される結果をフィルタするために、引数が使用されることがあります。空の文字列を指定すると、すべてのクリップタイプのクリップIDが返されます:リストコンテナグループ

    -----------------------------------------

    topLevelClips (string): アクティブな合成からすべての最上位クリップIDのリストを返します。返される結果をフィルタするために、引数が使用されることがあります。空の文字列を指定すると、すべてのクリップタイプのクリップIDが返されます:リストコンテナグループ

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timeEditorAnimSource(addSource: str = "",apply: bool = False,bakeToAnimSource: str = "",calculateTiming: bool = False,copyAnimation: bool = False,drivenClips: bool = False,export: str = "",isUnique: bool = False,removeSource: str = "",targetIndex: str = "",targets: bool = False,addObjects: str = "",addRelatedKG: bool = False,addSelectedObjects: bool = False,attribute: str = "",exclusive: bool = False,importAllFbxTakes: bool = False,importFbx: str = "",importFbxTakes: str = "",importMayaFile: str = "",importOption: str = "",importPopulateOption: str = "",importedContainerNames: str = "",includeRoot: bool = False,populateImportedAnimSources: str = "",poseClip: bool = False,recursively: bool = False,removeSceneAnimation: bool = False,showAnimSourceRemapping: bool = False,takeList: str = "",takesToImport: str = "",type: str = "") -> None:
    """
    アニメーション ソースを管理するためのコマンドです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addSource (string): アニメーションとともに単一の新しいターゲットアトリビュートを追加します。

    -----------------------------------------

    apply (boolean): アニメーションソースのアニメーションをターゲットオブジェクトに直接接続します。タイムエディタ(TimeEditor)がミュートされていない場合は、代わりにシーンのストレージに接続します。

    -----------------------------------------

    bakeToAnimSource (string): このアニメーションソースと同じアニメーションを使用して新しいアニメーションソースを作成します。すべての非カーブの入力はベイク処理され、カーブソースは共有されます。

    -----------------------------------------

    calculateTiming (boolean): ソースを追加/除去するときに開始/継続期間を調整します。照会すると、[開始,継続期間]のペアを返します。

    -----------------------------------------

    copyAnimation (boolean): ソースを追加するときにアニメーションをコピーします。

    -----------------------------------------

    drivenClips (boolean): 指定したアニメーションソースによってドライブされるすべてのクリップを返します。

    -----------------------------------------

    export (string): 指定されたアニメーションソースとアニメーションカーブを指定したMayaファイルに書き出します。

    -----------------------------------------

    isUnique (boolean): アニメーションソースノードが単一のクリップのみをドライブしている場合はtrueを返します。

    -----------------------------------------

    removeSource (string): 単一のアトリビュートを除去します。

    -----------------------------------------

    targetIndex (string): ターゲットインデックスを取得します。

    -----------------------------------------

    targets (boolean): このアニメーションソースのすべてのターゲットのリストを取得します。

    -----------------------------------------

    addObjects (string): アニメーションソースからタイムエディタに、指定されたオブジェクトおよびそのアトリビュートを入力します。複数のオブジェクトでは、それぞれの名前をセミコロンで区切って渡します。照会モードでは、フラグが指定されている場合に入力されるアトリビュートの数および指定されたオブジェクトのアニメーションの最初と最後のフレームを返します。-addSelectedObjectsフラグと同様ですが、指定されたオブジェクトに作用します。このフラグは、-addSelectedObjectsフラグをオーバーライドします。

    -----------------------------------------

    addRelatedKG (boolean): 入力時に、関連付けられているキー設定グループが入力されるかどうかを決定します。通常はHIKの入力に使用されます。既定値はfalseです。

    -----------------------------------------

    addSelectedObjects (boolean): アニメーションソースまたはタイムエディタに、現在選択されているオブジェクトとそれらのアトリビュートを入力します。照会モードでは、フラグが指定されている場合に入力されるアトリビュートの数と、アニメーションの最初および最後のフレームを返します。

    -----------------------------------------

    attribute (string): オブジェクトの特定のアトリビュートを入力します。

    -----------------------------------------

    exclusive (boolean): 「type」フラグでリストされていない、すべてのタイプのアニメーションソースを入力します。

    -----------------------------------------

    importAllFbxTakes (boolean): すべてのFBXテイクを新しいアニメーションソースに読み込むか(timeEditorAnimSourceコマンド)、新しいコンテナに読み込みます(timeEditorClipコマンド)。

    -----------------------------------------

    importFbx (string): FBXファイルのアニメーションを新しいアニメーションソースに読み込むか(timeEditorAnimSourceコマンド)、新しいコンテナに読み込みます(timeEditorClipコマンド)。

    -----------------------------------------

    importFbxTakes (string): 複数のFBXテイク(セミコロン区切り)を新しいアニメーションソースに読み込むか(timeEditorAnimSourceコマンド)、新しいコンテナに読み込みます(timeEditorClipコマンド)。

    -----------------------------------------

    importMayaFile (string): Mayaファイルのアニメーションを新しいアニメーションソースに読み込むか(timeEditorAnimSourceコマンド)、新しいコンテナ(timeEditorClipコマンド)に読み込みます。

    -----------------------------------------

    importOption (string): アニメーションソースの読み込みオプション。接続(connect)または生成(generate)を指定します。接続(connect):シーン内の既存のノードにのみ接続します。現在のシーンのどの要素とも一致しないアニメーションソースを読み込んだ場合、クリップは作成されません。(接続(connect)は既定のモードです)。生成(generate):すべての項目を読み込んで、シーンに存在しない項目には新しいノードを生成します。

    -----------------------------------------

    importPopulateOption (string): 読み込むときの入力オプション。

    -----------------------------------------

    importedContainerNames (string): 内部でのみ使用されます。populateImportedAnimSourcesとともに使用して、作成されたコンテナの名前を指定します。

    -----------------------------------------

    includeRoot (boolean): 階層ルートノードのトランスフォーム(移動、回転、スケール)を挿入します。

    -----------------------------------------

    populateImportedAnimSources (string): 内部でのみ使用されます。指定したアニメーションソースを使用して、タイムエディタにクリップを入力します(複数のアニメーションソースの区切り記号として;を使用)。

    -----------------------------------------

    poseClip (boolean): ポーズクリップとして現在のアトリビュート値を入力します。

    -----------------------------------------

    recursively (boolean): 再帰的に選択項目を入力して、すべての子を追加します。

    -----------------------------------------

    removeSceneAnimation (boolean): Trueの場合は、クリップまたはアニメーションソースを作成するときにシーンからアニメーションを除去します。除去されたシーンアニメーションをドライブするのは、タイムエディタのみです。

    -----------------------------------------

    showAnimSourceRemapping (boolean): 読み込まれたアニメーションソースのアトリビュートがシーンのアトリビュートと一致しない場合は、再マッピングダイアログを表示します。

    -----------------------------------------

    takeList (string): 内部でのみ使用されます。populateImportedAnimSourcesとともに使用して、読み込まれたテイク名を指定します。

    -----------------------------------------

    takesToImport (string): 内部でのみ使用されます。populateImportedAnimSourcesとともに使用して、読み込まれたテイクインデックスを指定します。

    -----------------------------------------

    type (string): 指定タイプのアニメーションソースのみを入力します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timeEditorBakeClips(bakeToAnimSource: str = "",bakeToClip: str = "",clipId: int = 1,combineLayers: bool = False,forceSampling: bool = False,keepOriginalClip: bool = False,path: str = "",sampleBy: float = 1.0,targetTrackIndex: int = 1,targetTracksNode: str = "") -> None:
    """
    このコマンドはタイム エディタ(Time Editor)クリップをベイク処理し、単一のクリップにブレンドするのに使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bakeToAnimSource (string): 選択したクリップをアニメーションソースにベイク処理/マージします。

    -----------------------------------------

    bakeToClip (string): 選択したクリップをベイク処理し、単一のクリップにマージます。

    -----------------------------------------

    clipId (int): ベイク処理するクリップのクリップIDです。

    -----------------------------------------

    combineLayers (boolean): 入力クリップのレイヤを結合します。

    -----------------------------------------

    forceSampling (boolean): ベイク処理時に全体の時間範囲でサンプリングを強制します。

    -----------------------------------------

    keepOriginalClip (boolean): ベイク処理後にソースクリップを維持します。

    -----------------------------------------

    path (string): 動作するためのクリップのフルパスです。例:composition1|track1|group;composition1|track1|group|track2|clip1。

    -----------------------------------------

    sampleBy (time): クロスフェードとタイムワープのベイク処理時のサンプリング間隔です。

    -----------------------------------------

    targetTrackIndex (int): コンテナのベイク処理時のターゲットトラックを指定します。targetTrackIndexを指定した場合、指定したノード内のトラックインデックスが使用されます。targetTrackIndexを指定しない、または既定値(-1)である場合は、現在のノード内のトラックインデックスが使用されます。targetTrackIndexが-2の場合は、新しいトラックが作成されます。

    -----------------------------------------

    targetTracksNode (string): コンテナのベイク処理時のターゲットトラックノードです。

    -----------------------------------------

    Return Value:
    None: intコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timeEditorClip(absolute: bool = False,addAttribute: str = "",allowShrinking: bool = False,animSource: str = "",audio: str = "",children: int = 1,clipAfter: bool = False,clipBefore: bool = False,clipDataType: bool = False,clipId: int = 1,clipIdFromNodeName: int = 1,clipIdFromPath: bool = False,clipNode: bool = False,clipPath: bool = False,copyClip: bool = False,crossfadeMode: int = 1,crossfadePlug: bool = False,curveTime: float = 1.0,defaultGhostRoot: bool = False,drivenAttributes: bool = False,drivenClipsBySource: str = "",drivenObjects: bool = False,drivenRootObjects: bool = False,drivingSources: str = "",duplicateClip: bool = False,duration: float = 1.0,emptySource: bool = False,endTime: float = 1.0,existingOnly: bool = False,exists: bool = False,explode: int = 1,exportAllClips: bool = False,exportFbx: str = "",extend: bool = False,extendParent: bool = False,ghost: bool = False,ghostRootAdd: str = "",ghostRootRemove: str = "",group: bool = False,holdEnd: float = 1.0,holdStart: float = 1.0,importTakeDestination: int = 1,isContainer: bool = False,listUserGhostRoot: bool = False,loopEnd: float = 1.0,loopStart: float = 1.0,minClipDuration: bool = False,modifyAnimSource: bool = False,moveClip: float = 1.0,mute: bool = False,name: str = "",parent: int = 1,parentClipId: int = 1,parentGroupId: bool = False,pasteClip: float = 1.0,path: str = "",preserveAnimationTiming: bool = False,razorClip: float = 1.0,remap: Tuple[str, str] = tuple("", ""),remapSource: Tuple[str, str] = tuple("", ""),remappedSourceAttrs: bool = False,remappedTargetAttrs: bool = False,removeAttribute: str = "",removeClip: bool = False,removeCrossfade: bool = False,removeWeightCurve: bool = False,resetTiming: bool = False,resetTransition: bool = False,ripple: bool = False,rootClipId: int = 1,rootPath: str = "",scaleEnd: float = 1.0,scalePivot: float = 1.0,scaleStart: float = 1.0,setKeyframe: str = "",speedRamping: int = 1,startTime: float = 1.0,timeWarp: bool = False,timeWarpCurve: bool = False,timeWarpType: int = 1,track: str = "",tracksNode: bool = False,transition: bool = False,trimEnd: float = 1.0,trimStart: float = 1.0,truncated: bool = False,uniqueAnimSource: bool = False,userGhostRoot: bool = False,weightCurve: bool = False,zeroKeying: bool = False,addObjects: str = "",addRelatedKG: bool = False,addSelectedObjects: bool = False,attribute: str = "",exclusive: bool = False,importAllFbxTakes: bool = False,importFbx: str = "",importFbxTakes: str = "",importMayaFile: str = "",importOption: str = "",importPopulateOption: str = "",importedContainerNames: str = "",includeRoot: bool = False,populateImportedAnimSources: str = "",poseClip: bool = False,recursively: bool = False,removeSceneAnimation: bool = False,showAnimSourceRemapping: bool = False,takeList: str = "",takesToImport: str = "",type: str = "") -> None:
    """
    このコマンドは、タイム エディタ(Time Editor)クリップを編集/照会します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absolute (boolean): このフラグは、-s/start、-d/duration、-ed/endなどの他のタイミングフラグと一緒に使用して、(グローバル)絶対時間を照会します。

    -----------------------------------------

    addAttribute (string): クリップに新しいアトリビュートを追加します。

    -----------------------------------------

    allowShrinking (boolean): クリップを延長している場合は、縮小することができます。

    -----------------------------------------

    animSource (string): アニメーションソースに基づいて入力します。

    -----------------------------------------

    audio (string): オーディオを含むクリップを作成します。

    -----------------------------------------

    children (int): 子クリップのIDを取得します。

    -----------------------------------------

    clipAfter (boolean): 次のクリップのクリップIDを取得します。

    -----------------------------------------

    clipBefore (boolean): 前のクリップのクリップIDを取得します。

    -----------------------------------------

    clipDataType (boolean): 指定したクリップIDによってドライブされるデータのタイプを照会します。戻り値は次のとおりです:0:アニメーション-クリップがアニメーションカーブをドライブします。1:オーディオ-クリップがオーディオをドライブします。3:グループ-クリップはグループです。

    -----------------------------------------

    clipId (int): 編集するクリップのIDです。

    -----------------------------------------

    clipIdFromNodeName (int): クリップノード名からクリップIDを取得します。

    -----------------------------------------

    clipIdFromPath (boolean): パスが指定されたクリップIDを照会するフラグです。クリップパスは、クリップの階層構造を示す垂直バー区切りの文字列です。パスを表す方法を確認するには、アウトライナ(Outliner)の階層パスを参照してください。例:composition1|track1|clip1。注:パスを指定するには、このフラグを-queryフラグの前に表示する必要があります。

    -----------------------------------------

    clipNode (boolean): クリップノードの名前を照会するフラグです。

    -----------------------------------------

    clipPath (boolean): クリップIDが指定されたパスを照会するフラグです。クリップパスは、クリップの階層構造を示す垂直バー区切り文字列です。パスを表す方法を確認するには、アウトライナ(Outliner)の階層パスを参照してください。例:composition1|track1|clip1。注:クリップがどのトラックにも接続されていない場合は、空の文字列を返します。

    -----------------------------------------

    copyClip (boolean): 選択したクリップIDを取得し、貼り付けに使用できるリストに保存します。

    -----------------------------------------

    crossfadeMode (int): 同じトラック上にあり、その-clipIdフラグで指定される2つのクリップ間のクロスフェードモードを設定します。0:線形-2つのクリップは一定の比率でブレンドされます。1:ステップ-左クリップの値はクロスフェード領域の中央まで維持されます。そこから先は右クリップの値が使用されます。2:左を保持-左クリップの値のみを使用します。3:右を保持-右クリップの値のみを使用します。4:カスタム-ユーザ定義のクロスフェードカーブです。5:カスタム(スプライン)-スプラインプリセットを含むユーザ定義のクロスフェードカーブです。

    -----------------------------------------

    crossfadePlug (boolean): 2つのクリップ間のカスタムクロスフェードカーブのプラグパスを取得します。

    -----------------------------------------

    curveTime (time): 指定したクリップに対する現在のローカル時間を照会します。

    -----------------------------------------

    defaultGhostRoot (boolean): 既定のゴーストルート変数を編集または照会します。既定のゴーストルート(クリップによってドライブされるオブジェクト)を使用するかどうかを決定します。

    -----------------------------------------

    drivenAttributes (boolean): クリップによってドライブされるアトリビュートのリストを返します。

    -----------------------------------------

    drivenClipsBySource (string): 指定したソースによってドライブされるクリップを返します。アニメーションカーブ、エクスプレッション、コンストレイントなどの指定したタイプによって、返される結果をフィルタできます。このフラグは-queryフラグの前に置く必要があります。

    -----------------------------------------

    drivenObjects (boolean): 現在のクリップとその子クリップでドライブされるすべてのオブジェクト名で構成される文字配列を返します。

    -----------------------------------------

    drivenRootObjects (boolean): このクリップとその子クリップでドライブされるすべてのルートオブジェクト名で構成される文字配列を返します。

    -----------------------------------------

    drivingSources (string): 指定したクリップをドライブするすべてのソースを返します。アニメーションカーブ、エクスプレッション、コンストレイントなどの指定したタイプによって、返される結果をフィルタできます。-queryフラグの後に(引数なしで)使用すると、このコマンドは指定したクリップをドライブするすべてのソースを返します。タイプを指定するには、このフラグは-queryフラグの前に置く必要があります。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    duplicateClip (boolean): 同じタイミング情報を持つ2つのクリップになるように、クリップを複製します。

    -----------------------------------------

    duration (time): 新しいクリップの相対的な継続期間です。

    -----------------------------------------

    emptySource (boolean): ソースが空のクリップを作成します。

    -----------------------------------------

    endTime (time): クリップの相対的な終了時間を照会します。

    -----------------------------------------

    existingOnly (boolean): このフラグはanimSourceフラグと一緒に編集モードでのみ使用できます。animSourceフラグの機能は維持しますが、既にクリップの一部になっているアトリビュートのみをバインドします。バインド解除されたソースアトリビュートをそれらの既定の宛先に生成しようとすることはありません。

    -----------------------------------------

    exists (boolean): 指定したクリップが存在する場合はtrueを返します。

    -----------------------------------------

    explode (int): グループ内のすべてのトラックとそのクリップをその親トラックノードに再ペアレント化し、そのグループを除去します。

    -----------------------------------------

    exportAllClips (boolean): ef/exportFbxフラグと一緒に使用すると、すべてのクリップを書き出します。

    -----------------------------------------

    exportFbx (string): 現在選択されているクリップをFBXファイルに書き出します。

    -----------------------------------------

    extend (boolean): すべての子を包含するようにクリップを拡張します。

    -----------------------------------------

    extendParent (boolean): このクリップに合わせて親を拡張します。

    -----------------------------------------

    ghost (boolean): 指定したクリップのゴースト化を有効化/無効化します。

    -----------------------------------------

    ghostRootAdd (string): カスタムゴーストルートとして指定されたノードのパスを追加します。

    -----------------------------------------

    ghostRootRemove (string): カスタムゴーストルートとして指定されたノードのパスを除去します。

    -----------------------------------------

    group (boolean): 新しいコンテナを指定した他のクリップを含むグループとして作成する必要があるかどうかを指定します。

    -----------------------------------------

    holdEnd (time): クリップの終了時間を保持します。

    -----------------------------------------

    holdStart (time): クリップの開始時間を保持します。

    -----------------------------------------

    importTakeDestination (int): 読み込まれたFBXテイクの編成方法を指定します:0(ゼロ)-グループに読み込む(既定)。1-複数の合成に読み込む。2-一連のクリップとして読み込む

    -----------------------------------------

    isContainer (boolean): 指定したクリップIDがコンテナであるかどうかを指定します。

    -----------------------------------------

    listUserGhostRoot (boolean): 指定したクリップのユーザ定義ゴーストルートオブジェクトを取得します。

    -----------------------------------------

    loopEnd (time): クリップの終了時間をループします。

    -----------------------------------------

    loopStart (time): クリップの開始時間をループします。

    -----------------------------------------

    minClipDuration (boolean): クリップの最小許容継続時間を返します。

    -----------------------------------------

    modifyAnimSource (boolean): 入力すると、アニメーションソースをユーザに確認しないで自動的に変更します。

    -----------------------------------------

    moveClip (time): 開始時間にデルタを追加してクリップを移動します。

    -----------------------------------------

    mute (boolean): クリップIDが指定されたクリップをミュート/ミュート解除します。照会モードでクリップのミュート状態を返します。ソロ化によってミュートされたクリップは、このフラグによる影響は受けません。

    -----------------------------------------

    name (string): クリップ名です。クリップ名を空にしないでください。空の文字列を指定すると、「_」に置き換えられます。

    -----------------------------------------

    parent (int): グループ/オブジェクトの親IDを指定します。

    -----------------------------------------

    parentClipId (int): 作成するクリップの親クリップIDを指定します。

    -----------------------------------------

    parentGroupId (boolean): 指定されたクリップの親グループIDを返します。

    -----------------------------------------

    pasteClip (time): 指定された時間とトラックにクリップを貼り付けます。目的のトラックには、「tracksNode:trackIndex」の形式でトラックフラグを使用して指定する必要があります。trackIndexを-1に設定すると、新しいトラックが作成されます。

    -----------------------------------------

    path (string): 編集するクリップのフルパスです。例:composition1|track1|clip1。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    preserveAnimationTiming (boolean): 投入コマンドとともに使用すると、新しいクリップの位置に関係なく、元のシーンのタイミングに合わせてアニメーションがクリップ内でオフセットされます。

    -----------------------------------------

    razorClip (time): 指定したタイムでクリップを2つのクリップに分割します。

    -----------------------------------------

    remap ([string, string]): 指定したクリップ項目のアニメーションソースを、ターゲットパスで指定した新しいアニメーションソースに変更します。これにより、このリスト項目のすべてのクリップが除去され、新しいターゲットパスのアニメーションソースから新しいクリップが作成されます。

    -----------------------------------------

    remapSource ([string, string]): 指定したクリップ項目のアニメーションソースを、ターゲットパスで指定した新しいアニメーションソースにリマップするように設定します。

    -----------------------------------------

    remappedSourceAttrs (boolean): リマップされたクリップのソースアトリビュートのアトリビュートインデックスと名前の配列を返します。

    -----------------------------------------

    remappedTargetAttrs (boolean): リマップされたクリップのターゲットアトリビュートのアトリビュートインデックスと名前の配列を返します。

    -----------------------------------------

    removeAttribute (string): クリップからアトリビュートを削除します。

    -----------------------------------------

    removeClip (boolean): 指定したIDのクリップを除去します。

    -----------------------------------------

    removeCrossfade (boolean): -clipIdフラグで指定された2つのクリップ間のカスタムクロスフェードを除去します。

    -----------------------------------------

    removeWeightCurve (boolean): クリップに接続されているウェイトカーブを除去します。

    -----------------------------------------

    resetTiming (boolean): 指定されたクリップIDを使用してクリップの開始時間と持続時間をアニメーションソースに格納されている値にリセットします。

    -----------------------------------------

    resetTransition (boolean): 指定したクリップ間のトランジションインターバルをリセットします。

    -----------------------------------------

    ripple (boolean): クリップ操作に波紋を適用します。

    -----------------------------------------

    rootClipId (int): ルートクリップのIDです。さまざまなクリップ編集フラグと一緒に使用します。これを使用すると、クリップの編集およびそのパラメータの効果が指定したルートクリップによって影響されます。たとえば、グループルート(通常、グループ(Group)タブビュー)下のクリップの移動は、グループルートのローカルタイムスペースで実行されます。

    -----------------------------------------

    rootPath (string): ルートクリップのパスです。さまざまなクリップ編集フラグと一緒に使用します。これを使用すると、クリップの編集およびそのパラメータの効果が指定したルートクリップによって影響されます。たとえば、グループルート(通常、グループ(Group)タブビュー)下のクリップの移動は、グループルートのローカルタイムスペースで実行されます。

    -----------------------------------------

    scaleEnd (time): クリップの終了時間を指定した時間にスケールします。

    -----------------------------------------

    scalePivot (time): ピボットに基づいてクリップの時間をスケールします。これは-scs/scaleStartまたは-sce/scaleEndと一緒に使用する必要があります。

    -----------------------------------------

    scaleStart (time): クリップの開始時間を指定した時間にスケールします。

    -----------------------------------------

    setKeyframe (string): 指定したアトリビュートに対し、特定のクリップにキーフレームを設定します。

    -----------------------------------------

    speedRamping (int): アニメーションカーブによってクリップの再生速度をコントロールするには、次の手順を実行します。1:作成-スピードカーブおよびタイムワープカーブをクリップにアタッチして、再生スピードを制御します。2:編集-グラフエディタを開いてスピードカーブを編集します。3:有効化-現在のスピードカーブからタイムワープカーブを作成して、クリップにアタッチします。4:無効化-クリップからタイムワープカーブを除去します。5:削除-アタッチされたスピードカーブおよびタイムワープカーブを削除します。6:リセット-スピードカーブをリセットして規定値に戻します。7:タイムワープからスピードカーブに変換します。8:スピードカーブからタイムワープに変換します。照会モードでは、スピードカーブがクリップにアタッチされている場合、trueを返します。

    -----------------------------------------

    startTime (time): 新しいクリップの相対的な開始時間です。

    -----------------------------------------

    timeWarp (boolean): クリップがスピードカーブによってワープされている場合はtrueを返します。スピードカーブがクリップにアタッチされていない場合は、常にfalseを返します。

    -----------------------------------------

    timeWarpCurve (boolean): クリップに接続されたタイムワープカーブの名前を返します。

    -----------------------------------------

    timeWarpType (int): タイムワープモード:0:リマップ-接続されたタイムワープカーブがフレーム単位のリマップを実行します。1:スピードカーブ-接続されたタイムワープがスピードカーブとして機能します。照会モードでは、クリップのタイムワープモードを返します。

    -----------------------------------------

    track (string): 新しいクリップコンテナは、「trackNode:trackNumber」という形式でトラックに作成されるか、たとえば「composition1|track1」のようにトラックパスに作成されます。照会モードでは、指定したクリップIDのトラック番号とトラックノードを含む文字列を返します。作成モードでトラック番号が「-1」か、指定されなかった場合は、新しいトラックが作成されます。例:"trackNode:-1";"composition1|"。

    -----------------------------------------

    tracksNode (boolean): 指定したクリップがグループクリップの場合は、トラックノードを取得します。

    -----------------------------------------

    transition (boolean): 指定したクリップ間のトランジションインターバルを作成します。

    -----------------------------------------

    trimEnd (time): クリップの終了時間を指定した時間にトリムします。

    -----------------------------------------

    trimStart (time): クリップの開始時間を指定した時間にトリムします。

    -----------------------------------------

    truncated (boolean): このフラグは、-s/start、-d/duration、-ed/endなどの他のタイミングフラグと一緒に使用して、(グローバル)切り捨てられた時間を照会します。

    -----------------------------------------

    uniqueAnimSource (boolean): 指定したクリップが別のクリップとアニメーションソースノードを共有している場合は、このクリップのアニメーションソースを固有にします。

    -----------------------------------------

    userGhostRoot (boolean): カスタムゴーストルート変数を編集または照会します。ユーザ定義のゴーストルートを使用するかどうかを決定します。

    -----------------------------------------

    weightCurve (boolean): 編集モードでは、ウェイトカーブを作成して、それをクリップに接続します。照会モードでは、クリップに接続したウェイトカーブの名前を返します。

    -----------------------------------------

    zeroKeying (boolean): k/setKeyframeと一緒に使用する切り替えフラグで、キー設定するキーフレームの値を0(ゼロ)に設定します。

    -----------------------------------------

    addObjects (string): アニメーションソースからタイムエディタに、指定されたオブジェクトおよびそのアトリビュートを入力します。複数のオブジェクトでは、それぞれの名前をセミコロンで区切って渡します。照会モードでは、フラグが指定されている場合に入力されるアトリビュートの数および指定されたオブジェクトのアニメーションの最初と最後のフレームを返します。-addSelectedObjectsフラグと同様ですが、指定されたオブジェクトに作用します。このフラグは、-addSelectedObjectsフラグをオーバーライドします。

    -----------------------------------------

    addRelatedKG (boolean): 入力時に、関連付けられているキー設定グループが入力されるかどうかを決定します。通常はHIKの入力に使用されます。既定値はfalseです。

    -----------------------------------------

    addSelectedObjects (boolean): アニメーションソースまたはタイムエディタに、現在選択されているオブジェクトとそれらのアトリビュートを入力します。照会モードでは、フラグが指定されている場合に入力されるアトリビュートの数と、アニメーションの最初および最後のフレームを返します。

    -----------------------------------------

    attribute (string): オブジェクトの特定のアトリビュートを入力します。

    -----------------------------------------

    exclusive (boolean): 「type」フラグでリストされていない、すべてのタイプのアニメーションソースを入力します。

    -----------------------------------------

    importAllFbxTakes (boolean): すべてのFBXテイクを新しいアニメーションソースに読み込むか(timeEditorAnimSourceコマンド)、新しいコンテナに読み込みます(timeEditorClipコマンド)。

    -----------------------------------------

    importFbx (string): FBXファイルのアニメーションを新しいアニメーションソースに読み込むか(timeEditorAnimSourceコマンド)、新しいコンテナに読み込みます(timeEditorClipコマンド)。

    -----------------------------------------

    importFbxTakes (string): 複数のFBXテイク(セミコロン区切り)を新しいアニメーションソースに読み込むか(timeEditorAnimSourceコマンド)、新しいコンテナに読み込みます(timeEditorClipコマンド)。

    -----------------------------------------

    importMayaFile (string): Mayaファイルのアニメーションを新しいアニメーションソースに読み込むか(timeEditorAnimSourceコマンド)、新しいコンテナ(timeEditorClipコマンド)に読み込みます。

    -----------------------------------------

    importOption (string): アニメーションソースの読み込みオプション。接続(connect)または生成(generate)を指定します。接続(connect):シーン内の既存のノードにのみ接続します。現在のシーンのどの要素とも一致しないアニメーションソースを読み込んだ場合、クリップは作成されません。(接続(connect)は既定のモードです)。生成(generate):すべての項目を読み込んで、シーンに存在しない項目には新しいノードを生成します。

    -----------------------------------------

    importPopulateOption (string): 読み込むときの入力オプション。

    -----------------------------------------

    importedContainerNames (string): 内部でのみ使用されます。populateImportedAnimSourcesとともに使用して、作成されたコンテナの名前を指定します。

    -----------------------------------------

    includeRoot (boolean): 階層ルートノードのトランスフォーム(移動、回転、スケール)を挿入します。

    -----------------------------------------

    populateImportedAnimSources (string): 内部でのみ使用されます。指定したアニメーションソースを使用して、タイムエディタにクリップを入力します(複数のアニメーションソースの区切り記号として;を使用)。

    -----------------------------------------

    poseClip (boolean): ポーズクリップとして現在のアトリビュート値を入力します。

    -----------------------------------------

    recursively (boolean): 再帰的に選択項目を入力して、すべての子を追加します。

    -----------------------------------------

    removeSceneAnimation (boolean): Trueの場合は、クリップまたはアニメーションソースを作成するときにシーンからアニメーションを除去します。除去されたシーンアニメーションをドライブするのは、タイムエディタのみです。

    -----------------------------------------

    showAnimSourceRemapping (boolean): 読み込まれたアニメーションソースのアトリビュートがシーンのアトリビュートと一致しない場合は、再マッピングダイアログを表示します。

    -----------------------------------------

    takeList (string): 内部でのみ使用されます。populateImportedAnimSourcesとともに使用して、読み込まれたテイク名を指定します。

    -----------------------------------------

    takesToImport (string): 内部でのみ使用されます。populateImportedAnimSourcesとともに使用して、読み込まれたテイクインデックスを指定します。

    -----------------------------------------

    type (string): 指定タイプのアニメーションソースのみを入力します。

    -----------------------------------------

    Return Value:
    None: string作成されたクリップの名前を返します。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timeEditorClipLayer(addAttribute: str = "",addLayer: str = "",addObject: str = "",allLayers: bool = False,attribute: str = "",attributeKeyable: str = "",clipId: int = 1,index: int = 1,keySiblings: bool = False,layerId: int = 1,layerName: str = "",mode: int = 1,mute: bool = False,name: bool = False,path: str = "",removeAttribute: str = "",removeLayer: bool = False,removeObject: str = "",resetSolo: bool = False,setKeyframe: bool = False,solo: bool = False,zeroKeying: bool = False) -> None:
    """
    タイム エディタ(Time Editor)クリップ レイヤのコマンド



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addAttribute (string): 指定されたlayerIdのレイヤに、指定したプラグを追加します。

    -----------------------------------------

    addLayer (string): 名前が指定された新しいレイヤを追加します。

    -----------------------------------------

    addObject (string): 指定されたlayerIdのレイヤに、クリップ内にある、すべてのアトリビュートを持つ指定したオブジェクトを追加します。

    -----------------------------------------

    allLayers (boolean): クリップIDが指定されたすべてのレイヤを返します。

    -----------------------------------------

    attribute (string): キー設定するアトリビュートのパスです。

    -----------------------------------------

    attributeKeyable (string): 指定したアトリビュートがキー設定可能であるかどうかを返します。

    -----------------------------------------

    clipId (int): このレイヤコマンドが作用するクリップのIDです。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    index (int): スタック内の特定の位置に新しいレイヤを追加するときに使用されるレイヤインデックスです。

    -----------------------------------------

    keySiblings (boolean): trueに設定されている場合は、キー設定中に追加アトリビュートをキー設定することで、目的の結果を得ることができます。

    -----------------------------------------

    layerId (int): 他の編集フラグと組み合わせて使用されるレイヤIDです。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    layerName (string): レイヤ名を編集します。照会モードでは、そのレイヤIDとクリップIDが指定されたレイヤ名を返します。

    -----------------------------------------

    mode (int): アニメーションカーブによってクリップの再生速度をコントロールするには、次の手順を実行します。0:加算1:加算オーバーライド2:オーバーライド3:オーバーライド通過

    -----------------------------------------

    mute (boolean): レイヤIDとクリップIDが指定したレイヤをミュート/ミュート解除します。

    -----------------------------------------

    name (boolean): レイヤIDとクリップIDが指定されたレイヤのアトリビュート名を照会します。

    -----------------------------------------

    path (string): 操作するレイヤまたはクリップのフルパスです。例:composition1|track1|clip1|layer1;composition1|track1|group|track1|clip1。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    removeAttribute (string): 指定されたlayerIdのレイヤから、指定したプラグを除去します。

    -----------------------------------------

    removeLayer (boolean): IDを持つレイヤを除去します。

    -----------------------------------------

    removeObject (string): 指定されたlayerIdのレイヤから、クリップ内にある、すべてのアトリビュートを持つ指定したオブジェクトを除去します。

    -----------------------------------------

    resetSolo (boolean): 指定したクリップID内のすべてのソロレイヤをソロ化解除します。

    -----------------------------------------

    setKeyframe (boolean): クリップの指定したレイヤ上の指定アトリビュートにキーフレームを設定します。-clipIdを使用して、指定したクリップを示します。-layerIdを使用して、クリップの指定したレイヤを示します。-attributeを使用して、指定したアトリビュートを示します(アトリビュートフラグが使用されていない場合、すべてのアトリビュートがキー設定されます)。-zeroKeyingを使用して、元のアニメーションからゼロオフセットがキー設定されるべきであることを示します。

    -----------------------------------------

    solo (boolean): レイヤIDとクリップIDが指定されたレイヤをソロ化/ソロ化解除します。

    -----------------------------------------

    zeroKeying (boolean): 設定するキーが、元のアニメーションからゼロオフセットされるべきかどうかを示します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timeEditorClipOffset(applyToAllRoots: bool = False,clipId: int = 1,matchClipId: int = 1,matchDstTime: float = 1.0,matchObj: str = "",matchOffsetRot: bool = False,matchOffsetTrans: bool = False,matchPath: str = "",matchRotOp: int = 1,matchSrcTime: float = 1.0,matchTransOp: int = 1,offsetTransform: bool = False,path: str = "",resetMatch: int = 1,resetMatchPath: str = "",rootObj: str = "",upVectorX: float = 1.0,upVectorY: float = 1.0,upVectorZ: float = 1.0) -> None:
    """
    このコマンドは、目的のクリップの指定した一致要素に自動的に位置合わせるためにソース クリップに適用するオフセットの計算に使用します。このコマンドが動作するためには、キャラクタにオフセット オブジェクトを指定する必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    applyToAllRoots (boolean): 入力中にすべてのルートにルートオフセットを適用します。ただし、ルートオブジェクトがrootObjフラグで指定されている場合、このフラグは無視されます。

    -----------------------------------------

    clipId (int): 編集するクリップのIDです。

    -----------------------------------------

    matchClipId (int): 一致させるクリップのIDを指定します。

    -----------------------------------------

    matchDstTime (time): ターゲットクリップの時刻を指定します。

    -----------------------------------------

    matchObj (name): 一致するオブジェクトを指定します。

    -----------------------------------------

    matchOffsetRot (boolean): 一致オフセット行列の回転を取得します。

    -----------------------------------------

    matchOffsetTrans (boolean): 一致オフセット行列の移動を取得します。

    -----------------------------------------

    matchPath (string): 一致するクリップのフルパスです。例:composition1|track1|Group|track2|clip1

    -----------------------------------------

    matchRotOp (int): 回転を一致させるためのオプションを指定します。0:フル-すべての回転成分が一致します。1:Y-Y成分が一致します。2:なし-回転は一致しません

    -----------------------------------------

    matchSrcTime (time): ソースクリップの時刻を指定します。

    -----------------------------------------

    matchTransOp (int): 移動を一致させるためのオプションを指定します。0:フル-すべての移動成分が一致します。1:XZ-XおよびZ成分が一致します。2:なし-移動は一致しません

    -----------------------------------------

    offsetTransform (boolean): 指定したクリップのオフセットを作成または取得します。

    -----------------------------------------

    path (string): 編集するクリップのフルパスです。例:composition1|track1|group;composition1|track1|group|track2|clip1。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    resetMatch (int): オフセットを除去するクリップIDを指定します。

    -----------------------------------------

    resetMatchPath (string): オフセットを除去するクリップのフルパスを指定します。例:composition1|track1|Group|track2|clip1

    -----------------------------------------

    rootObj (string): ルートオブジェクトを指定します。指定した場合、このフラグはapplyToAllRootsフラグよりも優先されます。照会モードで使用した場合は、リロケータ用に定義されたルートのリストを返します。

    -----------------------------------------

    upVectorX (float): アップベクトルのX座標を指定します。

    -----------------------------------------

    upVectorY (float): アップベクトルのY座標を指定します。

    -----------------------------------------

    upVectorZ (float): アップベクトルのZ座標を指定します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timeEditorComposition(active: bool = False,allCompositions: bool = False,createTrack: bool = False,delete: bool = False,duplicateFrom: str = "",rename: Tuple[str, str] = tuple("", ""),tracksNode: bool = False) -> None:
    """
    タイム エディタ(Time Editor)内の合成管理に関連するコマンドです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    active (boolean): アクティブな合成を照会または編集します。

    -----------------------------------------

    allCompositions (boolean): タイムエディタ(TimeEditor)内のすべての合成を返します。

    -----------------------------------------

    createTrack (boolean): 新しい合成を作成するときに既定のトラックを作成します。

    -----------------------------------------

    delete (boolean): 合成を削除します。

    -----------------------------------------

    duplicateFrom (string): 合成を複製します。

    -----------------------------------------

    rename ([string, string]): 最初の名前の合成を2番目の名前に変更します。

    -----------------------------------------

    tracksNode (boolean): 合成のトラックノードを照会します。

    -----------------------------------------

    Return Value:
    None: string現在文書化されていない値を返します。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timeEditorPanel(activeClipEditMode: int = 1,activeTabRootClipId: bool = False,activeTabTime: bool = False,activeTabView: int = 1,autoFit: str = "",autoFitTime: str = "",control: bool = False,defineTemplate: str = "",displayActiveKeyTangents: str = "",displayActiveKeys: str = "",displayInfinities: str = "",displayKeys: str = "",displayTangents: str = "",displayValues: str = "",docTag: str = "",exists: bool = False,filter: str = "",forceMainConnection: str = "",groupIdForTabView: int = 1,highlightConnection: str = "",keyingTarget: int = 1,layerId: int = 1,lockMainConnection: bool = False,lookAt: str = "",mainListConnection: str = "",menu: str = "",minClipWidth: int = 1,panel: str = "",parent: str = "",selectionConnection: str = "",setToPrevClipEditMode: bool = False,snapTime: str = "",snapToClip: bool = False,snapToFrame: bool = False,snapTolerance: int = 1,snapValue: str = "",stateString: bool = False,tabView: int = 1,timeCursor: bool = False,unParent: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,useTemplate: str = "") -> None:
    """
    タイム エディタ(Time Editor) - ノンリニア アニメーション エディタ



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activeClipEditMode (int): エディタに適切なクリップの編集モードを設定します。0:既定のモード1:トリムモード2:スケールモード3:ループモード4:保持モード

    -----------------------------------------

    activeTabRootClipId (boolean): 現在アクティブなタブを開いたクリップIDを取得します。メインタブの場合は、ルートクリップが存在しないことを示す-1が返されます。

    -----------------------------------------

    activeTabTime (boolean): アクティブなタブに表示される現在のタイムを取得します。これは、メインタブの場合はグローバルタイムになり、その他の場合はローカルタイムになります。

    -----------------------------------------

    activeTabView (int): タブウィジェットの(アクティブな)可視タブのインデックスを取得/設定します。注:インデックスはゼロベースです。

    -----------------------------------------

    autoFit (string): on|off|tglはビューへの自動フィットのオン/オフを切り替えます。

    -----------------------------------------

    autoFitTime (string): on|off|tglは時間軸に沿ってビューへの自動フィットのオン/オフも切り替えます。

    -----------------------------------------

    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    displayActiveKeyTangents (string): on|off|tglはエディタのアクティブキー接線の表示/非表示を切り替えます。

    -----------------------------------------

    displayActiveKeys (string): on|off|tglはエディタのアクティブキーの表示/非表示を切り替えます。

    -----------------------------------------

    displayInfinities (string): on|off|tglはエディタのインフィニティの表示/非表示を切り替えます。

    -----------------------------------------

    displayKeys (string): on|off|tglはエディタのキーフレームの表示/非表示を切り替えます。

    -----------------------------------------

    displayTangents (string): on|off|tglはエディタの接線の表示/非表示を切り替えます。

    -----------------------------------------

    displayValues (string): on|off|tglはエディタのアクティブキーおよび接線の値の表示/非表示を切り替えます。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    groupIdForTabView (int): 指定したタブビューインデックスのグループクリップIDを取得します。タブのインデックスを指定するには、このフラグは-queryフラグの前に置く必要があります。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    keyingTarget (int): 指定したクリップIDにターゲットをキー設定します。レイヤにキー設定する場合、「-layer」フラグを使用する必要があります。照会モードでは、クリップIDが省略され、キー設定しているターゲットの名前が返されます。

    -----------------------------------------

    layerId (int): キー設定しているターゲットのレイヤIDを示します。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    lookAt (string): FitViewヘルパーを、「all」、「selected」、「currentTime」のいずれかで指定できます。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    menu (script): エディタの作成時に実行されるスクリプトを指定します。関数は、新しいエディタの名前である文字列引数を渡します。

    -----------------------------------------

    minClipWidth (int): 最小クリップの幅を設定します。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    setToPrevClipEditMode (boolean): 前のクリップの編集モードに戻します。

    -----------------------------------------

    snapTime (string): 時間におけるキーフレームの移動スナップを「none」、「integer」、「keyframe」のいずれかで指定できます。

    -----------------------------------------

    snapToClip (boolean): クリップを操作してドラッグアンドドロップしているときに、タイムエディタのクリップにスナップオプションのオン/オフを切り替えます。snapToClipをオンにすると、操作されるすべてのタイミングはクリップ境界に移動します(近くにクリップ境界がある場合)。

    -----------------------------------------

    snapToFrame (boolean): クリップを操作してドラッグアンドドロップしているときに、タイムエディタのフレームにスナップオプションのオン/オフを切り替えます。snapToFrameをオンにすると、操作されるすべてのタイミングはフレームに正確に移動します。

    -----------------------------------------

    snapTolerance (int): スナップの許容値を設定します。

    -----------------------------------------

    snapValue (string): 値におけるキーフレームの移動スナップを「none」、「integer」、「keyframe」のいずれかで指定できます。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    tabView (int): 指定したグループクリップIDのタブビューを作成します。

    -----------------------------------------

    timeCursor (boolean): タイムエディタ(TimeEditor)のタイムカーソルをスクラブ用にアクティブ化します。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timeEditorTracks(activeClipWeight: float = 1.0,activeClipWeightId: float = 1.0,addTrack: int = 1,allClips: bool = False,allTracks: bool = False,allTracksRecursive: bool = False,composition: bool = False,path: str = "",plugIndex: int = 1,removeTrack: int = 1,removeTrackByPath: str = "",reorderTrack: Tuple[int, int] = tuple(1, 1),resetMute: bool = False,resetSolo: bool = False,selectedTracks: bool = False,trackGhost: bool = False,trackIndex: int = 1,trackMuted: bool = False,trackName: str = "",trackSolo: bool = False,trackType: int = 1) -> None:
    """
    タイム エディタ(Time Editor)トラック コマンド



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activeClipWeight (time): 指定時刻におけるクリップのウェイトを取得します。

    -----------------------------------------

    activeClipWeightId (time): 指定時刻にアクティブなクリップのウェイトを持つクリップIDを取得します。

    -----------------------------------------

    addTrack (int): 指定したトラックインデックスに新しいトラックを追加します。インデックスは0から開始します。末尾にトラックを追加するには、-1を指定します。

    -----------------------------------------

    allClips (boolean): 指定したトラックの下に、クリップIDのリストを返します。

    -----------------------------------------

    allTracks (boolean): 指定したトラックノードの直下にあるすべてのトラックの文字列のリストを「tracksNode:trackIndex」の形式で返します。

    -----------------------------------------

    allTracksRecursive (boolean): 指定したトラックノードのすべてのトラックの文字列のリストを返します。または、すべてのトラックノードのすべてのトラックの文字列のリストを「tracksNode:trackIndex」フォーマットで返します。指定されたルートトラックノードが合成によって得られている場合、このコマンドは、同じ合成の下にある複合内のトラックを含む、このグループ内のトラックを返します。

    -----------------------------------------

    composition (boolean): 指定したトラックが属している合成を返します。

    -----------------------------------------

    path (string): 操作するトラックノードまたはトラックのフルパスです。例:composition1|track1|group;composition1|track1。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    plugIndex (int): 指定したトラックのプラグインデックスを取得します。

    -----------------------------------------

    removeTrack (int): 指定したインデックスのトラックを除去します。これは多目的フラグです。

    -----------------------------------------

    removeTrackByPath (string): 指定したパスのトラックを除去します。これは多目的フラグです。例:composition1|track1|group|track1;

    -----------------------------------------

    reorderTrack ([int, int]): トラックを他のトラックに対して相対的に移動します。最初の引数は、トラックインデックス(0から始まる)です。2番目の引数は、移動するステップを示す正または負の数値を指定できます。正の値は前方移動、負の値は後方移動です。

    -----------------------------------------

    resetMute (boolean): アクティブな合成内のミュートされたすべてのトラックをリセットします。

    -----------------------------------------

    resetSolo (boolean): アクティブな合成上のすべてのトラックのソロ化をリセットします。

    -----------------------------------------

    selectedTracks (boolean): 指定したトラックノードに対して選択したすべてのトラックのインデックスのリストを返します。または、すべてのトラックノードの選択したすべてのトラックの文字列のリストを「tracksNode:trackIndex」フォーマットで返します。

    -----------------------------------------

    trackGhost (boolean): トラック内のすべてのクリップをゴースト化します。

    -----------------------------------------

    trackIndex (int): トラックインデックスを指定します。このフラグは他のフラグと一緒に使用します。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    trackMuted (boolean): トラックをミュートするかどうかを返します。

    -----------------------------------------

    trackName (string): トラックの表示名です。

    -----------------------------------------

    trackSolo (boolean): トラックをソロ化するかどうかを返します。

    -----------------------------------------

    trackType (int): トラックタイプを指定します。-at/addTrackと一緒に使用する必要があります。単独では機能しません。照会モードでは、トラックタイプに対応する整数を返します。0:アニメーショントラック(既定)1:オーディオトラック

    -----------------------------------------

    Return Value:
    None: Int編集モードでは、新しく作成されたトラック インデックスを返します。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def bakeDeformer(colorizeSkeleton: bool = False,dstMeshName: str = "",dstSkeletonName: str = "",maxInfluences: int = 1,srcMeshName: str = "",srcSkeletonName: str = "") -> None:
    """
    デフォーマのセットによってメッシュ シェイプが決定されたリグ キャラクタを基に、bakeDeformer は観測されたデフォメーションに最も近いリニア ブレンド スキン ウェイトを計算します。そのために、可動域内でリグを移動することによってサンプルのテスト セットを生成します。結果のメッシュとポーズのペアは、スキニング ウェイトを計算して、制限された最適化を計算するために使用されます。bakeDeformer は、算出されたウェイトを自動的にバインドして目的のジオメトリに適用します。ソースと目的のメッシュ/スケルトンが同じ場合、このコマンドは、元のデフォメーションを skinCluster および計算されたウェイトで置き換えます。サンプルの使用方法については、次の例を参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    colorizeSkeleton (boolean): 作成された新しいスキンクラスタは、そのスケルトンが色付けされます。

    -----------------------------------------

    dstMeshName (string): 目的のメッシュ名。

    -----------------------------------------

    dstSkeletonName (string): 目的のスケルトン名。

    -----------------------------------------

    maxInfluences (int): 頂点ごとのインフルエンスの最大数。

    -----------------------------------------

    srcMeshName (string): ソースメッシュ名。

    -----------------------------------------

    srcSkeletonName (string): ソーススケルトン名。

    -----------------------------------------

    Return Value:
    None: stringBakeDeformer 名
    """
    pass

    
def blendShape(after: bool = False,afterReference: bool = False,automatic: bool = False,before: bool = False,copyDelta: Tuple[int, int, int] = tuple(1, 1, 1),copyInBetweenDelta: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),deformerTools: bool = False,envelope: float = 1.0,exclusive: str = "",export: str = "",exportTarget: Tuple[int, int] = tuple(1, 1),flipTarget: Tuple[int, int] = tuple(1, 1),frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,ignoreSelected: bool = False,ip: str = "",inBetween: bool = False,inBetweenIndex: int = 1,inBetweenType: str = "",includeHiddenSelections: bool = False,mergeSource: int = 1,mergeTarget: int = 1,mirrorDirection: int = 1,mirrorTarget: Tuple[int, int] = tuple(1, 1),name: str = "",normalizationGroups: bool = False,origin: str = "",parallel: bool = False,prune: bool = False,remove: bool = False,resetTargetDelta: Tuple[int, int] = tuple(1, 1),split: bool = False,suppressDialog: bool = False,symmetryAxis: str = "",symmetryEdge: str = "",symmetrySpace: int = 1,tangentSpace: bool = False,target: Tuple[str, int, str, float] = tuple("", 1, "", 1.0),topologyCheck: bool = False,transform: str = "",weight: Tuple[int, float] = tuple(1, 1.0),weightCount: int = 1) -> None:
    """
    このコマンドは、ブレンド シェイプ デフォーマで、初期のベースシェイプに対して各ターゲットシェイプの指定量だけブレンドするブレンド シェイプ デフォーマを作成します。ベース シェイプはそれぞれ、固有のターゲット シェイプのセットで変形されます。ターゲット シェイプには、シェイプのウェイト値の 1 つに関連付けるインデックスがあります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    automatic (boolean): -automaticフラグを使用すると、-frontOfChainと-beforeのいずれかを自動的に選択する方法でデフォーマの順序を指定できます。変形するジオメトリが可逆的なデフォーマの影響のみを受ける場合は、-frontOfChainモードが使用され、そうでない場合は-beforeモードが使用されます。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    copyDelta ([uint, uint, uint]): ベース、ソース、宛先デルタインデックス値を設定します。

    -----------------------------------------

    copyInBetweenDelta ([uint, uint, uint, uint]): ベース、ターゲット、ソース、宛先デルタインデックス値を設定します。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    envelope (float): デフォメーション全体のどの程度を適用するかを制御する、デフォーマのエンベロープ値を設定します。既定は1.0です。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    export (string): 名前の付いたファイルパスにシェイプを書き出します。

    -----------------------------------------

    exportTarget ([int, int]): 書き出しのためのベースインデックスとターゲットインデックスのペアを指定します。

    -----------------------------------------

    flipTarget ([uint, uint]): ベースとターゲットのペアのリストを反転します。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    ip (string): 名前の付いたファイルパスからシェイプを読み込みます。

    -----------------------------------------

    inBetween (boolean): 指定したターゲットがインビトウィーンとして機能することを示します。インビトウィーンターゲットは、ベースシェイプと別のターゲット間の中間的なターゲットとして機能するものです。

    -----------------------------------------

    inBetweenIndex (uint): このインデックスで定義されたインビトウィーンターゲットジオメトリ内でポイントのデルタ値を除去する場合に限り、-rtd/-resetTargetDeltaフラグと一緒に使用されます。

    -----------------------------------------

    inBetweenType (string): 作成するインビトウィーンターゲットがヒーローターゲットに対して相対的であるか、または絶対であるかを指定します。ヒーローターゲットに対して相対的である場合、インビトウィーンターゲットにはヒーローターゲットに加えられた変更がすべて反映されます。有効な値は、相対(relative)または絶対(absolute)です。このフラグは、常に-ib/-inBetweenと-t/-targetフラグと一緒に使用する必要があります。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    mergeSource (int): マージするソースインデックスのリストです。

    -----------------------------------------

    mergeTarget (uint): マージするターゲットインデックスです。

    -----------------------------------------

    mirrorDirection (uint): ミラー方向です。0=負、1=正

    -----------------------------------------

    mirrorTarget ([uint, uint]): ベースとターゲットのペアのリストをミラーします。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    normalizationGroups (boolean): 使用した正規化グループIDのリストを返します。

    -----------------------------------------

    origin (string): 既定では、blendShapeはワールド空間に対して実行されます。有効な値は「world」と「local」です。localフラグは、シェイプのローカルの原点に対してブレンドシェイプを実行します。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    resetTargetDelta ([uint, uint]): ターゲットインデックスによって定義されたすべての連続ターゲットを含む、ターゲットジオメトリ内のポイントのすべてのデルタ値を除去します。パラメータリスト:uint:ベースオブジェクトのインデックスuint:ターゲットのインデックス

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    suppressDialog (boolean): ダイアログボックスを表示しないで、ユーザが定義したとおりにコマンドを実行します。

    -----------------------------------------

    symmetryAxis (string): 対称の軸です。有効な値は「X」、「Y」、「Z」です。

    -----------------------------------------

    symmetryEdge (string): 「.」で区切られた1つまたは2つの対称エッジの名前です。正しい値については、blendShapeノードのsymmetryEdgeアトリビュートを参照してください。

    -----------------------------------------

    symmetrySpace (uint): 対称のスペースです。0=トポロジ、1=オブジェクト、2=UV

    -----------------------------------------

    tangentSpace (boolean): 指定したターゲットのデルタが、サーフェスの接線空間に対して相対的になるべきであることを示します。

    -----------------------------------------

    target ([string, uint, string, float]): ベースシェイプベースオブジェクトのインデックスターゲットシェイプとしてターゲットオブジェクトを設定します。シェイプのウェイトがtargetValueの場合、ターゲットシェイプの影響を100%受けます。パラメータリスト:string:ベースオブジェクトint:インデックスstring:ターゲットオブジェクトdouble:ターゲット値

    -----------------------------------------

    topologyCheck (boolean): ブレンドするシェイプ間のトポロジ一致のチェック状態を設定します。既定はオンです。

    -----------------------------------------

    transform (string): ターゲットのトランスフォームを設定します。デルタはポストトランスフォームに対して相対的になります。通常、このオプションに最適なワークフローは、導入した修正に関連するジョイントを選択することです。このフラグは、blendShapeノードの「変形順序」が「前」である場合のみ使用する必要があります。

    -----------------------------------------

    weight ([uint, float]): インデックス(最初のパラメータ)のウェイト値(2番目のパラメータ)を設定します。

    -----------------------------------------

    weightCount (uint): シェイプのウェイト値を数値で設定します。

    -----------------------------------------

    Return Value:
    None: string[](ブレンド シェイプ ノード名)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def blendShapeEditor(control: bool = False,defineTemplate: str = "",docTag: str = "",exists: bool = False,filter: str = "",forceMainConnection: str = "",highlightConnection: str = "",lockMainConnection: bool = False,mainListConnection: str = "",panel: str = "",parent: str = "",selectionConnection: str = "",stateString: bool = False,targetControlList: bool = False,targetList: bool = False,unParent: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,useTemplate: str = "",verticalSliders: bool = False) -> None:
    """
    このコマンドは、コントロール ノード blendShape のコントロールを持つ、ベース エディタ クラスから派生するエディタを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    targetControlList (boolean): 

    -----------------------------------------

    targetList (boolean): 

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    verticalSliders (boolean): 

    -----------------------------------------

    Return Value:
    None: stringエディタ名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def blendShapePanel(blendShapeEditor: bool = False,control: bool = False,copy: str = "",createString: bool = False,defineTemplate: str = "",docTag: str = "",editString: bool = False,exists: bool = False,init: bool = False,isUnique: bool = False,label: str = "",menuBarRepeatLast: bool = False,menuBarVisible: bool = False,needsInit: bool = False,parent: str = "",popupMenuProcedure: str = "",replacePanel: str = "",tearOff: bool = False,tearOffCopy: str = "",tearOffRestore: bool = False,unParent: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドは、blendShapeEditor を格納するベースのパネル クラスから派生するパネルを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    blendShapeEditor (boolean): パネルに関連するエディタ名を返す照会モード専用フラグ。

    -----------------------------------------

    control (boolean): このパネルの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:パネルにはコントロールがないことがあります。コントロールが存在しない場合、このフラグは""を返します。

    -----------------------------------------

    copy (string): このパネルを指定したパネルのコピーにします。両方のパネルは同じタイプである必要があります。

    -----------------------------------------

    createString (boolean): パネルの作成に使用するコマンド文字列

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): Mayaのパネルにタグをアタッチします。

    -----------------------------------------

    editString (boolean): パネルの編集に使用するコマンド文字列

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    init (boolean): パネルの既定の状態を初期化します。これは、file-newとfile-openによって自動的に実行されます。

    -----------------------------------------

    isUnique (boolean): このパネルタイプのインスタンスが1つだけ許可されている場合、trueを返します。

    -----------------------------------------

    label (string): ユーザが読みやすいパネル用ラベルを指定します。

    -----------------------------------------

    menuBarRepeatLast (boolean): メニューヘッダを中マウスボタンでクリックしたときに、最後に選択したメニュー項目を繰り返すかどうかをコントロールします。

    -----------------------------------------

    menuBarVisible (boolean): パネルのメニューバーを表示するかどうかを制御します。

    -----------------------------------------

    needsInit (boolean): (内部)OnEditは、初期化が必要なものとしてパネルをマークします。照会すると、初期化が必要なものとしてパネルがマークされているかどうかを返します。file-newとfile-openで使用されます。

    -----------------------------------------

    parent (string): このパネルの親のレイアウトを指定します。

    -----------------------------------------

    popupMenuProcedure (script): パネルのポップアップメニューを作成するためにコールされるプロシージャを指定します。既定値は「buildPanelPopupMenu」です。プロシージャは、パネル名である文字列引数を持つ必要があります。

    -----------------------------------------

    replacePanel (string): 指定したパネルをこのパネルと置き換えます。ターゲットパネルが同じレイアウト内にある場合、入れ替えを実行します。

    -----------------------------------------

    tearOff (boolean): このパネルを切り離し、パネルの親としてのpaneLayoutを持つフローティングウィンドウにします。照会すると、パネルが独自のウィンドウに切り離されたかどうかを返します。

    -----------------------------------------

    tearOffCopy (string): このパネルを、指定したソースパネルのコピーを切り離したウィンドウとして作成します。

    -----------------------------------------

    tearOffRestore (boolean): パネルが切り離されていて、フォーカスされている場合に、パネルを復元します。パネルがドッキングされている場合は、ドッキングされたウィンドウ内でアクティブなパネルになります。パネルを切り離す場合のみに使用される-to/-tearOffフラグではなく、このフラグをすべてのパネルに追加される既定のフラグにする必要があります。

    -----------------------------------------

    unParent (boolean): パネルをそのレイアウトから除去するように指定します。照会には使用できません。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringパネルの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def cluster(after: bool = False,afterReference: bool = False,before: bool = False,bindState: bool = False,deformerTools: bool = False,envelope: float = 1.0,exclusive: str = "",frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,ignoreSelected: bool = False,includeHiddenSelections: bool = False,name: str = "",parallel: bool = False,prune: bool = False,relative: bool = False,remove: bool = False,resetGeometry: bool = False,split: bool = False,weightedNode: Tuple[str, str] = tuple("", "")) -> None:
    """
    cluster コマンドは、クラスタを作成するか、既存のクラスタのメンバーシップを編集します。このコマンドは、新しいクラスタの作成時に、クラスタ ノードの名前を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    bindState (boolean): このフラグをオンにすると、クラスタ化したオブジェクトがクラスタ化時に空間上の位置を保持できるように補正が追加されます。これは、クラスタがクラスタ時間にトランスフォームする場合に、クラスタが作成される時間にジオメトリがジャンプしないようにするときに、必要な機能です。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    envelope (float): デフォーマのエンベロープ値を設定します。既定は1.0です。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    relative (boolean): デフォーマの相対モードを有効にします。相対モードでは、クラスタのすぐ上の変換のみがクラスタに使用されます。既定はオフです。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    resetGeometry (boolean): クラスタで変形されるオブジェクトの、ジオメトリマトリックスをリセットします。このフラグを使用して、クラスタで変形されるオブジェクトをスケールする場合に発生する、不要なエフェクトを削除します。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    weightedNode ([string, string]): すべてのパーセントが適用されるクラスタの上にあるDAG内のトランスフォームノード。2番目のDAGobjectは、変換行列を評価する最初のDAGobjectの派生要素を指定します。既定はクラスタハンドルです。

    -----------------------------------------

    Return Value:
    None: string[](クラスタ ノード名とクラスタ ハンドル名)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def combinationShape(addDriver: bool = False,allDrivers: bool = False,blendShape: str = "",combinationTargetIndex: int = 1,combinationTargetName: str = "",combineMethod: int = 1,driverTargetIndex: int = 1,driverTargetName: str = "",exist: bool = False,removeDriver: bool = False) -> None:
    """
    ブレンド シェイプ ターゲットのドライブ関係を作成または編集するコマンド



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addDriver (boolean): 組み合わせシェイプにドライバを追加します

    -----------------------------------------

    allDrivers (boolean): 組み合わせシェイプのすべてのドライバ

    -----------------------------------------

    blendShape (string): 組み合わせシェイプの関連付けられたブレンドシェイプノード照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    combinationTargetIndex (int): 組み合わせシェイプのドリブンブレンドシェイプターゲットインデックス照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    combinationTargetName (string): 組み合わせシェイプのドリブンブレンドシェイプターゲット名照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    combineMethod (int): 組み合わせシェイプの組み合わせ方法:0:乗算1:最低ウェイト2:最低ウェイト(スムーズ)

    -----------------------------------------

    driverTargetIndex (int): 組み合わせシェイプのドライバブレンドシェイプターゲットインデックス

    -----------------------------------------

    driverTargetName (string): 組み合わせシェイプのドライバブレンドシェイプターゲット名

    -----------------------------------------

    exist (boolean): 組み合わせシェイプが存在する場合

    -----------------------------------------

    removeDriver (boolean): 組み合わせシェイプからドライバを削除します

    -----------------------------------------

    Return Value:
    None: Int編集モードでは、新しく作成された組み合わせシェイプ ノード名を返します。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def copyDeformerWeights(destinationDeformer: str = "",destinationShape: str = "",mirrorInverse: bool = False,mirrorMode: str = "",noMirror: bool = False,smooth: bool = False,sourceDeformer: str = "",sourceShape: str = "",surfaceAssociation: str = "",uvSpace: Tuple[str, str] = tuple("", "")) -> None:
    """
    デフォーマ ウェイトを XYZ 軸の 1 軸の反対側にコピーまたはミラーするコマンドです。このコマンドを使用して、サーフェスから別のサーフェスへ、または同じサーフェス内で、ウェイトをミラーすることができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    destinationDeformer (string): 目的のシェイプが使用するデフォーマを指定します。

    -----------------------------------------

    destinationShape (string): 目的の変形シェイプを指定します。

    -----------------------------------------

    mirrorInverse (boolean): 値は正領域から負領域へミラーされます。このフラグを使用すると、方向が反転します。

    -----------------------------------------

    mirrorMode (string): mirrorModeフラグは、ミラーフラグを使用した場合のミラーリングのプレーン(XY、YZ、XZのいずれか)を定義します。既定のプレーンはXYです。

    -----------------------------------------

    noMirror (boolean): ミラーフラグを使用しない場合、ウェイトはミラーされずにコピーされます。

    -----------------------------------------

    smooth (boolean): スムーズフラグを使用するとウェイトは、最近接の1つの頂点から割り当てられる代わりに、最近接の頂点間で滑らかに補間されます。

    -----------------------------------------

    sourceDeformer (string): ウェイトをミラーするデフォーマを指定します。照会すると、ソースシェイプが使用するデフォーマを返します。

    -----------------------------------------

    sourceShape (string): ソースの変形シェイプを指定します。

    -----------------------------------------

    surfaceAssociation (string): surfaceAssociationフラグは、ウェイトがサーフェス間で転送される方法、「closestPoint」、「rayCast」、または「closestComponent」を制御します。既定はclosestComponentです。

    -----------------------------------------

    uvSpace ([string, string]): uvSpaceフラグはウェイトの転送が、指定したソースUVセットと目標UVセットに基づいてUV空間で実施されることを示します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def deformer(after: bool = False,afterReference: bool = False,before: bool = False,deformerTools: bool = False,exclusive: str = "",frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,ignoreSelected: bool = False,includeHiddenSelections: bool = False,name: str = "",parallel: bool = False,prune: bool = False,remove: bool = False,split: bool = False,type: str = "") -> None:
    """
    このコマンドは、指定したタイプのデフォーマを作成します。デフォーマでは、選択したオブジェクトが変形されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    type (string): 作成するデフォーマのタイプを指定します。このフラグは作成モードで必要です。一般的にタイプには、ロード済みプラグインデフォーマを指定します。一般的に、スカルプト、ラティス、ブレンドシェイプ、ワイヤ、クラスタなど、標準デフォーマの作成には、このコマンドを使用しません。標準デフォーマには独自のカスタマイズされたコマンドがあり、そのコマンドで便利で特化された機能が実行されるからです。

    -----------------------------------------

    Return Value:
    None: string[]作成/編集されたアルゴリズム ノードの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dropoffLocator() -> None:
    """
    選択したカーブ ポイントごとに、1 つ以上のドロップオフ ロケータがワイヤ カーブに追加されます。ドロップオフ ロケータを使用すると、カーブ ポイントについてワイヤ デフォメーションをローカルで調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string[]ロケータ名
    """
    pass

    
def findDeformers() -> None:
    """
    このコマンドは、指定したシェイプのすべてのデフォーマを検索します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def lattice(after: bool = False,afterReference: bool = False,before: bool = False,commonParent: bool = False,deformerTools: bool = False,divisions: Tuple[int, int, int] = tuple(1, 1, 1),dualBase: bool = False,exclusive: str = "",freezeMapping: bool = False,frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,ignoreSelected: bool = False,includeHiddenSelections: bool = False,latticeReset: bool = False,ldivisions: Tuple[int, int, int] = tuple(1, 1, 1),name: str = "",objectCentered: bool = False,outsideFalloffDistance: float = 1.0,outsideLattice: int = 1,parallel: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),prune: bool = False,remove: bool = False,removeTweaks: bool = False,rotation: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),scale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),split: bool = False) -> None:
    """
    選択したオブジェクトが変形されるラティス デフォーマが作成されます。object centered フラグを使用すると、初期ラティスは、選択したオブジェクトに適合します。このコマンドが完了すると、ラティスは選択されます。ラティス デフォーマにはベース ラティスが関連付けられます。ベース ラティスに含まれるオブジェクトのみが、ラティスによって変形されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    commonParent (boolean): ベースラティスと変形ラティスが共通のトランスフォームでグループ化されます。共通のトランスフォームのサイズを変更すると、変形に影響を与えずにラティスのサイズを変更できます。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    divisions ([uint, uint, uint]): X、Y、Zのラティススライス数が設定されます。既定は、2、5、2です。照会するとfloatfloatfloatが返されます。分割数を変更したら、ラティスポイントの微調整とアニメーションはすべて再実行する必要があります。

    -----------------------------------------

    dualBase (boolean): 2つのベースラティスを受け入れる、特別な目的のffdデフォーマノードが作成されます。既定はオフで、通常のffdデフォーマノードが作成されます。内部使用のみです。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    freezeMapping (boolean): ジオメトリポイントのベース位置が、このフラグを設定した時間に固定されます。マッピングが固定されている場合、ラティスを基準にジオメトリを移動しても、変形は再計算されません。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    latticeReset (boolean): ベース位置に一致するようにラティスがリセットされます。ラティスで実行される変形はすべて元に戻されます。ラティスでは、ラティスのリセット(ベース)位置で囲まれるポイントのみが変形されます。

    -----------------------------------------

    ldivisions ([uint, uint, uint]): X、Y、Zのローカルラティススライス数が設定されます。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    objectCentered (boolean): 選択したオブジェクトまたはコンポーネントを中心にラティスがセンタリングされます。既定はオフで、ラティスは原点でセンタリングされます。

    -----------------------------------------

    outsideFalloffDistance (float): ベースラティスの外側にあるポイントのトランスフォーム方法が2に設定されている場合に使用する減衰範囲を設定します。範囲の値は正の数で、減衰範囲をベースラティスサイズの倍数として指定します。つまり、1.0を指定すると、ベースラティスの幅/高さ/深度までの範囲にあるポイントだけがトランスフォームされます。0.0はoutsideLatticeの値を0にするのと同じです(ベースラティスの外側のポイントはまったくトランスフォームされません)。大きい値は、outsideLatticeの値を1(すべてのポイントがトランスフォームされます)にしたトランスフォーム結果と同じです。

    -----------------------------------------

    outsideLattice (uint): ベースラティスの外側にあるポイントのトランスフォーム方法を指定するモードを設定します。0(既定)を指定すると、外側のポイントはトランスフォームされません。1を指定するとすべての外側のポイントがトランスフォームされ、2を指定すると「falloffdistance」(ofd/outsideFalloffDistanceフラグを参照)内にある外側のポイントだけがトランスフォームされます。照会すると、現在のラティス設定が返されます。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    position ([linear, linear, linear]): 新しく作成したラティスの位置を指定するために使用されます。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    removeTweaks (boolean): ラティスポイントの移動で実行されたラティスデフォメーションが除去されます。ラティス自体の平行移動、回転、スケールは除去されません。

    -----------------------------------------

    rotation ([angle, angle, angle]): 新しく作成したラティスの初期回転を指定するために使用されます。

    -----------------------------------------

    scale ([linear, linear, linear]): 新しく作成したラティスの初期スケールを指定するために使用されます。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    Return Value:
    None: string[]ffd ノード名、ラティス名、ベース ラティス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nonLinear(after: bool = False,afterReference: bool = False,autoParent: bool = False,before: bool = False,commonParent: bool = False,defaultScale: bool = False,deformerTools: bool = False,exclusive: str = "",frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,ignoreSelected: bool = False,includeHiddenSelections: bool = False,name: str = "",parallel: bool = False,prune: bool = False,remove: bool = False,split: bool = False,type: str = "") -> None:
    """
    このコマンドは、選択したオブジェクトを変形する、指定したタイプの機能的デフォーマを作成します。デフォーマは次の 3 つのノードで構成されています。選択したオブジェクトのヒストリに接続されるデフォーマ ドライバ、変形の軸の位置と方向をコントロールするデフォーマ ハンドル トランスフォーム、デフォメーションのパラメータを維持するデフォーマ ハンドルです。作成されるデフォーマ ハンドル シェイプのタイプは、指定したデフォーマのタイプに依存します。デフォーマ ハンドルは選択したオブジェクトのバウンディング ボックスの中心に位置し、セレクション リストの先頭オブジェクトと同じ方向になります。デフォーマ ハンドルのトランスフォームは、コマンドが完了したとき選択されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    autoParent (boolean): 選択したオブジェクトのトランスフォームのデフォーマハンドルを親にします。このフラグは、単一のオブジェクトが選択されている場合のみ有効です。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    commonParent (boolean): 新しいトランスフォームを作成し、選択したオブジェクトとその下のデフォーマハンドルを親にします。このフラグは、単一のオブジェクトが選択されている場合のみ有効です。

    -----------------------------------------

    defaultScale (boolean): デフォメーションハンドルのスケールを1に設定します。既定では、デフォメーションハンドルは、選択したオブジェクトのバウンディングボックスの最大の大きさに合わせます。[deformerFlags]デフォーマハンドルシェイプのアトリビュートは作成時に設定することができ、ロングあるいはショートのアトリビュート名を使って、通常のフラグとして編集、照会することができます。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    type (string): 変形のタイプを指定します。現在有効な変形のタイプは次のとおりです。bend、twist、squash、flare、sineとwave。

    -----------------------------------------

    Return Value:
    None: string[]デフォーマ ドライバ名、デフォーマ ハンドル トランスフォーム名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def percent(addPercent: bool = False,dropoffAxis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),dropoffCurve: str = "",dropoffDistance: float = 1.0,dropoffPosition: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),dropoffType: str = "",multiplyPercent: bool = False,value: float = 1.0) -> None:
    """
    クラスタや jointCluster など、ウェイトをかけたノードのメンバーでパーセント値を設定します。フラグを指定しないと、指定したノードで選択したコンポーネントのパーセント値が、指定したパーセント値に設定されます。指定したパーセント値から 0 (ゼロ)へのドロップオフは、シェイプの周りのドロップオフ距離を使用して、ポイント、プレーン、またはカーブから指定できます。パーセント値は、ノード コンポーネントの既存パーセント値と加算したり乗算したりすることもできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addPercent (boolean): -vフラグで指定したパーセント値を既存パーセント値に加算します。

    -----------------------------------------

    dropoffAxis ([linear, linear, linear]): dropoffPositionから始めて、パーセント値をドロップオフさせる軸を指定します。

    -----------------------------------------

    dropoffCurve (string): パーセント値をドロップオフさせるカーブを指定します。

    -----------------------------------------

    dropoffDistance (linear): -dpフラグ、-daxフラグ、-dcフラグで指定した、ポイント、プレーン、カーブからのドロップオフ距離を指定します。

    -----------------------------------------

    dropoffPosition ([linear, linear, linear]): パーセント値をドロップオフさせるポイントを指定します。

    -----------------------------------------

    dropoffType (string): ドロップオフの種類を指定します。-dp、-daxまたは-dcフラグと連動して使用されます。既定はlinearです。有効な値は、linear、sine、exponential、linearSquared、noneです。

    -----------------------------------------

    multiplyPercent (boolean): -vフラグで指定したパーセント値を既存パーセント値に乗算します。

    -----------------------------------------

    value (float): パーセント値が適用されます。既定は1です。照会モードの場合、選択したオブジェクトコンポーネントのウェイトに対応するdoubleの配列が返されます。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def reorderDeformers(name: str = "") -> None:
    """
    このコマンドは、2 つのデフォメーション ノードが出力ジオメトリに作用する順序を変更します。1 番目の引数は deformer1 の名前、2 番目は deformer2 で、その後に変形されるオブジェクトのリストが続きます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    name (string): このフラグはサポートされていないため使用されません。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def sculpt(after: bool = False,afterReference: bool = False,before: bool = False,deformerTools: bool = False,dropoffDistance: float = 1.0,dropoffType: str = "",exclusive: str = "",frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,groupWithLocator: bool = False,ignoreSelected: bool = False,includeHiddenSelections: bool = False,insideMode: str = "",maxDisplacement: float = 1.0,mode: str = "",name: str = "",objectCentered: bool = False,parallel: bool = False,prune: bool = False,remove: bool = False,sculptTool: str = "",split: bool = False) -> None:
    """
    このコマンドは、スカルプト オブジェクトのデフォーマを作成、編集、照会します。作成モードの既定では、スカルプト ツールが指定されていない場合、インプリシット球がスカルプト オブジェクトとして使用されます。作成、編集されたオブジェクトの名前を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    dropoffDistance (linear): スカルプトオブジェクトがデフォメーションエフェクトを生成しなくなる範囲をスカルプトオブジェクトのサーフェスからの距離で指定します。既定は1.0です。照会するとfloatを返します。

    -----------------------------------------

    dropoffType (string): スカルプトオブジェクトのサーフェス上でエフェクトが最大の状態から影響範囲の限界でエフェクトが0になるまで、デフォメーションエフェクトがどのように減衰するかを指定します。有効な値は、linear|noneで、既定はlinearです。照会するとstringを返します。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    groupWithLocator (boolean): スカルプタとそのロケータを単一のトランスフォームの下にグループ化します。既定はオフです。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    insideMode (string): デフォメーションアルゴリズムがスカルプトプリミティブにあるポイントを処理する方法を指定します。オプションはring|evenで、既定はevenです。照会するとstringを返します。ringモードは、オブジェクト内部を通過するスカルプトオブジェクトの周囲にポイントの輪のような輪郭を生成します。一方のevenモードは、スカルプトオブジェクトのサーフェス全体にできるだけ均一にポイントを分散させます。

    -----------------------------------------

    maxDisplacement (linear): 変形対象のオブジェクト上のポイントをスカルプトオブジェクトが動かす最大量を定義します。既定は1.0です。照会するとfloatを返します。

    -----------------------------------------

    mode (string): スカルプトオブジェクトが使用するデフォメーションアルゴリズムを指定します。オプションはflip、project、stretchで、既定はstretchです。照会するとstringを返します。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    objectCentered (boolean): 選択したオブジェクトまたは複数のコンポーネントのバウンディングボックスの中心にスカルプタとロケータを配置します。既定はオフで、スカルプタとロケータは原点に配置されます。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    sculptTool (string): 指定したNURBSオブジェクトを、既定のインプリシット球の代わりにスカルプトツールとして使用します。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    Return Value:
    None: string[]スカルプト アルゴリズム ノード、スカルプト球、スカルプト伸張の原点の名前です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def sculptTarget(after: bool = False,afterReference: bool = False,before: bool = False,deformerTools: bool = False,exclusive: str = "",frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,ignoreSelected: bool = False,inbetweenWeight: float = 1.0,includeHiddenSelections: bool = False,name: str = "",parallel: bool = False,prune: bool = False,regenerate: bool = False,remove: bool = False,snapshot: int = 1,split: bool = False,target: int = 1) -> None:
    """
    このコマンドは、スカルプト ツールとトランスフォームのマニピュレータによって修正されるブレンド シェイプ ターゲットを指定するために使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    inbetweenWeight (float): スカルプトツールとトランスフォームツールによって編集可能になるブレンドシェイプノードのインビトウィーンターゲットウェイトを指定します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    regenerate (boolean): このフラグが指定されると、指定したブレンドシェイプターゲット用に新しいシェイプが作成されます(そのシェイプがまだ存在しない場合)。新しいシェイプの名前が返されます。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    snapshot (int): このフラグはインビトウィーンターゲットを追加するために、内部でのみ使用する必要があります。このフラグを指定すると、指定したインビトウィーンターゲットにシェイプのスナップショットが存在しない場合はスナップショットを取ります。このフラグはベースシェイプのインデックスを指定し、インビトウィーンターゲットを指定する-targetおよび-inbetweenWeightフラグと一緒に使用する必要があります。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    target (int): スカルプトツールとトランスフォームツールによって編集可能になるブレンドシェイプノードのターゲットインデックスを指定します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def shapeEditor(clearSelection: bool = False,control: bool = False,defineTemplate: str = "",docTag: str = "",exists: bool = False,filter: str = "",forceMainConnection: str = "",highlightConnection: str = "",lockMainConnection: bool = False,lowestSelection: bool = False,mainListConnection: str = "",panel: str = "",parent: str = "",selectionConnection: str = "",stateString: bool = False,targetControlList: bool = False,targetList: bool = False,unParent: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,useTemplate: str = "",verticalSliders: bool = False) -> None:
    """
    このコマンドは、デフォーマ ノードおよびコントロール ノードのコントロールを持つ、ベース エディタ クラスから派生するエディタを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    clearSelection (boolean): シェイプエディタの選択を解除します。

    -----------------------------------------

    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    lowestSelection (boolean): 最低の選択項目を照会します。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    targetControlList (boolean): ターゲットコントロールリストを照会します。

    -----------------------------------------

    targetList (boolean): ターゲットリストを照会します。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    verticalSliders (boolean): スライダは垂直である必要がありますか?

    -----------------------------------------

    Return Value:
    None: stringエディタの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def shapePanel(control: bool = False,copy: str = "",createString: bool = False,defineTemplate: str = "",docTag: str = "",editString: bool = False,exists: bool = False,init: bool = False,isUnique: bool = False,label: str = "",menuBarRepeatLast: bool = False,menuBarVisible: bool = False,needsInit: bool = False,parent: str = "",popupMenuProcedure: str = "",replacePanel: str = "",shapeEditor: bool = False,tearOff: bool = False,tearOffCopy: str = "",tearOffRestore: bool = False,unParent: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドは、shapeEditor を格納するベースのパネル クラスから派生するパネルを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    control (boolean): このパネルの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:パネルにはコントロールがないことがあります。コントロールが存在しない場合、このフラグは""を返します。

    -----------------------------------------

    copy (string): このパネルを指定したパネルのコピーにします。両方のパネルは同じタイプである必要があります。

    -----------------------------------------

    createString (boolean): パネルの作成に使用するコマンド文字列

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): Mayaのパネルにタグをアタッチします。

    -----------------------------------------

    editString (boolean): パネルの編集に使用するコマンド文字列

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    init (boolean): パネルの既定の状態を初期化します。これは、file-newとfile-openによって自動的に実行されます。

    -----------------------------------------

    isUnique (boolean): このパネルタイプのインスタンスが1つだけ許可されている場合、trueを返します。

    -----------------------------------------

    label (string): ユーザが読みやすいパネル用ラベルを指定します。

    -----------------------------------------

    menuBarRepeatLast (boolean): メニューヘッダを中マウスボタンでクリックしたときに、最後に選択したメニュー項目を繰り返すかどうかをコントロールします。

    -----------------------------------------

    menuBarVisible (boolean): パネルのメニューバーを表示するかどうかを制御します。

    -----------------------------------------

    needsInit (boolean): (内部)OnEditは、初期化が必要なものとしてパネルをマークします。照会すると、初期化が必要なものとしてパネルがマークされているかどうかを返します。file-newとfile-openで使用されます。

    -----------------------------------------

    parent (string): このパネルの親のレイアウトを指定します。

    -----------------------------------------

    popupMenuProcedure (script): パネルのポップアップメニューを作成するためにコールされるプロシージャを指定します。既定値は「buildPanelPopupMenu」です。プロシージャは、パネル名である文字列引数を持つ必要があります。

    -----------------------------------------

    replacePanel (string): 指定したパネルをこのパネルと置き換えます。ターゲットパネルが同じレイアウト内にある場合、入れ替えを実行します。

    -----------------------------------------

    shapeEditor (boolean): パネルに関連するエディタ名を返す照会モード専用フラグ。

    -----------------------------------------

    tearOff (boolean): このパネルを切り離し、パネルの親としてのpaneLayoutを持つフローティングウィンドウにします。照会すると、パネルが独自のウィンドウに切り離されたかどうかを返します。

    -----------------------------------------

    tearOffCopy (string): このパネルを、指定したソースパネルのコピーを切り離したウィンドウとして作成します。

    -----------------------------------------

    tearOffRestore (boolean): パネルが切り離されていて、フォーカスされている場合に、パネルを復元します。パネルがドッキングされている場合は、ドッキングされたウィンドウ内でアクティブなパネルになります。パネルを切り離す場合のみに使用される-to/-tearOffフラグではなく、このフラグをすべてのパネルに追加される既定のフラグにする必要があります。

    -----------------------------------------

    unParent (boolean): パネルをそのレイアウトから除去するように指定します。照会には使用できません。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringパネルの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def softMod(after: bool = False,afterReference: bool = False,before: bool = False,bindState: bool = False,curveInterpolation: int = 1,curvePoint: float = 1.0,curveValue: float = 1.0,deformerTools: bool = False,envelope: float = 1.0,exclusive: str = "",falloffAroundSelection: bool = False,falloffBasedOnX: bool = False,falloffBasedOnY: bool = False,falloffBasedOnZ: bool = False,falloffCenter: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),falloffMasking: bool = False,falloffMode: int = 1,falloffRadius: float = 1.0,frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,ignoreSelected: bool = False,includeHiddenSelections: bool = False,name: str = "",parallel: bool = False,prune: bool = False,relative: bool = False,remove: bool = False,resetGeometry: bool = False,split: bool = False,weightedNode: Tuple[str, str] = tuple("", "")) -> None:
    """
    softMod コマンドは、softMod を作成するか、既存の softMod のメンバーシップを編集します。新しい softMod の作成時に softMod ノードの名前を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    bindState (boolean): このフラグを指定して補正に追加し、softMod化されるオブジェクトがsoftMod化時に空間上の位置を保持するようにします。これは、softModがsoftMod時間にトランスフォームする場合に、softModが作成される時間にジオメトリがジャンプしないようにするときに、必要な機能です。

    -----------------------------------------

    curveInterpolation (int): 指定したcurvePointの位置に対応したランプ補間。0～3の整数値が使用できます。これらはそれぞれ「なし」、「リニア」、「スムーズ」、「スプライン」に対応します。このフラグはcurvePointおよびcurveValueフラグと一緒に使用します。

    -----------------------------------------

    curvePoint (float): 正規化された0-1スケール上でのランプ値の配置。このフラグはcurveInterpolationおよびcurveValueフラグと一緒に使用します。

    -----------------------------------------

    curveValue (float): 指定したcurvePointの位置に対応したランプ値。このフラグはcurveInterpolationおよびcurvePointフラグと一緒に使用します。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    envelope (float): デフォーマのエンベロープ値を設定します。既定は1.0です。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    falloffAroundSelection (boolean): 選択した成分の周囲の減衰を計算します。

    -----------------------------------------

    falloffBasedOnX (boolean): X成分を使用して減衰を計算します。

    -----------------------------------------

    falloffBasedOnY (boolean): Y成分を使用して減衰を計算します。

    -----------------------------------------

    falloffBasedOnZ (boolean): Z成分を使用して減衰を計算します。

    -----------------------------------------

    falloffCenter ([float, float, float]): softModの減衰の中心点を設定します。

    -----------------------------------------

    falloffMasking (boolean): デフォメーションは選択した成分に限定されます。

    -----------------------------------------

    falloffMode (int): softModで使用する減衰方法を設定します。

    -----------------------------------------

    falloffRadius (float): softModの減衰半径を設定します。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    relative (boolean): softModの相対モードを有効にします。相対モードでは、softModのすぐ上の変換のみがsoftModに使用されます。既定はオフです。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    resetGeometry (boolean): softModで変形されるオブジェクトの、ジオメトリマトリックスをリセットします。このフラグを使用して、softModで変形されるオブジェクトをスケールする場合に発生する、不要なエフェクトを削除します。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    weightedNode ([string, string]): すべてのパーセントが適用されるsoftModより上のDAGトランスフォームノード。2番目のノードでは、変換行列が評価された場所からの最初のノードの下位ノードを指定します。既定はsoftModハンドルです。

    -----------------------------------------

    Return Value:
    None: string[] (softMod ノード名と softMod ハンドル名)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def substituteGeometry(disableNonSkinDeformers: bool = False,newGeometryToLayer: bool = False,oldGeometryToLayer: bool = False,reWeightDistTolerance: float = 1.0,retainOldGeometry: bool = False) -> None:
    """
    このコマンドを使用して、デフォーマに接続されたジオメトリを、新しいジオメトリに置き換えることができます。古いジオメトリのウェイトは、新しいジオメトリにリターゲットされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    disableNonSkinDeformers (boolean): このフラグは、置き換え後に、スキンデフォーマ以外のデフォーマの状態を制御します。フラグがtrueの場合、コマンド完了時にスキンデフォーマ以外のノードは無効になります。既定はfalseです。

    -----------------------------------------

    newGeometryToLayer (boolean): 新しいジオメトリ用に新しいレイヤを作成します。

    -----------------------------------------

    oldGeometryToLayer (boolean): 新しいレイヤを作成して、古いジオメトリをそのレイヤに移動します。

    -----------------------------------------

    reWeightDistTolerance (float): ウェイトのリターゲットに使用する距離の許容値を指定します。ウェイトを転送する際、このコマンドはすべてのデフォーマが無効のジオメトリをオーバーラップさせ、対応する頂点を見つけようとします。これにより、無関係の頂点が選択される場合があります(古いジオメトリの穴が新しいジオメトリの新しい頂点で埋められている場合など)。この距離の許容値はこのようなエラーを検出するために使用して、上記のような場合は無視するか、またはアルゴリズムを変更して対応する頂点をさらに検索します。

    -----------------------------------------

    retainOldGeometry (boolean): 古いジオメトリのコピーを保存する必要があります。

    -----------------------------------------

    Return Value:
    None: string置き換えられたシェイプの名前です
    """
    pass

    
def textureDeformer(after: bool = False,afterReference: bool = False,before: bool = False,deformerTools: bool = False,direction: str = "",envelope: float = 1.0,exclusive: str = "",frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,ignoreSelected: bool = False,includeHiddenSelections: bool = False,name: str = "",offset: float = 1.0,parallel: bool = False,pointSpace: str = "",prune: bool = False,remove: bool = False,split: bool = False,strength: float = 1.0,vectorOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),vectorSpace: str = "",vectorStrength: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0)) -> None:
    """
    このコマンドは、オブジェクトのテクスチャ デフォーマを作成します。選択されたオブジェクトが入力のジオメトリ オブジェクトです。デフォーマ ノードの名前が返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    direction (string): テクスチャデフォーマのデフォメーションの方向を設定します。「Normal」、「Handle」、「Vector」の3つのタイプのみを処理することができます。「Normal」では、各頂点が独自の法線ベクトルを使用します。「Handle」では、すべての頂点がハンドルのアップベクトルを使用します。「Vector」では、各頂点がRGBカラーベクトル文字列を使用します。

    -----------------------------------------

    envelope (float): テクスチャデフォーマのエンベロープを設定します。エンベロープでは、デフォメーションのパーセントを決定します。最終結果は、(カラー*法線*強度+オフセット)*エンベロープです

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    offset (float): テクスチャデフォーマのオフセットを設定します。オフセット+最終的な変形した頂点の移動。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    pointSpace (string): テクスチャデフォーマのポイントスペースを設定します。「World」、「Local」、「UV」の3つの文字列のみを処理することができます。「World」では、ワールド空間をカラー空間にマップします。「Local」では、ローカル空間をカラー空間にマップします。「UV」では、UV空間をカラー空間にマップします。文字列。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    strength (float): テクスチャデフォーマの強度を設定します。強度では、オブジェクトの変形の強さを決定します。

    -----------------------------------------

    vectorOffset ([float, float, float]): テクスチャデフォーマのベクトルオフセットを設定します。ベクトルオフセットは、ベクトルモードでのデフォメーションのオフセットを示します。

    -----------------------------------------

    vectorSpace (string): テクスチャデフォーマのベクトル空間を設定します。「Object」、「World」、「Tangent」の3つの文字列のみを処理することができます。「Object」では、オブジェクト空間でカラーベクトルを使用します。「World」では、ワールド空間でカラーベクトルを使用します。「Tangent」では、接線空間文字列でカラーベクトルを使用します。

    -----------------------------------------

    vectorStrength ([float, float, float]): テクスチャデフォーマのベクトルの強さを設定します。ベクトルの強さは、ベクトルモードでのオブジェクトのデフォメーションの強さを決定します。

    -----------------------------------------

    Return Value:
    None: stringテクスチャ デフォーマ ノードの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def wire(after: bool = False,afterReference: bool = False,before: bool = False,crossingEffect: float = 1.0,deformerTools: bool = False,dropoffDistance: Tuple[int, float] = tuple(1, 1.0),envelope: float = 1.0,exclusive: str = "",frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,groupWithBase: bool = False,holder: Tuple[int, str] = tuple(1, ""),ignoreSelected: bool = False,includeHiddenSelections: bool = False,localInfluence: float = 1.0,name: str = "",parallel: bool = False,prune: bool = False,remove: bool = False,split: bool = False,wire: str = "",wireCount: int = 1) -> None:
    """
    このコマンドは Wire デフォーマを生成します。 作成モードでは、セレクション リストは変形されるオブジェクトとして 扱われます。ワイヤは -w フラグで指定します。それぞれのワイヤには、そのデフォーマによって影響を受けるオブジェクトの範囲を定義するために便利なホルダを設定することもできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    crossingEffect (float): 複合エフェクトの総量を設定します。値は0から1で、0でフルに複合され、1で単純化されたエフェクト(フィルタをオフにした場合と同様)になります。既定は0です。このフィルタは複数のソースから結合されたエフェクトを扱うすべてのブレンドノードに作用します。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    dropoffDistance ([uint, linear]): インデックス(最初のパラメータ)のワイヤのドロップオフ距離(2番目のパラメータ)を設定します。

    -----------------------------------------

    envelope (float): デフォーマのエンベロープ値を設定します。既定は1.0です。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    groupWithBase (boolean): ベースワイヤを持つワイヤをグループ化し、簡単に一緒に移動してリップルエフェクトを作成できるようにします。既定はfalseです。

    -----------------------------------------

    holder ([uint, string]): インデックス(最初のパラメータ)のワイヤのホルダとして、指定したカーブまたはサーフェス(2番目のパラメータ)を設定します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    localInfluence (float): それがサーフェスを変形しているかどうかに関係なく、特定のワイヤがほかのワイヤに対して与えるローカルエフェクトを設定します。値は0から1で、0でローカルエフェクトなし、1で完全なローカル制御になります。既定は0です。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    wire (string): ワイヤカーブ名を指定または照会します。

    -----------------------------------------

    wireCount (uint): ワイヤの数を設定します。

    -----------------------------------------

    Return Value:
    None: string[]ワイヤ ノード名とワイヤ カーブ名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def wrinkle(axis: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),branchCount: int = 1,branchDepth: int = 1,center: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),crease: str = "",dropoffDistance: float = 1.0,envelope: float = 1.0,randomness: float = 1.0,style: str = "",thickness: float = 1.0,uvSpace: Tuple[float, float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0, 1.0),wrinkleCount: int = 1,wrinkleIntensity: float = 1.0) -> None:
    """
    wrinkle コマンドは、サーフェスにリンクル ネットワークを生成するために使われます。これは、ワイヤ デフォーマを制御するリンクル カーブのネットワークを自動的に生成します。リンクル カーブはクラスタ デフォーマにアタッチされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    axis ([linear, linear, linear]): リンクルのプレーンを指定します。

    -----------------------------------------

    branchCount (uint): Wrinkleごとの枝分かれ数を指定します。既定は2です。

    -----------------------------------------

    branchDepth (uint): 枝分かれの深度を指定します。既定は0です。

    -----------------------------------------

    center ([linear, linear, linear]): リンクルの中心を指定します。

    -----------------------------------------

    crease (string): 既存のカーブをWrinkleとして指定します。

    -----------------------------------------

    dropoffDistance (linear): 中心からのドロップオフ距離を指定します。

    -----------------------------------------

    envelope (linear): エンベロープが全体的にデフォメーションの度合いを和らげます。既定は1.0です。

    -----------------------------------------

    randomness (linear): ランダム度です。既定は0.2です。

    -----------------------------------------

    style (string): リンクルスタイルを指定します。有効な値は、「radial」または「tangential」です。

    -----------------------------------------

    thickness (linear): Wrinkleの厚みです。既定は1.0です。

    -----------------------------------------

    uvSpace ([linear, linear, linear, linear, linear]): 長さの1/2、幅の1/2、回転角度、centeru、centerv、Wrinkleを作成する場所のUVスペースのパッチの定義を指定します。

    -----------------------------------------

    wrinkleCount (uint): 生成されるリンクルのラインの数を指定します。既定は3です。

    -----------------------------------------

    wrinkleIntensity (linear): 輝度を増やすと、Wrinkeが増加します。既定は0.5です。

    -----------------------------------------

    Return Value:
    None: string[]作成されたクラスタのリストの後に、作成されたワイヤ デフォーマのリストが続きます。
    """
    pass

    
def bindSkin(byClosestPoint: bool = False,byPartition: bool = False,colorJoints: bool = False,delete: bool = False,doNotDescend: bool = False,enable: bool = False,name: str = "",partition: str = "",toAll: bool = False,toSelectedBones: bool = False,toSkeleton: bool = False,unbind: bool = False,unbindKeepHistory: bool = False,unlock: bool = False) -> None:
    """
    このコマンドは、現在選択しているオブジェクトと現在選択しているスケルトンをバインドします。バインド可能なシェイプ: メッシュ、NURBS カーブ、NURBS サーフェス、ラティス、サブディビジョン サーフェスとAPI シェイプ。複数のシェイプと複数のスケルトンを選択またはコマンド ラインで指定して、一度にバインドすることができます。選択の順序は重要ではありません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    byClosestPoint (boolean): オブジェクトの各ポイントをそのポイントに一番近いセグメントにバインドします。byClosestPointフラグとbyPartitionフラグは両立しません。既定はbyClosestPointフラグです。

    -----------------------------------------

    byPartition (boolean): パーティションの各グループを、グループの中心から一番近いセグメントにバインドします。パーティションは-p/-partitionフラグで指定する必要があります。

    -----------------------------------------

    colorJoints (boolean): バインドモードでは、このフラグは、ジョイントのスキンセットに割り当てられたカラーを基にして、ジョイントにカラーを割り当てます。削除モードとロック解除モードでは、このフラグは、スキンとしてバインドされなくなったジョイントからカラーを除去します。disableモードとunbindKeepHistoryモードでは、このフラグは何にも作用しません。

    -----------------------------------------

    delete (boolean): 選択したスケルトン上のスキンをデタッチして、バインドに関連したコンストラクションヒストリすべてを除去します。

    -----------------------------------------

    doNotDescend (boolean): 選択したオブジェクトの下にあるペアレント化されたシェイプへはバインドしません。選択したオブジェクトにだけバインドします。

    -----------------------------------------

    enable (boolean): 選択したスケルトン上の無効な状態にあるバインドの有効化/無効化を切り替えます。選択したボーンのバインドだけを有効にするには、ボーンを選択して-tsbフラグを-enフラグと一緒に使用します。このフラグは、セット情報やスキニングのウェイト情報を失うことなくバインドを一時的に無効にする場合に使用されます。たとえば、bindPoseを修正したい場合です。

    -----------------------------------------

    name (string): このフラグは現在サポートされていません。

    -----------------------------------------

    partition (string): バインドするパーティションを指定します。このフラグは、-bp/-byPartitionフラグと一緒に使用されたときだけ有効です。

    -----------------------------------------

    toAll (boolean): オブジェクトが選択したスケルトン全体にバインドされます。toSkeletonが影響ゼロではないボーンのみバインドするのに対して、toAllでは影響ゼロのボーンもバインドされます。

    -----------------------------------------

    toSelectedBones (boolean): オブジェクトは、選択したボーンにのみバインドされます。

    -----------------------------------------

    toSkeleton (boolean): オブジェクトが、選択したスケルトンにバインドされます。toSkeleton、toAllとtoSelectedBonesフラグは両立しません。既定はtoSkeletonフラグです。

    -----------------------------------------

    unbind (boolean): 選択したオブジェクトのバインドを解除します。これで、オブジェクトは、スケルトンと一緒には移動しなくなります。使用されなくなったbindSkinヒストリは削除されます。

    -----------------------------------------

    unbindKeepHistory (boolean): 選択したオブジェクトのバインドを解除します。これで、オブジェクトは、スケルトンと一緒には移動しなくなります。ただし、スキンの既存のウェイトは保持され、次にスキンがバインドされるときに使われます。このオプションは、スキンのウェイト情報を残したままスケルトンを修正したい場合に使用されます。

    -----------------------------------------

    unlock (boolean): 選択したオブジェクトをロック解除します。スケルトンからオブジェクトのバインドが解除されると通常の結果を示さなくなるため、bindSkinは移動、回転、スケールをロックします。このコマンドは、選択したオブジェクトの移動、回転、スケールのロックを解除します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def boneLattice(after: bool = False,afterReference: bool = False,before: bool = False,bicep: float = 1.0,deformerTools: bool = False,exclusive: str = "",frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,ignoreSelected: bool = False,includeHiddenSelections: bool = False,joint: str = "",lengthIn: float = 1.0,lengthOut: float = 1.0,name: str = "",parallel: bool = False,prune: bool = False,remove: bool = False,split: bool = False,transform: str = "",tricep: float = 1.0,widthLeft: float = 1.0,widthRight: float = 1.0) -> None:
    """
    このコマンドは、boneLattice デフォーマを作成、編集、照会します。作成、編集されたオブジェクトの名前を返します。通常は、より高次のフレクサ コマンドを介して、この機能を利用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    bicep (float): ベンドの内側にあるラティスポイントの膨らみに影響を与えます。正、負の値によって、ポイントはそれぞれ外側、内側に膨らみます。既定値は0.0です。照会するとfloatを返します。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    joint (string): 膨らみの動作をドライブするために使用されるジョイントを指定します。

    -----------------------------------------

    lengthIn (float): ボーンの上半分のラティスポイントの位置に影響を与えます。正、負の値によって、ポイントはそれぞれ、ボーンの中心から遠ざかったり近づいたりします。このパラメータを変化させると、折り目や丸み付け、あるいはwidthパラメータにより影響を受けた領域を修正することもできます。既定値は0.0です。照会すると、このフラグはfloat値を返します。

    -----------------------------------------

    lengthOut (float): ボーンの下半分のラティスポイントの位置に影響を与えます。正、負の値によって、ポイントはそれぞれ、ボーンの中心から遠ざかったり近づいたりします。このパラメータを変化させると、折り目や丸み付け、あるいはwidthパラメータにより影響を受けた領域を修正することもできます。既定値は0.0です。照会すると、このフラグはfloat値を返します。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    transform (string): このノードが変形するラティスを、厳密にトランスフォームするために使用されるDAGを指定します。このフラグが指定されていない場合、同一のマトリックスが想定されます。

    -----------------------------------------

    tricep (float): ベンドの外側でのラティスポイントの膨らみに影響を及ぼします。正、負の値によって、ポイントはそれぞれ外側、内側に膨らみます。既定値は0.0です。照会するとfloatを返します。

    -----------------------------------------

    widthLeft (float): ベンドの左側でのラティスポイントの膨らみに影響を及ぼします。正、負の値によって、ポイントはそれぞれ外側、内側に膨らみます。既定値は0.0です。照会するとfloatを返します。

    -----------------------------------------

    widthRight (float): ベンドの右側でのラティスポイントの膨らみに影響を及ぼします。正、負の値によって、ポイントはそれぞれ外側、内側に膨らみます。既定値は0.0です。照会するとfloatを返します。

    -----------------------------------------

    Return Value:
    None: string作成/編集したボーン ラティス アルゴリズム ノードの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def copySkinWeights(destinationSkin: str = "",influenceAssociation: str = "",mirrorInverse: bool = False,mirrorMode: str = "",noBlendWeight: bool = False,noMirror: bool = False,normalize: bool = False,sampleSpace: int = 1,smooth: bool = False,sourceSkin: str = "",surfaceAssociation: str = "",uvSpace: Tuple[str, str] = tuple("", "")) -> None:
    """
    skinCluster ウェイトを XYZ 軸の 1 軸の反対側にコピーまたはミラーするコマンドです。このコマンドを使用して、サーフェスから別のサーフェスへ、または同じサーフェス内で、ウェイトをミラーすることができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    destinationSkin (string): 目的のスキンシェイプを指定します。

    -----------------------------------------

    influenceAssociation (string): influenceAssociationフラグは、ソーススキンとターゲットスキンへのインフルエンスを一致させる方法を制御します。フラグを複数回含めて、すべてのインフルエンスが一致するまで複数の関連付けスキームを順番に起動できます。サポートされている値は、「closestJoint」、「closestBone」、「label」、「name」、「oneToOne」です。既定はclosestJointです。

    -----------------------------------------

    mirrorInverse (boolean): 値は正領域から負領域へミラーされます。このフラグを使用すると、方向が反転します。

    -----------------------------------------

    mirrorMode (string): mirrorModeフラグは、ミラーフラグを使用した場合のミラーリングのプレーン(XY、YZ、XZのいずれか)を定義します。既定のプレーンはXYです。

    -----------------------------------------

    noBlendWeight (boolean): noblendフラグを使用すると、スキンクラスタのブレンドウェイトはターゲットにコピーされません。

    -----------------------------------------

    noMirror (boolean): ミラーフラグを使用しない場合、ウェイトはミラーされずにコピーされます。

    -----------------------------------------

    normalize (boolean): スキンウェイトを正規化します。

    -----------------------------------------

    sampleSpace (uint): アトリビュートの転送を実行する空間を選択します。0はワールド空間、1はモデル空間です。既定はワールド空間です。

    -----------------------------------------

    smooth (boolean): スムーズフラグを使用するとウェイトは、最近接の1つの頂点から割り当てられる代わりに、最近接の頂点間で滑らかに補間されます。

    -----------------------------------------

    sourceSkin (string): ソースのスキンシェイプを指定します。

    -----------------------------------------

    surfaceAssociation (string): surfaceAssociationフラグは、ウェイトがサーフェス間で転送される方法、「closestPoint」、「rayCast」、または「closestComponent」を制御します。既定はclosestComponentです。

    -----------------------------------------

    uvSpace ([string, string]): uvSpaceフラグはウェイトの転送が、指定したソースUVセットと目標UVセットに基づいてUV空間で実施されることを示します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dagPose(addToPose: bool = False,atPose: bool = False,bindPose: bool = False,g: bool = False,members: bool = False,name: str = "",remove: bool = False,reset: bool = False,restore: bool = False,save: bool = False,selection: bool = False,worldParent: bool = False) -> None:
    """
    このコマンドを使用して、DAG 階層のマトリックス情報を保存と復元することができます。具体的には、格納されたデータは、その階層の全オブジェクトの移動、回転、スケール、スケール ピボット、回転ピボット、とジョイントの順番を復元します。ほかのアトリビュートのデータは、このコマンドでは格納されません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addToPose (boolean): 選択した項目のdagPoseへの追加を許可します。

    -----------------------------------------

    atPose (boolean): 階層がポーズと同じ場所にあるかどうか照会します。ポーズと同じ場所にない階層メンバーの名前が返されます。空のリストが返された場合、階層が同じ場所にあるということです。

    -----------------------------------------

    bindPose (boolean): 使用して、選択した階層のbindPoseを指定します。各階層には、スキンのバインド時に自動的に保存される、bindPoseを1つだけ設定することができます。bindPoseは、インフルエンスオブジェクトの追加、新しいスキンのバインド、フレクサの追加時に使用されます。-rs/-resetまたは-rm/-removeフラグでbindPoseを修正する場合には、bindPoseの定義が誤っているとそれ以降のスキン操作に問題が生じるため、十分注意してください。

    -----------------------------------------

    g (boolean): このフラグをrestoreフラグと一緒に使用して、ポーズのメンバーをグローバルポーズに復元することができます。グローバルポーズとは、その親に関してローカルに作成された各オブジェクトだけではなく、ポーズが保存されたときの同じグローバル位置にあることも意味します。ポーズを保存してから階層のペアレント化が変更された場合、グローバルポーズに関して問題が生じることがあります。

    -----------------------------------------

    members (boolean): 指定したポーズのメンバーを照会します。セレクションリスト、-bp/-bindPoseまたは-n/-nameフラグを使用してポーズを指定する必要があります。

    -----------------------------------------

    name (string): ポーズの名前を指定します。このコマンドは、作成、復元、リセット、除去、と照会の操作中に使用して、作成するポーズまたは基準にするポーズを指定することができます。

    -----------------------------------------

    remove (boolean): 指定したポーズから選択したジョイントを除去します。

    -----------------------------------------

    reset (boolean): 選択したジョイントのポーズをリセットします。bindPoseのデータをリセットする場合には、慎重に行ってください。ジョイントが再度ペアレント化されたり正確にbindPoseで表示された場合、-rs/-resetフラグの使用が適切です。ただし、bindPoseが正確なbindPoseとはかなり異なる場合、それ以降のスキン操作に問題が生じる可能性があります。

    -----------------------------------------

    restore (boolean): 保存されたポーズに階層を復元します。ポーズを指定するには、ポーズノードを選択するか、-bp/-bindPoseまたは-n/-nameフラグを使用します。

    -----------------------------------------

    save (boolean): 選択したDAG階層のdagPoseを保存します。新しいポーズの名前が返されます。

    -----------------------------------------

    selection (boolean): 階層の全項目のポーズを格納するかどうか、選択した項目のみのポーズを選択するかどうかです。

    -----------------------------------------

    worldParent (boolean): ワールドに対してペアレント化するように選択したポーズメンバーを再計算すべきだということを示します。通常、次の操作としてワールドにオブジェクトを再ペアレント化する予定の場合に使用します。

    -----------------------------------------

    Return Value:
    None: stringポーズの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def geomBind(bindMethod: int = 1,falloff: float = 1.0,geodesicVoxelParams: Tuple[int, bool] = tuple(1, False),maxInfluences: int = 1) -> None:
    """
    このコマンドは、多面体ボクセル バインド アルゴリズムを使用するウェイトの計算に使用されます。これは既存の skinCluster ノードに正しいウェイト値を設定することによって動作します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bindMethod (uint): 使用するバインドアルゴリズムを指定します。既定では、多面体ボクセルが使用されます。使用可能なアルゴリズム:3-多面体ボクセル

    -----------------------------------------

    falloff (float): バインドの固さをコントロールする減衰。有効な値の範囲は[0..1]です。

    -----------------------------------------

    geodesicVoxelParams ([uint, boolean]): パラメータをバインドする多面体ボクセルを指定します。このフラグは0～最大ボクセルグリッド解像度(2の累乗の必要あり)の3つのパラメータで構成されます。たとえば、64,128,256など)1-有効にすると、ポストボクセルの状態の検証を実行します。既定値は256trueです。

    -----------------------------------------

    maxInfluences (int): 最大値を指定した頂点が持つことのできる最大インフルエンス数を指定します。既定では、すべてのインフルエンス(-1)が使用されます。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def jointLattice(after: bool = False,afterReference: bool = False,before: bool = False,creasing: float = 1.0,deformerTools: bool = False,exclusive: str = "",frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,ignoreSelected: bool = False,includeHiddenSelections: bool = False,joint: str = "",lengthIn: float = 1.0,lengthOut: float = 1.0,lowerBindSkin: str = "",lowerTransform: str = "",name: str = "",parallel: bool = False,prune: bool = False,remove: bool = False,rounding: float = 1.0,split: bool = False,upperBindSkin: str = "",upperTransform: str = "",widthLeft: float = 1.0,widthRight: float = 1.0) -> None:
    """
    このコマンドは、jointLattice デフォーマを作成、編集、照会します。作成、編集されたオブジェクトの名前を返します。通常は、より高次のフレクサ コマンドを介して、この機能を利用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    creasing (float): ベンドの内側にあるラティスポイントの膨らみに影響を与えます。正、負の値によって、ポイントはそれぞれ外側、内側に膨らみます。既定値は0.0です。照会するとfloatを返します。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    joint (string): 膨張動作をドライブするために使用されるジョイントを指定します。

    -----------------------------------------

    lengthIn (float): 親ボーン上のラティスポイントの位置に影響を及ぼします。正、負の数によって、ポイントはそれぞれ、ジョイントから遠ざかったり近づいたりします。このパラメータを変化させると、折り目や丸み付け、あるいはwidthパラメータにより影響を受けた領域を修正することもできます。既定値は0.0です。照会するとfloatを返します。

    -----------------------------------------

    lengthOut (float): 子ボーン上のラティスポイントの位置に影響を及ぼします。正、負の数によって、ポイントはそれぞれ、ジョイントから遠ざかったり近づいたりします。このパラメータを変化させると、折り目や丸み付け、あるいはwidthパラメータにより影響を受けた領域を修正することもできます。既定値は0.0です。照会するとfloatを返します。

    -----------------------------------------

    lowerBindSkin (string): 下部のボーンで接続されるジオメトリで、スキンのバインド操作を実行するノードを指定します。

    -----------------------------------------

    lowerTransform (string): このノードが変形するラティスの下部を厳密にトランスフォームするために使用されるDAGノードを指定します。このフラグが指定されていない場合、同一のマトリックスが想定されます。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    rounding (float): ベンドの外側でのラティスポイントの膨らみに影響を及ぼします。正、負の値によって、ポイントはそれぞれ外側、内側に膨らみます。既定値は0.0です。照会するとfloatを返します。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    upperBindSkin (string): 上部のボーンで接続されるジオメトリで、スキンのバインド操作を実行するノードを指定します。

    -----------------------------------------

    upperTransform (string): このノードで変形するラティスの上部を厳密にトランスフォームするために使用されるDAGノードを指定します。このフラグが指定されていない場合、同一のマトリックスが想定されます。

    -----------------------------------------

    widthLeft (float): ベンドの左側でのラティスポイントの膨らみに影響を及ぼします。正、負の値によって、ポイントはそれぞれ外側、内側に膨らみます。既定値は0.0です。照会するとfloatを返します。

    -----------------------------------------

    widthRight (float): ベンドの右側でのラティスポイントの膨らみに影響を及ぼします。正、負の値によって、ポイントはそれぞれ外側、内側に膨らみます。既定値は0.0です。照会するとfloatを返します。

    -----------------------------------------

    Return Value:
    None: string作成/編集したジョイント ラティス アルゴリズム ノードの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def polyUniteSkinned(centerPivot: bool = False,constructionHistory: bool = False,mergeUVSets: int = 1,objectPivot: bool = False) -> None:
    """
    結合されたオブジェクトでスムーズ スキニングの設定を保持したままポリゴン メッシュ オブジェクト(polyUnite など)を結合するコマンド。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    centerPivot (boolean): 作成されたオブジェクトのピボットを選択したオブジェクトのバウンディングボックスの中心に設定します。

    -----------------------------------------

    constructionHistory (boolean): コンストラクションヒストリをオンまたはオフにします。

    -----------------------------------------

    mergeUVSets (int): UVセットが出力メッシュにマージされる方法を指定します。選択肢は0、1、2です。0=マージしない。各メッシュの各UVセットは出力において新しいUVセットになります。1=名前ごとにマージ。同じ名前のUVセットがマージされます。2=UVリンクごとにマージ。入力メッシュのUVリンクがそのまま動作するようにUVセットがマージされます。既定は1(名前ごとにマージ)です。

    -----------------------------------------

    objectPivot (boolean): 作成されたオブジェクトのピボットを最後に選択したオブジェクトのピボットに設定します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def skeletonEmbed(mergedMesh: bool = False,segmentationMethod: int = 1,segmentationResolution: int = 1) -> None:
    """
    このコマンドは、メッシュ内にスケルトンを埋め込むために使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    mergedMesh (boolean): 指定すると、選択したメッシュがマージされて、マージされたメッシュを表すPythonオブジェクトが返されます。

    -----------------------------------------

    segmentationMethod (uint): メッシュの内側または外側を判別するために使用するセグメンテーションアルゴリズムを指定します。既定では、境界およびフィルおよび拡大ボクセル化(boundary-and-fill-and-growvoxelization)が使用されます。使用可能なアルゴリズムは次のとおりです。0:完全メッシュ(ボクセル化なし)。この方法は、「完全メッシュ」(つまり、閉じた、隙間のない、2次元多様体で、自己交差または非表示の内部/非表示ジオメトリがないメッシュ)で機能します。この方法は、疑似正常テストを使用して、外部からメッシュの内部領域をセグメントします。ボクセル化は使用しません。メッシュの状態が考慮されない場合は、おそらくセグメンテーションに誤りがあります。これにより、セグメンテーションプロセスが大幅に長くなり、スケルトンを正常に埋め込むことができなくなります。1:隙間のないメッシュ(塗りつぶし)。この方法は、「隙間のないメッシュ」(つまり、フェースがメッシュの内部領域を外部から完全に分離するメッシュ)で機能します。メッシュには、縮退したフェース、不正なフェース方向、自己交差を含めることができます。この方法は、サーフェスのボクセル化を使用して、内部領域の一部としてメッシュフェースと交差するすべてのボクセルを分類します。次に、到達されるすべてのボクセルをモデルの外部領域の一部としてマークして、外側から塗りつぶしを実行します。最後に、到達されないすべてのボクセルを内部領域の一部としてマークします。この方法は、メッシュに隙間がない場合、つまり、ボクセル化の解像度に穴がない場合に機能します。それ以外の場合、塗りつぶしが内部領域に達し、不正確なセグメントが生成されます。2:不完全メッシュ(塗りつぶし+拡大)この方法は、穴によって塗りつぶしがメッシュの内部領域に到達しますが、フェース方向に一貫性があり塗りつぶしが可能な場合に機能します。まず、サーフェスのボクセル化を使用して、内部領域の一部としてメッシュフェースと交差するすべてのボクセルを分類します。次に、塗りつぶしと拡大のステップを交互に実行します。塗りつぶしステップでは、外側からすべてのボクセルへの到達を試みて、到達しないボクセルは内部領域の一部としてマークします。拡大ステップでは、比較的処理負荷の高いプロセスを使用して、既に特定されているボクセルに対して、隣接するすべての内部ボクセルをチェックします。内部と識別されたボクセルは、穴を塗りつぶす可能性が高く、その後の塗りつぶしステップによってさらに内部ボクセルが識別されます。3:ポリゴンスープ(修理)この方法に多様体またはフェース方向の要件はありません。指定されたオフセット(ボクセルサイズの3倍)の入力メッシュをラップするメッシュを再構築し、この2次元多様体の完全メッシュを使用して、モデルの外部領域から内部領域をセグメントします。オフセットにより、詳細の一部が失われ、隣接する部分がマージされる可能性があります。ただし、ボディパーツがそれほど相互に近接していない一般的なモデルでは、通常の場合、これは問題ではありません。99:直接スケルトン(埋め込みなし)。このメソッドは、埋め込みの実行を試みません。このメソッドは、メッシュのバウンディングボックス内に配置する以外にメッシュ内の埋め込みは実行せずに、単に初期ポーズのスケルトンを返します。

    -----------------------------------------

    segmentationResolution (uint): ボクセルグリッドに使用するセグメンテーション解像度を指定します。既定では、256x256x256ボクセルが使用されます。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def skinCluster(addInfluence: str = "",addToSelection: bool = False,after: bool = False,afterReference: bool = False,baseShape: str = "",before: bool = False,bindMethod: int = 1,deformerTools: bool = False,dropoffRate: float = 1.0,exclusive: str = "",forceNormalizeWeights: bool = False,frontOfChain: bool = False,geometry: str = "",geometryIndices: bool = False,heatmapFalloff: float = 1.0,ignoreBindPose: bool = False,ignoreHierarchy: bool = False,ignoreSelected: bool = False,includeHiddenSelections: bool = False,influence: str = "",lockWeights: bool = False,maximumInfluences: int = 1,moveJointsMode: bool = False,name: str = "",normalizeWeights: int = 1,nurbsSamples: int = 1,obeyMaxInfluences: bool = False,parallel: bool = False,polySmoothness: float = 1.0,prune: bool = False,recacheBindMatrices: bool = False,remove: bool = False,removeFromSelection: bool = False,removeInfluence: str = "",removeUnusedInfluence: bool = False,selectInfluenceVerts: str = "",skinMethod: int = 1,smoothWeights: float = 1.0,smoothWeightsMaxIterations: int = 1,split: bool = False,toSelectedBones: bool = False,toSkeletonAndTransforms: bool = False,unbind: bool = False,unbindKeepHistory: bool = False,useGeometry: bool = False,weight: float = 1.0,weightDistribution: int = 1,weightedInfluence: bool = False) -> None:
    """
    skinCluster コマンドは、Maya のスムーズ スキニングで使用します。このコマンドは、skinCluster ノードを使用して、選択したジオメトリを選択したジョイントまたはスケルトンにバインドします。バインドされたジオメトリの各ポイントに作用するジョイントの数に制限はありません。各ジョイントが各ポイントのモーションに影響を及ぼす範囲は、対応するウェイト係数によって決まります。ウェイト係数は、skinPercent コマンドを使用して変更できます。skinCluster コマンドは、新しい skinCluster の名前を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addInfluence (string): 指定したトランスフォームノードまたはジョイントノードが、バインドされたジオメトリに影響を及ぼすトランスフォームのリストに追加されます。インフルエンスの最大数が監視され、指定したトランスフォームの影響を受けるCVのウェイトだけが変更されます。このフラグは多目的に使用できます。

    -----------------------------------------

    addToSelection (boolean): selectInfluenceVertsフラグと一緒に使用すると、インフルエンスに作用される頂点が(ほかの頂点が選択解除されることなく)現在の選択項目に追加されます。

    -----------------------------------------

    after (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの後にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    afterReference (boolean): -afterReferenceフラグを使用して、-beforeと-afterのどちらかが自動的に選択されるハイブリッド法でデフォーマの順序を指定します。変形されているジオメトリが参照される場合、新しいデフォーマを追加するときには-afterモードが使用され、そうでないときには-beforeモードが使用されます。-afterReferenceを使ってデフォーマチェーンを構築する場合の真の効果は、デフォーマチェーンの内部シェイプノードがリファレンスファイルの境界でしか表示されないため、デフォーマネットワークの負担が軽くなり、リファレンスの入れ替えをより柔軟にできる場合があることです。

    -----------------------------------------

    baseShape (string): このフラグを-addInfluenceフラグと一緒に使用すると、ジオメトリを持つインフルエンスオブジェクトをskinClusterに追加するときにベースシェイプとして使用するシェイプを指定することができます。このフラグを使用しない場合、コマンドはインフルエンスオブジェクトのシェイプのコピーを作成し、それをベースシェイプとして使用します。

    -----------------------------------------

    before (boolean): 既存のチェーンに対する挿入やアペンドの既定動作が目的どおりでない場合、新しいジオメトリシェイプを作成する必要があっても、このフラグを使用して、コマンドによってチェーンの選択したノードの前にデフォーマノードを強制的に配置させることができます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    bindMethod (int): このフラグはバインド方法を設定します。0-ジョイントとジオメトリのポイントの間の最短距離。1-スケルトン階層を考慮したジョイントとジオメトリのポイントの間の最短距離。2-サーフェスヒートマップ拡散。3-多面体ボクセルバインド。geomBindコマンドは、このメソッドでskinClusterを作成した後に呼び出す必要があります。

    -----------------------------------------

    deformerTools (boolean): デフォーマツールオブジェクト(ある場合)の名前をstringstring...として返します。

    -----------------------------------------

    dropoffRate (float): トランスフォームから距離が離れるに従ってトランスフォームの影響度が減衰する割合を設定します。有効範囲は0.1～10.0です。作成モードでは、バインドされたすべてのジョイントにドロップオフ率(dropoffRate)を設定します。編集モードでは、inf/influenceフラグと一緒に使用して、特定のインフルエンスのドロップオフ率を設定します。注:このフラグを編集モードで使用すると、指定したトランスフォームノードの影響を受けるスキンポイントのカスタムウェイトは失われます。

    -----------------------------------------

    exclusive (string): デフォメーションセットを変形パーティションに置きます。

    -----------------------------------------

    forceNormalizeWeights (boolean): 正規化モードが「なし」か「ポスト」の場合、スキンクラスタのウェイト値の合計が1ではなくなる可能性が高くなります。このフラグにより、すべてのウェイトの合計が1に戻ります。

    -----------------------------------------

    frontOfChain (boolean): このコマンドを使用して、新しいデフォーマノードが、シェイプのヒストリで既存のデフォーマとスキンノードの前(上流、ただし既存の微調整ノードの前ではありません)に配置されるように指定します。デフォーマへの入力は、表示される下流のシェイプではなく上流のシェイプです。したがって、このフラグの動作は、新しいデフォーマが追加されたときに下流のデフォーマがリセット位置(hasNoEffect)にある場合に、最も直感的になります。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    geometry (string): -rmフラグも指定していない限り、指定したオブジェクトは、このデフォーマオブジェクトによって変形されるオブジェクトのリストに追加されます。照会するとstringstringstring...を返します。

    -----------------------------------------

    geometryIndices (boolean): 照会モードで-geometryフラグを補完します。各ジオメトリのマルチインデックスを返します。

    -----------------------------------------

    heatmapFalloff (float): このフラグはヒートマップバインド減衰を設定します。0.0(既定値)に設定された場合、インフルエンスごとのメッシュサーフェス上の多くの小さいウェイトスプレッドのため、デフォメーションはスムーズになります。ただし、最大減衰に対応する1.0に設定された場合、ポイントごとのインフルエンスの数が減り、ポイントは小さいウェイトの全体スプレッドを減らす最近接ジョイントの影響を大きく受けます。このフラグは、ヒートマップバインドを使用しているときのみ有効です。

    -----------------------------------------

    ignoreBindPose (boolean): このフラグは非推奨になり、使用されません。このフラグを使用しても無視されます。

    -----------------------------------------

    ignoreHierarchy (boolean): 非推奨です。代わりにbindMethodフラグを使用します。ジオメトリのポイントに作用する最も近いジョイントを計算するときに、スケルトン階層内のジョイントの位置を無視します。

    -----------------------------------------

    ignoreSelected (boolean): 現在のセレクションリスト上のオブジェクトを変形しないようにコマンドに指示します。

    -----------------------------------------

    includeHiddenSelections (boolean): セレクションリスト内の任意の表示および非表示オブジェクトにデフォーマを適用します。既定はfalseです。

    -----------------------------------------

    influence (string): このフラグは、現在の編集操作で使用するインフルエンスオブジェクトを指定します。照会モードでは、インフルエンスオブジェクト(ジョイントノードとトランスフォームノード)の文字配列を返します。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    lockWeights (boolean): 指定したインフルエンスオブジェクトのウェイトを、現在値、または-weightフラグで指定した値にロックします。

    -----------------------------------------

    maximumInfluences (int): skinClusterを最初に作成するとき、または新しいインフルエンスを追加するときにポイントに作用する(ポイントに対して0以外のウェイトを持つ)トランスフォームの最大数を設定します。注:このフラグを編集モードで使用すると、カスタムウェイトは失われ、スキン全体に新しいウェイトが再割り当てされます。

    -----------------------------------------

    moveJointsMode (boolean): trueに設定されている場合、スキンはスキニングを修正せずにジョイントを移動できるモードになります。falseに設定されている場合、スキンの移動ジョイントモードが解除されます。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    normalizeWeights (int): このフラグは正規化モードを設定します。0-なし、1-インタラクティブ、2-ポスト(既定)インタラクティブ正規化では、インフルエンスのウェイト値の合計が常に1.0になります。1つのウェイトが変更されると、すべてのウェイトが自動的に正規化されます。ユーザが設定したウェイトが正規化によって作用され、ウェイト付けの操作が困難になる場合があります。ポスト正規化では、ユーザ設定のウェイトは変更されず、必要になった場合のみに、ウェイトを(ウェイトの合計で除算して)正規化します。これでスキンのウェイト付けが簡単になります。

    -----------------------------------------

    nurbsSamples (int): バインドされたスキンに影響を及ぼすために、インフルエンスカーブに沿って、またはインフルエンスNURBSサーフェスの各方向で使用するサンプルポイントの数を設定します。サンプルポイント数が多いほど、スキンはインフルエンスNURBSカーブ/サーフェスにより近いシェイプになります。

    -----------------------------------------

    obeyMaxInfluences (boolean): trueの場合、skinClusterはユーザがウェイトを変更するたびに最大インフルエンスを強制し続け、skinClusterのmaximumInfluencesアトリビュートでのインフルエンスの数によって、特定のポイントだけにウェイトがかけられます。

    -----------------------------------------

    parallel (boolean): オブジェクトのヒストリの既存のデフォーマに平行するチェーンの新規デフォーマを挿入します。blendShapeを挿入して、平行の結果とブレンドします。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    polySmoothness (float): このフラグは、スキンのコントロールポイントが特定のポリゴンインフルエンスオブジェクトにどれだけ正確に追従するかを制御します。polySmoothnmessの値が大きいほど、ポリゴンインフルエンスオブジェクトを元にしたデフォメーションはより洗練されます。

    -----------------------------------------

    prune (boolean): 現在の設定のデフォーマによって変形されないポイントをデフォーマセットから除去します。

    -----------------------------------------

    recacheBindMatrices (boolean): バインド行列を再キャッシュするために、skinClusterノードを強制します。

    -----------------------------------------

    remove (boolean): -gフラグの後ろにリストされているオブジェクトをこのデフォーマから除去するように指定します。

    -----------------------------------------

    removeFromSelection (boolean): selectInfluenceVertsフラグと一緒に使用すると、インフルエンスに作用される頂点が現在の選択項目から除去されます。

    -----------------------------------------

    removeInfluence (string): 指定したトランスフォームノードまたはジョイントノードを、バインドされたジオメトリに影響を及ぼすトランスフォームのリストから除去します。影響を受けるポイントのウェイトが再度正規化されます。このフラグは多目的に使用できます。

    -----------------------------------------

    removeUnusedInfluence (boolean): このフラグをtrueに設定すると、ウェイトがすべてゼロであるトランスフォームまたはジョイント(これらにエフェクトはありません)は、ジオメトリにバインドされません。このオプションを設定すると、アニメーションの再生スピードを上げることができます。

    -----------------------------------------

    selectInfluenceVerts (string): トランスフォームの名前を指定すると、このトランスフォームに影響を受けている頂点やコントロールポイントが選択されます。これで、トランスフォームが影響を与えている頂点を視覚化できます。

    -----------------------------------------

    skinMethod (int): このフラグはスキニング方法を設定します。0は従来のリニアスキニング(既定)。1はデュアルクォータニオン(ボリューム保持)、2は2つの間でウェイト付けされたブレンド。

    -----------------------------------------

    smoothWeights (float): このフラグを使用して、スキンウェイトの値の急激な上昇を検出します。これは多くの場合、ウェイト付けが不良であることを示しており、スキンウェイトの凹凸を滑らかにできます。引数は0～1の範囲の誤差許容値です。値1は、隣接するウェイト値が100%変化している場合のみに、アルゴリズムによって頂点がスムーズされることを意味します。推奨される既定値は0.5(隣接するウェイト値が50%変化)です。

    -----------------------------------------

    smoothWeightsMaxIterations (int): このフラグはsmoothWeightsフラグと一緒に使用された場合のみに有効です。(隣接するすべてのウェイト付けが不良でスムージングが必要な場合)スムージングの必要性が検出されたすべての頂点を1回でスムージングできない場合があります。反復を行うと、より多くの頂点をスムージングできます。このフラグは、アルゴリズムがウェイトをスムージングする最大反復回数を制御します。このフラグの既定は2です。

    -----------------------------------------

    split (boolean): デフォーマを既存のチェーンに挿入/アペンドする代わりに、ディペンデンシーグラフで新しいチェーンを分岐させます。作成モード(デフォーマにジオメトリが追加されていない場合は編集モード)で動作します。

    -----------------------------------------

    toSelectedBones (boolean): 選択したボーンだけにジオメトリがバインドされます。

    -----------------------------------------

    toSkeletonAndTransforms (boolean): 階層内のスケルトンおよびトランスフォームにジオメトリがバインドされます。いずれかのトランスフォームもバインド可能なオブジェクトの場合、最後にコマンドに渡されたオブジェクトのみをバインド可能なオブジェクトと見なします。残りはインフルエンスとして扱います。

    -----------------------------------------

    unbind (boolean): skinClusterからジオメトリのバインドを解除し、skinClusterノードを削除します。

    -----------------------------------------

    unbindKeepHistory (boolean): skinClusterからジオメトリのバインドを解除しますが、スキンが再バウンドされるときにウェイトを使用できるように、skinClusterノードを保持します。再バウンドするには、skinClusterコマンドを使用します。

    -----------------------------------------

    useGeometry (boolean): skinClusterにインフルエンスを追加するときに、インフルエンスのトランスフォームの下にペアレント化されたジオメトリを使用して、インフルエンスのウェイトの影響範囲を決定します。

    -----------------------------------------

    weight (float): このフラグは-addInfluenceフラグと一緒に使用された場合のみに有効です。追加されるインフルエンスオブジェクトに対してウェイトを設定します。

    -----------------------------------------

    weightDistribution (int): このフラグはウェイト配分モードを設定します。0-距離(既定)、1-隣り合わせnormalizeWeightsが有効で、ウェイトが全体で削減または除去された場合、合計は通常、他のゼロ以外のウェイトの影響が大きくなることにより1.0まで戻ります。ただし、他のゼロ以外のウェイトがない場合は、アルゴリズムによって薄い大気からウェイトを作成し、それらの間で残差のウェイトを分配する必要があります。このアトリビュートは、この実行方法を制御します。「Distance」:このアルゴリズムでは、コンポーネントからトランスフォームまでのワールド空間距離からウェイトを計算します。「Neighbors」:このアルゴリズムでは、隣接するコンポーネントのウェイトからウェイトを計算します。

    -----------------------------------------

    weightedInfluence (boolean): このフラグは、0以外のウェイトを持つインフルエンスオブジェクト(ジョイントノードとトランスフォームノード)の文字配列を返します。

    -----------------------------------------

    Return Value:
    None: string(skinCluster ノード名)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def skinPercent(ignoreBelow: float = 1.0,normalize: bool = False,pruneWeights: float = 1.0,relative: bool = False,resetToDefault: bool = False,transform: str = "",transformMoveWeights: str = "",transformValue: Tuple[str, float] = tuple("", 1.0),value: bool = False,zeroRemainingInfluences: bool = False) -> None:
    """
    このコマンドは、1 番目の引数として指定された skinCluster ノードのメンバーのウェイト値を編集、照会します。コマンド ラインでオブジェクトのコンポーネントが明示的に指定されていない場合、現在のセレクション リストが使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    ignoreBelow (float): -valueと-transformによる照会で、指定した限度以上のウェイト値を持つエントリだけが出力されるようにします。このフラグは、-queryフラグの前に使用する必要があります。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    normalize (boolean): 設定されている場合、-transformValueフラグによって値が割り当てられていないウェイトを正規化して、選択したオブジェクトコンポーネントのすべてのウェイトの合計が1になるようにします。既定はオンです。注:skinClusterにはnormalizeWeightsアトリビュートがあり、これをオフにするとアトリビュートがオーバーライドされます。skinCluster.normalizeWeightsアトリビュートがオフの場合、skinPercentコマンドでウェイトを正規化するには、このアトリビュートをインタラクティブ(Interactive)に設定する必要があります。

    -----------------------------------------

    pruneWeights (float): 選択したすべてのコンポーネントのうち、指定した値より小さいウェイトを持つコンポーネントのウェイトを0に設定します。このコマンドを使用してすべてのウェイトを0に設定するには、-normalizeフラグを「オフ」にする必要があります。そうでないと、すべてのウェイトを0にした後で、ウェイトの合計が1になるようにskinClusterノードによってウェイトが正規化されます。ウェイトを保持(HoldWeights)アトリビュートにtrueが設定されているウェイトは0になりません。

    -----------------------------------------

    relative (boolean): -transformValueと一緒に使用して、値の相対設定を指定します。-relativeがtrueの場合、-tvに渡された値は前の値に追加されます。falseの場合は、渡された値が前の値と置き換えられます。

    -----------------------------------------

    resetToDefault (boolean): 選択したコンポーネントのウェイトを既定値に設定し、カスタムウェイトを上書きします。

    -----------------------------------------

    transform (string): MELで(引数を指定せずに)-queryフラグの後ろで使用する場合、コマンドは、選択したオブジェクトコンポーネントに作用するトランスフォームの名前に対応する文字列の配列を返します。(トランスフォームの名前を指定して)-queryフラグの前で使用する場合、コマンドは、指定したトランスフォームに対応する選択したオブジェクトコンポーネントのウェイトを返します。複数コンポーネントが選択されている場合は、平均ウェイトが戻されます。Pythonで、トランスフォームの名前でなく、なし(None)と組み合わせて使用した場合、このコマンドは、選択したオブジェクトコンポーネントに影響するトランスフォームの名前に対応する文字列の配列を返します。トランスフォームの名前と組み合わせて使用した場合は、選択したオブジェクトのウェイトを返します。複数コンポーネントが選択されている場合は、平均ウェイトが戻されます。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    transformMoveWeights (string): このフラグを使用して、ウェイトをソースインフルエンスから1つ以上のターゲットインフルエンスへ転送します。このフラグは選択された頂点で作用します。有効なコマンドを生成するには、このフラグを2回以上使用する必要があります。最初のフラグはウェイトのコピー元となるソースインフルエンスを示すために使用します。後続のフラグはターゲットインフルエンスを示すために使用します。

    -----------------------------------------

    transformValue ([string, float]): トランスフォーム名と値からなるペアを受け取り、指定したトランスフォームに対応する選択したオブジェクトコンポーネントのウェイトとしてその値を割り当てます。

    -----------------------------------------

    value (boolean): 選択したオブジェクトコンポーネントのジョイントのウェイトに対応するdoubleの配列を返します。

    -----------------------------------------

    zeroRemainingInfluences (boolean): 設定すると、-transformValueフラグによって割り当てられていないウェイトは0に設定されます。既定はオフです。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def substituteGeometry(disableNonSkinDeformers: bool = False,newGeometryToLayer: bool = False,oldGeometryToLayer: bool = False,reWeightDistTolerance: float = 1.0,retainOldGeometry: bool = False) -> None:
    """
    このコマンドを使用して、デフォーマに接続されたジオメトリを、新しいジオメトリに置き換えることができます。古いジオメトリのウェイトは、新しいジオメトリにリターゲットされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    disableNonSkinDeformers (boolean): このフラグは、置き換え後に、スキンデフォーマ以外のデフォーマの状態を制御します。フラグがtrueの場合、コマンド完了時にスキンデフォーマ以外のノードは無効になります。既定はfalseです。

    -----------------------------------------

    newGeometryToLayer (boolean): 新しいジオメトリ用に新しいレイヤを作成します。

    -----------------------------------------

    oldGeometryToLayer (boolean): 新しいレイヤを作成して、古いジオメトリをそのレイヤに移動します。

    -----------------------------------------

    reWeightDistTolerance (float): ウェイトのリターゲットに使用する距離の許容値を指定します。ウェイトを転送する際、このコマンドはすべてのデフォーマが無効のジオメトリをオーバーラップさせ、対応する頂点を見つけようとします。これにより、無関係の頂点が選択される場合があります(古いジオメトリの穴が新しいジオメトリの新しい頂点で埋められている場合など)。この距離の許容値はこのようなエラーを検出するために使用して、上記のような場合は無視するか、またはアルゴリズムを変更して対応する頂点をさらに検索します。

    -----------------------------------------

    retainOldGeometry (boolean): 古いジオメトリのコピーを保存する必要があります。

    -----------------------------------------

    Return Value:
    None: string置き換えられたシェイプの名前です
    """
    pass

    
def volumeBind(influence: str = "",name: str = "") -> None:
    """
    ボリューム バインド ノードの作成や編集のためのコマンドです。このノードは、スキンのウェイト付けデータを定義するボリューム データを格納するために使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    influence (string): スキンクラスタに接続されたインフルエンスのリストを編集または照会します。

    -----------------------------------------

    name (string): 作成されるノードの名前を指定するために使用されます。

    -----------------------------------------

    Return Value:
    None: string[]照会されたインフルエンスのリストです。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def aimConstraint(aimVector: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),layer: str = "",maintainOffset: bool = False,name: str = "",offset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),remove: bool = False,skip: str = "",targetList: bool = False,upVector: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),weight: float = 1.0,weightAliasList: bool = False,worldUpObject: str = "",worldUpType: str = "",worldUpVector: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0)) -> None:
    """
    オブジェクトの方向がターゲット オブジェクト、または複数のターゲットの平均位置を指すようにコンストレイントします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    aimVector ([float, float, float]): エイムベクトルを設定します。ターゲットを示すローカル座標でのベクトルです。作成時に指定していない場合、既定値の(0.0,1.0,0.0)が使用されます。

    -----------------------------------------

    layer (string): コンストレイントを追加するアニメーションレイヤの名前を指定します。

    -----------------------------------------

    maintainOffset (boolean): コンストレイントされたオブジェクトの初期回転角度の保持に必要なオフセットを計算し、オフセットとして使用します。

    -----------------------------------------

    name (string): コンストレイントノードの名前を指定した名前に設定します。既定名はconstrainedObjectName_constraintTypeです。

    -----------------------------------------

    offset ([float, float, float]): オフセットの値を設定または照会します。既定は0,0,0です。

    -----------------------------------------

    remove (boolean): リストされたターゲットをコンストレイントから除去します。

    -----------------------------------------

    skip (string): 省略する軸を指定します。有効な値は、「x」、「y」、「z」、「none」です。作成時の既定は「none」です。

    -----------------------------------------

    targetList (boolean): ターゲットオブジェクトのリストを返します。

    -----------------------------------------

    upVector ([float, float, float]): ローカルアップベクトルを設定します。これは、ワールドアップベクトルと位置合わせするローカル座標内でのベクトルです。作成時に指定していない場合、既定値の(1.0,0.0,0.0)が使用されます。

    -----------------------------------------

    weight (float): 指定したターゲットのウェイト値を設定します。作成時に指定していない場合は、既定値の1.0が使用されます。

    -----------------------------------------

    weightAliasList (boolean): ターゲットオブジェクトのウェイトをコントロールする、アトリビュートの名前を返します。targetListフラグで返されるターゲットと同じ順序で、エイリアスを返します。

    -----------------------------------------

    worldUpObject (name): DAGオブジェクトをworldUpType「object」および「objectrotation」で使用するように設定します。詳細については、worldUpTypeを参照してください。既定値は、ワールド空間座標として解釈される非アップオブジェクトです。

    -----------------------------------------

    worldUpType (string): ワールドアップベクトル計算のタイプを設定します。worldUpTypeは、「scene」、「object」、「objectrotation」、「vector」、または「none」です。「scene」の場合、upVectorはシーンのアップ軸に位置合わせされ、worldUpVectorおよびworldUpObjectは無視されます。「object」の場合、upVectorはworldUpObjectの空間の原点にできるだけ近い位置に配置され、worldUpVectorは無視されます。「objectrotation」の場合、worldUpVectorはworldUpObjectの座標空間にあるものと解釈され、ワールド空間にトランスフォームされてupVectorはその結果にできるだけ近く位置合わせされます。「vector」の場合、upVectorはworldUpVectorにできるだけ近く位置合わせされ、worldUpMatrixは無視されます。最後に「none」の場合は、コンストレイントでツイストの計算は実行されません。その結果、「upVector」の方向はコンストレイントされたオブジェクトの以前の方向に基づくようになり、「greatcircle」回転には、エイムベクトルをそのコンストレイントと位置合わせすることが必要になります。既定のworldUpTypeは「vector」です。

    -----------------------------------------

    worldUpVector ([float, float, float]): ワールドアップベクトルを設定します。これは、アップベクトルと位置合わせする必要のあるワールド座標内のベクトルです。詳細については、-wut/worldUpType(下記)を参照してください。作成時に指定していない場合、既定値の(1.0,0.0,0.0)が使用されます。

    -----------------------------------------

    Return Value:
    None: string[]作成されたコンストレイント ノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def orientConstraint(createCache: Tuple[float, float] = tuple(1.0, 1.0),deleteCache: bool = False,layer: str = "",maintainOffset: bool = False,name: str = "",offset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),remove: bool = False,skip: str = "",targetList: bool = False,weight: float = 1.0,weightAliasList: bool = False) -> None:
    """
    オブジェクトの方向をコンストレイントして、ターゲットの方向またはターゲットが複数の場合はその平均に合わせます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    createCache ([float, float]): このフラグを使用して、コンストレイントのキャッシュとして機能するアニメーションカーブを生成します。2つの引数は開始フレームと終了フレームを定義します。コンストレイントが複数のターゲットを持ち、コンストレイントの補間タイプの設定が「noflip」である場合は、キャッシュが便利です。「noflip」モードでは、再生時の反転が回避されますが、結果はすぐ前のフレームに依存します。したがって、特定のフレームで継続的に同じ結果を得るには、キャッシュを生成する必要があります。このフラグは、キャッシュを作成し、コンストレイントの補間タイプを「キャッシュ」に設定します。すでにキャッシュが存在する場合、このキャッシュが削除されて新しいキャッシュに置き換えられます。

    -----------------------------------------

    deleteCache (boolean): 既存の補間キャッシュを削除します。

    -----------------------------------------

    layer (string): コンストレイントを追加するアニメーションレイヤの名前を指定します。

    -----------------------------------------

    maintainOffset (boolean): コンストレイントされたオブジェクトの初期方向を保持するために必要なオフセットが計算され、オフセットとして使用されます。

    -----------------------------------------

    name (string): コンストレイントノードの名前を指定した名前に設定します。既定名はconstrainedObjectName_constraintTypeです。

    -----------------------------------------

    offset ([float, float, float]): オフセットの値を設定または照会します。既定は0,0,0です。

    -----------------------------------------

    remove (boolean): リストされたターゲットをコンストレイントから除去します。

    -----------------------------------------

    skip (string): 省略する軸を指定します。有効な値は、「x」、「y」、「z」、「none」で、作成モードでの既定値は「none」です。このフラグは多目的に使用できます。

    -----------------------------------------

    targetList (boolean): ターゲットオブジェクトのリストを返します。

    -----------------------------------------

    weight (float): 指定したターゲットのウェイト値を設定します。作成時に指定していない場合は、既定値の1.0が使用されます。

    -----------------------------------------

    weightAliasList (boolean): ターゲットオブジェクトのウェイトをコントロールする、アトリビュートの名前を返します。targetListフラグで返されるターゲットと同じ順序で、エイリアスを返します。

    -----------------------------------------

    Return Value:
    None: string[] (作成されたコンストレイント ノード名)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def parentConstraint(createCache: Tuple[float, float] = tuple(1.0, 1.0),decompRotationToChild: bool = False,deleteCache: bool = False,layer: str = "",maintainOffset: bool = False,name: str = "",remove: bool = False,skipRotate: str = "",skipTranslate: str = "",targetList: bool = False,weight: float = 1.0,weightAliasList: bool = False) -> None:
    """
    オブジェクトの位置および回転をコンストレイントし、オブジェクトをあたかもターゲット オブジェクトの子のように動作させます。ターゲットが複数の場合、コンストレイントされたオブジェクトの全体的な位置および回転は、そのオブジェクトの位置および回転に対する各ターゲットの寄与度の加重平均となります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    createCache ([float, float]): このフラグを使用して、コンストレイントのキャッシュとして機能するアニメーションカーブを生成します。2つの引数は開始フレームと終了フレームを定義します。コンストレイントが複数のターゲットを持ち、コンストレイントの補間タイプの設定が「noflip」である場合は、キャッシュが便利です。「noflip」モードでは、再生時の反転が回避されますが、結果はすぐ前のフレームに依存します。したがって、特定のフレームで継続的に同じ結果を得るには、キャッシュを生成する必要があります。このフラグは、キャッシュを作成し、コンストレイントの補間タイプを「キャッシュ」に設定します。すでにキャッシュが存在する場合、このキャッシュが削除されて新しいキャッシュに置き換えられます。

    -----------------------------------------

    decompRotationToChild (boolean): コンストレイント作成中に、コンストレインされたオブジェクトとターゲットオブジェクト間の回転オフセットが維持される場合、このフラグはオフセット回転の分解先がどのオブジェクトに近くなるのかを示します。このフラグを設定すると、回転の分解が既定の設定のターゲットオブジェクトでなく、コンストレインされたオブジェクトに近くなります。

    -----------------------------------------

    deleteCache (boolean): 既存の補間キャッシュを削除します。

    -----------------------------------------

    layer (string): コンストレイントを追加するアニメーションレイヤの名前を指定します。

    -----------------------------------------

    maintainOffset (boolean): このフラグが指定されると、コンストレイントされたオブジェクトの位置および回転は維持されます。

    -----------------------------------------

    name (string): コンストレイントノードの名前を指定した名前に設定します。既定名はconstrainedObjectName_constraintTypeです。

    -----------------------------------------

    remove (boolean): リストされたターゲットをコンストレイントから除去します。

    -----------------------------------------

    skipRotate (string): 回転コンストレイントの際、指定した軸を省略します。有効な引数は「x」、「y」、「z」、および「none」です。

    -----------------------------------------

    skipTranslate (string): 移動コンストレイントの際、指定した軸を省略します。有効な引数は「x」、「y」、「z」、および「none」です。

    -----------------------------------------

    targetList (boolean): ターゲットオブジェクトのリストを返します。

    -----------------------------------------

    weight (float): 指定したターゲットのウェイト値を設定します。作成時に指定していない場合は、既定値の1.0が使用されます。

    -----------------------------------------

    weightAliasList (boolean): ターゲットオブジェクトのウェイトをコントロールする、アトリビュートの名前を返します。targetListフラグで返されるターゲットと同じ順序で、エイリアスを返します。

    -----------------------------------------

    Return Value:
    None: string[]作成されたコンストレイント ノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def pointConstraint(layer: str = "",maintainOffset: bool = False,name: str = "",offset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),remove: bool = False,skip: str = "",targetList: bool = False,weight: float = 1.0,weightAliasList: bool = False) -> None:
    """
    ターゲット オブジェクトの位置、または多くのターゲットの平均位置に、オブジェクトの位置を制限します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    layer (string): コンストレイントを追加するアニメーションレイヤの名前を指定します。

    -----------------------------------------

    maintainOffset (boolean): コンストレイントされたオブジェクトの初期位置を保持するために必要なオフセットが計算され、オフセットとして使用されます。

    -----------------------------------------

    name (string): コンストレイントノードの名前を指定した名前に設定します。既定名はconstrainedObjectName_constraintTypeです。

    -----------------------------------------

    offset ([float, float, float]): オフセットの値を設定または照会します。既定は0,0,0です。

    -----------------------------------------

    remove (boolean): リストされたターゲットをコンストレイントから除去します。

    -----------------------------------------

    skip (string): 省略する軸を指定します。有効な値は、「x」、「y」、「z」、「none」です。作成時の既定は「none」です。このフラグは多目的に使用できます。

    -----------------------------------------

    targetList (boolean): ターゲットオブジェクトのリストを返します。

    -----------------------------------------

    weight (float): 指定したターゲットのウェイト値を設定します。作成時に指定していない場合は、既定値の1.0が使用されます。

    -----------------------------------------

    weightAliasList (boolean): ターゲットオブジェクトのウェイトをコントロールする、アトリビュートの名前を返します。targetListフラグで返されるターゲットと同じ順序で、エイリアスを返します。

    -----------------------------------------

    Return Value:
    None: string[]作成されたコンストレイント ノード名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def characterize(activatePivot: bool = False,addAuxEffector: bool = False,addFloorContactPlane: bool = False,addMissingEffectors: bool = False,attributeFromHIKProperty: str = "",attributeFromHIKPropertyMode: str = "",autoActivateBodyPart: bool = False,changePivotPlacement: bool = False,effectors: str = "",fkSkeleton: str = "",name: str = "",pinHandFeet: bool = False,placeNewPivot: bool = False,posture: str = "",sourceSkeleton: str = "",stancePose: str = "",type: str = "") -> None:
    """
    このコマンドは、定義済みのジョイント名やラベルのジョイント階層を走査するために使用されます。必要なジョイントが分かれば、フル ボディ IK を使用してスケルトンをコントロールするためのヒューマン IK エフェクタが作成されます。また、フル ボディ IK に必要なコンポーネントをすべて手動で作成し、このコマンドを使ってそれらを接続することができます。フル ボディ IK は、次の 3 種類の主要コンポーネントを必要とします。ユーザ入力スケルトン(sk)、キーが設定されている fk スケルトン(fk)、hik エフェクタ(ik)。fk と ik がフル ボディ IK エンジンにパラメータを提供し、エンジンが出力を解析して sk 上にこれをプロットします。このコマンドの使用方法は、FBX ファイルからデータを 読み込む中に Maya 内部で使用されるものですが、この方法を推奨するものではありません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activatePivot (boolean): 適切に配置されたピボットをアクティベートします。この新しいピボットをアクティベートさせると、このピボットを軸に回転や移動ができるようになります。ピボットはすべての面で、エフェクタと同様に動作します(異なるポイントを中心に回転できるよう、エフェクタの通常位置からオフセットされている点を除き、ピボットはエフェクタです)。

    -----------------------------------------

    addAuxEffector (boolean): 既存のエフェクタに、補助(2次)エフェクタを追加します。

    -----------------------------------------

    addFloorContactPlane (boolean): フロアコンタクトプレーンを手や足のプレーンに追加します。このプレーンでフロアコンタクトの高さを調整することができます。手や足のエフェクタを選択し、このフラグを使用してcharacterizeコマンドを実行します。

    -----------------------------------------

    addMissingEffectors (boolean): このフラグは、characterizeコマンドにスケルトンに追加できるエフェクタを探すように命令します。例えば、既存のスケルトンからエフェクタを削除、または指を追加した場合、「characterize-e-addMissingEffectors」を使用してそれらを復元することができます。

    -----------------------------------------

    attributeFromHIKProperty (string): MotionBuilderプロパティに接続されたアトリビュート名を照会します。

    -----------------------------------------

    attributeFromHIKPropertyMode (string): MotionBuilderプロパティモードに接続されたアトリビュート名を照会します。

    -----------------------------------------

    autoActivateBodyPart (boolean): ボディパーツを表すcharacterノードの自動アクティベーションを有効にするかどうかを照会または変更します。

    -----------------------------------------

    changePivotPlacement (boolean): ピボットをピボット配置モードに復帰させます。配置モードのピボットは、-activatePivotフラグを使ってアクティベートするまで、フルボディ操作に加わりません。

    -----------------------------------------

    effectors (string): ヒューマンIKが使用するエフェクタを指定するには、エフェクタごとに次の2つの情報を提供します:1）エフェクタの部分パスと2）このパスが表すフルボディエフェクタの名前です。1）と2）はスペースで区切り、複数の入力がある場合は「,」で区切ります。通常、エフェクタは自動で作成されます。このフラグは上級ユーザ用です。

    -----------------------------------------

    fkSkeleton (string): ヒューマンIKが使用するfkスケルトンを指定するには、FKスケルトンのジョンイントごとに次の2つの情報を指定します:1）ジョイントの部分パスと2）このパスが表すフルボディジョイントの名前です。1）と2）はスペースで区切り、複数の入力がある場合は「,」で区切ります。通常、fkコントロールスケルトンは自動で作成されます。このフラグは上級ユーザ用です。

    -----------------------------------------

    name (string): キャラクタライゼーション(FBIK作成)時に、このフラグを使用してFBIKキャラクタに名前を付けます。これはhikHandleノードの名前に影響を与え、コントロールリグはキャラクタ名と一致するネームスペース内に配置されます。キャラクタ名を付けない場合、既定の名前が使用されます。現時点では、キャラクタ名の編集と照会はサポートされていません。

    -----------------------------------------

    pinHandFeet (boolean): このキャラクタを最初にキャラクタライズするとき、手や足を既定で固定します。

    -----------------------------------------

    placeNewPivot (boolean): 新しいピボットを作成し、これを配置モードに指定します。-activatePivotフラグを指定してこれをアクティベートするまで、ピボットの周囲でフルボディを操作することはできないので注意してください。ピボットはエフェクタと同様にいつも動作します(ピボットが異なるポイントの周囲で回転させることが可能なエフェクタの法線の位置からオフセットの場合は別としてを除き、ピボットはエフェクタです)。このフラグを指定して作成される新しいピボットは、これをアクティベートする前にオフセットをインタラクティブに調整することができます。

    -----------------------------------------

    posture (string): キャラクタの姿勢を指定します。有効なオプションは「biped」と「quadruped」です。既定は「biped」です。

    -----------------------------------------

    sourceSkeleton (string): このフラグを使用して、FBIKガイドラインに従って名前やラベルが付けられていないスケルトンをキャラクタライズすることができます。実際のジョイント名と要求されるジョイント名の関連を指定します。文字列のフォーマットは次のようになります。ソルバに関連付けたいジョイントごとに、1）ジョイントの部分パスと2）このパスが表すフルボディジョイントの名前です。1）と2）はスペースで区切り、複数の入力がある場合は「,」で区切ります。

    -----------------------------------------

    stancePose (string): ヒューマンIKで使用する既定のスタンスポーズを指定します。スタンスポーズを指定するには、ソルバに含まれるジョイントごとに次の2つの情報を指定します。1）ジョイントの部分パスと2）移動、回転、スケールを表す9個の数字1）と2）はスペースで区切り、複数の入力がある場合は「,」で区切ります。通常、スタンスポーズは選択したスケルトンを元にしています。このフラグは上級ユーザ用です。

    -----------------------------------------

    type (string): ジョイントタイプを識別するために、キャラクタライゼーションで使用するテクニックを指定します。有効なオプションは「label」と「name」です。「label」を使用する際、Mayaのマニュアルで定義されているガイドラインに従ってジョイントにラベルを付ける必要があります。「name」を使用する際、Mayaのマニュアルで定義されている命名規則に基づいてジョイントに名前をつける必要があります。既定は「name」です。このフラグはsourceSkeletonフラグと一緒に使用することはできません。

    -----------------------------------------

    Return Value:
    None: string作成したフル ボディ IK エフェクタの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def connectJoint(connectMode: bool = False,parentMode: bool = False) -> None:
    """
    このコマンドは、選択した 2 つのジョイントに基づいて、2 つのスケルトンを接続します。最初に選択したジョイントが、2 番目に選択したジョイントの親の子となるか、2 番目に選択したジョイントの子となるかは、使用されているフラグによります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    connectMode (boolean): 最初に選んだジョイントは、2番目に選ぶジョイントの親の子となります。

    -----------------------------------------

    parentMode (boolean): 最初に選んだジョイントは、2番目に選ぶジョイントを親とします。両方のジョイントがアクティブリスト(セレクションリスト)に表示されます。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def disconnectJoint(attachHandleMode: bool = False,deleteHandleMode: bool = False) -> None:
    """
    選択したジョイントでスケルトンが破壊され、関連ハンドルが削除されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attachHandleMode (boolean): このフラグはサポートしていません。

    -----------------------------------------

    deleteHandleMode (boolean): 接続したジョイントのハンドルを削除します。

    -----------------------------------------

    Return Value:
    None: stringジョイントを切断すると、新しいジョイントが作成されます。戻り値は、新しく作成したジョイントとその先祖の名前です。
    """
    pass

    
def effector(hide: bool = False,name: str = "") -> None:
    """
    エフェクタ コマンドは、エフェクタの名前や非表示フラグを設定するために使用します。編集と照会機能には、標準の編集(-e)と照会(-q)フラグが使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    hide (boolean): ハンドルにアタッチされた場合に、エフェクタの描画を非表示にするかどうかを指定します。

    -----------------------------------------

    name (string): エフェクタの名前を指定します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def ikfkDisplayMethod(display: str = "") -> None:
    """
    ikfkDisplayMethod コマンドを使用して、IK/FK ブレンディングの表示方法を指定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    display (string): ハンドルが選択した際の、IK/FKブレンディングの表示状態を指定するために使用します。選択可能な値は、「none」(ブレンディングを表示しない)、「ik」(IKのみ表示)、「fk」(FKのみ表示)、と「ikfk」(IK/FKの両方を表示)です。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def ikHandle(autoPriority: bool = False,connectEffector: bool = False,createCurve: bool = False,createRootAxis: bool = False,curve: str = "",disableHandles: bool = False,enableHandles: bool = False,endEffector: str = "",exists: str = "",forceSolver: bool = False,freezeJoints: bool = False,jointList: bool = False,name: str = "",numSpans: int = 1,parentCurve: bool = False,positionWeight: float = 1.0,priority: int = 1,rootOnCurve: bool = False,rootTwistMode: bool = False,setupForRPsolver: bool = False,simplifyCurve: bool = False,snapCurve: bool = False,snapHandleFlagToggle: bool = False,snapHandleToEffector: bool = False,solver: str = "",startJoint: str = "",sticky: str = "",twistType: str = "",weight: float = 1.0) -> None:
    """
    ikHandle コマンド は、Maya 内でハンドルを作成、編集、および照会するために使用します。編集と照会機能には、標準の編集(-e)と照会(-q)フラグが使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    autoPriority (boolean): このハンドルの優先順位が自動的に割り当てられるように指定します。優先順位は、スケルタルチェーンのルートからハンドルの開始ジョイントまでの階層距離に基づいて、割り当てられます。

    -----------------------------------------

    connectEffector (boolean): 既定では、このオプションはtrueに設定されています。これは、エンドエフェクタによる変換が、endJointによる変換と接続されていることを意味します。

    -----------------------------------------

    createCurve (boolean): ikSplineHandleに対してカーブを自動的に作成するかどうかを指定します。

    -----------------------------------------

    createRootAxis (boolean): ikSplineHandleに作用されるジョイントの上に、ルートトランスフォームを自動的に作成する場合に指定します。このオプションは、モーションパスでルートが単独で反転するのを防止するために使用されます。

    -----------------------------------------

    curve (name): ikSplineHandleで使用するカーブを指定します。ジョイントはこのカーブに位置合わせするように移動されます。-freezeJointsオプションを使用するときの必須フラグです。

    -----------------------------------------

    disableHandles (boolean): 特定のハンドルをフルfkに設定します(ikBlendアトリビュート=0.0)。

    -----------------------------------------

    enableHandles (boolean): 特定のハンドルをフルikに設定します(ikBlendアトリビュート=1.0)。

    -----------------------------------------

    endEffector (string): ハンドルのジョイントチェーンのエンドエフェクタを指定します。エンドエフェクタは、ジョイント、またはエンドエフェクタとともに指定できます。ジョイントが指定されている場合、エンドエフェクタがジョイントと同じ位置に作成され、この新しいエンドエフェクタが、エンドエフェクタとして使用されます。

    -----------------------------------------

    exists (string): 指定したハンドルが存在するかどうかを示します。

    -----------------------------------------

    forceSolver (boolean): 強制的に常にソルバが使用されるように設定します。これはanimStickyとも呼ばれます。したがって、最初のキーを設定すると、ハンドルはstickyになります。

    -----------------------------------------

    freezeJoints (boolean): -curveオプションで指定したカーブを既存のジョイントチェーンに強制的に位置合わせさせます。falseまたは指定なしの場合は、ジョイントは指定したカーブ上の位置に移動されます。

    -----------------------------------------

    jointList (boolean): ハンドルにより操作されるジョイントのリストを返します。

    -----------------------------------------

    name (string): ハンドル名を指定します。

    -----------------------------------------

    numSpans (int): 自動的に生成されたikSplineHandleのカーブにあるスパンの数を指定します。

    -----------------------------------------

    parentCurve (boolean): ikSplineHandleにより影響を受ける最初のジョイントの親が、自動的にカーブの親となるかどうかを指定します。

    -----------------------------------------

    positionWeight (float): ハンドルの位置/方向ウェイトを指定します。ゴールの位置とエンドエフェクタの位置の間の「距離」を計算するために使用されます。positionWeightの値が1.0の場合、距離はゴール位置とエンドエフェクタ位置の間隔だけが計算され、方向は無視されます。positionWeightの値が0.0の場合、距離は方向の距離として計算され、位置は無視されます。positionWeightの値が0.5の場合、距離は均等に重みが付けられますが、単位が異なるため、実際には計算できません。これは直線の単位と角度の単位を合計する方法がないためです。

    -----------------------------------------

    priority (int): ハンドルの優先順位を設定します。論理的には、優先順位の値が小さいハンドルは、優先順位の値が大きいハンドルよりも先に処理されます。つまり、優先順位の値が1のハンドルは、優先順位の値が2のハンドルよりも先に処理されます。ハンドルの優先順位の値は、ゼロより大きくなければなりません。

    -----------------------------------------

    rootOnCurve (boolean): ルートをikSplineHandleのカーブにロックするかどうかを指定します。

    -----------------------------------------

    rootTwistMode (boolean): スタートジョイントのツイストを許可するかどうかを指定します。許可しない場合、必要なツイストは残りのジョイントに分散されます。この設定は全種類のツイストに適用されます。

    -----------------------------------------

    setupForRPsolver (boolean): ikSolverがikRPsolverの場合、新規ikHandleのためにRPRotateSetupをコールします。これはikRPsolverに対してのみです。

    -----------------------------------------

    simplifyCurve (boolean): ikSplineHandleカーブを単純化するかどうかを指定します。

    -----------------------------------------

    snapCurve (boolean): ikSplineHandleにより影響を受ける最初のジョイントに、カーブが自動的にスナップされるかどうかを指定します。

    -----------------------------------------

    snapHandleFlagToggle (boolean): ユーザがエンドエフェクタを移動する場合に、ハンドルの位置をエンドエフェクタの位置にスナップするように指定します。このフラグをオンに設定すると、スケルトンのポーズや調整のためにフォワードキネマティクスを使用でき、インバースキネマティクスを使用してアニメートできます。

    -----------------------------------------

    snapHandleToEffector (boolean): すべてのハンドルを直ちに移動します。ハンドルの位置と方向は、エンドエフェクタの位置と方向に一致します。

    -----------------------------------------

    solver (string): ソルバを指定します。ソルバの中にはプラグインとして実装されるものもあるため、使用可能なソルバの全リストはランタイムまでわかりません。現時点で使用可能なソルバは、ikRPsolver、ikSCsolverおよびikSplineSolverだけです。

    -----------------------------------------

    startJoint (string): ハンドルのジョイントチェーンのスタートジョイントを指定します。

    -----------------------------------------

    sticky (string): このハンドルが、「スティッキー」であることを指定します。有効な値は、「off」、「sticky」、「superSticky」です。スティッキーハンドルは、スケルトンをインタラクティブに操作しているときに処理されます。キャラクタの足がスティッキーである場合、ユーザがキャラクタのルートを動かしても、足が常に同じ位置に固定されて動きません。スティッキーでない場合、足はルートとともに移動します。

    -----------------------------------------

    twistType (string): ikSplineHandleが使用する補間のタイプを指定します。補間オプションには、「linear」、「easeIn」、「easeOut」、および「easeInOut」があります。

    -----------------------------------------

    weight (float): エラー計算でのハンドルのウェイトを指定します。ウェイトは、ハンドルのゴールがコンフリクトして同時に処理できない場合にのみ、適用されます。この場合、ハンドルのウェイトによってゴールからソリューションまでの「距離」に重みが付けられ、この値を最小化することにより、ソリューションが計算されます。ウェイトの値は、ゼロより大きくなければなりません。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def ikHandleDisplayScale() -> None:
    """
    このアクションにより、ikHandle の現在表示サイズが変更され、照会されます。既定の表示スケールは 1.0 です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def ikSolver(epsilon: float = 1.0,maxIterations: int = 1,name: str = "",solverType: str = "") -> None:
    """
    ikSolver コマンドは、IK ソルバのアトリビュートの設定や、新規アトリビュートの作成に使用します。編集と照会機能には、標準の編集(-e)と照会(-q)フラグが使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    epsilon (float): 最大エラー

    -----------------------------------------

    maxIterations (int): ソリューションの最大繰り返し回数を設定

    -----------------------------------------

    name (string): ソルバ名

    -----------------------------------------

    solverType (string): 新規ソルバを作成するために必要な有効solverType(何が有効なのかわかっているのはikSystemのみ)。このフラグは省略できません。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def ikSystem(allowRotation: bool = False,autoPriority: bool = False,autoPriorityMC: bool = False,autoPrioritySC: bool = False,list: Tuple[int, int] = tuple(1, 1),snap: bool = False,solve: bool = False,solverTypes: bool = False) -> None:
    """
    ikSystem コマンドは、ハンドル用のグローバル スナップ フラグや、ソルバ用のグローバル ソルバ フラグの設定に使用されます。編集と照会機能には、標準の編集(-e)と照会(-q)フラグが使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowRotation (boolean): trueを設定し、移動に設定されたキーでIKハンドルの回転を許可します。

    -----------------------------------------

    autoPriority (boolean): すべてのikHandleに対して、優先順位の自動設定が設定されます。

    -----------------------------------------

    autoPriorityMC (boolean): すべてのmultiChainハンドルに対して、優先順位の自動設定が設定されます。

    -----------------------------------------

    autoPrioritySC (boolean): すべてのsingleChainハンドルに対して、優先順位の自動設定が設定されます。

    -----------------------------------------

    list ([int, int]): 照会モードではソルバの実行順序を返し(文字列のリスト)、編集モードでは実行順序を変更します(変更前の位置を示す整数、変更後の位置を示す整数)。

    -----------------------------------------

    snap (boolean): グローバルスナップを設定します

    -----------------------------------------

    solve (boolean): グローバルソルバを設定します

    -----------------------------------------

    solverTypes (boolean): 有効なsolverTypesのリストが返されます(照会モード専用)。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def ikSystemInfo(globalSnapHandle: bool = False) -> None:
    """
    このアクションにより、現在の ikSystem コントロールが変更、照会されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    globalSnapHandle (boolean): このフラグがオフの場合、ikHandleはまったくスナップされません。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def insertJoint() -> None:
    """
    このコマンドは、指定したジョイントまたは選択したジョイントの下に新規ジョイントを挿入します。指定したジョイントに子ジョイントがある場合、これらの子ジョイントは新規に挿入されたジョイントにより、再度ペアレント化されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string新規に挿入されたジョイントの名前
    """
    pass

    
def joint(absolute: bool = False,angleX: float = 1.0,angleY: float = 1.0,angleZ: float = 1.0,assumePreferredAngles: bool = False,automaticLimits: bool = False,children: bool = False,component: bool = False,degreeOfFreedom: str = "",exists: str = "",limitSwitchX: bool = False,limitSwitchY: bool = False,limitSwitchZ: bool = False,limitX: Tuple[float, float] = tuple(1.0, 1.0),limitY: Tuple[float, float] = tuple(1.0, 1.0),limitZ: Tuple[float, float] = tuple(1.0, 1.0),name: str = "",orientJoint: str = "",orientation: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),radius: float = 1.0,relative: bool = False,rotationOrder: str = "",scale: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),scaleCompensate: bool = False,scaleOrientation: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),secondaryAxisOrient: str = "",setPreferredAngles: bool = False,stiffnessX: float = 1.0,stiffnessY: float = 1.0,stiffnessZ: float = 1.0,symmetry: bool = False,symmetryAxis: str = "",zeroScaleOrient: bool = False) -> None:
    """
    joint コマンドは、Maya 内でジョイントを作成、編集、そして照会するために使用します。(編集と照会機能には、標準の編集(-e)と照会(-q)フラグが使用されます)。オブジェクトを指定しないと、現在選択しているオブジェクト(dag オブジェクト)が使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absolute (boolean): ジョイントの中央位置を絶対的なワールド座標にします(これが既定です)。

    -----------------------------------------

    angleX (angle): X軸の角度を設定します。照会するとfloatを返します。

    -----------------------------------------

    angleY (angle): Y軸の角度を設定します。照会するとfloatを返します。

    -----------------------------------------

    angleZ (angle): Z軸の角度を設定します。照会するとfloatを返します。

    -----------------------------------------

    assumePreferredAngles (boolean): 編集モードでのみ意味を持ちます。ジョイント角を対応する優先回転角に設定します。

    -----------------------------------------

    automaticLimits (boolean): 編集モードでのみ意味を持ちます。ジョイントを、ジョイント制限付きで適切なヒンジジョイントに設定します。次の2つの場合に限り、このフラグは自動的にジョイントを修正します。(a)ヒンジジョイントが2つのジョイント(1つの親と1つの子)に対して正確に接続する(b)接続された2つのジョイントの間に描かれた線上にヒンジジョイントがないが、接続された2つのジョイントで形成されるプレーンが回転軸の1つに対して垂直である

    -----------------------------------------

    children (boolean): 選択したジョイントだけでなく、DAGの中にある孫のジョイントに対しても、すべてのEditオプションを適用します。

    -----------------------------------------

    component (boolean): -positionスイッチと一緒に使用して、ジョイントの親(-relativeと同様)に相対的にジョイントを位置付けます。しかし、すべての子ジョイントのために新しい位置を計算するので、ワールド座標の位置は変わりません。

    -----------------------------------------

    degreeOfFreedom (string): IKの自由度を指定します。有効な文字列は、x、y、とzの重複しない文字で構成されます。文字列の文字は、どの回転がIKで使用されたかを示します。文字列の文字の順序は関係ありません。例:x、yz、xyz。照会するとstringを返します。dofを修正すると、対応する回転アトリビュートのロッキング状態が修正されます。この規則は次のとおりです。回転がdofに変化すると、現在ロックされていればロックが解除されます。回転がnon-dofに変化すると、現在ロックされていなければロックされます。

    -----------------------------------------

    exists (string): 名前の付いた既存のジョイントを照会します。照会するとbooleanを返します。

    -----------------------------------------

    limitSwitchX (boolean): X軸の回転を制限します。照会するとbooleanを返します。

    -----------------------------------------

    limitSwitchY (boolean): Y軸の回転を制限します。照会するとbooleanを返します。

    -----------------------------------------

    limitSwitchZ (boolean): Z軸の回転を制限します。照会するとbooleanを返します。

    -----------------------------------------

    limitX ([angle, angle]): 回転のX軸の下限と上限を設定します。ジョイントの制限も有効にします。照会すると2つのfloatを返します。

    -----------------------------------------

    limitY ([angle, angle]): 回転のY軸の下限と上限を設定します。ジョイントの制限も有効にします。照会すると2つのfloatを返します。

    -----------------------------------------

    limitZ ([angle, angle]): 回転のZ軸の下限と上限を設定します。ジョイントの制限も有効にします。照会すると2つのfloatを返します。

    -----------------------------------------

    name (string): ジョイントの名前を指定します。照会するとstringを返します。

    -----------------------------------------

    orientJoint (string): 引数は、次の文字列のいずれかを返します。xyz、yzx、zxy、zyx、yxz、xzy、noneジョイントとスケールの向きが修正され、引数の最初の文字で示される軸がこのジョイントから最初の子ジョイントへのベクトルに位置合わせされます。たとえば、引数が「xyz」であれば、x軸が子ジョイントの方を指します。残りの2つのジョイント方向軸の位置合わせは、-sao/-secondaryAxisOrientフラグを使用しているかどうかによって異なります。-saoフラグが使用されている場合の残りの軸の位置合わせ方法については、-saoフラグに関する文書を参照してください。2番目の軸方向が指定されていなければ、引数の最後の文字で示される回転軸は、1番目の軸に垂直なベクトルと、このジョイントから親ジョイントへのベクトルに位置合わせされます。残りの軸は、右手の法則に従って位置合わせされます。引数が「none」の場合、ジョイントの向きが0に設定され、下の階層に対するエフェクトがスケールの方向の修正によってオフセットされます。フラグは、次の場合には無視されます。A.引数が「none」でない場合、ジョイントが0以外の回転を持っているB.引数が「none」でない場合、ジョイントが子ジョイントを持っていないか、子ジョイントとの間隔が0であるC.フラグ-oまたは-soのいずれかが設定されている

    -----------------------------------------

    orientation ([angle, angle, angle]): ジョイントの方向です。照会すると3つのfloatを返します。

    -----------------------------------------

    position ([linear, linear, linear]): ジョイントの中央位置を指定します。この位置はジョイントの親に相対的であるか、または絶対的なワールド座標になります(以下のフラグ-rと-aを参照)。照会すると3つのfloatを返します。

    -----------------------------------------

    radius (float): ジョイントの半径を指定します。

    -----------------------------------------

    relative (boolean): ジョイントの中央位置をジョイントの親に相対的にします。

    -----------------------------------------

    rotationOrder (string): ジョイントの回転の順序です。引数は、次の文字列のいずれかを返します。xyz、yzx、zxy、zyx、yxz、xzy

    -----------------------------------------

    scale ([float, float, float]): ジョイントのスケールを行います。照会すると3つのfloatを返します。

    -----------------------------------------

    scaleCompensate (boolean): ジョイントのscaleCompenstateアトリビュートを、指定した引数に設定します。trueならば、親ジョイントのスケールはこのジョイントに何らかの回転が適用される前に補正されます。そのため、ボーンはジョイントに対してスケールされますが、ボーンはその子ジョイントに対してはスケールされません。照会するとbooleanを返します。

    -----------------------------------------

    scaleOrientation ([angle, angle, angle]): スケーリングの座標軸の方向を設定します。照会すると3つのfloatを返します。

    -----------------------------------------

    secondaryAxisOrient (string): 引数は、次の文字列のいずれかを返します。xup、xdown,yup、ydown、zup、zdown、noneこのフラグは-oj/orientJointフラグと一緒に使用します。2番目の軸を位置合わせるシーンの軸を指定します。たとえば、"-ojyzx-saoyup"というフラグの組み合わせでは、y軸はボーンの下方向を指し、z軸はシーンのy軸の正方向と同じ方向を指し、x軸は右手の法則に従った向きになります。

    -----------------------------------------

    setPreferredAngles (boolean): 編集モードでのみ意味を持ちます。現在のジョイント角に対して、優先回転角を設定します。

    -----------------------------------------

    stiffnessX (float): X軸の固さ(0～100.0)を設定します。照会するとfloatを返します。

    -----------------------------------------

    stiffnessY (float): Y軸の固さ(0～100.0)を設定します。照会するとfloatを返します。

    -----------------------------------------

    stiffnessZ (float): Z軸の固さ(0～100.0)を設定します。照会するとfloatを返します。

    -----------------------------------------

    symmetry (boolean): 現在のジョイントから左右対称ジョイントを作成します。

    -----------------------------------------

    symmetryAxis (string): このフラグは、左右対称ジョイントをミラーするための軸を指定します。x、y、zの任意の組み合わせを使用できます。このオプションは、シンメトリフラグをTrueに設定した場合のみ使用します。

    -----------------------------------------

    zeroScaleOrient (boolean): スケールの方向を0に設定し、ジョイントの方向と移動の修正によって変更を補正します。あるいはすべての子が変換する一般トランスフォームは回転の修正によって変更を補正します。フラグ-soが設定された場合、フラグは無視されます。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def jointCluster(aboveBound: float = 1.0,aboveCluster: bool = False,aboveDropoffType: str = "",aboveValue: float = 1.0,belowBound: float = 1.0,belowCluster: bool = False,belowDropoffType: str = "",belowValue: float = 1.0,deformerTools: bool = False,joint: str = "",name: str = "") -> None:
    """
    jointCluster コマンドは高度なコントロールを追加し、ジョイント周辺のバインド スキンのクラスタ パーセンテージ値を管理します。JointCluster は、ジョイントが回転する場合にスキンの屈伸時の滑らかな動きを作成する方法の 1 つです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    aboveBound (float): ジョイントの上のボーン方向に、ドロップオフが始まる場所を指定します。100の値は、ボーンの全長を示します。既定値は10です。

    -----------------------------------------

    aboveCluster (boolean): このジョイントの上のボーンにコネクトされるクラスタの名前を返します。

    -----------------------------------------

    aboveDropoffType (string): このジョイントの上のボーン方向に、パーセンテージによるドロップオフのタイプを指定します。有効な値は、「linear」、「exponential」、「sine」、「none」です。既定はlinearです。

    -----------------------------------------

    aboveValue (float): クラスタの上のボーン方向に、ジョイントクラスタのドロップオフのバーセンテージを指定します。100の値は、ボーンの全長を示します。既定値は50です。

    -----------------------------------------

    belowBound (float): ジョイントの下のボーン方向に、ドロップオフが終了する場所を指定します。100の値は、ボーンの全長を示します。既定値は10です。

    -----------------------------------------

    belowCluster (boolean): このジョイントにコネクトされるクラスタの名前を返します。

    -----------------------------------------

    belowDropoffType (string): このジョイントの下のボーン方向に、パーセンテージによるドロップオフのタイプを指定します。有効な値は、「linear」、「exponential」、「sine」、「none」です。既定はlinearです。

    -----------------------------------------

    belowValue (float): クラスタの下のジョイント方向に、ジョイントクラスタのドロップオフのバーセンテージを指定します。100の値は、ボーンの全長を示します。既定値は50です。

    -----------------------------------------

    deformerTools (boolean): jointClusterに関連するヘルパノードを照会するために使用されます。

    -----------------------------------------

    joint (string): クラスタが動作するジョイントを指定します。

    -----------------------------------------

    name (string): このフラグは現在サポートしていません。

    -----------------------------------------

    Return Value:
    None: string新規 jointCluster ノードの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def jointDisplayScale(absolute: bool = False,ikfk: bool = False) -> None:
    """
    このアクションにより、スケルトン ジョイントの現在の表示サイズが変更され、照会されます。ジョイントの表示サイズは、スケール係数で制御されます。スケール係数 1 が表示サイズの既定で、1 倍です。単純なフォーマットにあっては、float 引数が既定のサイズに対する係数です。-a/absolute を使用すると、float 引数はジョイント表示サイズの実際の倍率を参照します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absolute (boolean): スケール係数に対するものとしての実際の表示サイズとして、float引数を解釈します。

    -----------------------------------------

    ikfk (boolean): ik/fkスケルトンジョイントの表示サイズを設定します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def mirrorJoint(mirrorBehavior: bool = False,mirrorXY: bool = False,mirrorXZ: bool = False,mirrorYZ: bool = False,searchReplace: Tuple[str, str] = tuple("", "")) -> None:
    """
    ワールド空間のプレーンを中心に、選択したジョイントのスケルトンのブランチが対称的に複製されます。ミラーリング モードは 3 つあります(XY プレーン、YZ プレーン、XZ プレーン)。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    mirrorBehavior (boolean): ミラーリングの実行時に、オリジナルジョイントとミラーリングジョイントに等しい回転で、ミラーリング位置(ミラーリングプレーンを中心に対称)にスケルトンが配置されるようにジョイントの向きがミラーリングされることを指定するために使用します。オリジナルジョイントのアニメーションカーブは、同様の動作(対称の動作)をするようにミラーリングサイドにコピーされます。mirrorBehaviorを指定しないと、ミラーリングサイドのジョイント方向は、ソースサイドと同じになります。

    -----------------------------------------

    mirrorXY (boolean): ワールド空間のXYプレーンを中心に、選択したジョイントのスケルトンをミラーリングします。

    -----------------------------------------

    mirrorXZ (boolean): ワールド空間のXZプレーンを中心に、選択したジョイントのスケルトンをミラーリングします。

    -----------------------------------------

    mirrorYZ (boolean): ワールド空間のYZプレーンを中心に、選択したジョイントのスケルトンをミラーリングします。

    -----------------------------------------

    searchReplace ([string, string]): ミラーリングを実行した後、最初に指定した文字列の名前を検索し、2番目に指定した文字列と置き換えて、新しいジョイントの名前を変更します。

    -----------------------------------------

    Return Value:
    None: string[]ミラーリングされたジョイントの名前
    """
    pass

    
def poleVectorConstraint(layer: str = "",name: str = "",remove: bool = False,targetList: bool = False,weight: float = 1.0,weightAliasList: bool = False) -> None:
    """
    ikRPsolve ハンドルの poleVector が、ターゲット オブジェクトのポイント、または多くのターゲットの平均位置に制限されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    layer (string): コンストレイントを追加するアニメーションレイヤの名前を指定します。

    -----------------------------------------

    name (string): コンストレイントノードの名前を指定した名前に設定します。既定名はconstrainedObjectName_constraintTypeです。

    -----------------------------------------

    remove (boolean): リストされたターゲットをコンストレイントから除去します。

    -----------------------------------------

    targetList (boolean): ターゲットオブジェクトのリストを返します。

    -----------------------------------------

    weight (float): 指定したターゲットのウェイト値を設定します。作成時に指定していない場合は、既定値の1.0が使用されます。

    -----------------------------------------

    weightAliasList (boolean): ターゲットオブジェクトのウェイトをコントロールする、アトリビュートの名前を返します。targetListフラグで返されるターゲットと同じ順序で、エイリアスを返します。

    -----------------------------------------

    Return Value:
    None: string[]作成されたコンストレイント ノード名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def removeJoint() -> None:
    """
    選択したジョイント、またはコマンド ラインで指定したジョイントをスケルトンから除去します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    