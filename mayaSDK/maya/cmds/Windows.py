
from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union, Text



def colorEditor(alpha: float = 1.0,hsvValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),mini: bool = False,parent: str = "",position: Tuple[int, int] = tuple(1, 1),result: bool = False,rgbValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0)) -> None:
    """
    colorEditor コマンドは、カラーを RGB または HSV で指定するためのモーダル ダイアログを表示します。引数が指定されていない場合の既定の動作では、黒の初期カラー(RGB 0.0 0.0 0.0)が表示されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alpha (float): アルファ透明度コンポーネントに対応する0.0～1.0の範囲のfloat値。このフラグを使用してカラーエディタのアルファの初期値を指定したり、このフラグを照会してエディタに設定するアルファ値を決定します。

    -----------------------------------------

    hsvValue ([float, float, float]): 色相の値が0.0～360.0で、彩度と値のコンポーネントが0.0～1.0の色相、彩度、と値のカラー成分に対応する3つのfloat値。このフラグを使用してカラーエディタ(ColorEditor)の初期カラーを指定する、あるいはこのフラグを照会してエディタのカラーセットを調べることができます。

    -----------------------------------------

    mini (boolean): 小型のカラーエディタモードを有効にします。

    -----------------------------------------

    parent (string): ダイアログの親ウィンドウを指定します。ダイアログは親ウィンドウの中央に配置され、親ウィンドウの動きにつれて上下します。既定では、ダイアログは特定のウィンドウにはペアレント化されておらず、画面の中央に配置されます。

    -----------------------------------------

    position ([int, int]): ダイアログのウィンドウ位置を指定します。

    -----------------------------------------

    result (boolean): この照会専用フラグは、ダイアログのOKボタンを押した場合はtrue(真)を、押していない場合はfalseを返します。カラーエディタ(ColorEditor)の表示直後にこのフラグを照会すると、colorEditorコマンドの戻り文字列に返されるブーリアン値と同じ値を返します。

    -----------------------------------------

    rgbValue ([float, float, float]): 赤、緑、青に対応する3つの浮動小数点数の値で、すべて有効範囲は0.0～1.0です。このフラグを使用してカラーエディタ(ColorEditor)の初期カラーを指定する、あるいはこのフラグを照会してエディタのカラーセットを調べることができます。

    -----------------------------------------

    Return Value:
    None: string文字列のフォーマットは「float float float boolean」です。3 つの float 値はカラー成分に対応します。
    """
    pass

    
def confirmDialog(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),button: str = "",cancelButton: str = "",defaultButton: str = "",dismissString: str = "",icon: str = "",message: str = "",messageAlign: str = "",parent: str = "",title: str = "") -> None:
    """
    confirmDialog コマンドは、ユーザに対するメッセージを含むモーダル ダイアログと、そのダイアログを却下するための変数のボタンを作成します。このダイアログは、何かボタンを押したとき、またはウィンドウ メニューから「閉じる」を選ぶと却下されます。ボタンを押した場合は、選択したボタンの名前が返されます。「閉じる」を選んでダイアログを閉じた場合に返される文字列は、dismissString フラグで指定されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): ボタンの注釈を設定します。

    -----------------------------------------

    backgroundColor ([float, float, float]): ダイアログのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。(Windowsのみのフラグです)。

    -----------------------------------------

    button (string): 指定した文字列がテキストとして表示されるボタンを作成します。

    -----------------------------------------

    cancelButton (string): [Esc]キーを押すと[キャンセル(Cancel)]ボタンがアクティブになります。このフラグはボタンを作成するのではなく、buttonフラグで作成されたボタンのうちどれをEscキーに対応させるかを指定するだけであることに注意してください。

    -----------------------------------------

    defaultButton (string): Enterキーを押すと既定のボタンがアクティブになります。このフラグはボタンを作成するのではなく、buttonフラグで作成されたボタンのうちどれをEnterキーに対応させるかを指定するだけであることに注意してください。

    -----------------------------------------

    dismissString (string): ユーザがウィンドウマネージャのメニューから[閉じる]を選択すると返される文字列です。このフラグが設定されていない場合は、文字列「dismiss」が返されます。

    -----------------------------------------

    icon (string): ユーザは4つの標準アイコン「question」、「information」、「warning」、「critical」のいずれかを指定できます。questionアイコンは、メッセージが質問であることを示します。informationアイコンは、メッセージがただの情報であることを示します。warningアイコンは、メッセージが警告であるが処理可能なことを示します。criticalアイコンは、メッセージが危機的な問題を伝えていることを示します。アイコンフラグがない場合は、確認ダイアログにアイコンを含めたくないと判断されます。

    -----------------------------------------

    message (string): ダイアログに表示されるメッセージテキストです。

    -----------------------------------------

    messageAlign (string): メッセージを左、中央、または右に位置合わせます。

    -----------------------------------------

    parent (string): ダイアログの親ウィンドウを指定します。ダイアログは親ウィンドウの中央に配置され、親ウィンドウの動きにつれて上下します。既定では、ダイアログは特定のウィンドウにはペアレント化されておらず、画面の中央に配置されます。

    -----------------------------------------

    title (string): ダイアログのタイトルです。

    -----------------------------------------

    Return Value:
    None: stringダイアログを却下する方法を示します。ボタンを押すと、ボタンのラベルが返されます。ダイアログを閉じると、フラグ dismissString の値が返されます。
    """
    pass

    
def createEditor(noCloseOnDelete: bool = False,queueForDelete: bool = False) -> None:
    """
    このコマンドを使うと、任意のディペンデンシー ノードのプロパティ シートを作成できます。2 番目の引数はノード名、1 番目の引数はプロパティ シートのコントロール配置のレイアウト名です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    noCloseOnDelete (boolean): このフラグを設定すると、データが削除されてもエディタを閉じません。

    -----------------------------------------

    queueForDelete (boolean): 指定したレイアウトが待ち行列にキューイングされます。待ち行列がいっぱいになった場合、入りきれなかったレイアウトは自動的に削除されます。レイアウトがすでに待ち行列に存在する場合は前面に移動されます。このため、使用されていないエディタは整理することができます。MELスクリプトのshowEditorのみがこのフラグを使用できます。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def defaultNavigation(connectToExisting: bool = False,createNew: bool = False,defaultAttribute: bool = False,defaultTraversal: bool = False,defaultWorkingNode: bool = False,delete: bool = False,destination: str = "",disconnect: bool = False,force: bool = False,ignore: bool = False,navigatorDecisionString: str = "",quiet: bool = False,relatedNodes: bool = False,source: str = "",unignore: bool = False) -> None:
    """
    defaultNavigation コマンドは、ノード間の接続を作成または操作するとき、あるいはこの接続を介してノード間を移動するときの、既定の動作を定義します。このコマンドは、主にアトリビュート エディタ(Attribute Editor)で使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    connectToExisting (boolean): 接続先のアトリビュート(node.attributeまたは単なるノード)を既存の接続元に接続します。接続元が指定されていれば(node.attributeまたはノードとして)、このコマンドは即座に処理されます。接続元が指定されていない場合、指定するよう求められます。接続元が指定したら、接続してユーザが何を行いたいかについて、接続元のタイプと接続先のタイプに基づいて、最適な推測が行われます。このコマンドは、ノードやアトリビュートを最適な推測に基づいて接続します。対象はdestinationフラグ、ソースはsourceフラグを使用して指定します。

    -----------------------------------------

    createNew (boolean): 新しいノードを作成し、destinationフラグを使用して指定したnode.attributeに接続ます。

    -----------------------------------------

    defaultAttribute (boolean): 接続元(アトリビュート)と接続先(ノード)フラグを指定し、connectNodeToNodeを接続するアトリビュート名を返します。文字列を返します。

    -----------------------------------------

    defaultTraversal (boolean): 指定した接続先のnode.attributeからの移動に最も重要なノード名を返します。対象は、destinationフラグを使用して指定します。文字列を返します。

    -----------------------------------------

    defaultWorkingNode (boolean): 接続先ノードのアトリビュートに関連があれば、ユーザが最も必要とするノード名を返します。対象は、destinationフラグを使用して指定します。文字列を返します。

    -----------------------------------------

    delete (boolean): destinationフラグで指定したnode.attributeに流れ込む接続を持つノードを削除します。

    -----------------------------------------

    destination (name): createNewまたはconnectToExistingの既存の対象アトリビュートを指定します。

    -----------------------------------------

    disconnect (boolean): 使用した場合、接続先が切断されます(存在する場合)。

    -----------------------------------------

    force (boolean): trueに設定されていれば、すでに接続元がある接続先アトリビュートに接続元アトリビュートを接続しようと試みられるため、既存の接続元の接続が解除され、新しい接続元が接続されます。既定はtrueです。

    -----------------------------------------

    ignore (boolean): destinationフラグで指定したnode.attributeに流れ込む接続を無視します。

    -----------------------------------------

    navigatorDecisionString (string): ここで、実行する動作を決定するために役立つ文字列をナビゲータに渡します。

    -----------------------------------------

    quiet (boolean): trueに設定されていれば、どんな場合でも詳細は表示されません。既定はfalseです。

    -----------------------------------------

    relatedNodes (boolean): コンセプトにおいて接続先で指定したnode.attributeに関連するノードをリストします。関連するノードに直接または間接的に送信先に接続されたノードが含まれる場合もあります。対象は、destinationフラグを使用して指定します。文字配列を返します。

    -----------------------------------------

    source (name): connectToExistingの既存のソースアトリビュートを指定します。

    -----------------------------------------

    unignore (boolean): destinationフラグで指定したnode.attributeに流れ込む接続を無視しないようにします。

    -----------------------------------------

    Return Value:
    None: stringまたは、文字配列
    """
    pass

    
def editor(control: bool = False,defineTemplate: str = "",docTag: str = "",exists: bool = False,filter: str = "",forceMainConnection: str = "",highlightConnection: str = "",lockMainConnection: bool = False,mainListConnection: str = "",panel: str = "",parent: str = "",selectionConnection: str = "",stateString: bool = False,unParent: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,useTemplate: str = "") -> None:
    """
    エディタの特性を編集します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringエディタの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def editorTemplate(addAdskAssetControls: bool = False,addComponents: bool = False,addControl: bool = False,addDynamicControl: bool = False,addExtraControls: bool = False,addSeparator: bool = False,annotateFieldOnly: bool = False,annotation: str = "",beginLayout: str = "",beginNoOptimize: bool = False,beginScrollLayout: bool = False,callCustom: bool = False,collapse: bool = False,debugMode: bool = False,dimControl: Tuple[str, str, bool] = tuple("", "", False),endLayout: bool = False,endNoOptimize: bool = False,endScrollLayout: bool = False,extraControlsLabel: str = "",interruptOptimize: bool = False,label: str = "",listExtraAttributes: str = "",preventOverride: bool = False,queryControl: Tuple[str, str] = tuple("", ""),queryLabel: Tuple[str, str] = tuple("", ""),queryName: Tuple[str, str] = tuple("", ""),removeControl: Tuple[str, str] = tuple("", ""),suppress: str = "") -> None:
    """
    editorTemplate コマンドで、アトリビュート エディタ(Attribute Editor)の概念レイアウトを指定し、最終的に使用される UI 要素の詳細を自動ダイアログ生成メカニズムに任せることができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addAdskAssetControls (boolean): adskMaterialノードのダイナミックアトリビュートのコントロールを追加し、アセットライブラリで指定されたXMLui記述にしたがってレイアウトを編成します。

    -----------------------------------------

    addComponents (boolean): このフラグは、オブジェクトの選択したコンポーネントを表示するチャネルボックス(ChannelBox)付きでframeLayoutを追加します。

    -----------------------------------------

    addControl (boolean): 最初の引数は、コントロールを追加したいアトリビュートの名前です。エディタをテンプレートから作成する場合、適切なタイプのコントロールが使用されます。2番目の文字列引数はオプションで、アトリビュートの変更時に実行されるコマンド(またはスクリプト)を指定するために使用できます。

    -----------------------------------------

    addDynamicControl (boolean): コントロールを作成またはアタッチするアトリビュートが動的であるという点を除けば、-addControlと同じです。[注:-addControlは、ダイナミックアトリビュートに対しても同じように動作しますが、アトリビュートエディタでの順序は保持されません。

    -----------------------------------------

    addExtraControls (boolean): 既定では、-addControlまたは-suppressを実行しないノードのアトリビュートがある場合、コントロールが自動的に作成され、テンプレートから作成されたエディタの末尾にアペンドされます。このフラグで特定の場所を指定して、このようなコントロールを自動的に挿入することができます。ダイナミックアトリビュートがまだ-addControlでアドレスされていなければ、同じようにここに配置されます。このフラグを使用する場合、frameLayoutは自動的に生成されます。

    -----------------------------------------

    addSeparator (boolean): テンプレートにセパレータを追加します。

    -----------------------------------------

    annotateFieldOnly (boolean): このフラグは、必ず-annotationフラグと一緒に使用します。既定では、-addControlフラグで作成されたすべてのアトリビュートエディタcontrolGroupsに対して、-annotationフラグを指定すると、グループに含まれている任意のコントロール(ラベル、値フィールドなど)の上にカーソルを合わせたときに、注釈文字列が表示されます。このフラグを使用すると、controlGroupの値フィールドのみが表示されるよう注釈の表示を制限することができます。controlGroupに値フィールド(checkBoxGrpフィールドなど)がない場合、このフラグは無視されます。

    -----------------------------------------

    annotation (string): このフラグは、-addControlフラグまたは-addDynamicControlフラグとのみ使用されます。この文字列は、アトリビュートエディタ内で作成されたコントロールの注釈となります。

    -----------------------------------------

    beginLayout (string): 文字列引数で指定したタイトルでテンプレートのレイアウトを開始します。このフラグと該当する-endLayoutフラグ間の項目がレイアウト内に含まれます。エディタをテンプレートから作成する場合、適切なタイプのレイアウトが使用されます(frameLayout)。

    -----------------------------------------

    beginNoOptimize (boolean): このフラグと関連する-endNoOptimizeフラグ間の項目のレイアウトが、最適化されてスペースを最小化されないように指定します。

    -----------------------------------------

    beginScrollLayout (boolean): scrollLayoutを開始します。このフラグと関連する-endScrollLayoutフラグ間の項目は、このレイアウト内に含まれます。

    -----------------------------------------

    callCustom (boolean): ダイアログの構築時にテンプレートのこのポイントで、最初の引数によって指定したプロシージャを呼び出して、新しいノードタイプを編集する際にUIオブジェクトをいくつか作成するように指定します。2番目の引数で指定したプロシージャは、アトリビュートエディタがすでに存在して同タイプの別のノードを編集する場合に、コールされます。置換プロシージャは、作成プロシージャで作成されたコントロールをすべて新しいノードの同等のアトリビュートに接続します。ゼロ以上のアトリビュートのリストは、この2つのプロシージャに関係するアトリビュートを指定します。このプロシージャには、次のシグニチャが必要です。procAEcustomNew(stringattributeName1,stringattributeName2)コールで指定するアトリビュートの数は、プロシージャシグネチャのアトリビュートの数に対応している必要があります。

    -----------------------------------------

    collapse (boolean): このフラグは、-bl/beginLayoutフラグと一緒に使用する場合のみ有効です。このフラグを使用して、レイアウトの展開/折り畳みの初期状態を指定します。レイアウトは、値がtrueの場合、作成時に折り畳まれ、falseの場合、展開されます。既定はtrueです(折り畳まれます)。

    -----------------------------------------

    debugMode (boolean): テンプレートのデバッグモードを設定します。

    -----------------------------------------

    dimControl ([string, string, boolean]): このフラグは、コントロールが作成されたあとでのみ有効です(-addControlフラグを使用)。最初の引数はノード名で、2番目の引数は影響を与えたいアトリビュートのコントロールです。3番目の引数は、関連したコントロールの表示を薄くする(true)か通常に表示するか(false)を指定するブーリアン値です。

    -----------------------------------------

    endLayout (boolean): -beginLayoutで起動したテンプレートのレイアウトを終了します。

    -----------------------------------------

    endNoOptimize (boolean): 最適化されていない項目のセットを終了します。

    -----------------------------------------

    endScrollLayout (boolean): scrollLayoutを終了します。

    -----------------------------------------

    extraControlsLabel (string): 既定では、ラベルは「追加のアトリビュート」です。これに代わるラベルを指定するか、またはラベルを非表示にする空の文字列を指定します。このフラグは-aec/addExtraControlsフラグと一緒に使用する必要があります。

    -----------------------------------------

    interruptOptimize (boolean): レイアウトが最適化されることがある項目の2つのセット間の区切りを強制します。

    -----------------------------------------

    label (string): このフラグは、-addControlフラグまたは-addDynamicControlフラグとのみ使用されます。また、これは最初に指定されている必要があります。この文字列は、アトリビュートエディタに表示されるアトリビュート名をオーバーライドします。

    -----------------------------------------

    listExtraAttributes (string): 追加のアトリビュートをリスト表示します。このフラグは、コントロールが作成されたあとでのみ有効です(-addControlフラグを使用)。1番目の引数はノード名です。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    queryControl ([string, string]): このフラグは、コントロールが作成されたあとでのみ有効です(-addControlフラグを使用)。最初の引数はノード名で、2番目の引数は照会したいアトリビュートのコントロールです。ほとんどの場合、このフラグを使用することは、getAttrコマンドを発行することと同じであることに注意してください。ただし、textFields(メッセージアトリビュートなど)の場合は、実際のアトリビュート値ではなく、現在表示されているテキスト値を返します。

    -----------------------------------------

    queryLabel ([string, string]): このフラグは、コントロールが作成されたあとでのみ有効です(-addControlフラグを使用)。最初の引数はノード名で、2番目の引数は照会したいアトリビュートのコントロールのラベルです。ほとんどの場合このフラグはアトリビュートのナイスネームと同じ値を返しますが、コントロールを作成した-addControlコマンドに-labelフラグが存在した場合、その値は代わりに-queryLabelによって返されます。

    -----------------------------------------

    queryName ([string, string]): このフラグは、コントロールが作成されたあとでのみ有効です(-addControlフラグを使用)。最初の引数はノード名で、2番目の引数はコントロール名を照会するアトリビュートです。

    -----------------------------------------

    removeControl ([string, string]): このフラグは廃止されているので、使用しないでください。

    -----------------------------------------

    suppress (string): 文字列引数で指定したアトリビュートのコントロールが、テンプレートから作成されたエディタに表示されないようにします。

    -----------------------------------------

    Return Value:
    None: stringqueryControl に対しては、適切なアトリビュート タイプが返されます。文字配列 listExtraAttributes に対しては、追加のアトリビュートが返されます。
    """
    pass

    
def fontDialog(FontList: bool = False,scalable: bool = False) -> None:
    """
    ユーザが選択できる使用可能フォントが示されたダイアログを表示します。選択したフォント名が返されます。フォントを選択しなかった場合は、空の文字列が返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    FontList (boolean): 使用可能なすべてのフォント名の配列を返します。ダイアログは表示されません。

    -----------------------------------------

    scalable (boolean): 返される、または表示されるフォントを、拡張可能なフォントに制限します。

    -----------------------------------------

    Return Value:
    None: stringダイアログ名
    """
    pass

    
def layoutDialog(backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),dismiss: str = "",parent: str = "",title: str = "",uiScript: str = "") -> None:
    """
    layoutDialog コマンドは、100 個のディビジョンがある formLayout を含むモーダル ダイアログを作成します。formLayout は、「-ui/-uiScript」フラグを使用して任意の UI 要素で埋めることができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    backgroundColor ([float, float, float]): ダイアログのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。(Windowsのみのフラグです)。

    -----------------------------------------

    dismiss (string): 現在のlayoutDialogを終了します。指定した文字列は、最初のlayoutDialogコマンドの結果として設定されます。

    -----------------------------------------

    parent (string): ダイアログの親ウィンドウを指定します。ダイアログは親ウィンドウの中央に配置され、親ウィンドウの動きにつれて上下します。既定では、ダイアログは特定のウィンドウにはペアレント化されておらず、画面の中央に配置されます。

    -----------------------------------------

    title (string): ダイアログのタイトルです。

    -----------------------------------------

    uiScript (script): layoutDialogのUIを構築するために、指定したMELプロシージャ名を使用します。このフラグは、layoutDialogを作成するときに必要です。layoutDialogの最上位コントロールは、100個のディビジョンがあるformLayoutです。formLayoutには、指定したMELプロシージャの先頭で「setParent-q」をコールすることによりアクセスできます。

    -----------------------------------------

    Return Value:
    None: string-dismiss フラグで指定した文字列、またはダイアログが閉じた場合は「dismiss」。
    """
    pass

    
def minimizeApp() -> None:
    """
    アプリケーションのすべてのウィンドウが、1 つのデスクトップ アイコンに最小化(アイコン化)されます。アプリケーションを復元するには、デスクトップ アイコンをクリックします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def progressWindow(endProgress: bool = False,isCancelled: bool = False,isInterruptable: bool = False,maxValue: int = 1,minValue: int = 1,progress: int = 1,status: str = "",step: int = 1,title: str = "") -> None:
    """
    progressWindow コマンドは、ステータス メッセージ、グラフィックのプログレス ゲージ、オプションで操作を中断する場合の「キャンセルするには Esc キーを押してください」というメッセージを含むウィンドウを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    endProgress (boolean): プログレスウィンドウを終了します。他のフラグとは一緒に使用できません。これは通常、-ic/isCancelledフラグが設定された場合、もしくはプログレス値が最大値になった場合に、MELを通じて発行されます。

    -----------------------------------------

    isCancelled (boolean): 操作を解除しようとした場合、trueを返します。その他の場合、falseを返します。

    -----------------------------------------

    isInterruptable (boolean): 操作をキャンセルしようとすると、プログレスウィンドウが反応する場合には、trueを返します。trueに設定すると、[キャンセル(Cancel)]ボタンが無効になります。

    -----------------------------------------

    maxValue (int): プログレスインジケータの最大値または「終了」値です。プログレス値が-max/maxValueより大きい場合、プログレス値は最大に設定されます。既定値は100です。

    -----------------------------------------

    minValue (int): プログレスインジケータの最小値または「開始」値です。プログレス値が-min/minValueより小さい場合、プログレス値は最小に設定されます。既定値は0です。

    -----------------------------------------

    progress (int): コントロールに現在表示される進捗状況です。値は常に最小値と最大値の間になり、既定値はコントロールが作成された時点の最小値です。

    -----------------------------------------

    status (string): プログレスゲージの上に表示される、状況に関するテキストです。

    -----------------------------------------

    step (int): 指定した量の単位で-pr/progressの値を増分します。

    -----------------------------------------

    title (string): ウィンドウのタイトルです。

    -----------------------------------------

    Return Value:
    None: booleanウィンドウの作成に成功した場合 true を返し、ウィンドウが作成できなかった場合(考えられる理由として、すでに 1 つ表示されていた場合など) false を返します。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def promptDialog(backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),button: str = "",cancelButton: str = "",defaultButton: str = "",dismissString: str = "",message: str = "",messageAlign: str = "",parent: str = "",scrollableField: bool = False,style: str = "",text: str = "",title: str = "") -> None:
    """
    promptDialog コマンドは、ユーザに対するメッセージ、応答内容を入力するテキスト フィールド、ダイアログを閉じる場合の不特定数のボタンを含むモーダル ダイアログを作成します。このダイアログは、何かボタンを押したとき、またはウィンドウ メニューから「閉じる」を選ぶと却下されます。ボタンを押した場合は、選択したボタンの名前が返されます。「閉じる」を選んでダイアログを閉じた場合に返される文字列は、-ds/dismissString フラグで指定されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    backgroundColor ([float, float, float]): ダイアログのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。(Windowsのみのフラグです)。

    -----------------------------------------

    button (string): 指定した文字列がテキストとして表示されるボタンを作成します。

    -----------------------------------------

    cancelButton (string): [Esc]キーを押すと[キャンセル(Cancel)]ボタンがアクティブになります。このフラグはボタンを作成するのではなく、-b/buttonフラグで作成されたボタンのうちどれをEscキーに対応させるかを指定するだけであることに注意してください。

    -----------------------------------------

    defaultButton (string): Enterキーを押すと既定のボタンがアクティブになります。このフラグはボタンを作成するのではなく、-b/buttonフラグで作成されたボタンのうちどれをEnterキーに対応させるかを指定するだけであることに注意してください。

    -----------------------------------------

    dismissString (string): ユーザがウィンドウマネージャのメニューから[閉じる]を選択すると返される文字列です。このフラグが設定されていない場合は、文字列「dismiss」が返されます。

    -----------------------------------------

    message (string): ダイアログに表示されるメッセージテキストです。

    -----------------------------------------

    messageAlign (string): メッセージを左、中央、または右に位置合わせます。

    -----------------------------------------

    parent (string): ダイアログの親ウィンドウを指定します。ダイアログは親ウィンドウの中央に配置され、親ウィンドウの動きにつれて上下します。既定では、ダイアログは特定のウィンドウにはペアレント化されておらず、画面の中央に配置されます。

    -----------------------------------------

    scrollableField (boolean): 既定では、ダイアログに1行のテキストフィールドが使用されます。複数行のスクロールできるフィールドにするには、trueを指定します。

    -----------------------------------------

    style (string): 入力フィールドで要求する入力タイプを指定します。有効な入力タイプは、「integer」「float」「text」です。このフラグを指定しないと、入力タイプは「text」とみなされます。

    -----------------------------------------

    text (string): フィールドテキストです。

    -----------------------------------------

    title (string): ダイアログのタイトルです。

    -----------------------------------------

    Return Value:
    None: stringダイアログを却下する方法を示します。ボタンを押すと、ボタンのラベルが返されます。ダイアログを閉じると、フラグ ds/dismissString の値が返されます。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def refreshEditorTemplates() -> None:
    """
    このコマンドは、標準 AE からコピーされたものを含め、キャッシュ済みのすべてのアトリビュート エディタのテンプレートをリフレッシュします。これらは、ノード タイプごとに内部的に作成されるテンプレートです。これは、アトリビュートの要素が変更され、それに従ってテンプレートを再評価する必要があるときに便利です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def scriptEditorInfo(clearHistory: bool = False,clearHistoryFile: bool = False,historyFilename: str = "",input: str = "",suppressErrors: bool = False,suppressInfo: bool = False,suppressResults: bool = False,suppressStackWindow: bool = False,suppressWarnings: bool = False,writeHistory: bool = False) -> None:
    """
    Command Window ウィンドウの内容を直接操作と照会するには、このコマンドを使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    clearHistory (boolean): CommandWindowの上部のフィールド内で読み取り専用のテキストをクリアします。

    -----------------------------------------

    clearHistoryFile (boolean): -wh/writeHistoryがtrueの場合にのみ、-hf/historyFilenameフラグによって定義されているファイルをクリアします。新しいヒストリファイルを開始するには、このフラグを使用します。CommandWindowの既定の動作は、既存のファイルへのアペンドです。

    -----------------------------------------

    historyFilename (string): CommandWindowがすべてのヒストリをエコーするために使用するファイル名を設定するか返します。-wh/writeHistoryフラグがtrueに設定されているときにこれが空の文字列である場合、既定のファイルに自動的に設定されます。

    -----------------------------------------

    input (string): CommandWindowの下部のフィールド内でテキストを設定します。フィールドをクリアするため、この値は空の文字列に設定します。注:このフラグはCommandWindowにのみ作用し、新しいスクリプトエディタには作用しません。新しいスクリプトエディタを操作する方法については、cmdScrollFieldExecuterとcmdScrollFieldReporterのマニュアルを参照してください。

    -----------------------------------------

    suppressErrors (boolean): trueの場合、CommandWindowとスクリプトエディタにはエラーメッセージが表示されません。

    -----------------------------------------

    suppressInfo (boolean): trueの場合、CommandWindowとスクリプトエディタにはMayaによって生成された情報メッセージが表示されません。

    -----------------------------------------

    suppressResults (boolean): trueの場合、CommandWindowとスクリプトエディタにはコマンドの結果が表示されません。

    -----------------------------------------

    suppressStackWindow (boolean): このフラグがtrueでstackTraceメカニズムがオンになっている場合、スタックウィンドウの表示が抑制されます。スタックトレースを有効にすると、独立したスタックウィンドウの代わりに出力ウィンドウに結果が返されます。

    -----------------------------------------

    suppressWarnings (boolean): trueの場合、CommandWindowとスクリプトエディタには警告メッセージが表示されません。

    -----------------------------------------

    writeHistory (boolean): trueの場合、CommandWindowはヒストリをすべて-hf/historyFilenameフラグに定義されたファイルに返します。このフラグは、ファイルの書き込みを効果的にオン/オフにします。

    -----------------------------------------

    Return Value:
    None: string返された Command Window ウィンドウの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def showSelectionInTitle() -> None:
    """
    このコマンドにより、引数として指定されたウィンドウのタイトルが、現在のファイルと選択項目にリンクされます。セレクションが変更されると、ウィンドウ タイトルが変わり、現在のファイル名と最後に選択したオブジェクトの名前が表示されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def showWindow() -> None:
    """
    ウィンドウを可視にします。ウィンドウが指定されていない場合、現在のウィンドウ(作成された最新のウィンドウ)が使用されます。window コマンドの vis/visible フラグも参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def toggleWindowVisibility() -> None:
    """
    ウィンドウの表示と非表示を切り替えます。ウィンドウが指定されていない場合、現在のウィンドウ(作成された最新のウィンドウ)が使用されます。window コマンドの vis/visible フラグも参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def window(backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),closeCommand: str = "",defineTemplate: str = "",docTag: str = "",dockCorner: Tuple[str, str] = tuple("", ""),dockStation: bool = False,dockingLayout: str = "",exists: bool = False,frontWindow: bool = False,height: int = 1,iconName: str = "",iconify: bool = False,interactivePlacement: bool = False,leftEdge: int = 1,mainMenuBar: bool = False,mainWindow: bool = False,maximizeButton: bool = False,menuArray: bool = False,menuBar: bool = False,menuBarCornerWidget: Tuple[str, str] = tuple("", ""),menuBarResize: bool = False,menuBarVisible: bool = False,menuIndex: Tuple[str, int] = tuple("", 1),minimizeButton: bool = False,minimizeCommand: str = "",nestedDockingEnabled: bool = False,numberOfMenus: bool = False,parent: str = "",resizeToFitChildren: bool = False,restoreCommand: str = "",retain: bool = False,sizeable: bool = False,state: str = "",title: str = "",titleBar: bool = False,titleBarMenu: bool = False,toolbox: bool = False,topEdge: int = 1,topLeftCorner: Tuple[int, int] = tuple(1, 1),useTemplate: str = "",visible: bool = False,width: int = 1,widthHeight: Tuple[int, int] = tuple(1, 1)) -> None:
    """
    このコマンドは新しいウィンドウを作成しますが、作成されたウィンドウは非表示のままになります。最も効率的なのは、ウィンドウの要素を追加してから showWindow コマンドを使用してウィンドウを可視化する方法です。ウィンドウにはオプションでメニュー バーを付けることができます。また、タイトル バーや最小化/最大化ボタンをオンまたはオフにすることもできます。タイトル バーをオフにすると、最小化/最大化ボタンを使用することはできません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    backgroundColor ([float, float, float]): ウィンドウのバックグラウンドのカラーを指定します。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    closeCommand (script): ウィンドウが閉じた後にスクリプトが実行されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): ウィンドウにタグをアタッチします。

    -----------------------------------------

    dockCorner ([string, string]): ウィンドウの4つのコーナーを占有していたドッキング領域を指定します。既定では、bottomまたはtopのドッキングウィンドウがウィンドウ全体に広がります。左右のドッキング領域がコーナーを占有できるようにするには、このフラグの複数のインスタンスを使用します。このメソッドには、ドッキングコーナーおよびドッキング領域の2つの引数があります。ドッキングコーナーの有効値は「topLeft」、「topRight」、「bottomLeft」、および「bottomRight」です。ドッキング領域の有効値は「left」、「right」、「top」、「bottom」です。

    -----------------------------------------

    dockStation (boolean): このフラグを設定した場合は、このウィンドウに他のドッキングサブウィンドウを含めることができます。

    -----------------------------------------

    dockingLayout (string): このフラグを照会すると、ドッキングレイアウト情報を含む文字列が返されます。この文字列は、ドッキングステーションを作成または編集して、直前のドッキングレイアウトを復元する場合に設定できます。この文字列はバイナリ文字列の16進数表現であり、可読形式ではありません。ただし、optionVarコマンドを使用してこの文字列を保存し、ロードすることにより、Mayaのセッション間でレイアウトを復元することができます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    frontWindow (boolean): 前面のウィンドウの名前を返します。注:任意のウィンドウ名を与える必要があります(ウィンドウが存在している必要はありません)。前面のウィンドウが定義できない場合、「unknown」を返します。

    -----------------------------------------

    height (int): ウィンドウフレームを除くウィンドウの高さをピクセル単位で指定します。

    -----------------------------------------

    iconName (string): ウィンドウのアイコンのタイトル。既定では、ウィンドウのタイトルと同じです。

    -----------------------------------------

    iconify (boolean): ウィンドウをアイコン化するかどうかを指定します。

    -----------------------------------------

    interactivePlacement (boolean): 廃止されたフラグです。認識されますが、実装されていません。Mayaの将来のバージョンで除去される予定です。

    -----------------------------------------

    leftEdge (int): ウィンドウの左端の位置を指定します。

    -----------------------------------------

    mainMenuBar (boolean): このフラグを使用すると、メインメニューバーが有効になります。

    -----------------------------------------

    mainWindow (boolean): アプリケーションのメインウィンドウにします。メインウィンドウは、ウィンドウマネージャのメニューに[終了]の項目があります。既定では最初に作成されたウィンドウがメインウィンドウになります。

    -----------------------------------------

    maximizeButton (boolean): ウィンドウの最大化ボタンをオンまたはオフにします。

    -----------------------------------------

    menuArray (boolean): ウィンドウのメニューバーにあるメニュー名を文字配列として返します。

    -----------------------------------------

    menuBar (boolean): ウィンドウに空のメニューバーを追加します。オブジェクトのQt名は、m_menubar_nameOfTheWindowになります。

    -----------------------------------------

    menuBarCornerWidget ([string, string]): このフラグは親ウィンドウのコーナーに追加するウィジェットを指定します。最初の引数はウィジェット名に、2番目の引数はウィジェットの位置に対応します。ウィジェットの位置の有効値は、「topLeft」、「topRight」、「bottomLeft」、「bottomRight」です。照会モードの場合、このフラグはすべてのコーナーウィジェットの名前をtopLeft、topRight、bottomLeft、bottomRightの順番で返します。渡されたウィジェット(最初の引数)のchangeCommandに-mbr/-menuBarResizeフラグを追加して、ウィジェットが常に適切なサイズになるようにします。

    -----------------------------------------

    menuBarResize (boolean): このフラグは-mcw/-menuBarCornerWidgetフラグと一緒に使用する必要があります。このフラグを使用すると、メニューバーのサイズが変更されて、コーナーのウィジェットが更新されます。

    -----------------------------------------

    menuBarVisible (boolean): メニューバーの表示/非表示(1つある場合)。

    -----------------------------------------

    menuIndex ([string, uint]): 指定したメニューのインデックスを設定します。

    -----------------------------------------

    minimizeButton (boolean): ウィンドウの最小化ボタンをオンまたはオフにします。

    -----------------------------------------

    minimizeCommand (script): ウィンドウを最小化(アイコン化)した後にスクリプトが実行されます。

    -----------------------------------------

    nestedDockingEnabled (boolean): ネストされたドッキングが有効かどうかを制御します。ネストされたドッキングでは、ドッキングされた他のウィンドウの横にドッキングウィンドウを配置できるため、使用可能な配置スタイルが増えます。

    -----------------------------------------

    numberOfMenus (boolean): ウィンドウのメニューバーにアタッチされているメニューの数を返します。

    -----------------------------------------

    parent (string): 親ウィンドウまたは親レイアウトを指定します。作成したウィンドウは、常にこれらの上に配置されます。注:親がウィンドウの場合、作成したウィンドウはモーダルでないため、イベントは引き続き親ウィンドウに伝播されます。

    -----------------------------------------

    resizeToFitChildren (boolean): ウィンドウ内のコントロールを、ウィンドウの拡大縮小に従ってフィットさせるようにします。

    -----------------------------------------

    restoreCommand (script): 最小化(アイコン化)した状態からウィンドウを復元した後にスクリプトが実行されます。

    -----------------------------------------

    retain (boolean): ウィンドウを閉じられた後も保持します。既定では、ウィンドウは閉じられた際に削除されます。

    -----------------------------------------

    sizeable (boolean): ウィンドウのサイズをインタラクティブに変更できるようにするかどうかを指定します。

    -----------------------------------------

    state (string): このフラグを照会すると、ウィンドウ状態情報を含む文字列が返されます。この文字列はバイナリ文字列の16進数表現であり、可読形式ではありません。ただし、optionVarコマンドを使用してこの文字列を保存し、ロードすることにより、Mayaのセッション間でウィンドウ状態を復元することができます。

    -----------------------------------------

    title (string): ウィンドウのタイトル。

    -----------------------------------------

    titleBar (boolean): ウィンドウのタイトルバーをオンまたはオフにします。

    -----------------------------------------

    titleBarMenu (boolean): タイトルバーメニューをウィンドウのタイトルバーに付けるかどうかを制御します。-tb/titleBarがtrueのときのみ有効です。Windowsのみのフラグで、既定の値はtrueです。

    -----------------------------------------

    toolbox (boolean): ウィンドウをツールボックススタイルにします。Windowsのみのフラグで、タイトルバーを小さくし、わずかに異なる表示スタイルを使用します。

    -----------------------------------------

    topEdge (int): ウィンドウの上端の位置を指定します。

    -----------------------------------------

    topLeftCorner ([int, int]): ウィンドウの左上隅の位置を指定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): ウィンドウを表示するかどうかを指定します。

    -----------------------------------------

    width (int): ウィンドウフレームを除くウィンドウの幅をピクセル単位で指定します。

    -----------------------------------------

    widthHeight ([int, int]): ウィンドウフレームを除くウィンドウの幅と高さをピクセル単位で指定します。

    -----------------------------------------

    Return Value:
    None: stringウィンドウの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def windowPref(enableAll: bool = False,exists: bool = False,height: int = 1,leftEdge: int = 1,loadAll: bool = False,maximized: bool = False,parentMain: bool = False,remove: bool = False,removeAll: bool = False,restoreMainWindowState: str = "",saveAll: bool = False,saveMainWindowState: str = "",topEdge: int = 1,topLeftCorner: Tuple[int, int] = tuple(1, 1),width: int = 1,widthHeight: Tuple[int, int] = tuple(1, 1)) -> None:
    """
    ウィンドウのアトリビュートを生成、修正します。ウィンドウのサイズや位置は、アプリケーションのセッションが変わっても維持されます。既定のウィンドウ プリファレンスは、ウィンドウを閉じたときに作成されます。ウィンドウのプリファレンスを指定する必要があります。したがって、その名前に一致するウィンドウにしか影響を及ぼしません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    enableAll (boolean): すべてのウィンドウプリファレンスを有効化/無効化します。既定では、プリファレンスは有効です。このフラグを無効にすると、ウィンドウではすべてのプリファレンスが無視されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかによって、trueまたはfalseを返します。他のフラグは無視されます。

    -----------------------------------------

    height (int): ウィンドウの高さを指定します。

    -----------------------------------------

    leftEdge (int): ウィンドウの左端の位置を指定します。

    -----------------------------------------

    loadAll (boolean): ディスクからウィンドウアトリビュートのファイルを読み込みます。

    -----------------------------------------

    maximized (boolean): ウィンドウを最大化します。

    -----------------------------------------

    parentMain (boolean): ウィンドウがメインアプリケーションウィンドウの親になるかどうかを指定します。Windowsのみ。

    -----------------------------------------

    remove (boolean): 1つのウィンドウプリファレンスを除去します。

    -----------------------------------------

    removeAll (boolean): すべてのウィンドウプリファレンスを除去します。

    -----------------------------------------

    restoreMainWindowState (string): メインウィンドウの状態(ツールボックスとドックコントロールの位置)のファイルを読み込みます。

    -----------------------------------------

    saveAll (boolean): ウィンドウのアトリビュートをファイルに書き出します。

    -----------------------------------------

    saveMainWindowState (string): メインウィンドウの状態(ツールボックスとドックコントロールの位置)をファイルに書き出します。

    -----------------------------------------

    topEdge (int): ウィンドウの上端の位置を指定します。

    -----------------------------------------

    topLeftCorner ([int, int]): ウィンドウの上端と左端の位置を指定します。

    -----------------------------------------

    width (int): ウィンドウの幅を指定します。

    -----------------------------------------

    widthHeight ([int, int]): ウィンドウの幅と高さを指定します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def workspaceControlState(defaultTopLeftCorner: Tuple[int, int] = tuple(1, 1),defaultWidthHeight: Tuple[int, int] = tuple(1, 1),exists: bool = False,height: int = 1,leftEdge: int = 1,maximized: bool = False,remove: bool = False,topEdge: int = 1,topLeftCorner: Tuple[int, int] = tuple(1, 1),width: int = 1,widthHeight: Tuple[int, int] = tuple(1, 1)) -> None:
    """
    ワークスペース コントロールの希望するウィンドウ アトリビュートを作成または修正します。ワークスペース コントロールのサイズや位置は、アプリケーション セッション中は保持されます(ただし、位置はフローティング ワークスペース ドッキング パネルに単独で存在するワークスペース コントロールのみに適用されます)。ワークスペース コントロールを閉じると、既定のワークスペース コントロールの状態が作成されます。ワークスペース コントロールの状態に名前を付ける必要があり、その後は一致する名前を持つワークスペース コントロールのみに影響します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    defaultTopLeftCorner ([int, int]): サイズと位置の記憶(Remembersizeandposition)がオフの場合に、このパネルを最初に開いたときのウィンドウの上端と左端の位置です。値は、編集時にはDPIスケーリングされますが、照会中はスケーリングされないで返されます。この値は、既定の幅と高さも有効である場合のみ使用されます。

    -----------------------------------------

    defaultWidthHeight ([int, int]): サイズと位置の記憶(Remembersizeandposition)がオフの場合に、このパネルを最初に開いたときのウィンドウの幅と高さです。値は、編集時にはDPIスケーリングされますが、照会中はスケーリングされないで返されます。この場合に使用される位置はdefaultTopLeftCornerです。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかによって、trueまたはfalseを返します。他のフラグは無視されます。

    -----------------------------------------

    height (int): ウィンドウの高さを指定します。

    -----------------------------------------

    leftEdge (int): ウィンドウの左端の位置を指定します。

    -----------------------------------------

    maximized (boolean): ウィンドウを最大化します。

    -----------------------------------------

    remove (boolean): 1つのウィンドウプリファレンスを除去します。

    -----------------------------------------

    topEdge (int): ウィンドウの上端の位置を指定します。

    -----------------------------------------

    topLeftCorner ([int, int]): ウィンドウの上端と左端の位置を指定します。

    -----------------------------------------

    width (int): ウィンドウの幅を指定します。

    -----------------------------------------

    widthHeight ([int, int]): ウィンドウの幅と高さを指定します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def workspacePanel(defineTemplate: str = "",exists: bool = False,mainWindow: bool = False,useTemplate: str = "") -> None:
    """
    ワークスペース パネル。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    mainWindow (boolean): アプリケーションのメインウィンドウにします。メインウィンドウは、ウィンドウマネージャのメニューに[終了]の項目があります。既定では最初に作成されたウィンドウがメインウィンドウになります。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringワークスペース パネルのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def canCreateCaddyManip() -> None:
    """
    このコマンドは、指定した選択項目にマニピュレータがある可能性がある場合は true を、なければ false を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: boolean照会した値
    """
    pass

    
def componentEditor(control: bool = False,defineTemplate: str = "",docTag: str = "",exists: bool = False,filter: str = "",floatField: str = "",floatSlider: str = "",forceMainConnection: str = "",hidePathName: bool = False,hideZeroColumns: bool = False,highlightConnection: str = "",lockInput: bool = False,lockMainConnection: bool = False,mainListConnection: str = "",newTab: Tuple[str, str, str] = tuple("", "", ""),operationCount: bool = False,operationLabels: bool = False,operationType: int = 1,panel: str = "",parent: str = "",precision: int = 1,removeTab: str = "",selected: bool = False,selectionConnection: str = "",setOperationLabel: Tuple[int, str] = tuple(1, ""),showObjects: bool = False,showSelected: bool = False,sortAlpha: bool = False,stateString: bool = False,unParent: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドは、現在のレイアウトに新規コンポーネント エディタを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    floatField (string): コンポーネントエディタが値のグループの編集に使用する浮動小数点フィールドを割り当てます。

    -----------------------------------------

    floatSlider (string): コンポーネントエディタが値のグループの編集に使用する浮動小数点スライダを割り当てます。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    hidePathName (boolean): 表示された要素のパス名を非表示にします。既定ではこのフラグはfalseに設定されています。

    -----------------------------------------

    hideZeroColumns (boolean): 要素がすべてゼロであるカラムを非表示にします。既定ではこのフラグはfalseに設定されています。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    lockInput (boolean): エディタがアクティブリストの変更に応答することができないようにします。選択項目の接続とは独立しています。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    newTab ([string, string, string]): 1番目の引数で名前を付けた新しいタブを、3番目の引数で指定したセットの要素を使用して2番目の引数として指定した既存のタブを基に作成します。

    -----------------------------------------

    operationCount (boolean): コンポーネントエディタ(ComponentEditor)に既知の操作タイプの総数を返します。

    -----------------------------------------

    operationLabels (boolean): エディタに既知のすべての操作タイプ用の名前を含んでいる文字配列を返します。

    -----------------------------------------

    operationType (int): 既知の操作タイプのどれを実行している必要があるかをエディタに知らせます。これは0から始まるインデックスです。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    precision (int): 小数点の右側に表示する最大桁数を指定します。0から20まで指定可能です。

    -----------------------------------------

    removeTab (string): 指定したセットに基づくタブを除去します。

    -----------------------------------------

    selected (boolean): 現在選択されているカラムのラベルを含む文字列のリストを返します。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    setOperationLabel ([int, string]): 整数インデックスで指定した既存の操作タイプの名前として文字列を使用します。このフラグで行われた変更をUIに通知できるようにするメッセージングシステムはないことに注意してください。

    -----------------------------------------

    showObjects (boolean): 現在のアクティブリストのカラムだけを表示します。

    -----------------------------------------

    showSelected (boolean): 現在選択されているカラムだけを表示します。既定ではこのフラグがfalseに設定されているため、すべてのカラムが選択されます。このフラグによる結果は、現在の-hideZeroColumns設定に依存します。

    -----------------------------------------

    sortAlpha (boolean): カラムのアルファベット順(true)または階層別ソートをコントロールします。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringパネル名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def contentBrowser(addContentPath: str = "",context: Tuple[str, str, str] = tuple("", "", ""),control: bool = False,defineTemplate: str = "",docTag: str = "",exists: bool = False,filter: str = "",forceMainConnection: str = "",highlightConnection: str = "",location: str = "",lockMainConnection: bool = False,mainListConnection: str = "",panel: str = "",parent: str = "",preview: bool = False,refreshTreeView: bool = False,removeContentPath: str = "",saveCurrentContext: bool = False,selectionConnection: str = "",stateString: bool = False,thumbnailView: bool = False,treeView: bool = False,unParent: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドを使用して、コンテンツ ブラウザを編集および照会します。コンテンツ ブラウザは固有のパネルなので、同時に存在できるインスタンスは 1 つのみです。オプションの引数はコントロールの名前です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addContentPath (string): 例(Examples)タブに表示されるライブラリに指定されたパスを追加します。対応するMAYA_CONTENT_PATH環境変数も更新します。

    -----------------------------------------

    context ([string, [, string, ], [, string, ]]): 指定されたコンテキストの既定の場所を指定します。2つのオプションの引数(Pythonのみ)は、カテゴリ(タブ)と場所です。コンテンツをクリアするには、カテゴリと場所の空の文字列を使用します。照会モードでは、コンテンツブラウザのコンテキストを3つの文字列(コンテキストの名前、既定のカテゴリ名、既定の場所)からなる配列で返します。

    -----------------------------------------

    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    location (string): 例(Examples)タブに切り替えて、指定されたライブラリの場所を選択します。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    preview (boolean): プレビューパネルの表示/非表示を切り替えます。注:このフラグは現在開かれているコンテンツブラウザには影響しませんが、その後に開くコンテンツブラウザには影響します。

    -----------------------------------------

    refreshTreeView (boolean): 例(Examples)タブのツリービューペインを強制的に更新します。

    -----------------------------------------

    removeContentPath (string): 例(Examples)タブに表示されるライブラリから指定されたパスを削除します。対応するMAYA_CONTENT_PATH環境変数も更新します。

    -----------------------------------------

    saveCurrentContext (boolean): 現在のコンテンツブラウザ(ContentBrowser)タブのコンテキストを保存します。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    thumbnailView (boolean): サムネイルパネルの表示/非表示を切り替えます。注:このフラグは現在開かれているコンテンツブラウザには影響しませんが、その後に開くコンテンツブラウザには影響します。

    -----------------------------------------

    treeView (boolean): ツリービューパネルの表示/非表示を切り替えます。注:このフラグは現在開かれているコンテンツブラウザには影響しませんが、その後に開くコンテンツブラウザには影響します。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringパネルの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def getPanel(allConfigs: bool = False,allPanels: bool = False,allScriptedTypes: bool = False,allTypes: bool = False,atPosition: Tuple[int, int] = tuple(1, 1),configWithLabel: str = "",containing: str = "",invisiblePanels: bool = False,scriptType: str = "",type: str = "",typeOf: str = "",underPointer: bool = False,visiblePanels: bool = False,withFocus: bool = False,withLabel: str = "") -> None:
    """
    このコマンドは、パネル、とパネル設定情報を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allConfigs (boolean): 文字配列にあるすべてのパネル設定の名前を返します。

    -----------------------------------------

    allPanels (boolean): 文字配列にある全パネル名を返します。

    -----------------------------------------

    allScriptedTypes (boolean): 文字配列にあるスクリプトに記述されたパネルの全タイプの名前を返します。

    -----------------------------------------

    allTypes (boolean): スクリプトに記述されたタイプ以外の、文字配列にある全パネルタイプ名を返します。

    -----------------------------------------

    atPosition ([int, int]): 指定した画面座標を含むパネル名を返します。これらの座標を含むパネルが存在しない場合は、空の文字列が返されます。

    -----------------------------------------

    configWithLabel (string): 指定したラベルテキストのあるパネル設定の名前を返します。

    -----------------------------------------

    containing (string): 指定したコントロールを含むパネル名を返します。指定したコントロールがどのパネルにもない場合、空の文字列を返します。

    -----------------------------------------

    invisiblePanels (boolean): 文字配列にあるすべての不可視パネル名を返します。

    -----------------------------------------

    scriptType (string): 文字配列にある、指定したタイプのスクリプトに記述された全パネル名を返します。

    -----------------------------------------

    type (string): 文字配列にある指定したタイプの全パネル名を返します。

    -----------------------------------------

    typeOf (string): 指定したパネルのタイプを返します。

    -----------------------------------------

    underPointer (boolean): 現在マウスカーソルが置かれているパネル名を返します。マウスカーソルがどのパネルにも置かれていない場合、空の文字列が返されます。

    -----------------------------------------

    visiblePanels (boolean): 文字配列にあるすべての可視パネル名を返します。

    -----------------------------------------

    withFocus (boolean): 現在、フォーカスのあるパネル名を返します。フォーカスのあるパネルがない場合、最後にフォーカスのあったパネルを返します。

    -----------------------------------------

    withLabel (string): 指定したラベルテキストのあるパネル名を返します。

    -----------------------------------------

    Return Value:
    None: string[]パネル名の配列
    """
    pass

    
def hardwareRenderPanel(camera: str = "",control: bool = False,copy: str = "",createString: bool = False,defineTemplate: str = "",docTag: str = "",editString: bool = False,exists: bool = False,glRenderEditor: bool = False,init: bool = False,isUnique: bool = False,label: str = "",menuBarRepeatLast: bool = False,menuBarVisible: bool = False,needsInit: bool = False,parent: str = "",popupMenuProcedure: str = "",replacePanel: str = "",tearOff: bool = False,tearOffCopy: str = "",tearOffRestore: bool = False,unParent: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドは、ハードウェア レンダー エディタだけを含むハードウェア レンダー パネルを作成、編集、照会します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    camera (string): glレンダーパネルのカメラを照会または編集します。

    -----------------------------------------

    control (boolean): このパネルの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:パネルにはコントロールがないことがあります。コントロールが存在しない場合、このフラグは""を返します。

    -----------------------------------------

    copy (string): このパネルを指定したパネルのコピーにします。両方のパネルは同じタイプである必要があります。

    -----------------------------------------

    createString (boolean): パネルの作成に使用するコマンド文字列

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): Mayaのパネルにタグをアタッチします。

    -----------------------------------------

    editString (boolean): パネルの編集に使用するコマンド文字列

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    glRenderEditor (boolean): 照会モード専用です。このフラグは、パネルに含まれるglレンダーエディタの名前を返します。

    -----------------------------------------

    init (boolean): パネルの既定の状態を初期化します。これは、file-newとfile-openによって自動的に実行されます。

    -----------------------------------------

    isUnique (boolean): このパネルタイプのインスタンスが1つだけ許可されている場合、trueを返します。

    -----------------------------------------

    label (string): ユーザが読みやすいパネル用ラベルを指定します。

    -----------------------------------------

    menuBarRepeatLast (boolean): メニューヘッダを中マウスボタンでクリックしたときに、最後に選択したメニュー項目を繰り返すかどうかをコントロールします。

    -----------------------------------------

    menuBarVisible (boolean): パネルのメニューバーを表示するかどうかを制御します。

    -----------------------------------------

    needsInit (boolean): (内部)OnEditは、初期化が必要なものとしてパネルをマークします。照会すると、初期化が必要なものとしてパネルがマークされているかどうかを返します。file-newとfile-openで使用されます。

    -----------------------------------------

    parent (string): このパネルの親のレイアウトを指定します。

    -----------------------------------------

    popupMenuProcedure (script): パネルのポップアップメニューを作成するためにコールされるプロシージャを指定します。既定値は「buildPanelPopupMenu」です。プロシージャは、パネル名である文字列引数を持つ必要があります。

    -----------------------------------------

    replacePanel (string): 指定したパネルをこのパネルと置き換えます。ターゲットパネルが同じレイアウト内にある場合、入れ替えを実行します。

    -----------------------------------------

    tearOff (boolean): このパネルを切り離し、パネルの親としてのpaneLayoutを持つフローティングウィンドウにします。照会すると、パネルが独自のウィンドウに切り離されたかどうかを返します。

    -----------------------------------------

    tearOffCopy (string): このパネルを、指定したソースパネルのコピーを切り離したウィンドウとして作成します。

    -----------------------------------------

    tearOffRestore (boolean): パネルが切り離されていて、フォーカスされている場合に、パネルを復元します。パネルがドッキングされている場合は、ドッキングされたウィンドウ内でアクティブなパネルになります。パネルを切り離す場合のみに使用される-to/-tearOffフラグではなく、このフラグをすべてのパネルに追加される既定のフラグにする必要があります。

    -----------------------------------------

    unParent (boolean): パネルをそのレイアウトから除去するように指定します。照会には使用できません。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringパネル名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def hotkeyEditorPanel(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    hotkeyEditor は現在のレイアウト内に新しいホットキー エディタを作成します。ホットキー エディタを使用すると、定義済みコマンド、MEL スクリプトまたはマーキング メニューをキーやキーの組み合わせに割り当てることができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringエディタへのフル パス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def hyperGraph(addBookmark: bool = False,addDependGraph: str = "",addDependNode: str = "",animateTransition: bool = False,attributeEditor: str = "",backward: bool = False,bookmarkName: bool = False,breakConnectionCommand: str = "",clear: bool = False,collapseContainer: bool = False,connectionDrawStyle: str = "",control: bool = False,currentEdge: str = "",currentNode: str = "",debug: str = "",defineTemplate: str = "",deleteBookmark: str = "",dependGraph: bool = False,dependNode: str = "",directoryPressCommand: str = "",docTag: str = "",down: bool = False,downstream: bool = False,dragAndDropBehaviorCommand: str = "",dropNode: str = "",dropTargetNode: str = "",edgeDblClickCommand: str = "",edgeDimmedDblClickCommand: str = "",edgeDropCommand: str = "",edgePressCommand: str = "",edgeReleaseCommand: str = "",enableAutomaticLayout: bool = False,exists: bool = False,expandContainer: bool = False,feedbackGadget: str = "",feedbackNode: str = "",filter: str = "",filterDetail: Tuple[str, bool] = tuple("", False),fitImageToHeight: bool = False,fitImageToWidth: bool = False,focusCommand: str = "",fold: bool = False,forceMainConnection: str = "",forceRefresh: bool = False,forward: bool = False,frame: bool = False,frameBranch: bool = False,frameGraph: bool = False,frameGraphNoRebuild: bool = False,frameHierarchy: bool = False,freeform: bool = False,fromAttr: str = "",fromNode: str = "",getNodeList: bool = False,getNodePosition: str = "",graphDescription: bool = False,graphLayoutStyle: str = "",graphType: str = "",heatMapDisplay: bool = False,highlightConnection: str = "",iconSize: str = "",image: str = "",imageEnabled: bool = False,imageForContainer: bool = False,imagePosition: Tuple[float, float] = tuple(1.0, 1.0),imageScale: float = 1.0,initializeScript: str = "",isHotkeyTarget: bool = False,layout: bool = False,layoutSelected: str = "",limitGraphTraversal: int = 1,lockMainConnection: bool = False,look: Tuple[float, float] = tuple(1.0, 1.0),mainListConnection: str = "",mergeConnections: bool = False,navigateHome: bool = False,navup: bool = False,newInputConnection: str = "",newOutputConnection: str = "",nextView: bool = False,nodeConnectCommand: str = "",nodeDblClickCommand: str = "",nodeDropCommand: str = "",nodeMenuCommand: str = "",nodePressCommand: str = "",nodeReleaseCommand: str = "",opaqueContainers: bool = False,orientation: str = "",panView: Tuple[float, float] = tuple(1.0, 1.0),panel: str = "",parent: str = "",popupMenuScript: str = "",previousView: bool = False,range: Tuple[float, float] = tuple(1.0, 1.0),rebuild: bool = False,removeNode: str = "",rename: bool = False,resetFreeform: bool = False,restoreBookmark: str = "",scrollUpDownNoZoom: bool = False,selectionConnection: str = "",setNodePosition: Tuple[str, float, float] = tuple("", 1.0, 1.0),showCachedConnections: bool = False,showConnectionFromSelected: bool = False,showConnectionToSelected: bool = False,showConstraintLabels: bool = False,showConstraints: bool = False,showDeformers: bool = False,showExpressions: bool = False,showInvisible: bool = False,showRelationships: bool = False,showShapes: bool = False,showUnderworld: bool = False,stateString: bool = False,toAttr: str = "",toNode: str = "",transitionFrames: int = 1,unParent: bool = False,unfold: bool = False,unfoldAll: bool = False,unfoldAllShapes: bool = False,unfoldHidden: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,updateNodeAdded: bool = False,updateSelection: bool = False,upstream: bool = False,useDrawOverrideColor: bool = False,useFeedbackList: bool = False,useTemplate: str = "",viewOption: str = "",visibility: bool = False,zoom: float = 1.0) -> None:
    """
    ハイパーグラフ(Hypergraph)の基本機能の概要を以下に示します。詳細は、ユーザ マニュアルを参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addBookmark (boolean): 現在のハイパーグラフビューのブックマークを作成します。

    -----------------------------------------

    addDependGraph (name): 指定したノードで始まるディペンデンシーグラフをビューに追加します。

    -----------------------------------------

    addDependNode (name): ディペンデンシーノードをディペンデンシーグラフビューに追加します。

    -----------------------------------------

    animateTransition (boolean): アニメートトランジションをオフまたはオンにします。

    -----------------------------------------

    attributeEditor (string): 選択したノードでアトリビュートエディタ(AttributeEditor)を起動します。

    -----------------------------------------

    backward (boolean): 逆方向に1ステップ移動します。

    -----------------------------------------

    bookmarkName (boolean): 最も新しく作成されたブックマークの名前を返します。

    -----------------------------------------

    breakConnectionCommand (string): 接続が切断されたときに呼び出すコマンドを指定します。

    -----------------------------------------

    clear (boolean): 現在のハイパーグラフビューをクリアしてグラフUIを削除します(-rebuildフラグも参照してください)。

    -----------------------------------------

    collapseContainer (boolean): DGグラフで選択したコンテナを折り畳みます。

    -----------------------------------------

    connectionDrawStyle (string): ノード間の接続の描画方法を指定します。有効な値は「center」(ノードの中心から別のノードの中心へ接続ラインを引く)および「side」(ソースノードの右側から、接続先ノードの左側へ接続ラインを引く)です。既定は「center」です。このフラグはハイパーシェード(Hypershade)グラフには適用されません。これには、常に「side」の接続描画スタイルが適用されます。

    -----------------------------------------

    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    currentEdge (string): 現在のエッジの名前を返します。

    -----------------------------------------

    currentNode (string): 現在のノード名を返します。

    -----------------------------------------

    debug (string): グラフでデバッグメソッドを実行します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    deleteBookmark (string): 対応するノード名のブックマークを削除します。

    -----------------------------------------

    dependGraph (boolean): 指定したノードから繰り返されるディペンデンシーグラフを表示します。

    -----------------------------------------

    dependNode (string): ビューにディペンデンシーノードを表示します。

    -----------------------------------------

    directoryPressCommand (string): ディレクトリが押されたときに実行するコマンドを指定します。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    down (boolean): 現在の選択を含むディペンデンシーグラフを下方に移動します。上流接続と下流接続を示します。

    -----------------------------------------

    downstream (boolean): 選択したノードの下流のディペンデンシーグラフを表示します。

    -----------------------------------------

    dragAndDropBehaviorCommand (string): ハイパーグラフノードにドラッグ＆ドロップした場合にコールされるMelプロシージャです。ProcシグネチャはprocName(string$editor、string$sourceNode、string$destinationNode)です。

    -----------------------------------------

    dropNode (string): ドロップの処理時にコールすると、ドラッグ＆ドロップ接続のソースノードの名前を返します。

    -----------------------------------------

    dropTargetNode (string): ドロップの処理時にコールすると、ドラッグ＆ドロップ接続の接続先ノードの名前を返します。

    -----------------------------------------

    edgeDblClickCommand (string): エッジをダブルクリックするとコールされるMELプロシージャです。ProcシグネチャはprocName(string$editor、string$edge)です。

    -----------------------------------------

    edgeDimmedDblClickCommand (string): 薄く表示されたエッジをダブルクリックするとコールされるMELプロシージャです。ProcシグネチャはprocName(string$editor、string$edge)です。

    -----------------------------------------

    edgeDropCommand (string): エッジがドロップされたときに実行するコマンドです。

    -----------------------------------------

    edgePressCommand (string): エッジが押されたときに実行するコマンドです。

    -----------------------------------------

    edgeReleaseCommand (string): エッジがリリースされたときに実行するコマンドです。

    -----------------------------------------

    enableAutomaticLayout (boolean): ドラッグ＆ドロップまたはdgメッセージでグラフにノードが追加または除去された場合に、グラフを再構築します。既定はtrueです。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    expandContainer (boolean): DGグラフで選択したコンテナを展開します。

    -----------------------------------------

    feedbackGadget (string): 現在のガジェットの名前を返します。

    -----------------------------------------

    feedbackNode (string): 現在のフィードバックまたはハイライトノードの名前を返します。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    filterDetail ([string, boolean]): このフラグは現在サポートしていません。この代わりに、showConstraints、showExpressions、showDeformer、showInvisible、showShapes、およびshowUnderworldフラグを使用します。

    -----------------------------------------

    fitImageToHeight (boolean): バックグラウンドイメージの位置とスケールを変更し、高さを現在のエディタビューに合わせます。

    -----------------------------------------

    fitImageToWidth (boolean): バックグラウンドイメージの位置とスケールを変更し、幅を現在のエディタビューに合わせます。

    -----------------------------------------

    focusCommand (string): ハイパーグラフでマウスをクリックすると実行されるMELプロシージャです。主にウィンドウのフォーカスを設定するときに使用します。

    -----------------------------------------

    fold (boolean): 選択したオブジェクトを折り畳みます。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    forceRefresh (boolean): ハイパーグラフで強制的にコンテンツをリフレッシュ(再描画)します。

    -----------------------------------------

    forward (boolean): 順方向に1ステップ移動します。

    -----------------------------------------

    frame (boolean): 選択したオブジェクトをフレーム構成します。

    -----------------------------------------

    frameBranch (boolean): 選択したノードの下位にある大枝をフレーム構成します。

    -----------------------------------------

    frameGraph (boolean): グラフ全体をフレーム構成します。

    -----------------------------------------

    frameGraphNoRebuild (boolean): 効率を高めるために、縮小ズーム時はグラフを再構築しないように指定します。

    -----------------------------------------

    frameHierarchy (boolean): 選択したノードを含む階層をフレーム構成します。

    -----------------------------------------

    freeform (boolean): フリーフォームレイアウトモードを有効にします。

    -----------------------------------------

    fromAttr (string): ドロップの処理時にコールすると、ドラッグ＆ドロップ接続のソースアトリビュートの名前を返します。

    -----------------------------------------

    fromNode (string): ドロップの処理時にコールすると、ドラッグ＆ドロップ接続のソースノードの名前を返します。

    -----------------------------------------

    getNodeList (boolean): グラフのすべてのノードリストを示す文字配列を返します。

    -----------------------------------------

    getNodePosition (string): 指定したノードの位置を(x,y)グラフで返します。このフラグと引数は、-qフラグより前にコマンドに渡されなければなりません(例を参照)。照会モードでは、このフラグは値を受け入れることができます。

    -----------------------------------------

    graphDescription (boolean): 使用されている場合、現在のグラフの説明を返します。

    -----------------------------------------

    graphLayoutStyle (string): このフラグは現在サポートしていません。サポートされる唯一のグラフレイアウトスタイルは「hierarchicalLayout」です。これ以外のスタイルを使用すると、警告がトリガされます。

    -----------------------------------------

    graphType (string): ビュー内にある現在のグラフのタイプ名を返します(DAGまたはDGのいずれか)。

    -----------------------------------------

    heatMapDisplay (boolean): ヒートマップを表示するかどうかを指定します。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    iconSize (string): このハイパーグラフエディタ用のアイコンサイズを設定または照会します。現在許可されているアイコンサイズは、「smallIcons」、「mediumIcons」、「largeIcons」、および「superIcons」です。

    -----------------------------------------

    image (string): プロジェクトイメージディレクトリからロードされるバックグラウンドイメージを指定します。

    -----------------------------------------

    imageEnabled (boolean): ロードしたバックグラウンドイメージの表示を有効にします(フリーフォームDAGビューまたはDGビュー)。

    -----------------------------------------

    imageForContainer (boolean): 次のフラグがイメージ全体ではなく選択したコンテナで動作するように指定します。-imageScale、-imagePosition、fitImageToWidth、-fitImageToHeight、-image

    -----------------------------------------

    imagePosition ([float, float]): バックグラウンドイメージの位置です。

    -----------------------------------------

    imageScale (float): バックグラウンドイメージの均一なスケールです。

    -----------------------------------------

    initializeScript (string): グラフが初期化されたときに呼び出すスクリプトです。

    -----------------------------------------

    isHotkeyTarget (boolean): 内部使用のためのフラグです。

    -----------------------------------------

    layout (boolean): グラフで自動レイアウトを実行します。

    -----------------------------------------

    layoutSelected (string): このフラグは現在サポートしていません。サポートされる唯一のグラフレイアウトスタイルは「hierarchicalLayout」です。これ以外のスタイルを使用すると、警告がトリガされます。

    -----------------------------------------

    limitGraphTraversal (int): 特定のレベル数にグラフ走査を制限します。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    look ([float, float]): グラフビューの座標を調べます。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    mergeConnections (boolean): 接続のグループを「太い」接続にマージします。

    -----------------------------------------

    navigateHome (boolean): ホーム(DAGノード)ビューに移動します。

    -----------------------------------------

    navup (boolean): 現在の選択を含むディペンデンシーグラフを上方に移動します。上流接続と下流接続を示します。

    -----------------------------------------

    newInputConnection (string): 入力側の新しい接続を指定します。

    -----------------------------------------

    newOutputConnection (string): 出力側の新しい接続を指定します。

    -----------------------------------------

    nextView (boolean): ビューが次のDAGノードビューに変わります。

    -----------------------------------------

    nodeConnectCommand (string): ノードが接続されたときに呼び出すコマンドです。

    -----------------------------------------

    nodeDblClickCommand (string): ノードをダブルクリックしたときに呼び出すコマンドです。

    -----------------------------------------

    nodeDropCommand (string): ノードがハイパーグラフウィンドウでドロップされるときにコールされるコマンドを設定します。

    -----------------------------------------

    nodeMenuCommand (string): ノードメニューがアクティブ化されたときに呼び出すコマンドです。

    -----------------------------------------

    nodePressCommand (string): カーソルがハイパーグラフウィンドウのノード上にある場合に、マウスボタンを押したときにコールされるコマンドを設定します。

    -----------------------------------------

    nodeReleaseCommand (string): カーソルがハイパーグラフウィンドウのノード上にある場合に、マウスボタンを離したときにコールされるコマンドを設定します。

    -----------------------------------------

    opaqueContainers (boolean): 展開したコンテナのバックグラウンドの不透明度を設定します。

    -----------------------------------------

    orientation (string): 次のいずれかのグラフの方向スタイルを選択します。「horiz」または「vert」です。

    -----------------------------------------

    panView ([float, float]): 新しいビューの中心にパンします。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    popupMenuScript (string): このハイパーグラフのコントロールがあるポップアップメニューを登録するためにコールするスクリプトを設定します。このスクリプトは、ポップアップメニューの親になるコントロールを持つ、ハイパーグラフの名前を指定する文字列引数と一緒にコールされます。

    -----------------------------------------

    previousView (boolean): ビューが前のDAGノードビューに変わります。

    -----------------------------------------

    range ([float, float]): ノードの表示を範囲内のノードのみに限定します。2つのfloat値が予想されます。1つ目は範囲の下限しきい値、2つ目は上限しきい値です。値は、パーセンテージではなく、絶対時間値です。

    -----------------------------------------

    rebuild (boolean): グラフを再構築します。

    -----------------------------------------

    removeNode (string): 文字列で識別されたノードをグラフから除去します。

    -----------------------------------------

    rename (boolean): 選択したオブジェクトの上にテキストフィールドをポップアップし、名前を変更します。

    -----------------------------------------

    resetFreeform (boolean): すべてのノードの自由形式の位置をリセットします。

    -----------------------------------------

    restoreBookmark (string): ブックマークに対応するビューを復元します。

    -----------------------------------------

    scrollUpDownNoZoom (boolean): フリーズームモードでないとき、Yのみに沿ったスクロールをする場合に指定します。既定では、ハイパーグラフエディタを使用して左右にパンできます。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    setNodePosition ([string, float, float]): 文字列で識別されたノードを、2つのfloatで指定したウインドウの(x,y)位置に設定します。そのノードがグラフ内にない場合は、グラフに追加されてから新しい位置に移動されます。

    -----------------------------------------

    showCachedConnections (boolean): キャッシュされた接続を表示するかどうかを指定します。

    -----------------------------------------

    showConnectionFromSelected (boolean): 選択したノードから離れた接続(コンストレイント、エクスプレッション、デフォーマ。例についてはshowConstraintsを参照)を表示します。これをshowConnectionToSelectedと組み合わせると、到着した接続と離れた接続の両方が表示されます。両方のフラグがfalseである場合、すべての接続が表示されます。

    -----------------------------------------

    showConnectionToSelected (boolean): 選択したノードに到着した接続(コンストレイント、エクスプレッション、デフォーマ。例についてはshowConstraintsを参照)を表示します。これをshowConnectionFromSelectedと組み合わせると、到着した接続と離れた接続の両方が表示されます。両方のフラグがfalseである場合、すべての接続が表示されます。

    -----------------------------------------

    showConstraintLabels (boolean): コンストレイントラベルを表示するかどうかを指定します。

    -----------------------------------------

    showConstraints (boolean): コンストレイントのリレーションをDAGノードで表示します。

    -----------------------------------------

    showDeformers (boolean): デフォーマまたはジオメトリフィルタのリレーションをDAGノードで表示します。

    -----------------------------------------

    showExpressions (boolean): エクスプレッションのリレーションをDAGノードで表示します。

    -----------------------------------------

    showInvisible (boolean): 非表示のノードをDAGノードで表示します。

    -----------------------------------------

    showRelationships (boolean): リレーションシップ(メッセージ)接続を表示します。

    -----------------------------------------

    showShapes (boolean): シェイプノードをDAGノードで表示します。

    -----------------------------------------

    showUnderworld (boolean): 下層グラフをDAGノードで表示します。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    toAttr (string): ドロップの処理時にコールすると、ドラッグ＆ドロップ接続の接続先アトリビュートの名前を返します。

    -----------------------------------------

    toNode (string): ドロップの処理時にコールすると、ドラッグ＆ドロップ接続の接続先ノードの名前を返します。

    -----------------------------------------

    transitionFrames (int): アニメートトランジション用のトランジションフレームの数を指定します。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unfold (boolean): 選択したオブジェクトを展開します。

    -----------------------------------------

    unfoldAll (boolean): 選択したオブジェクトの下位にあるすべてを展開します。

    -----------------------------------------

    unfoldAllShapes (boolean): すべてのシェイプを展開します。

    -----------------------------------------

    unfoldHidden (boolean): 非表示にしたオブジェクトをすべて表示します。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    updateNodeAdded (boolean): 新しいノードがデータベースに追加された場合にグラフを更新します。

    -----------------------------------------

    updateSelection (boolean): データベースの選択状態が変わった場合にグラフの選択状態を更新します。

    -----------------------------------------

    upstream (boolean): 選択したノードの上流のディペンデンシーグラフを表示します。

    -----------------------------------------

    useDrawOverrideColor (boolean): 描画オーバーライドカラーを使用するかどうかを指定します。

    -----------------------------------------

    useFeedbackList (boolean): 他のハイパーグラフコマンドラインオプションを処理しているときに、フィードバックまたはハイライトリストをターゲット選択として使用します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    viewOption (string): このハイパーグラフエディタ用のビューのオプションを設定または照会します。現在のところ使用できるビューは、「asIcons」および「asList」です。

    -----------------------------------------

    visibility (boolean): 選択したノードの可視の状態を設定します。

    -----------------------------------------

    zoom (float): アニメートトランジションのズーム係数を指定します。

    -----------------------------------------

    Return Value:
    None: stringパネルの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def hyperPanel(control: bool = False,copy: str = "",createString: bool = False,defineTemplate: str = "",docTag: str = "",editString: bool = False,exists: bool = False,hyperEditor: bool = False,init: bool = False,isUnique: bool = False,label: str = "",menuBarRepeatLast: bool = False,menuBarVisible: bool = False,needsInit: bool = False,parent: str = "",popupMenuProcedure: str = "",replacePanel: str = "",tearOff: bool = False,tearOffCopy: str = "",tearOffRestore: bool = False,unParent: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドは、ハイパーグラフ(Hypergraph)エディタだけを含むハイパーグラフ パネルを作成、編集、および照会します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    control (boolean): このパネルの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:パネルにはコントロールがないことがあります。コントロールが存在しない場合、このフラグは""を返します。

    -----------------------------------------

    copy (string): このパネルを指定したパネルのコピーにします。両方のパネルは同じタイプである必要があります。

    -----------------------------------------

    createString (boolean): パネルの作成に使用するコマンド文字列

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): Mayaのパネルにタグをアタッチします。

    -----------------------------------------

    editString (boolean): パネルの編集に使用するコマンド文字列

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    hyperEditor (boolean): このフラグは、パネルに含まれるハイパーグラフ(Hypergraph)エディタの名前を返します。

    -----------------------------------------

    init (boolean): パネルの既定の状態を初期化します。これは、file-newとfile-openによって自動的に実行されます。

    -----------------------------------------

    isUnique (boolean): このパネルタイプのインスタンスが1つだけ許可されている場合、trueを返します。

    -----------------------------------------

    label (string): ユーザが読みやすいパネル用ラベルを指定します。

    -----------------------------------------

    menuBarRepeatLast (boolean): メニューヘッダを中マウスボタンでクリックしたときに、最後に選択したメニュー項目を繰り返すかどうかをコントロールします。

    -----------------------------------------

    menuBarVisible (boolean): パネルのメニューバーを表示するかどうかを制御します。

    -----------------------------------------

    needsInit (boolean): (内部)OnEditは、初期化が必要なものとしてパネルをマークします。照会すると、初期化が必要なものとしてパネルがマークされているかどうかを返します。file-newとfile-openで使用されます。

    -----------------------------------------

    parent (string): このパネルの親のレイアウトを指定します。

    -----------------------------------------

    popupMenuProcedure (script): パネルのポップアップメニューを作成するためにコールされるプロシージャを指定します。既定値は「buildPanelPopupMenu」です。プロシージャは、パネル名である文字列引数を持つ必要があります。

    -----------------------------------------

    replacePanel (string): 指定したパネルをこのパネルと置き換えます。ターゲットパネルが同じレイアウト内にある場合、入れ替えを実行します。

    -----------------------------------------

    tearOff (boolean): このパネルを切り離し、パネルの親としてのpaneLayoutを持つフローティングウィンドウにします。照会すると、パネルが独自のウィンドウに切り離されたかどうかを返します。

    -----------------------------------------

    tearOffCopy (string): このパネルを、指定したソースパネルのコピーを切り離したウィンドウとして作成します。

    -----------------------------------------

    tearOffRestore (boolean): パネルが切り離されていて、フォーカスされている場合に、パネルを復元します。パネルがドッキングされている場合は、ドッキングされたウィンドウ内でアクティブなパネルになります。パネルを切り離す場合のみに使用される-to/-tearOffフラグではなく、このフラグをすべてのパネルに追加される既定のフラグにする必要があります。

    -----------------------------------------

    unParent (boolean): パネルをそのレイアウトから除去するように指定します。照会には使用できません。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringパネルの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def hyperShade(assign: str = "",clearWorkArea: bool = False,collapse: str = "",createNode: str = "",dependGraphArea: bool = False,downStream: bool = False,duplicate: bool = False,fixRenderSize: bool = False,incremental: bool = False,listDownstreamNodes: str = "",listDownstreamShaderNodes: str = "",listUpstreamNodes: str = "",name: str = "",networks: bool = False,noSGShapes: bool = False,noShapes: bool = False,noTransforms: bool = False,objects: str = "",renderCreateAndDrop: str = "",reset: bool = False,resetGraph: bool = False,resetSwatch: bool = False,setAllowsRegraphing: bool = False,setWorkArea: str = "",shaderNetwork: str = "",shaderNetworks: bool = False,shaderNetworksSelectMaterialNodes: bool = False,snapShot: bool = False,uncollapse: str = "",upStream: bool = False,userDefinedLayout: bool = False,workAreaAddCmd: str = "",workAreaDeleteCmd: str = "",workAreaSelectCmd: str = "") -> None:
    """
    ハイパーグラフ(Hypergraph)でシェーダを編集をするためのコマンドです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    assign (string): 指定したシェーダノードをアクティブリストのレンダリング可能なオブジェクトに割り当てます。このノードは、シェーディンググループ、またはシェーディンググループにアタッチされたシェーダノードのどちらかです。

    -----------------------------------------

    clearWorkArea (boolean): 現在の作業領域をスタックへと押し込み、作業領域をクリアします。

    -----------------------------------------

    collapse (string): 指定したノードより上流にあるノードを非表示にします。

    -----------------------------------------

    createNode (string): 指定したタイプのノードを作成します。これはイメージブラウザから、またはVisorCreateフォルダのノードを右クリックして表示する、コンテキスト依存メニューからドラッグ＆ドロップして、新規のレンダリングノードが作成されるときにコールされます。

    -----------------------------------------

    dependGraphArea (boolean): 作業領域を設定したときに作業領域が存在しない場合、このフラグは、ディペンデンシーグラフまたはフォルダビューである新しいグラフを作成する必要があることを示します。

    -----------------------------------------

    downStream (boolean): 指定したノードの下流にあるノードを表示します。

    -----------------------------------------

    duplicate (boolean): 上流ノードを複製します。ノードがシェーダで、シェーディンググループが存在するときは、複製にそのシェーディンググループが含まれていることを確認してください。

    -----------------------------------------

    fixRenderSize (boolean): trueに設定した場合、ズームするにつれてスウォッチのサイズが変わっても、再レンダーしません。

    -----------------------------------------

    incremental (boolean): 新規ノードや接続を作成するときに漸増レイアウトを有効/無効にします。

    -----------------------------------------

    listDownstreamNodes (name): 指定したノードの下流にあるすべてのレンダーノードをリスト表示します。

    -----------------------------------------

    listDownstreamShaderNodes (name): 指定したノードよりも下流にあるすべてのシェーダノードをリスト表示します。

    -----------------------------------------

    listUpstreamNodes (name): 指定したノードよりも上流にあるすべてのレンダーノードをリスト表示します。

    -----------------------------------------

    name (string): このコマンドで作成した作業領域の名前です。

    -----------------------------------------

    networks (boolean): 現在のセレクションリストと現在の作業領域にあるすべてのノードに漸増レイアウトを実行します。

    -----------------------------------------

    noSGShapes (boolean): ネットワークにある、シェーディンググループ以外のノードに接続されたシェイプのみを表示します。

    -----------------------------------------

    noShapes (boolean): ネットワークのグラフ時にシェイプを表示しません。

    -----------------------------------------

    noTransforms (boolean): ネットワークのグラフ時にトランスフォームを表示しません。

    -----------------------------------------

    objects (string): 指定したシェーダノードにアタッチされているオブジェクトを選択します。このシェーダノードは、シェーディンググループ、またはシェーディンググループにアタッチされたシェーダのどちらかです。このフラグの引数が空の文字列の場合は、現在選択されているシェーダノードを入力として使用します。

    -----------------------------------------

    renderCreateAndDrop (string): 指定したタイプのレンダーノードを作成して、それを配置または接続するためにドラッグ＆ドロップモードにします。

    -----------------------------------------

    reset (boolean): ハイパーシェード(Hypershade)パネルを初期状態にリセットします。特に、作業領域はすべて削除されます。

    -----------------------------------------

    resetGraph (boolean): 現在のグラフをリセットします。通常、ハイパーシェード(Hypershade)ビューのフォルダを再構築する前にコールします。

    -----------------------------------------

    resetSwatch (boolean): 選択したすべてのノードに対して、ノードにユーザ定義のスウォッチがある場合は、そのスウォッチを除去します。

    -----------------------------------------

    setAllowsRegraphing (boolean): 内部使用限定。

    -----------------------------------------

    setWorkArea (string): 作業領域を既存の指定した作業領域に設定します。

    -----------------------------------------

    shaderNetwork (string): 指定したマテリアルノードのシェーダネットワークを表示します。マテリアルのシェーディンググループにディスプレイスメントまたはボリュームマップがあれば、それらも表示されます。それらがない場合、シェーディンググループは表示されません。

    -----------------------------------------

    shaderNetworks (boolean): シェーダがあるセレクションリストの、すべてのオブジェクトのシェーダネットワークを表示します。

    -----------------------------------------

    shaderNetworksSelectMaterialNodes (boolean): セレクションリスト上の、シェーダが適用されたオブジェクト用のシェーダネットワーク内のマテリアルノードを選択します。

    -----------------------------------------

    snapShot (boolean): ハイパーグラフ(Hypergraph)をスナップショット(Snapshot)モードにします(これはテスト専用です)。

    -----------------------------------------

    uncollapse (string): 指定したノードから上流にあるノードを表示します。

    -----------------------------------------

    upStream (boolean): 指定したノードの上流にあるノードを表示します。

    -----------------------------------------

    userDefinedLayout (boolean): ユーザ定義のレイアウト情報の保存を有効/無効にします。既定設定は、この機能がもっと入念にテストされるまで無効です。

    -----------------------------------------

    workAreaAddCmd (string): 新規の作業領域をハイパーシェード(Hypershade)に追加すときにコールされるMELプロシージャを設定します。

    -----------------------------------------

    workAreaDeleteCmd (string): 作業領域をハイパーシェード(Hypershade)から削除するときにコールされるMELプロシージャを設定します。

    -----------------------------------------

    workAreaSelectCmd (string): 作業領域をハイパーシェード(Hypershade)で選択するときにコールされるMELプロシージャを設定します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def inViewEditor(visible: bool = False) -> None:
    """
    Mel はビュー内エディタにアクセスします。ビュー内エディタにはノードのアトリビュートのカスタマイズ可能なサブセットが表示され、ユーザーはチャネル ボックスまたはアトリビュート エディタを開かずに、シーン内で直接アトリビュートを調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    visible (boolean): マニピュレータを表示するコンテキストの外部でビュー内エディタを表示/非表示にします。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def modelEditor(activeComponentsXray: bool = False,activeCustomEnvironment: str = "",activeCustomGeometry: str = "",activeCustomLighSet: str = "",activeCustomOverrideGeometry: str = "",activeCustomRenderer: str = "",activeOnly: bool = False,activeShadingGraph: str = "",activeView: bool = False,addObjects: str = "",addSelected: bool = False,addSelectedObjects: bool = False,allObjects: bool = False,backfaceCulling: bool = False,bufferMode: str = "",bumpResolution: Tuple[int, int] = tuple(1, 1),camera: str = "",cameraName: str = "",cameraSet: str = "",cameraSetup: bool = False,cameras: bool = False,capture: str = "",captureSequenceNumber: int = 1,clipGhosts: bool = False,cmEnabled: bool = False,colorMap: bool = False,colorResolution: Tuple[int, int] = tuple(1, 1),control: bool = False,controlVertices: bool = False,cullingOverride: str = "",default: bool = False,defineTemplate: str = "",deformers: bool = False,dimensions: bool = False,displayAppearance: str = "",displayLights: str = "",displayTextures: bool = False,docTag: str = "",dynamicConstraints: bool = False,dynamics: bool = False,editorChanged: str = "",exists: bool = False,exposure: float = 1.0,filter: str = "",filteredObjectList: bool = False,fluids: bool = False,fogColor: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0),fogDensity: float = 1.0,fogEnd: float = 1.0,fogMode: str = "",fogSource: str = "",fogStart: float = 1.0,fogging: bool = False,follicles: bool = False,forceMainConnection: str = "",gamma: float = 1.0,greasePencils: bool = False,grid: bool = False,hairSystems: bool = False,handles: bool = False,headsUpDisplay: bool = False,height: bool = False,highlightConnection: str = "",hulls: bool = False,ignorePanZoom: bool = False,ikHandles: bool = False,imagePlane: bool = False,interactive: bool = False,interactiveBackFaceCull: bool = False,interactiveDisableShadows: bool = False,isFiltered: bool = False,jointXray: bool = False,joints: bool = False,lights: bool = False,lineWidth: float = 1.0,locators: bool = False,lockMainConnection: bool = False,lowQualityLighting: bool = False,mainListConnection: str = "",manipulators: bool = False,maxConstantTransparency: float = 1.0,maximumNumHardwareLights: bool = False,modelPanel: str = "",motionTrails: bool = False,nCloths: bool = False,nParticles: bool = False,nRigids: bool = False,noUndo: bool = False,nurbsCurves: bool = False,nurbsSurfaces: bool = False,objectFilter: str = "",objectFilterList: str = "",objectFilterListUI: str = "",objectFilterShowInHUD: bool = False,objectFilterUI: str = "",occlusionCulling: bool = False,panel: str = "",parent: str = "",particleInstancers: bool = False,pivots: bool = False,planes: bool = False,pluginObjects: Tuple[str, bool] = tuple("", False),pluginShapes: bool = False,polymeshes: bool = False,queryPluginObjects: str = "",removeSelected: bool = False,rendererDeviceName: bool = False,rendererList: bool = False,rendererListUI: bool = False,rendererName: str = "",rendererOverrideList: bool = False,rendererOverrideListUI: bool = False,rendererOverrideName: str = "",resetCustomCamera: bool = False,sceneRenderFilter: str = "",selectionConnection: str = "",selectionHiliteDisplay: bool = False,setSelected: bool = False,shadingModel: int = 1,shadows: bool = False,smallObjectCulling: bool = False,smallObjectThreshold: float = 1.0,smoothWireframe: bool = False,sortTransparent: bool = False,stateString: bool = False,stereoDrawMode: bool = False,strokes: bool = False,subdivSurfaces: bool = False,textureAnisotropic: bool = False,textureCompression: bool = False,textureDisplay: str = "",textureEnvironmentMap: bool = False,textureHilight: bool = False,textureMaxSize: int = 1,textureMemoryUsed: bool = False,textureSampling: int = 1,textures: bool = False,toggleExposure: bool = False,toggleGamma: bool = False,transpInShadows: bool = False,transparencyAlgorithm: str = "",twoSidedLighting: bool = False,unParent: bool = False,unlockMainConnection: bool = False,updateColorMode: bool = False,updateMainConnection: bool = False,useBaseRenderer: bool = False,useColorIndex: bool = False,useDefaultMaterial: bool = False,useInteractiveMode: bool = False,useRGBImagePlane: bool = False,useReducedRenderer: bool = False,useTemplate: str = "",userNode: str = "",viewObjects: bool = False,viewSelected: bool = False,viewTransformName: str = "",viewType: bool = False,width: bool = False,wireframeBackingStore: bool = False,wireframeOnShaded: bool = False,xray: bool = False) -> None:
    """
    モデル エディタの作成、編集、照会が行われます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activeComponentsXray (boolean): アクティブコンポーネントのX線モードをオンまたはオフにします。

    -----------------------------------------

    activeCustomEnvironment (string): 環境マップとして使用するイメージファイルのパスを指定します。有効なシーンレンダーフィルタを指定した場合のみ有効です。

    -----------------------------------------

    activeCustomGeometry (string): 表示するジオメトリをオーバーライドするカスタムジオメトリの識別子を指定します。有効なシーンレンダーフィルタを指定した場合のみ有効です。

    -----------------------------------------

    activeCustomLighSet (string): シーンレンダーフィルタで使用するライトセットの識別子を指定します。有効なシーンレンダーフィルタを指定した場合のみ有効です。

    -----------------------------------------

    activeCustomOverrideGeometry (string): シーンレンダーフィルタを使用した場合のカスタムジオメトリに対するオーバーライドの識別子を指定します。

    -----------------------------------------

    activeCustomRenderer (string): 有効なシーンレンダーフィルタも指定されているときに使用するカスタムレンダラの識別子を指定します。

    -----------------------------------------

    activeOnly (boolean): シェーディング表示で、アクティブなオブジェクトのみをシェーディングした状態で表示するかどうかを設定します。

    -----------------------------------------

    activeShadingGraph (string): マテリアル表示のオーバーライドに使用するシェーディンググラフを指定します。有効なシーンレンダーフィルタを指定した場合のみ有効です。

    -----------------------------------------

    activeView (boolean): モデルエディタをアクティブビューに設定します。正常な場合はtrueを返します。照会すると、ビューがアクティブビューであるかどうかが返されます。

    -----------------------------------------

    addObjects (string): 選択接続に含まれるオブジェクトが、ビューで可視となるオブジェクトのリストに追加されます(viewSelectedがtrueである場合)。

    -----------------------------------------

    addSelected (boolean): 現在アクティブなオブジェクトが、ビューで可視となるオブジェクトのリストに追加されます(viewSelectedがtrueである場合)。

    -----------------------------------------

    addSelectedObjects (boolean): 設定した場合、選択したオブジェクトをエディタに追加します。

    -----------------------------------------

    allObjects (boolean): モデルエディタのビューですべてのオブジェクトの表示のオンとオフを切り替えます。これはNURBS、CV、ハル、グリッド、およびマニピュレータは除外します。

    -----------------------------------------

    backfaceCulling (boolean): ビュー全体のバックフェースカリングのオン/オフを切り替えます。この設定は、個々のオブジェクトのカリング設定をオーバーライドします。ビュー内に描画されるすべてのオブジェクトは、バックフェースがカリングされます。バックフェースカリングをオンにすると、法線がカメラと反対方向を向いている領域でサーフェスが表示されません。

    -----------------------------------------

    bufferMode (string): 非推奨:これはビューポート2.0ではサポートされていません。グラフィックバッファモードを設定します。指定できる値は、「single」または「double」です。

    -----------------------------------------

    bumpResolution ([uint, uint]): ハードウェアレンダラを使用する場合の、「ベイクド」バンプマップテクスチャの解像度を設定します。既定値は、それぞれ512と512です。

    -----------------------------------------

    camera (string): モデルエディタ内でカメラの名前の変更または照会が行われます。

    -----------------------------------------

    cameraName (string): パネルのカメラトランスフォームとシェイプの名前を設定します。シェイプが「選択」されている場合、トランスフォームではなくシェイプ名を返します。このフラグは照会できません。

    -----------------------------------------

    cameraSet (string): カメラセットの名前

    -----------------------------------------

    cameraSetup (boolean): 渡されたモデルエディタの名前に基づいて、カメラセットアップを含む文字列リストを返します。カメラセットアップには、互いにコネクトされている1つまたは複数のカメラが含まれます。このリスト内で、カメラのセットアップは、連続した文字列のペアとして定義されます。各ペアはアクティブカメラを特定する文字列と、指定されたアクティブカメラをセットアップするためのスクリプトを定義する文字列から構成されます。アクティブカメラと同じ数の文字列ペアが返されます。何も返されない場合、指定されたカメラをアクティブにするのにセットアップは必要ないとみなされます。

    -----------------------------------------

    cameras (boolean): モデルエディタのビューでカメラの表示のオンとオフを切り替えます。

    -----------------------------------------

    capture (string): ディスク上の指定したイメージファイルにビューポートのキャプチャを1回実行します。

    -----------------------------------------

    captureSequenceNumber (int): 0以上の値を指定すると、「capture」フラグが有効な場合、以降にリフレッシュするたびにイメージファイルがディスクに保存されます。「capture」フラグの引数に{ルート名}.{拡張子}という名前が使用されている場合、ファイル名は{ルート名}.#.{拡張子}になります。#の値はこの引数に指定した値から開始し、以降にリフレッシュするたびに増分します。「capture」フラグに0未満の値または空のファイル名を指定すると、シーケンスキャプチャを無効にできます。

    -----------------------------------------

    clipGhosts (boolean): クリップのゴーストを追加する必要があるかどうかを定義します。

    -----------------------------------------

    cmEnabled (boolean): エディタでのカラー管理の適用をオンまたはオフにします。設定すると、現在のエディタに設定されているカラー管理設定が使用されます。

    -----------------------------------------

    colorMap (boolean): モデルパネルのカラーマップスタイルを照会します。指定できる値は、「colorIndex」および「rgb」です。

    -----------------------------------------

    colorResolution ([uint, uint]): ハードウェアレンダラを使用する場合の、「ベイクド」カラーテクスチャの解像度を設定します。既定値は、それぞれ256と256です。

    -----------------------------------------

    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    controlVertices (boolean): モデルエディタのビューでNURBSCVの表示のオンとオフを切り替えます。

    -----------------------------------------

    cullingOverride (string): ハードウェアレンダラを使用する場合に、オブジェクト上のカリングアトリビュートをオーバーライドするかどうかを設定します。次のオプションがあります。「none」:オブジェクトごとにカリングオブジェクトアトリビュートを使用します。「doubleSided」:すべてのオブジェクトを強制的に両面にします。「singleSided」:すべてのオブジェクトを強制的に片面にします。既定は「none」です。

    -----------------------------------------

    default (boolean): この設定の既定値が修正されます。新しく作成されるモデルエディタではこの値が継承されます。このフラグを-interactiveと一緒に使用すると、既定のインタラクティブ設定を設定できます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    deformers (boolean): モデルエディタのビューでデフォーマオブジェクトの表示のオンとオフを切り替えます。

    -----------------------------------------

    dimensions (boolean): モデルエディタのビューで寸法オブジェクトの表示のオンとオフを切り替えます。

    -----------------------------------------

    displayAppearance (string): モデルパネルの表示の外観を設定します。有効な値は、「wireframe」、「points」、「boundingBox」、「smoothShaded」、「flatShaded」です。このフラグは、-interactiveフラグと-defaultフラグと一緒に使用できます。インタラクティブモードでは、「wireframe」、「points」、「boundingBox」のみが有効であることに注意してください。

    -----------------------------------------

    displayLights (string): シェーディングモード用にライティングを設定します。有効な値は、「selected」、「active」、「all」、「default」、「none」です。

    -----------------------------------------

    displayTextures (boolean): シェーディングモードでのテクスチャの表示をオンまたはオフにします。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    dynamicConstraints (boolean): モデルエディタのビューでdynamicConstraintの表示のオンとオフを切り替えます。

    -----------------------------------------

    dynamics (boolean): モデルエディタのビューでダイナミクスオブジェクトの表示のオンとオフを切り替えます。

    -----------------------------------------

    editorChanged (script): エディタオプションが変更されたときにコールされるオプションのスクリプトコールバック。これは、スクリプトパネルにmodelEditorが含まれ、そのオプションが内蔵エディタにより変更されたときに通知が必要な場合に便利です。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    exposure (float): 現在のエディタのカラー管理に使用される露出値です。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    filteredObjectList (boolean): (オブジェクトフィルタまたは選択項目の分離のいずれかを使用して)フィルタリングをオンにしたモデルエディタの場合、このフラグは、このエディタで表示されるオブジェクトの文字列リストを返します。このリストでは(カメラのフラスタムまたはフラグに基づいた)可視性は考慮されず、純粋に、ビューのレンダリング時に考慮されるオブジェクトがキャプチャされる点に注意してください。

    -----------------------------------------

    fluids (boolean): モデルエディタのビューで流体の表示のオンとオフを切り替えます。

    -----------------------------------------

    fogColor ([float, float, float, float]): ハードウェアフォグに使用するカラー。

    -----------------------------------------

    fogDensity (float): ハードウェアフォグの密度が決まります。

    -----------------------------------------

    fogEnd (float): ハードウェアフォグの終端場所。

    -----------------------------------------

    fogMode (string): フォグのドロップオフモードが決まります。指定できる値は、次のいずれかです。"linear":一次ドロップオフ"exponent":指数ドロップオフ"exponent2":二乗の指数ドロップオフ

    -----------------------------------------

    fogSource (string): 使用するフォグアルゴリズムのタイプを設定します。引数が「fragment」(既定)である場合、フォグはピクセル単位で計算されます。引数を「coordinate」にすると、ジオメトリで頂点フォグ座標を指定して、グラフィックシステムで頂点フォグのOpenGL拡張子がサポートされている場合、フォグは頂点ごとに算出されます。

    -----------------------------------------

    fogStart (float): ハードウェアフォグの開始場所。

    -----------------------------------------

    fogging (boolean): ハードウェアフォグを有効にするかどうかを設定します。

    -----------------------------------------

    follicles (boolean): モデルエディタのビューで毛根の表示のオンとオフを切り替えます。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    gamma (float): 現在のエディタのカラー管理に使用されるガンマ値です。

    -----------------------------------------

    greasePencils (boolean): グリースペンシルのマークを追加する必要があるかどうかを定義します。

    -----------------------------------------

    grid (boolean): モデルエディタのビューでグリッドの表示のオンとオフを切り替えます。

    -----------------------------------------

    hairSystems (boolean): モデルエディタのビューでヘアシステムの表示のオンとオフを切り替えます。

    -----------------------------------------

    handles (boolean): モデルエディタのビューでセレクションハンドルの表示のオンとオフを切り替えます。

    -----------------------------------------

    headsUpDisplay (boolean): モデルパネルで、有効なヘッドアップディスプレイの要素をこのウィンドウに描画するか(true)どうかを設定します。現在のところ、これはヘッドアップディスプレイの要素をグローバルに有効にしておく必要があります。

    -----------------------------------------

    height (boolean): 関連付けられたビューポートの高さを返します(ピクセル単位)。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    hulls (boolean): モデルエディタのビューでNURBSハルの表示のオンとオフを切り替えます。

    -----------------------------------------

    ignorePanZoom (boolean): モデルパネルが2Dパン/ズーム値を無視し、シーンの概要を表示するかどうかを指定します。

    -----------------------------------------

    ikHandles (boolean): モデルエディタのビューでIKハンドルとエンドエフェクタの表示のオンとオフを切り替えます。

    -----------------------------------------

    imagePlane (boolean): ビューでイメージプレーンの表示のオンとオフを切り替えます。

    -----------------------------------------

    interactive (boolean): ビューのインタラクティブリフレッシュの設定を修正します。パフォーマンスを改善するため、再生中にモデルエディタの動作をこのように変更できます。

    -----------------------------------------

    interactiveBackFaceCull (boolean): インタラクティブなバックフェースカリングをオンにするかどうかを定義します。

    -----------------------------------------

    interactiveDisableShadows (boolean): インタラクティブなシャドウを無効にするかどうかを定義します。

    -----------------------------------------

    isFiltered (boolean): シーンのビューにフィルタが適用されたモデルエディタの場合はtrueを返します。これは、明示的なオブジェクトフィルタ、または、表示するオブジェクトをフィルタリングする、選択項目の分離などの表示オプションのいずれかになります。

    -----------------------------------------

    jointXray (boolean): ジョイントのX線モードをオンまたはオフにします。

    -----------------------------------------

    joints (boolean): モデルエディタのビューでジョイントの表示のオンとオフを切り替えます。

    -----------------------------------------

    lights (boolean): モデルエディタのビューでライトの表示のオンとオフを切り替えます。

    -----------------------------------------

    lineWidth (float): 表示するラインの幅を設定します。

    -----------------------------------------

    locators (boolean): モデルエディタのビューでロケータオブジェクトの表示のオンとオフを切り替えます。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    lowQualityLighting (boolean): ハードウェアレンダラを使用する場合に、「低精度ライティング」を使用するかどうかを設定します。既定値はfalseです。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    manipulators (boolean): モデルエディタのビューでマニピュレータオブジェクトの表示のオンとオフを切り替えます。

    -----------------------------------------

    maxConstantTransparency (float): コンスタントの透明度の最大値を設定します。この値を設定すると、[0.0,1.0]から[0.0,maxConstantTransparency]までの範囲でコンスタントの透明度をマップし直します。すべての透明度は新しい範囲に正比例してシフトされるため、完全に透明なオブジェクト(透明度1.0)はビューポートにmaxConstantTransparencyの透明度で表示されます。これにより、透明度の高いオブジェクトでも可視にできるようになります。このフラグは、一定の(テクスチャマッピングされていない)透明なオブジェクトにのみ影響します。

    -----------------------------------------

    maximumNumHardwareLights (boolean): ハードウェアライトの最大値が考慮されるかどうかを定義します。

    -----------------------------------------

    modelPanel (string): 作成したモデルエディタを指定したモデルパネルに埋め込むことができるようにします。APIを使用して作成されたカスタムモデルエディタと一緒に使用することを目的としています(派生したMPxModelEditorCommandでフラグを使用)が、ベースのmodelEditorコマンドでフラグを使用してパネルに既定のMayaモデルエディタを復元しても構いません。これまでパネルにあったモデルエディタは削除されていることに注意してください。

    -----------------------------------------

    motionTrails (boolean): ビューポートでモーション軌跡の表示のオンとオフを切り替えます。

    -----------------------------------------

    nCloths (boolean): モデルエディタのビューでnClothの表示のオンとオフを切り替えます。

    -----------------------------------------

    nParticles (boolean): モデルエディタのビューでnParticlesの表示のオンとオフを切り替えます。

    -----------------------------------------

    nRigids (boolean): モデルエディタのビューでnRigidの表示のオンとオフを切り替えます。

    -----------------------------------------

    noUndo (boolean): このフラグは、特定のビューポート操作(分離選択など)が元に戻す待ち行列に追加されないようにします。

    -----------------------------------------

    nurbsCurves (boolean): モデルエディタのビューでNURBSカーブの表示のオンとオフを切り替えます。

    -----------------------------------------

    nurbsSurfaces (boolean): モデルエディタのビューでNURBSサーフェスの表示のオンとオフを切り替えます。

    -----------------------------------------

    objectFilter (script): 現在のオブジェクトフィルタの名前を設定または照会します。オブジェクトフィルタは登録済みである必要があります。

    -----------------------------------------

    objectFilterList (script): 登録されたフィルタの名前のリストを返します。

    -----------------------------------------

    objectFilterListUI (script): 登録されたフィルタのUI名のリストを返します。

    -----------------------------------------

    objectFilterShowInHUD (boolean): オブジェクトフィルタがアクティブな場合に、ヘッドアップディスプレイにオブジェクトフィルタのUI名を表示するかどうかを設定します。この文字列は、カメラ名と連結します。

    -----------------------------------------

    objectFilterUI (script): 現在のオブジェクトフィルタのUI名を照会します。オブジェクトフィルタは登録済みである必要があります。

    -----------------------------------------

    occlusionCulling (boolean): ハードウェアレンダラを使用する場合に、オブジェクトが後ろに隠れるカリングテストを有効にするかどうかを設定します。既定値はfalseです。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    particleInstancers (boolean): パーティクルインスタンスを表示するかどうかを定義します。

    -----------------------------------------

    pivots (boolean): モデルエディタのビューでトランスフォームピボットの表示のオンとオフを切り替えます。

    -----------------------------------------

    planes (boolean): モデルエディタのビューでスケッチプレーンの表示のオンとオフを切り替えます。

    -----------------------------------------

    pluginObjects ([string, boolean]): ビューでプラグインオブジェクトの表示のオンとオフを切り替えます。このフラグを考慮するかどうかはプラグインの実装によって異なります。

    -----------------------------------------

    pluginShapes (boolean): ビューでプラグインシェイプの表示のオンとオフを切り替えます。このフラグを考慮するかどうかはプラグインの実装によって異なります。

    -----------------------------------------

    polymeshes (boolean): モデルエディタのビューでポリゴンメッシュの表示のオンとオフを切り替えます。

    -----------------------------------------

    queryPluginObjects (string): ビューでプラグインオブジェクトの表示のオンとオフ状態を照会します。オンとオフ状態を設定する場合は、-pluginObjectsを代わりに使用します。

    -----------------------------------------

    removeSelected (boolean): 現在アクティブなオブジェクトが、ビューで可視となるオブジェクトのリストから除去されます(viewSelectedがtrueである場合)。

    -----------------------------------------

    rendererDeviceName (boolean): 3Dモデリングビューポートのビューポート2.0で使用される描画APIの名前を照会します。可能性のある戻り値は、Mayaがビューポート2.0で[OpenGL-旧式]を使用するように設定されている場合は「VirtualDeviceGL」、Mayaがビューポート2.0で[OpenGL-コアプロファイル](「厳密」と「互換性」のいずれか)を使用するように設定されている場合は「VirtualDeviceGLCore」、Mayaがビューポート2.0でDirectXを使用するように設定されている場合は「VirtualDeviceDx11」となります。3Dモデリングビューポート用のレンダラがビューポート2.0ではない場合は、空の文字列が返されます。

    -----------------------------------------

    rendererList (boolean): 3Dモデリングビューポートで使用できるレンダラの内部名のリストを照会します。サポートされている場合、既定のリストには少なくとも「vp2Renderer」が含まれています。このレンダラの詳細については、rendererNameを参照してください。このリストには、プラグインビューポートレンダラも表示されます。

    -----------------------------------------

    rendererListUI (boolean): 3Dモデリングビューポートで使用できるレンダラのUI名のリストを照会します。サポートされている場合、既定のリストには「vp2Renderer」のUI名が含まれています。このリストには、プラグインビューポートレンダラのUI名も表示されます。このリストとrendererListから返されるリストは、1:1で対応しています。

    -----------------------------------------

    rendererName (string): 3Dモデリングビューポートに使用するレンダラを設定または取得します。提供される名前はレンダラの内部名になる必要があります。「rendererList」フラグを使用して、使用可能な名前のリストを照会できます。既定のレンダラは、ビューポート2.0の「vp2Renderer」です。

    -----------------------------------------

    rendererOverrideList (boolean): 3Dビューポートレンダラで使用できるレンダラオーバーライドの内部名のリストを照会します。現在は、「Viewport2」レンダラのみがレンダラオーバーライドをサポートしています。

    -----------------------------------------

    rendererOverrideListUI (boolean): 3Dビューポートレンダラで使用できるレンダラオーバーライドのUI名のリストを照会します。現在は、「Viewport2」レンダラのみがレンダラオーバーライドをサポートしています。

    -----------------------------------------

    rendererOverrideName (string): 3Dビューポートレンダラに使用するオーバーライドを設定または取得します。提供される名前はオーバーライドの内部名になる必要があります。「rendererOverrideList」フラグを使用して、使用可能な名前のリストを照会できます。現在は、「Viewport2」レンダラのみがレンダラオーバーライドをサポートしています。空の文字列を設定すると、現在アクティブなオーバーライドの設定が解除されます。

    -----------------------------------------

    resetCustomCamera (boolean): 指定した場合、シーンレンダーフィルタに使用されるアクティブなカスタムカメラのカメラ変換をリセットします。有効なシーンレンダーフィルタを指定した場合のみ有効です。

    -----------------------------------------

    sceneRenderFilter (string): シーンレンダーフィルタの名前を指定します。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    selectionHiliteDisplay (boolean): モデルパネルで、このウィンドウのオブジェクトをハイライトする選択範囲を描画するかどうかを設定します。

    -----------------------------------------

    setSelected (boolean): 現在アクティブなオブジェクトのみがビューで可視となります(viewSelectedがtrueである場合)。

    -----------------------------------------

    shadingModel (int): 使用するシェーディングモデルです。

    -----------------------------------------

    shadows (boolean): シェーディングモードで、ハードウェアシャドウの表示のオンとオフを切り替えます。

    -----------------------------------------

    smallObjectCulling (boolean): 小さなオブジェクトのカリングを有効にするかどうかを定義します。

    -----------------------------------------

    smallObjectThreshold (float): 小さなオブジェクトのカリングのしきい値です。

    -----------------------------------------

    smoothWireframe (boolean): ワイヤフレームのラインとポイントのスムージングのオンとオフを切り替えます。

    -----------------------------------------

    sortTransparent (boolean): シェーディングモードのリフレッシュ中の透明オブジェクトのソートのオンとオフを切り替えます。通常の場合、オブジェクトはカメラ空間の原点に従ってソートされますが、このフラグをオフにすると、シーングラフ内での順序(深さ優先)に従ってオブジェクトが描画されます。これはグローバルフラグで、すべてのモデルエディタに影響します。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    stereoDrawMode (boolean): このフラグが使用されている場合、立体視描画モードを設定します。

    -----------------------------------------

    strokes (boolean): ビューでペイントエフェクトストロークの表示のオンとオフを切り替えます。

    -----------------------------------------

    subdivSurfaces (boolean): モデルエディタのビューでサブディビジョンサーフェスの表示のオンとオフを切り替えます。

    -----------------------------------------

    textureAnisotropic (boolean): 異方性マテリアルテクスチャフィルタリングを実行するかどうかが設定されます。グラフィックシステムのOpenGLで異方性テクスチャフィルタリング拡張機能がサポートされている場合に限って動作します。

    -----------------------------------------

    textureCompression (boolean): テクスチャ圧縮を使用するかどうかを定義します。

    -----------------------------------------

    textureDisplay (string): テクスチャに使用するブレンドのタイプを設定します。ブレンドは、対象フラグメントとテクスチャフラグメントの間で実行されます。一般的なソースはマテリアルカラーです。引数として、次のいずれかを指定します。modulate:対象フラグメントとテクスチャフラグメントを掛けるdecal:対象フラグメントをテクスチャフラグメントで上書きする

    -----------------------------------------

    textureEnvironmentMap (boolean): Trueの場合、テクスチャ環境マップを使用します。

    -----------------------------------------

    textureHilight (boolean): 表示がシェーディングテクスチャモードである場合に、スペキュラハイライトを表示するかどうかを設定します。

    -----------------------------------------

    textureMaxSize (int): ハードウェアテクスチャリングの最大テクスチャサイズを設定します。整数値は2の累乗である必要があります。推奨値は、128または256です。指定した値がグラフィックスハードウェア用のOpenGL最大テクスチャサイズよりも大きい場合、その値はOpenGLのサイズに固定されます。多くの巨大なテクスチャをシーン内で使用する場合、この値を下げるとパフォーマンスが向上します。ImpactではテクスチャメモリがRAMに固定されているので、大きいテクスチャを使用すると、信頼性とパフォーマンスの問題が発生することがあります。ここでも、この値を下げると問題の解決になります。ソフトウェアレンダリングでは、この値は使用されません。このフラグはMaya6.5では廃止されます。代わりに、displayPrefコマンドのmaxTextureResolution/mtr引数を使用してください。

    -----------------------------------------

    textureMemoryUsed (boolean): すべてのテクスチャマップで使用される総バイト数を返します。これは、シーン内のすべてのテクスチャオブジェクトで、幅x高さxチャネルになります。テクスチャをミップマップすると、すべてのミップマップレベルが総数に組み込まれますが、3つ以上のレベルを同時に使用することはできません。

    -----------------------------------------

    textureSampling (int): テクスチャの表示に使用するサンプリングのタイプが設定されます。引数として、次のいずれかを指定します。1:ポイントサンプリングを実行する2:バイリニア補間(既定)を実行する

    -----------------------------------------

    textures (boolean): ビューでテクスチャオブジェクトの表示のオンとオフを切り替えます。

    -----------------------------------------

    toggleExposure (boolean): エディタの現在の露出値と既定の露出値を切り替えます。

    -----------------------------------------

    toggleGamma (boolean): エディタの現在のガンマ値と既定のガンマ値を切り替えます。

    -----------------------------------------

    transpInShadows (boolean): ハードウェアレンダラを使用する場合に、シャドウの透明度の表示を有効にするかどうかを設定します。既定値はfalseです。

    -----------------------------------------

    transparencyAlgorithm (string): 透明度アルゴリズムを設定します。次のオプションがあります。1）frontAndBackCull:前後2つのパスのカリングテクニックです。2）perPolygonSort:後ろから前の順序のテクニックで透明なポリゴンを描画します。透明度オプション1）と2）は、ハードウェアレンダラでサポートされます。オプション1）は、インタラクティブモデリングビューポートでサポートされます。既定値は「frontAndBackCull」です。

    -----------------------------------------

    twoSidedLighting (boolean): 両面ライティングのオンとオフを切り替えます。-defaultフラグと一緒に使用できます。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateColorMode (boolean): このフラグは、どのカラーモードにするかをチェックし、それに従って切り替えるようにモデルパネルに通知します。このフラグを使用すると、カメライメージプレーンの追加か除去が実行された後でモデルパネルが更新されます。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useBaseRenderer (boolean): ハードウェアレンダラを使用して「インタラクティブ表示モード」(-useInteractiveMode)でレンダーする場合に、「ベース」レンダラを使用するかどうかを設定します。既定値はfalseです。

    -----------------------------------------

    useColorIndex (boolean): モデルパネルで、可能な場合にカラーインデックスモードを使用するかどうかを設定されます。カラーインデックスモードでは、ポイントモード、バウンディングボックスモード、ワイヤフレーム表示モードでパフォーマンスが向上します。-defaultフラグと一緒に使用できます。

    -----------------------------------------

    useDefaultMaterial (boolean): モデルパネルが、現在サーフェスに割り当てられているマテリアルを使用するのではなく、既定のマテリアルを使用してすべてのシェーディングサーフェスを描画するかどうかを設定します。

    -----------------------------------------

    useInteractiveMode (boolean): 再生中に特殊なインタラクション設定の使用のオンとオフを切り替えます。このフラグは-defaultフラグと一緒に使用できます。

    -----------------------------------------

    useRGBImagePlane (boolean): イメージプレーンがパネルのカメラにアタッチされている場合、モデルパネルをRGBモードにするかどうかを設定します。

    -----------------------------------------

    useReducedRenderer (boolean): 削減されたレンダラを使用する場合はTrueを設定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    userNode (string): ユーザがノード名とモデルエディタを関連付けられるようにします。値はノードの削除または名前の変更を行うイベントで自動的に更新されます。

    -----------------------------------------

    viewObjects (boolean): viewSelectedがtrueで、表示されるオブジェクトのリストがアクティブリストでない場合、ビューで可視となるオブジェクトのリストを含むobjectSetの名前が返されます(ある場合)。

    -----------------------------------------

    viewSelected (boolean): このフラグは、選択したオブジェクトの表示のオンとオフを切り替えます。このフラグをtrueに設定すると、現在アクティブなオブジェクトがキャプチャされ、表示するオブジェクトのリストとして使用されます。

    -----------------------------------------

    viewTransformName (string): 現在のエディタでカラー管理が有効になっている場合に適用されるビューパイプラインを設定します。

    -----------------------------------------

    viewType (boolean): モデルエディタのタイプを示す文字列を返します。既定のモデルエディタの場合は、空の文字列を返します。APIを使用して作成したカスタムモデルエディタタイプの場合は、MPx3dModelView::viewType()メソッドで返される文字列と同じ文字列を返します。

    -----------------------------------------

    width (boolean): 関連付けられたビューポートの幅を返します(ピクセル単位)。

    -----------------------------------------

    wireframeBackingStore (boolean): アクティブなオブジェクトの描画の最適化にバッキングストアを使用するかどうかを設定します。このモードでは、特定のシーンのワイヤフレームモードでパフォーマンスが向上します。

    -----------------------------------------

    wireframeOnShaded (boolean): モデルパネルで、すべてのシェーディングされたオブジェクトのワイヤフレームを描画するか(true)、アクティブなオブジェクトのみのワイヤフレームを描画するか(false)を設定します。

    -----------------------------------------

    xray (boolean): X線モードをオンまたはオフにします。-defaultフラグと一緒に使用できます。

    -----------------------------------------

    Return Value:
    None: stringエディタの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def modelPanel(barLayout: bool = False,camera: str = "",control: bool = False,copy: str = "",createString: bool = False,defineTemplate: str = "",docTag: str = "",editString: bool = False,exists: bool = False,init: bool = False,isUnique: bool = False,label: str = "",menuBarRepeatLast: bool = False,menuBarVisible: bool = False,modelEditor: bool = False,needsInit: bool = False,parent: str = "",popupMenuProcedure: str = "",replacePanel: str = "",tearOff: bool = False,tearOffCopy: str = "",tearOffRestore: bool = False,unParent: bool = False,useTemplate: str = "") -> None:
    """
    モデル エディタから構成されるパネルが作成されます。詳細については、modelEditor コマンドの説明を参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    barLayout (boolean): パネルアイコンバーの親であるレイアウトの名前が返されます。

    -----------------------------------------

    camera (string): modelPanelでカメラの照会または編集が実行されます。

    -----------------------------------------

    control (boolean): このパネルの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:パネルにはコントロールがないことがあります。コントロールが存在しない場合、このフラグは""を返します。

    -----------------------------------------

    copy (string): このパネルを指定したパネルのコピーにします。両方のパネルは同じタイプである必要があります。

    -----------------------------------------

    createString (boolean): パネルの作成に使用するコマンド文字列

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): Mayaのパネルにタグをアタッチします。

    -----------------------------------------

    editString (boolean): パネルの編集に使用するコマンド文字列

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    init (boolean): パネルの既定の状態を初期化します。これは、file-newとfile-openによって自動的に実行されます。

    -----------------------------------------

    isUnique (boolean): このパネルタイプのインスタンスが1つだけ許可されている場合、trueを返します。

    -----------------------------------------

    label (string): ユーザが読みやすいパネル用ラベルを指定します。

    -----------------------------------------

    menuBarRepeatLast (boolean): メニューヘッダを中マウスボタンでクリックしたときに、最後に選択したメニュー項目を繰り返すかどうかをコントロールします。

    -----------------------------------------

    menuBarVisible (boolean): パネルのメニューバーを表示するかどうかを制御します。

    -----------------------------------------

    modelEditor (boolean): パネルに含まれるモデルエディタの名前が返されます。

    -----------------------------------------

    needsInit (boolean): (内部)OnEditは、初期化が必要なものとしてパネルをマークします。照会すると、初期化が必要なものとしてパネルがマークされているかどうかを返します。file-newとfile-openで使用されます。

    -----------------------------------------

    parent (string): このパネルの親のレイアウトを指定します。

    -----------------------------------------

    popupMenuProcedure (script): パネルのポップアップメニューを作成するためにコールされるプロシージャを指定します。既定値は「buildPanelPopupMenu」です。プロシージャは、パネル名である文字列引数を持つ必要があります。

    -----------------------------------------

    replacePanel (string): 指定したパネルをこのパネルと置き換えます。ターゲットパネルが同じレイアウト内にある場合、入れ替えを実行します。

    -----------------------------------------

    tearOff (boolean): このパネルを切り離し、パネルの親としてのpaneLayoutを持つフローティングウィンドウにします。照会すると、パネルが独自のウィンドウに切り離されたかどうかを返します。

    -----------------------------------------

    tearOffCopy (string): このパネルを、指定したソースパネルのコピーを切り離したウィンドウとして作成します。

    -----------------------------------------

    tearOffRestore (boolean): パネルが切り離されていて、フォーカスされている場合に、パネルを復元します。パネルがドッキングされている場合は、ドッキングされたウィンドウ内でアクティブなパネルになります。パネルを切り離す場合のみに使用される-to/-tearOffフラグではなく、このフラグをすべてのパネルに追加される既定のフラグにする必要があります。

    -----------------------------------------

    unParent (boolean): パネルをそのレイアウトから除去するように指定します。照会には使用できません。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringパネル名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nodeEditor(activeTab: int = 1,addNewNodes: bool = False,addNode: str = "",additiveGraphingMode: bool = False,allAttributes: bool = False,allNodes: bool = False,allowNewTabs: bool = False,allowTabTearoff: bool = False,autoSizeNodes: bool = False,beginCreateNode: bool = False,beginNewConnection: str = "",breakSelectedConnections: bool = False,closeAllTabs: bool = False,closeTab: int = 1,connectSelectedNodes: bool = False,connectionMinSegment: float = 1.0,connectionOffset: float = 1.0,connectionRoundness: float = 1.0,connectionStyle: str = "",connectionTension: int = 1,consistentNameSize: bool = False,contentsChangedCommand: str = "",control: bool = False,createInfo: str = "",createNodeCommand: str = "",createTab: Tuple[int, str] = tuple(1, ""),crosshairOnEdgeDragging: bool = False,customAttributeListEdit: Tuple[str, str] = tuple("", ""),cycleHUD: bool = False,defaultPinnedState: bool = False,defineTemplate: str = "",deleteSelected: bool = False,docTag: str = "",dotFormat: str = "",downstream: bool = False,duplicateTab: Tuple[int, int] = tuple(1, 1),enableOpenGL: bool = False,exists: bool = False,extendToShapes: bool = False,feedbackConnection: bool = False,feedbackNode: bool = False,feedbackPlug: bool = False,feedbackTabIndex: bool = False,feedbackType: bool = False,filter: str = "",filterCreateNodeTypes: str = "",focusCommand: str = "",forceMainConnection: str = "",frameAll: bool = False,frameModelSelection: bool = False,frameSelected: bool = False,getNodeList: bool = False,graphSelectedConnections: bool = False,graphSelection: bool = False,gridSnap: bool = False,gridVisibility: bool = False,highlightConnection: str = "",highlightConnections: Tuple[str, bool] = tuple("", False),hudMessage: Tuple[str, int, float] = tuple("", 1, 1.0),ignoreAssets: bool = False,island: bool = False,keyPressCommand: str = "",keyReleaseCommand: str = "",layout: bool = False,layoutCommand: str = "",lockMainConnection: bool = False,mainListConnection: str = "",nodeSwatchSize: str = "",nodeTitleMode: str = "",nodeViewMode: str = "",panView: Tuple[float, float] = tuple(1.0, 1.0),panel: str = "",parent: str = "",pinSelectedNodes: bool = False,popupMenuScript: str = "",primary: bool = False,redockTab: bool = False,removeDownstream: bool = False,removeNode: str = "",removeUnselected: bool = False,removeUpstream: bool = False,renameNode: str = "",renameTab: Tuple[int, str] = tuple(1, ""),restoreInfo: str = "",restoreLastClosedTab: bool = False,rootNode: str = "",rootsFromSelection: bool = False,scaleView: float = 1.0,selectAll: bool = False,selectConnectionNodes: bool = False,selectDownstream: bool = False,selectFeedbackConnection: bool = False,selectNode: str = "",selectUpstream: bool = False,selectionConnection: str = "",settingsChangedCallback: str = "",shaderNetworks: bool = False,showAllNodeAttributes: str = "",showNamespace: bool = False,showSGShapes: bool = False,showShapes: bool = False,showTabs: bool = False,showTransforms: bool = False,stateString: bool = False,syncedSelection: bool = False,tabChangeCommand: str = "",toggleAttrFilter: bool = False,toggleSelectedPins: bool = False,toggleSwatchSize: str = "",toolTipCommand: str = "",traversalDepthLimit: int = 1,unParent: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,upstream: bool = False,useAssets: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドは、nodeEditor エディタの作成、編集、照会を行います。オプションの引数はコントロールの名前です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activeTab (int): タブウィジェットの(アクティブな)可視タブのインデックスを取得/設定します。注:インデックスはゼロベースです。

    -----------------------------------------

    addNewNodes (boolean): 新規ノードがグラフに追加されます。既定はオンです。

    -----------------------------------------

    addNode (string): 指定したノードをグラフに追加します。空の文字列を渡すと、現在選択されているモデルがグラフに追加されます。

    -----------------------------------------

    additiveGraphingMode (boolean): 有効にした場合にグラフ化すると、置き換える代わりに既存のグラフにノードネットワークを追加します。

    -----------------------------------------

    allAttributes (boolean): アトリビュートはグラフから除外しないでください。既定はオフです。

    -----------------------------------------

    allNodes (boolean): ノードはグラフから除外しないでください。既定はオフです。

    -----------------------------------------

    allowNewTabs (boolean): 照会モード専用です。このノードエディタで、新しいタブの作成または既存のタブの複製のいずれかによって、タブを新しく追加できるかどうかを返します。

    -----------------------------------------

    allowTabTearoff (boolean): タブを切り離してフロート状態にできるかどうかを制御します。既定はtrueです。

    -----------------------------------------

    autoSizeNodes (boolean): オンの場合、ノード名の長さによって既定のノード幅が動的に決定されます。既定値はオンです。

    -----------------------------------------

    beginCreateNode (boolean): マウスの位置でインタラクティブなノード作成を開始します。これによりコントロールが作成され、エディタでノードをすばやく作成できます。実際の作成はcreateNodeCommandよって代理で実行されます。

    -----------------------------------------

    beginNewConnection (string): 指定したアトリビュートで新しいインタラクティブ接続を開始します。

    -----------------------------------------

    breakSelectedConnections (boolean): 選択したアトリビュート接続を解除します。

    -----------------------------------------

    closeAllTabs (boolean): タブウィジェットのすべてのタブを閉じます。

    -----------------------------------------

    closeTab (int): タブウィジェット上にある指定したインデックスのタブを閉じます。注:切り離されたタブに対してこのフラグを使用すると、存在できるタブは1つのみであるため、ノードエディタが閉じます。この場合、インデックス引数が無視されます。

    -----------------------------------------

    connectSelectedNodes (boolean): エディタ内で選択されているすべてのノード間の接続を作成します。1つのノードの既定の出力ポートが、選択順序内にある次のノードの既定の入力ポートに接続されます。

    -----------------------------------------

    connectionMinSegment (float): 出力ポートから取り出される接続の最小セグメント長の比率を設定します。「ストレート(straight)」、「コーナー(corner)」、「S字形(s-shape)」の接続スタイルを適用します。値は0.0から1.0の範囲でなければなりません。

    -----------------------------------------

    connectionOffset (float): 各接続エッジのオフセットの長さを設定します。「コーナー(corner)」、「S字形(s-shape)」の接続スタイルを適用します。値は0.0から1.0の範囲でなければなりません。

    -----------------------------------------

    connectionRoundness (float): 各接続エッジの丸み係数を設定します。「S字形(s-shape)」接続スタイルにのみ適用されます。値は0.5から1.0の範囲でなければなりません。

    -----------------------------------------

    connectionStyle (string): ノード間の接続の描画方法を設定します。モードの値は、「ベジェ(bezier)」、「ストレート(straight)」、「コーナー(corner)」、「S字形(s-shape)」です。照会モードで、現在の接続スタイルを返します。

    -----------------------------------------

    connectionTension (int): 垂直線が接続エッジのどの位置に描画されるかを設定します。0は中央です。「コーナー(corner)」、「S字形(s-shape)」の接続スタイルを適用します。値は-100から100の範囲でなければなりません。

    -----------------------------------------

    consistentNameSize (boolean): 有効にすると、ノード名のサイズは現在のズームレベルと常に一致します。オフにすると、特定のレベルを超えてズームアウトした場合、ノード名のサイズは維持されるようになります。既定はオンです。

    -----------------------------------------

    contentsChangedCommand (script): ノードエディタの内容が変化するたびに呼び出される関数を指定します。

    -----------------------------------------

    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    createInfo (string): hyperGraphInfoネットワークを作成または変更してエディタの状態を保存します。

    -----------------------------------------

    createNodeCommand (script): エディタでノードを作成するために使用する関数を指定します。選択したノードタイプの名前が関数に渡されます。これはタブ作成ワークフローによって使用されます。既定では、createNodeが使用されます。

    -----------------------------------------

    createTab ([int, [, string, ]]): 新しいタブを作成し、タブウィジェット内の指定したインデックスに挿入します。インデックスが範囲外(-1など)の場合、タブは単にアペンドされます。ユーザはタブラベルを指定することもできます(Pythonのみ)。指定しない場合は、既定の名前を使用して設定されます。MELでタブラベルに空の文字列("")を使用した場合は、既定の名前を使用してタブラベルが設定されます。新しいタブが、現在の(アクティブな)タブになります。注:新しいタブの作成が許可されるのは特定のノードエディタのみです。これをチェックするには、-allowNewTabsフラグを使用します。

    -----------------------------------------

    crosshairOnEdgeDragging (boolean): エッジをドラッグするときのクロスヘアカーソルの表示/非表示を切り替えます。

    -----------------------------------------

    customAttributeListEdit ([string, [, string, ]]): ノード用の特別な「編集モード」を入力することによって指定されたノードのカスタムアトリビュートリストの作成と編集を行います。注:ノードエディタでは、一度に1つのノードのみをこの編集モードにすることができます。別のノードが選択されている場合はその編集モードは自動的に終了します。編集モードを終了するには、ノードに空の文字列を使用します。「hideall」(アトリビュートすべてを非表示に設定)、「showall」(アトリビュートすべてを可視に設定)、「preview」(可視アトリビュートのみを一時的に表示)、「revert」(編集モード以前の状態にするアトリビュートの可視性設定をリストア)、「reset」(関心のあるアトリビュートのみが表示されるように可視アトリビュートをリセット)を許可するオプションの編集モードコマンドを受け取ります。もしあれば、編集モードにあるノードの名前を照会モードに返します。注:オプションの文字列引数は照会モードで無視されます。

    -----------------------------------------

    cycleHUD (boolean): HUDを次の状態に変更します。

    -----------------------------------------

    defaultPinnedState (boolean): すべてのノードの既定の固定状態を設定します。固定の場合は1、固定解除の場合は0です。既定値は0です。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    deleteSelected (boolean): 選択されたノードを削除し、選択された接続を解除します。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    dotFormat (string): 照会モードでは次のようになります。DOTフォーマットでグラフ情報を取得します。フラグ引数によって書き込み先のファイルパスを指定します。「-」が指定された場合、データは文字列として返されます。それ以外の場合、書き込まれたファイルのバイト単位のサイズが返されます。編集モードでは次のようになります。Graphviz出力ファイルのグラフ内のノードの位置をplainフォーマットで設定します。ノードの位置、幅、および高さの情報だけが使用されます。引数が「graph」で始まる場合は、ファイル名ではなくプレーンデータとして扱われます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    downstream (boolean): ルートノードの下流にあるノードを含みます。

    -----------------------------------------

    duplicateTab ([int, [, int, ]]): 指定したインデックスのタブを複製し、それを別の、オプションの(Pythonのみ)指定インデックスに配置します。複製されたタブを最後に配置するには、-1を使用します。複製されたタブが、現在の(アクティブな)タブになります。注:タブの複製が許可されるのは特定のノードエディタのみです。これをチェックするには、-allowNewTabsフラグを使用します。

    -----------------------------------------

    enableOpenGL (boolean): ノードエディタビューのレンダリングにOpenGLを使用するかどうかを指定します。有効にするとパフォーマンスが大幅に向上しますが、まだ開発作業が進行中です。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    extendToShapes (boolean): 選択した各トランスフォームの子のシェイプを含めます。

    -----------------------------------------

    feedbackConnection (boolean): エディタビューの現在のマウス位置に接続がある場合は、その説明を返します。接続は、接続ごとにプラグがペアになった文字列のリストとして返されます。

    -----------------------------------------

    feedbackNode (boolean): エディタビューの現在のマウス位置にノードがある場合は、その数を返します。

    -----------------------------------------

    feedbackPlug (boolean): エディタビューの現在のマウス位置にプラグ(アトリビュート)がある場合は、その名前を返します。

    -----------------------------------------

    feedbackTabIndex (boolean): エディタビューの現在のマウス位置にタブがある場合は、そのインデックスを返します。

    -----------------------------------------

    feedbackType (boolean): エディタビューにフィードバック項目(現在のマウス位置の項目)がある場合は、最も具体的なタイプを返します。「plug」、「node」、「tab」、「connection」、または空の文字列のいずれかです。その他のfeedback*フラグを使用して、項目の説明を照会します。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    filterCreateNodeTypes (script): インライン作成メニュー(タブキー)に表示するノードタイプのリストのフィルタリングに使用する関数を指定します。この関数は文字配列引数を1つ受け入れ、文字配列を返す必要があります。

    -----------------------------------------

    focusCommand (script): ノードエディタのフォーカスが変更されたときに呼び出される関数を指定します。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    frameAll (boolean): ノードエディタの内容すべてをフレームに収めます。

    -----------------------------------------

    frameModelSelection (boolean): 現在のモデル選択をフレームに収めます。

    -----------------------------------------

    frameSelected (boolean): ノードエディタの選択された内容をフレームに収めます。

    -----------------------------------------

    getNodeList (boolean): エディタに表示されているすべてのノードの一覧を返します。

    -----------------------------------------

    graphSelectedConnections (boolean): 選択したアトリビュート接続によって接続されたノードをグラフ化します。

    -----------------------------------------

    graphSelection (boolean): 現在選択されているノードのグラフを作成します。

    -----------------------------------------

    gridSnap (boolean): グリッドスナップのオン/オフを切り替えます。

    -----------------------------------------

    gridVisibility (boolean): グリッド表示のオン/オフを切り替えます。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    highlightConnections ([string, boolean]): ノードの選択によって指定したエディタの接続がハイライトされるかどうかを設定します。値は「regular」または「bifrost」です。

    -----------------------------------------

    hudMessage ([string, int, float]): 指定されたメッセージをエディタHUDに表示します。フラグ引数は、(メッセージ,タイプ,期間)です。ここで、タイプは次のとおりです。左上。上の中央。右上。中央。期間が0の場合、除去されるまでメッセージが残ることを意味します。期間が0より大きい場合は、その秒数の間メッセージが残ります。メッセージが空の場合は、指定されたタイプに対して現在表示されているメッセージが削除されます。

    -----------------------------------------

    ignoreAssets (boolean): 非推奨です。スクリプト内で使用しないでください。

    -----------------------------------------

    island (boolean): 非推奨です。スクリプト内で使用しないでください。

    -----------------------------------------

    keyPressCommand (script): キーが押され、エディタにフォーカスがある場合にコールされる関数を指定します。エディタの名前および押されたキーの(大文字の)文字列表現が関数に渡され、キーが処理された場合はtrueが返されます。それ以外の場合はfalseが返されます。注:「getModifiers」を使用してキーモディファイアの現在の状態を照会できます。

    -----------------------------------------

    keyReleaseCommand (script): キーがリリースされ、エディタにフォーカスがある場合にコールされる関数を指定します。エディタの名前およびリリースされたキーの(大文字の)文字列表現が関数に渡され、キーが処理された場合はtrueが返されます。それ以外の場合はfalseが返されます。注:「getModifiers」を使用してキーモディファイアの現在の状態を照会できます。

    -----------------------------------------

    layout (boolean): グラフの自動レイアウトを実行します。

    -----------------------------------------

    layoutCommand (script): グラフレイアウトが必要な場合に既定のアクションをオーバーライドする関数を指定します。エディタの名前が関数に渡されます。この関数によってグラフ内のノードが配置されます。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    nodeSwatchSize (string): アクティブなシーンで選択したノードのアイコンスウォッチサイズを設定します(何も選択していない場合はすべてのノード)。サイズの値は、「small」、および「large」です。

    -----------------------------------------

    nodeTitleMode (string): 現在のシーンのノードタイトルの表示モードを取得または設定します。モードの値は、「name」(ノード名を表示)、「type」(ノードタイプを表示)、「none」(タイトルを表示しない)です。

    -----------------------------------------

    nodeViewMode (string): アクティブなシーンで選択したノードのアトリビュートビューモードを設定します(何も選択していない場合はすべてのノード)。モードの値は、「simple」(アトリビュートを表示しない)、「connected」(接続されたアトリビュートのみ)、「all」(関連するすべてのアトリビュートを表示)および「custom」(カスタムアトリビュートのビューを使用)です。

    -----------------------------------------

    panView ([float, float]): ビューを指定した量だけパンします。引数が00の場合、ビュー移動がリセットされます。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    pinSelectedNodes (boolean): 選択したノードを固定または固定解除します。ノードが選択されていない場合は、表示されたすべてのノードに適用されます。

    -----------------------------------------

    popupMenuScript (script): このエディタのコントロールがあるポップアップメニューを登録するためにコールするスクリプトを設定します。このスクリプトは、ポップアップメニューの親になるコントロールを持つ、エディタの名前を指定する文字列引数と一緒にコールされます。

    -----------------------------------------

    primary (boolean): 照会モード専用です。このノードエディタがプライマリノードエディタであるかどうかを返します。プライマリエディタは、タブが表示されて使用できる唯一のエディタです。

    -----------------------------------------

    redockTab (boolean): このタブがプライマリノードエディタから切り離されていた場合、タブとそのすべてのデータはプライマリエディタに再ドッキングされ、このノードエディタは閉じます。照会モードの場合は、このタブが切り離されていて、再ドッキング可能であるかを返します。

    -----------------------------------------

    removeDownstream (boolean): 現在アクティブになっている選択項目の下流にあるすべての項目を除去します。

    -----------------------------------------

    removeNode (string): グラフからノードを除去します。空の文字列は、現在選択されているノードが除去されることを示します。

    -----------------------------------------

    removeUnselected (boolean): グラフから選択されていないノードを除去します。

    -----------------------------------------

    removeUpstream (boolean): 現在アクティブになっている選択項目の上流にあるすべての項目を除去します。

    -----------------------------------------

    renameNode (string): グラフ内のノードの名前を変更します。ビューのズームレベルに応じてノード項目上またはポップアップダイアログに編集フィールドが表示され、新しい名前を入力できます。

    -----------------------------------------

    renameTab ([int, [, string, ]]): (オプションの)名前を使用して、指定したインデックスのタブの名前を変更します。名前を指定しない場合(Pythonのみ)、または空の文字列("")を使用した場合は、インライン編集フィールドが開き、タブの名前を変更できるようになります。

    -----------------------------------------

    restoreInfo (string): 提供されたhyperGraphInfoノードに該当するエディタの状態を復元します。

    -----------------------------------------

    restoreLastClosedTab (boolean): このノードエディタがプライマリノードエディタである場合は、最後に閉じたタブ(存在する場合)を復元します。照会モードの場合は、復元に使用できるタブがあるかどうかを返します。

    -----------------------------------------

    rootNode (string): グラフのルートノードとしてノード名を追加します。空の文字列を渡すと、現在のルートノードのリストがクリアされます。照会すると、現在のルートノードのリストを返します。

    -----------------------------------------

    rootsFromSelection (boolean): グラフのルートノードを現在アクティブになっている選択項目から取得するよう指定します。

    -----------------------------------------

    scaleView (float): 指定した係数でグラフビューをスケールします。引数が0の場合は既定にリセットされます。

    -----------------------------------------

    selectAll (boolean): グラフ内のすべての項目を選択します。

    -----------------------------------------

    selectConnectionNodes (boolean): 選択したアトリビュート接続によって接続されたノードを選択します。

    -----------------------------------------

    selectDownstream (boolean): 現在アクティブになっている選択項目の下流にあるすべての項目を選択します。

    -----------------------------------------

    selectFeedbackConnection (boolean): エディタビューにフィードバック接続があればそれを選択します。

    -----------------------------------------

    selectNode (string): グラフ内のノードを選択します。空の文字列を渡すと、現在の選択がクリアされます。照会すると、現在選択されているノードのリストを返します。

    -----------------------------------------

    selectUpstream (boolean): 現在アクティブになっている選択項目の上流にあるすべての項目を選択します。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    settingsChangedCallback (script): ノードエディタの設定が変更された場合にコールされる関数を指定します。

    -----------------------------------------

    shaderNetworks (boolean): シェーダがあるセレクションリストの、すべてのオブジェクトのシェーダネットワークをグラフ化します。

    -----------------------------------------

    showAllNodeAttributes (string): 指定されたノードについて、主要なアトリビュートだけではなく、すべてのアトリビュートを表示します。空の文字列を渡すと、現在選択されているすべてのノードに適用されます。ノードを選択しないと、グラフに表示されているすべてのノードに適用されます。

    -----------------------------------------

    showNamespace (boolean): ノードがルートネームスペース内にない場合は、ノードにネームスペースを含めるかどうかを指定します。

    -----------------------------------------

    showSGShapes (boolean): シェーディンググループを通してネットワークに接続されているシェイプを表示します。

    -----------------------------------------

    showShapes (boolean): シェイプノードを表示します。

    -----------------------------------------

    showTabs (boolean): タブの可視性を明示的に制御するための作成時のフラグです。このフラグがtrueまたはfalseに設定されている場合は、この設定がタブの可視性に反映されます。このフラグが明示的に設定されていない場合、プライマリノードエディタ内の切り離されたタブは表示されますが、プライマリエディタでない他のエディタのタブは表示されません。

    -----------------------------------------

    showTransforms (boolean): トランスフォームを表示します。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    syncedSelection (boolean): グラフ選択とモデル選択の同期を維持します。

    -----------------------------------------

    tabChangeCommand (script): 現在の(アクティブな)タブが変更されている場合に実行されるコマンドです。現在のタブを再度選択しても、このコマンドは起動されません。注:複合ビューへの切り替え、複合ビューからの切り替え、および複合ビュー間の切り替えを行うと、このコマンドも実行されます。

    -----------------------------------------

    toggleAttrFilter (boolean): 選択したノードのアトリビュートフィルタフィールドの表示を切り替えます。選択したノードのいずれかのフィールドが表示されている場合に、この操作を行うと、選択範囲内のすべてのノードのフィールドが非表示になります。ノードが選択されていない場合は、表示されたすべてのノードに適用されます。

    -----------------------------------------

    toggleSelectedPins (boolean): 選択したノードの固定状態を切り替えます。選択したノードが1つでも固定解除されていると、この操作はすべてのノードの固定を選択します。ノードが選択されていない場合は、表示されたすべてのノードに適用されます。

    -----------------------------------------

    toggleSwatchSize (string): 指定したノードのスウォッチサイズの大小を切り替えます。指定されたノード名が空の場合は、選択項目に適用され、ノードが選択されていない場合は、エディタ内のすべてのノードに適用されます。選択項目が小さいスウォッチサイズと大きいスウォッチサイズの組み合わせである場合、選択項目は大きいスウォッチモードに設定されます。

    -----------------------------------------

    toolTipCommand (script): ノードに対して表示されているツールヒントをオーバーライドする関数を指定します。この関数にはカーソルの下のノードの名前が渡され、表示されるテキスト文字列が返されます。単純なHTML4サブセットがサポートされます。

    -----------------------------------------

    traversalDepthLimit (int): グラフ作成時に任意のルートノードが後続するエッジの最大数を指定します。負の値は無制限であることを意味します。既定は無制限です。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    upstream (boolean): ルートノードの上流にあるノードを含みます。

    -----------------------------------------

    useAssets (boolean): コンテンツと実際のアトリビュートではなく、アセットとパブリッシュ済みアトリビュートを使用します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: string作成したコントロールの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nodeOutliner(addCommand: str = "",addObject: str = "",annotation: str = "",attrAlphaOrder: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),connectivity: str = "",currentSelection: bool = False,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,lastClickedNode: bool = False,lastMenuChoice: str = "",longNames: bool = False,manage: bool = False,menuCommand: str = "",menuMultiOption: bool = False,multiSelect: bool = False,niceNames: bool = False,noBackground: bool = False,noConnectivity: bool = False,nodesDisplayed: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,pressHighlightsUnconnected: bool = False,preventOverride: bool = False,redraw: bool = False,redrawRow: bool = False,remove: str = "",removeAll: bool = False,replace: str = "",selectCommand: str = "",showConnectedOnly: bool = False,showHidden: bool = False,showInputs: bool = False,showNonConnectable: bool = False,showNonKeyable: bool = False,showOutputs: bool = False,showPublished: bool = False,showReadOnly: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> str:
    """
    node アウトライナ(Outliner)コマンドで、ディペンデンシー ノードとそのアトリビュートを表示するアウトライン コントロール を作成、編集、照会します。複合アトリビュートを拡張して子を表示させることもできます。コンフィギュア フラグを追加すると、複数選択、カスタマイズ可能なコマンドの選択時発行、単一の入力アトリビュートに対する接続(およびコネクタビリティ)が可能になります。また、コマンド ライン インタフェース、および drag/add を使って、ノードの追加/除去/置き換えを行うこともできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addCommand (script): ノードアウトライナが何かを追加したときにコマンドが実行されます。追加されたもののかわりに%nodeを使用します。たとえば、追加されたオブジェクトをプリントしたい場合のコマンドは、「print(\"%node\\n\")」となります。Pythonオブジェクトは、パスしたノード名を呼び出すことができます。

    -----------------------------------------

    addObject (name): 指定したオブジェクトをディスプレイに追加します。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    attrAlphaOrder (string): アトリビュートのソート方法を指定します。現在認識される値は、ソートなしの場合の「default」、アトリビュートをaからzにソートする「ascend」、zからaにソートする場合の「descend」です。注:a）これは最上位アトリビュートにのみ適用されます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    connectivity (name): アトリビュート引数(「nodeName.attributeName」)を取り、指定された対象に接続できないアトリビュートをすべて淡色表示し、すでに接続されているアトリビュートをすべてハイライトします。

    -----------------------------------------

    currentSelection (boolean): 現在選択されているものを含む文字配列を返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    lastClickedNode (boolean): 最後にクリックしたノードとともに文字列を返します。

    -----------------------------------------

    lastMenuChoice (string): 最後のメニュー選択をテキストで返します。

    -----------------------------------------

    longNames (boolean): インタフェースでアトリビュートにロングネームまたはショートネームのどちらを使用するかを制御します。-niceNameフラグが設定されている場合、このフラグは無視されることに注意してください。既定はショートネームです。照会するとbooleanを返します。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    menuCommand (script): 指定したコマンドをポップアップメニューのそれぞれの項目にアタッチします。

    -----------------------------------------

    menuMultiOption (boolean): 「nextavailable」というラベルのついたメニューオプションをマルチアトリビュートの右マウスボタンメニューの先頭オプションとして表示するかどうかを設定します。既定はtrueです。

    -----------------------------------------

    multiSelect (boolean): multiSelectを可能にします。一度に複数を選択できるようになります。

    -----------------------------------------

    niceNames (boolean): アトリビュート名をもっとユーザフレンドリーで読みやすい表示にするかどうかを制御します。オンの場合、longNamesフラグは無視されます。これがオフの場合、アトリビュート名は、longNamesフラグに応じてロングネームまたはショートネームで表示されます。既定はオンです。照会するとbooleanを返します。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    noConnectivity (boolean): ノードアウトライナ(Outliner)をリセットし、コネクティビティを非表示にします。つまり、すべての行を通常通りに再描画します。

    -----------------------------------------

    nodesDisplayed (boolean): ノードアウトライナ(Outliner)で表示されているノードのリストを含む文字配列を返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    pressHighlightsUnconnected (boolean): 接続されていないプラグをクリックしたときに、選択されるかどうかを設定します。既定はtrueです。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    redraw (boolean): 表示された空間を再描画します。

    -----------------------------------------

    redrawRow (boolean): 指定された行を再描画します。

    -----------------------------------------

    remove (string): 指定したオブジェクトをディスプレイから除去します。

    -----------------------------------------

    removeAll (boolean): すべてのオブジェクトをディスプレイから除去します。

    -----------------------------------------

    replace (name): 表示されたものを、指定したオブジェクトで置き換えます。

    -----------------------------------------

    selectCommand (script): 選択により発行されるコマンド。このコマンドは選択されているものがある場合のみ発行される点で、cフラグとは異なります。

    -----------------------------------------

    showConnectedOnly (boolean): 入力または出力基準に一致する、接続されたアトリビュートのみを表示(true)または非表示(false)にします。

    -----------------------------------------

    showHidden (boolean): 入力または出力基準に一致するUI可視アトリビュートを表示(true)または非表示(false)にします。

    -----------------------------------------

    showInputs (boolean): 接続先にできるUI可視アトリビュートのみ表示します。

    -----------------------------------------

    showNonConnectable (boolean): 入力または出力基準に一致する接続できないアトリビュートを表示(true)または非表示(false)にします。

    -----------------------------------------

    showNonKeyable (boolean): 入力または出力基準に一致するキーフレーム化(アニメート)できないアトリビュートを表示(true)または非表示(false)にします。

    -----------------------------------------

    showOutputs (boolean): 接続元にできるUI可視アトリビュートのみ表示します。

    -----------------------------------------

    showPublished (boolean): アセットまたはアセットのメンバーのパブリッシュされるアトリビュートのみを表示します。このフラグはアセットに関連しないノードでは無視されます。

    -----------------------------------------

    showReadOnly (boolean): 接続元にできる読み取り専用アトリビュートのみ表示します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    str: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def outlinerEditor(allowMultiSelection: bool = False,alwaysToggleSelect: bool = False,animLayerFilterOptions: str = "",attrAlphaOrder: str = "",attrFilter: str = "",autoExpand: bool = False,autoExpandLayers: bool = False,autoSelectNewObjects: bool = False,containersIgnoreFilters: bool = False,control: bool = False,defineTemplate: str = "",directSelect: bool = False,displayMode: str = "",doNotSelectNewObjects: bool = False,docTag: str = "",dropIsParent: bool = False,editAttrName: bool = False,exists: bool = False,expandAllItems: bool = False,expandAllSelectedItems: bool = False,expandAttribute: bool = False,expandConnections: bool = False,expandObjects: bool = False,feedbackItemName: bool = False,feedbackRowNumber: bool = False,filter: str = "",forceMainConnection: str = "",getCurrentSetOfItem: int = 1,highlightActive: bool = False,highlightConnection: str = "",highlightSecondary: bool = False,ignoreDagHierarchy: bool = False,ignoreHiddenAttribute: bool = False,ignoreOutlinerColor: bool = False,isChildSelected: str = "",isSet: int = 1,isSetMember: int = 1,lockMainConnection: bool = False,longNames: bool = False,mainListConnection: str = "",mapMotionTrails: bool = False,masterOutliner: str = "",niceNames: bool = False,object: str = "",organizeByClip: bool = False,organizeByLayer: bool = False,panel: str = "",parent: str = "",parentObject: bool = False,pinPlug: str = "",refresh: bool = False,removeFromCurrentSet: int = 1,renameItem: int = 1,renameSelectedItem: bool = False,renderFilterActive: bool = False,renderFilterIndex: int = 1,renderFilterVisible: bool = False,selectCommand: str = "",selectionConnection: str = "",selectionOrder: str = "",setFilter: str = "",setsIgnoreFilters: bool = False,showAnimCurvesOnly: bool = False,showAnimLayerWeight: bool = False,showAssets: bool = False,showAssignedMaterials: bool = False,showAttrValues: bool = False,showAttributes: bool = False,showCompounds: bool = False,showConnected: bool = False,showContainedOnly: bool = False,showContainerContents: bool = False,showDagOnly: bool = False,showLeafs: bool = False,showMuteInfo: bool = False,showNamespace: bool = False,showNumericAttrsOnly: bool = False,showParentContainers: bool = False,showPinIcons: bool = False,showPublishedAsConnected: bool = False,showReferenceMembers: bool = False,showReferenceNodes: bool = False,showSelected: bool = False,showSetMembers: bool = False,showShapes: bool = False,showTextureNodesOnly: bool = False,showTimeEditor: bool = False,showUVAttrsOnly: bool = False,showUnitlessCurves: bool = False,showUpstreamCurves: bool = False,sortOrder: str = "",stateString: bool = False,transmitFilters: bool = False,unParent: bool = False,unlockMainConnection: bool = False,unpinPlug: str = "",updateMainConnection: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドは、オブジェクト リストの表示に使用されるアウトライナ(Outliner)エディタを作成します。 警告: いくつかのフラグを組み合わせると、予想通りに動作しない場合があります。このコマンドは、実際には、各種エディタによって使用されるアウトライナ(Outliner)を作成するための内部使用を目的としたものです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowMultiSelection (boolean): trueの場合、アウトライナ(Outliner)で複数項目の選択が可能になります。

    -----------------------------------------

    alwaysToggleSelect (boolean): trueの場合、アウトライナ(Outliner)で項目をクリックすると、ほかの項目の選択に影響を与えることなく、クリックした項目の選択、選択解除ができます(allowMultiSelectionがfalseでない場合)。falseの場合、アウトライナ(Outliner)で項目をクリックすると、現在の選択内容が選択した項目と置き換わります。

    -----------------------------------------

    animLayerFilterOptions (string): アニメーションレイヤを表示するときに、フィルタを適用するかどうかを指定します。適用する場合、オプションは「allAffecting」(フィルタなし)、「active」(オブジェクト上のアクティブレイヤのみ表示)、または「animLayerEditor」(設定をアニメーションレイヤエディタから取得)になります。

    -----------------------------------------

    attrAlphaOrder (string): アトリビュートのソート方法を指定します。現在認識される値は、ソートなしの場合の「default」、アトリビュートをaからzにソートする「ascend」、zからaにソートする場合の「descend」です。注:a）これは最上位アトリビュートにのみ適用されます。

    -----------------------------------------

    attrFilter (string): このエディタに配置する項目フィルタオブジェクトの名前を指定します。エディタに表示されるアトリビュートをフィルタ処理します。

    -----------------------------------------

    autoExpand (boolean): このフラグは、ロードされたオブジェクトのアトリビュートを自動的に拡張するかどうかを指定します。

    -----------------------------------------

    autoExpandLayers (boolean): trueの場合、アニメーションレイヤを持つノードを表示すると、すべてのアニメーションレイヤが展開した形式で表示されます。

    -----------------------------------------

    autoSelectNewObjects (boolean): このフラグは、アウトライナ(Outliner)に追加された新しいオブジェクトを自動的に選択するかどうかを指定します。

    -----------------------------------------

    containersIgnoreFilters (boolean): このフラグは、コンテナの内容を表示するときにフィルタを無視するかどうかを指定します。

    -----------------------------------------

    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    directSelect (boolean): trueの場合、アウトライナ(Outliner)で項目をクリックすると、選択接続からその項目が追加または除去されます。falseの場合、アウトライナ(Outliner)で項目をクリックすると、アウトライナで現在選択されている項目と共に選択接続がリロードされます。

    -----------------------------------------

    displayMode (string): フィルタが適用されたときのアウトライナ(Outliner)の表示方法に影響を与えます。リストモードでは、インデントなしのフラットなリストになります。DAGモードではインデントされ、モデルの階層構造が表示されます。

    -----------------------------------------

    doNotSelectNewObjects (boolean): trueの場合、このフラグは、アウトライナ(Outliner)に追加された新しいオブジェクトがアクティブであっても選択しないように指定します。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    dropIsParent (boolean): このフラグはドラッグ＆ドロップのモードを指定します。このフラグがtrueの場合、オブジェクトをドロップすると再ペアレント化されます。このフラグがfalseの場合、ドロップによってオブジェクトの順序が変更されます。既定では、このフラグはtrue(ペアレント化)です。

    -----------------------------------------

    editAttrName (boolean): このフラグは、アトリビュート名を編集できるようにするかどうかを指定します。既定では、アトリビュートをダブルクリックすると、そのアトリビュートのエクスプレッションエディタ(ExpressionEditor)が開きます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    expandAllItems (boolean): アウトライナ(Outliner)内のすべての項目を展開または折りたたみます。

    -----------------------------------------

    expandAllSelectedItems (boolean): アウトライナ(Outliner)で選択したすべての項目を展開または折りたたみます。

    -----------------------------------------

    expandAttribute (boolean): セレクションリストにアトリビュートのみを含めるようアウトライナに強制します。

    -----------------------------------------

    expandConnections (boolean): このフラグは、アトリビュートを展開して入力接続を表示するかどうかを指定します。注:現時点では、拡張によってアニメーションカーブのみが表示されます。

    -----------------------------------------

    expandObjects (boolean): このフラグは、ロードされるオブジェクトが自動的に展開されるかどうかを指定します。

    -----------------------------------------

    feedbackItemName (boolean): 現在のマウスの位置にあるアウトライナの項目名を返します(ある場合)。

    -----------------------------------------

    feedbackRowNumber (boolean): 現在のマウスの位置にあるアウトライナの行番号を返します(ある場合)。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    getCurrentSetOfItem (int): 指定した行にある項目の現在のセットを返します。1つの項目は複数のセットに属することがあるため、現在のセットは、現在、その項目が属しているセットです。

    -----------------------------------------

    highlightActive (boolean): このフラグは、アウトライナ(Outliner)でアクティブなオブジェクトをハイライトするかどうかを指定します。注:アウトライナ(Outliner)が別のエディタのコンテンツを操作している場合にhighlightActiveをtrueに設定すると、予期しない動作が発生することがあります。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    highlightSecondary (boolean): このフラグは、アウトライナ(Outliner)で、highlightConnectionに含まれるオブジェクトをハイライトするかどうかを指定します。

    -----------------------------------------

    ignoreDagHierarchy (boolean): このフラグはDAGオブジェクトをそのDAG階層に表示するかどうかを指定します。警告:ほかのフィルタリングという方式なしで、このフラグを使用すると、非常にわかりにくいアウトライナ(Outliner)になってしまいます。

    -----------------------------------------

    ignoreHiddenAttribute (boolean): アウトライナでノードの「hiddeninoutliner」フラグを無視するかどうかを設定します。

    -----------------------------------------

    ignoreOutlinerColor (boolean): アウトライナでノードの「useoutlinercolor」フラグを無視するかどうかを設定します。

    -----------------------------------------

    isChildSelected (name): このフラグで、指定した項目の1つまたは複数の子がアウトライナ(Outliner)で選択されているかどうかを照会できます。項目は、固有のDAGパスを使用している必要があります。指定した項目がアウトライナ(Outliner)に複数回表示される場合、アウトライナの1つまたは複数の子が選択されていれば、その結果はtrueであることに注意してください。

    -----------------------------------------

    isSet (int): 指定した行にある項目がセットである場合は、trueを返します。

    -----------------------------------------

    isSetMember (int): 指定した行にある項目がセットメンバーである場合は、trueを返します。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    longNames (boolean): インタフェースでアトリビュートにロングネームまたはショートネームのどちらを使用するかを制御します。-niceNameフラグが設定されている場合、このフラグは無視されることに注意してください。既定はショートネームです。照会するとbooleanを返します。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    mapMotionTrails (boolean): アウトライナのモーション軌跡を、それが追跡しているオブジェクトに置き換えるかどうかを設定します。

    -----------------------------------------

    masterOutliner (string): このフラグは、このアウトライナ(Outliner)がオブジェクトを共有したり、提示する、アウトライナの名前です。アウトライナ(Outliner)が共有される場合、マスターのアウトライナから状態情報はすべて得られ、またマスターのアウトライナに適用されます。

    -----------------------------------------

    niceNames (boolean): アトリビュート名をもっとユーザフレンドリーで読みやすい表示にするかどうかを制御します。オンの場合、longNamesフラグは無視されます。これがオフの場合、アトリビュート名は、longNamesフラグに応じてロングネームまたはショートネームで表示されます。既定はオンです。照会するとbooleanを返します。

    -----------------------------------------

    object (name): このフラグはparentObjectフラグとともに使用し、指定したオブジェクトの親オブジェクトの名前を取得します。

    -----------------------------------------

    organizeByClip (boolean): trueの場合、タイムエディタのクリップを含むノードを表示すると、アトリビュートは所属するクリップに従って表示されます。例:Clip1Attr1Attr2Clip2Attr1がfalseの場合、アウトライナ(Outliner)は主にアトリビュートを基準にして整理されます。例:Attr1Clip1Clip2Attr2Clip1

    -----------------------------------------

    organizeByLayer (boolean): trueの場合、アニメーションレイヤを含むノードを表示すると、アトリビュートは所属するレイヤに従って表示されます。例:Layer1Attr1Attr2Layer2Attr1がfalseの場合、アウトライナ(Outliner)は主にアトリビュートを基準にして整理されます。例:Attr1Layer1Layer2Attr2Layer1

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    parentObject (boolean): 

    -----------------------------------------

    pinPlug (name): 名前の付いたプラグを固定し、入力する選択接続に関係なく常時アウトライナに表示されるようにします。照会モードでは、固定されたプラグのリストを返します。

    -----------------------------------------

    refresh (boolean): アウトライナ自体が更新されます。

    -----------------------------------------

    removeFromCurrentSet (int): それらの現在のセットから、セットの選択したメンバーを除去します。現在のセットは、指定した行が属している項目のセットです。選択した項目がない場合は、指定した行の項目が現在のセットから除去されます。

    -----------------------------------------

    renameItem (int): アウトライナ内の指定した行インデックスの項目名を変更します。

    -----------------------------------------

    renameSelectedItem (boolean): アウトライナ内の最初の選択項目の名前を変更します。

    -----------------------------------------

    renderFilterActive (boolean): これは、レンダリング設定フィルタがアクティブな場合、つまり、4つのレンダーフィルタ(選択された内部レイヤ、選択された外部レイヤ、すべての内部レイヤ、すべての外部レイヤ)の1つがアウトライナに現在適用されている場合にtrueを返し、それ以外の場合はfalseを返す照会専用フラグです。

    -----------------------------------------

    renderFilterIndex (int): 渡されたインデックスにレンダーセットアップフィルタを設定します。これは、アウトライナ(Outliner)にフィルタが表示され、その選択項目がロックされていない場合にのみ機能します。有効なインデックスは、次のとおりです。0-シーン2-選択された内部レイヤ3-選択された外部レイヤ4-すべての内部レイヤ5-すべての外部レイヤ既定:シーン0。照会モードでは、フィルタの現在のインデックスが返されます。

    -----------------------------------------

    renderFilterVisible (boolean): アウトライナのレンダーセットアップフィルタの表示/非表示を切り替えます。照会モードでは、レンダーセットアップフィルタが表示されるかどうかを返します。

    -----------------------------------------

    selectCommand (script): 項目を選択したときに実行されるコマンドです。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    selectionOrder (string): セレクションリストでのオブジェクトのソート方法を指定します。現在認識される値は、選択順でソートする「chronological」、アウトライナ(Outliner)と同じ順序でオブジェクトをソートする「display」です。

    -----------------------------------------

    setFilter (string): 表示内容のフィルタに使用されるフィルタの名前を指定します(ある場合)。

    -----------------------------------------

    setsIgnoreFilters (boolean): このフラグは、フィルタを無視してセットを展開し、セットメンバーを表示するかどうかを指定します(既定はtrue)。

    -----------------------------------------

    showAnimCurvesOnly (boolean): このフラグはshowConnectedフラグを修正します。showConnectedがtrueに設定されていれば、このフラグはアニメーションカーブに接続されたアトリビュートのみを表示します。showConnectedがfalseに設定されていれば、このフラグは何もしません。

    -----------------------------------------

    showAnimLayerWeight (boolean): trueの場合、アニメーションレイヤを持つノードを表示すると、キー設定されている場合はレイヤのウェイトが表示されます。

    -----------------------------------------

    showAssets (boolean): このフラグは、アセットをアウトライナ(Outliner)に表示するかどうかを指定します。

    -----------------------------------------

    showAssignedMaterials (boolean): シェイプの下に割り当てられたマテリアルを表示するかどうかを指定します。

    -----------------------------------------

    showAttrValues (boolean): このフラグは、アトリビュート値またはアトリビュート名が表示されるかどうかを指定します。注:現時点で値を表示できるのは、文字列アトリビュートのみです。

    -----------------------------------------

    showAttributes (boolean): アトリビュートを表示するかどうかを指定します。

    -----------------------------------------

    showCompounds (boolean): このフラグは、複合アトリビュートを表示するか、またはリーフアトリビュートのみを表示するかを指定します。注:showConnectedがtrueで複合アトリビュートが接続されている場合は引き続き表示されます。

    -----------------------------------------

    showConnected (boolean): このフラグはshowAttributesフラグを修正します。showAttributesがtrueに設定されていれば、このフラグはディペンデンシーグラフに接続されているアトリビュートのみを表示します。showAttributesがfalseに設定されていれば、このフラグは何もしません。

    -----------------------------------------

    showContainedOnly (boolean): このフラグは、コンテナに属するノードをこのコンテナノードの下にのみ表示するかどうかを指定します。指定しなければ、ワールドの下にも表示されます。

    -----------------------------------------

    showContainerContents (boolean): このフラグは、コンテナの内容をアウトライナ(Outliner)のコンテナノードの下に表示するかどうかを指定します。

    -----------------------------------------

    showDagOnly (boolean): このフラグは、ディペンデンシーグラフオブジェクトをすべて表示するか、またはDAGオブジェクトだけを表示するかを指定します。

    -----------------------------------------

    showLeafs (boolean): このフラグは、リーフアトリビュートを表示するか、または複合アトリビュートのみを表示するかを指定します。注:showConnectedがtrueでリーフアトリビュートが接続されている場合は引き続き表示されます。

    -----------------------------------------

    showMuteInfo (boolean): このフラグは、ミュート情報が表示されるかどうかを指定します。

    -----------------------------------------

    showNamespace (boolean): このフラグは、ネームスペースがルートと異なる場合に、オブジェクトすべてのネームスペースを表示するかどうかを指定します。

    -----------------------------------------

    showNumericAttrsOnly (boolean): このフラグは、すべてのアトリビュートを表示するか、または数値アトリビュートのみを表示するかを指定します。注:showConnectedがtrueでアトリビュートが接続されている場合は引き続き表示されます。

    -----------------------------------------

    showParentContainers (boolean): このフラグは、コンテナ/アセットに属するノードが、アウトライナでもそのコンテナ/アセットを表示するかどうかを指定します。

    -----------------------------------------

    showPinIcons (boolean): 固定解除されたプラグの固定アイコンを表示するかどうかを設定します。

    -----------------------------------------

    showPublishedAsConnected (boolean): このフラグは、パブリッシュされたアトリビュートを斜体で表示します。指定しなければ、宛先として接続されたアトリビュートのみ斜体で表示されます。

    -----------------------------------------

    showReferenceMembers (boolean): アウトライナ内のリファレンスノードでリファレンスノードメンバーを表示するかどうかを指定します。

    -----------------------------------------

    showReferenceNodes (boolean): リファレンスノードを表示するかどうかを指定します。

    -----------------------------------------

    showSelected (boolean): trueの場合、選択した項目はアウトライナ(Outliner)で展開されます。

    -----------------------------------------

    showSetMembers (boolean): trueで展開されている場合、その展開されたセットのメンバーが表示されます。falseの場合、ほかのセットだけが表示されます。

    -----------------------------------------

    showShapes (boolean): シェイプを表示するかどうかを指定します。

    -----------------------------------------

    showTextureNodesOnly (boolean): このフラグはshowConnectedフラグを修正します。showConnectedがtrueに設定されていれば、このフラグはテクスチャノードに接続されたアトリビュートのみを表示します。showConnectedがfalseに設定されていれば、このフラグは何もしません。

    -----------------------------------------

    showTimeEditor (boolean): trueの場合は、タイムエディタ(TimeEditor)に関連するすべてのノードが階層として表示されます。

    -----------------------------------------

    showUVAttrsOnly (boolean): このフラグは、すべてのアトリビュートを表示するか、またはUVアトリビュートのみを表示するかを指定します。注:現時点で表示されるアトリビュートはShape.uvSet.uvSetNameのみです。

    -----------------------------------------

    showUnitlessCurves (boolean): このフラグは、(-expandConnectionsと組み合わせて)接続の展開時に単位のないアニメーションカーブを表示するかどうかを指定します。

    -----------------------------------------

    showUpstreamCurves (boolean): showAttributesとexpandConnectionsの両方ともtrueの場合に、どのアトリビュートを表示するかを正確に指定します。trueの場合は、ディペンデンシーグラフを上流に向かって選択済みプラグをドライブするすべてのカーブを検索します(たとえば、通常のドリブンキーセットアップでは複数のカーブが表示されますが、最初にドリブンキーカーブが見つかり、それからソースオブジェクトをドライブする実際のアニメーションカーブが見つかります)。falseの場合は、見つかった最初のカーブのみが表示されます。falseの場合でも、たとえばblendWeightedノードを使用して複数のカーブを結合すれば、複数のカーブを表示できます。

    -----------------------------------------

    sortOrder (string): オブジェクトのソート方法を指定します。現在認識される値は、ソートなしの場合の「none」、およびDAGオブジェクトを名前でソートする場合の「dagName」です。注:a）非DAGオブジェクトは、常にnodeTypeおよび名前でソートされます。b）sortOrderが「dagName」に設定されている場合、オブジェクトをドラッグ＆ドロップで並べ替えることはできませんが、再ペアレント化は可能です。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    transmitFilters (boolean): このフラグは、アトリビュートフィルタが有効な場合に、selectionConnectionの値の入力方法を指定します。このフラグがtrueに設定されている場合、フィルタを通過したアトリビュートはすべてselectionConnectionに配置されます。既定ではこのフラグはfalseです。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    unpinPlug (name): 名前の付いたプラグを固定解除します。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: string(エディタの名前)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def outlinerPanel(control: bool = False,copy: str = "",createString: bool = False,defineTemplate: str = "",docTag: str = "",editString: bool = False,exists: bool = False,init: bool = False,isUnique: bool = False,label: str = "",menuBarRepeatLast: bool = False,menuBarVisible: bool = False,needsInit: bool = False,outlinerEditor: bool = False,parent: str = "",popupMenuProcedure: str = "",replacePanel: str = "",tearOff: bool = False,tearOffCopy: str = "",tearOffRestore: bool = False,unParent: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドは、アウトライナ(Outliner)エディタだけを含むアウトライナ パネルを作成、編集、照会します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    control (boolean): このパネルの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:パネルにはコントロールがないことがあります。コントロールが存在しない場合、このフラグは""を返します。

    -----------------------------------------

    copy (string): このパネルを指定したパネルのコピーにします。両方のパネルは同じタイプである必要があります。

    -----------------------------------------

    createString (boolean): パネルの作成に使用するコマンド文字列

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): Mayaのパネルにタグをアタッチします。

    -----------------------------------------

    editString (boolean): パネルの編集に使用するコマンド文字列

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    init (boolean): パネルの既定の状態を初期化します。これは、file-newとfile-openによって自動的に実行されます。

    -----------------------------------------

    isUnique (boolean): このパネルタイプのインスタンスが1つだけ許可されている場合、trueを返します。

    -----------------------------------------

    label (string): ユーザが読みやすいパネル用ラベルを指定します。

    -----------------------------------------

    menuBarRepeatLast (boolean): メニューヘッダを中マウスボタンでクリックしたときに、最後に選択したメニュー項目を繰り返すかどうかをコントロールします。

    -----------------------------------------

    menuBarVisible (boolean): パネルのメニューバーを表示するかどうかを制御します。

    -----------------------------------------

    needsInit (boolean): (内部)OnEditは、初期化が必要なものとしてパネルをマークします。照会すると、初期化が必要なものとしてパネルがマークされているかどうかを返します。file-newとfile-openで使用されます。

    -----------------------------------------

    outlinerEditor (boolean): このフラグは、パネルに含まれるアウトライナ(Outliner)エディタの名前を返します。

    -----------------------------------------

    parent (string): このパネルの親のレイアウトを指定します。

    -----------------------------------------

    popupMenuProcedure (script): パネルのポップアップメニューを作成するためにコールされるプロシージャを指定します。既定値は「buildPanelPopupMenu」です。プロシージャは、パネル名である文字列引数を持つ必要があります。

    -----------------------------------------

    replacePanel (string): 指定したパネルをこのパネルと置き換えます。ターゲットパネルが同じレイアウト内にある場合、入れ替えを実行します。

    -----------------------------------------

    tearOff (boolean): このパネルを切り離し、パネルの親としてのpaneLayoutを持つフローティングウィンドウにします。照会すると、パネルが独自のウィンドウに切り離されたかどうかを返します。

    -----------------------------------------

    tearOffCopy (string): このパネルを、指定したソースパネルのコピーを切り離したウィンドウとして作成します。

    -----------------------------------------

    tearOffRestore (boolean): パネルが切り離されていて、フォーカスされている場合に、パネルを復元します。パネルがドッキングされている場合は、ドッキングされたウィンドウ内でアクティブなパネルになります。パネルを切り離す場合のみに使用される-to/-tearOffフラグではなく、このフラグをすべてのパネルに追加される既定のフラグにする必要があります。

    -----------------------------------------

    unParent (boolean): パネルをそのレイアウトから除去するように指定します。照会には使用できません。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: string(パネルの名前)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def panel(control: bool = False,copy: str = "",createString: bool = False,defineTemplate: str = "",docTag: str = "",editString: bool = False,exists: bool = False,init: bool = False,isUnique: bool = False,label: str = "",menuBarRepeatLast: bool = False,menuBarVisible: bool = False,needsInit: bool = False,parent: str = "",popupMenuProcedure: str = "",replacePanel: str = "",tearOff: bool = False,tearOffCopy: str = "",tearOffRestore: bool = False,unParent: bool = False,useTemplate: str = "") -> None:
    """
    パネルのプロパティの編集または照会ができます。パネルの共通プロパティの中には、このコマンドで使用できないものもあります。-tearOff や -replacePanel などのフラグでは、明示的なパネル コマンドを使用する必要があります。コマンド「getPanel -typeOf panelName」では、パネルの明示的なタイプを返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    control (boolean): このパネルの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:パネルにはコントロールがないことがあります。コントロールが存在しない場合、このフラグは""を返します。

    -----------------------------------------

    copy (string): このパネルを指定したパネルのコピーにします。両方のパネルは同じタイプである必要があります。

    -----------------------------------------

    createString (boolean): パネルの作成に使用するコマンド文字列

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): Mayaのパネルにタグをアタッチします。

    -----------------------------------------

    editString (boolean): パネルの編集に使用するコマンド文字列

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    init (boolean): パネルの既定の状態を初期化します。これは、file-newとfile-openによって自動的に実行されます。

    -----------------------------------------

    isUnique (boolean): このパネルタイプのインスタンスが1つだけ許可されている場合、trueを返します。

    -----------------------------------------

    label (string): ユーザが読みやすいパネル用ラベルを指定します。

    -----------------------------------------

    menuBarRepeatLast (boolean): メニューヘッダを中マウスボタンでクリックしたときに、最後に選択したメニュー項目を繰り返すかどうかをコントロールします。

    -----------------------------------------

    menuBarVisible (boolean): パネルのメニューバーを表示するかどうかを制御します。

    -----------------------------------------

    needsInit (boolean): (内部)OnEditは、初期化が必要なものとしてパネルをマークします。照会すると、初期化が必要なものとしてパネルがマークされているかどうかを返します。file-newとfile-openで使用されます。

    -----------------------------------------

    parent (string): このパネルの親のレイアウトを指定します。

    -----------------------------------------

    popupMenuProcedure (script): パネルのポップアップメニューを作成するためにコールされるプロシージャを指定します。既定値は「buildPanelPopupMenu」です。プロシージャは、パネル名である文字列引数を持つ必要があります。

    -----------------------------------------

    replacePanel (string): 指定したパネルをこのパネルと置き換えます。ターゲットパネルが同じレイアウト内にある場合、入れ替えを実行します。

    -----------------------------------------

    tearOff (boolean): このパネルを切り離し、パネルの親としてのpaneLayoutを持つフローティングウィンドウにします。照会すると、パネルが独自のウィンドウに切り離されたかどうかを返します。

    -----------------------------------------

    tearOffCopy (string): このパネルを、指定したソースパネルのコピーを切り離したウィンドウとして作成します。

    -----------------------------------------

    tearOffRestore (boolean): パネルが切り離されていて、フォーカスされている場合に、パネルを復元します。パネルがドッキングされている場合は、ドッキングされたウィンドウ内でアクティブなパネルになります。パネルを切り離す場合のみに使用される-to/-tearOffフラグではなく、このフラグをすべてのパネルに追加される既定のフラグにする必要があります。

    -----------------------------------------

    unParent (boolean): パネルをそのレイアウトから除去するように指定します。照会には使用できません。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def panelConfiguration(addPanel: Tuple[bool, str, str, str, str] = tuple(False, "", "", "", ""),configString: str = "",createStrings: bool = False,defaultImage: str = "",defineTemplate: str = "",editStrings: bool = False,exists: bool = False,image: str = "",isFixedState: bool = False,label: str = "",labelStrings: bool = False,numberOfPanels: bool = False,removeAllPanels: bool = False,removeLastPanel: bool = False,replaceCreateString: Tuple[int, str] = tuple(1, ""),replaceEditString: Tuple[int, str] = tuple(1, ""),replaceFixedState: Tuple[int, bool] = tuple(1, False),replaceLabel: Tuple[int, str] = tuple(1, ""),replacePanel: Tuple[int, bool, str, str, str, str] = tuple(1, False, "", "", "", ""),replaceTypeString: Tuple[int, str] = tuple(1, ""),sceneConfig: bool = False,typeStrings: bool = False,useTemplate: str = "",userCreated: bool = False) -> None:
    """
    このコマンドは、ビュー構成オブジェクトを作成します。一般的に、このメソッド コマンドは直接コールしません。その代わりにパネル エディタ(Panel Editor)を使用してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addPanel ([boolean, string, string, string, string]): 指定したパネルを構成に追加します。引数は次のとおりです。isFixed、Label文字列、Type文字列、Create文字列、Edit文字列です。

    -----------------------------------------

    configString (string): パネルを配置する文字列を指定します。

    -----------------------------------------

    createStrings (boolean): パネルのCreate文字配列を返します。

    -----------------------------------------

    defaultImage (string): この構成の既定のイメージ。既定のイメージはいったん設定すると、変更できません。フラグ-i/imageでイメージを設定すると、その値が優先されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    editStrings (boolean): パネルのEdit文字配列を返します。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    image (string): この構成のユーザ指定イメージ。このフラグは、既定のイメージを無効にするために使用します。

    -----------------------------------------

    isFixedState (boolean): パネルが固定状態であるかどうかを表す整数配列を返します。

    -----------------------------------------

    label (string): 設定ラベルを指定します。

    -----------------------------------------

    labelStrings (boolean): パネルのLabel文字配列を返します。

    -----------------------------------------

    numberOfPanels (boolean): 設定のパネル数を返します。

    -----------------------------------------

    removeAllPanels (boolean): 設定内の最後のパネルを除去します。

    -----------------------------------------

    removeLastPanel (boolean): 設定内の最後のパネルを除去します。

    -----------------------------------------

    replaceCreateString ([int, string]): 指定したCreate文字列を置き換えます。インデックスは1から始まります。

    -----------------------------------------

    replaceEditString ([int, string]): 指定したEdit文字列を置き換えます。インデックスは1から始まります。

    -----------------------------------------

    replaceFixedState ([int, boolean]): 指定した固定状態の値(true|false)を置き換えます。インデックスは1から始まります。

    -----------------------------------------

    replaceLabel ([int, string]): 指定したラベルを置き換えます。インデックスは1から始まります。

    -----------------------------------------

    replacePanel ([int, boolean, string, string, string, string]): 構成内の指定したパネルを置き換えます。引数は次のとおりです。インデックス、isFixed、Label文字列、Type文字列、Create文字列、Edit文字列です。インデックスは1から始まります。

    -----------------------------------------

    replaceTypeString ([int, string]): 指定したType文字列を置き換えます。インデックスは1から始まります。

    -----------------------------------------

    sceneConfig (boolean): 設定をシーンに接続させるかどうかを指定します。シーン設定は、シーンが開かれた場合に作成され、シーンが閉じた場合に削除されます。

    -----------------------------------------

    typeStrings (boolean): パネルのType文字配列を返します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    userCreated (boolean): 設定がユーザによって作成された場合、trueを返します。設定がユーザによって作成された場合、その設定はツールボックスの保存したレイアウトのRMBメニューに表示されます。

    -----------------------------------------

    Return Value:
    None: string作成された panelConfiguration の名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def panelHistory(back: bool = False,clear: bool = False,defineTemplate: str = "",exists: bool = False,forward: bool = False,historyDepth: int = 1,isEmpty: bool = False,suspend: bool = False,targetPane: str = "",useTemplate: str = "",wrap: bool = False) -> None:
    """
    パネル ヒストリ オブジェクトが作成されます。特定 paneLayout のオブジェクトが対象となり、その paneLayout 内のビュー構成の変更でヒストリ リストが作成されます。リストでは、前後に移動できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    back (boolean): ヒストリリストで1レベル戻ります。

    -----------------------------------------

    clear (boolean): ヒストリスタックをクリアします。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    forward (boolean): ヒストリリストで1レベル進みます。

    -----------------------------------------

    historyDepth (int): 維持するヒストリのレベル数を指定します。

    -----------------------------------------

    isEmpty (boolean): パネルヒストリが現在存在しない場合にtrueを返します。

    -----------------------------------------

    suspend (boolean): パネルヒストリの更新を停止するか再開するかを指定します。多数の変更を1つのヒストリイベントにまとめる場合に便利です。

    -----------------------------------------

    targetPane (string): ヒストリを維持するpaneLayoutを指定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    wrap (boolean): ヒストリを末尾と先頭で折り返すかどうかを指定します。この値は既定でtrueになっています。

    -----------------------------------------

    Return Value:
    None: string作成された panelHistory の名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def saveViewportSettings() -> None:
    """
    このコマンドは、すべての 3D ビューの設定を optionVar として保存します。これは Maya 終了時に自動的にコールされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def scriptedPanel(control: bool = False,copy: str = "",createString: bool = False,defineTemplate: str = "",docTag: str = "",editString: bool = False,exists: bool = False,init: bool = False,isUnique: bool = False,label: str = "",menuBarRepeatLast: bool = False,menuBarVisible: bool = False,needsInit: bool = False,parent: str = "",popupMenuProcedure: str = "",replacePanel: str = "",tearOff: bool = False,tearOffCopy: str = "",tearOffRestore: bool = False,type: str = "",unParent: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドは、指定した scriptedPanelType のインスタンスを作成します。パネルはグループ化された UI オブジェクト(ボタン、フィールド、グラフィカル ビュー)の集合で、アプリケーション インタフェース内をグループとして移動する、切り離して独自のウィンドウにすることなどができます。パネルが再配置または再作成される場合、その UI の状態は維持されます。スクリプト パネルは MEL で定義されたパネルで、要求されるすべてのコールバックを MEL プロシージャとして使用できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    control (boolean): このパネルの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:パネルにはコントロールがないことがあります。コントロールが存在しない場合、このフラグは""を返します。

    -----------------------------------------

    copy (string): このパネルを指定したパネルのコピーにします。両方のパネルは同じタイプである必要があります。

    -----------------------------------------

    createString (boolean): パネルの作成に使用するコマンド文字列

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): Mayaのパネルにタグをアタッチします。

    -----------------------------------------

    editString (boolean): パネルの編集に使用するコマンド文字列

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    init (boolean): パネルの既定の状態を初期化します。これは、file-newとfile-openによって自動的に実行されます。

    -----------------------------------------

    isUnique (boolean): このパネルタイプのインスタンスが1つだけ許可されている場合、trueを返します。

    -----------------------------------------

    label (string): ユーザが読みやすいパネル用ラベルを指定します。

    -----------------------------------------

    menuBarRepeatLast (boolean): メニューヘッダを中マウスボタンでクリックしたときに、最後に選択したメニュー項目を繰り返すかどうかをコントロールします。

    -----------------------------------------

    menuBarVisible (boolean): パネルのメニューバーを表示するかどうかを制御します。

    -----------------------------------------

    needsInit (boolean): (内部)OnEditは、初期化が必要なものとしてパネルをマークします。照会すると、初期化が必要なものとしてパネルがマークされているかどうかを返します。file-newとfile-openで使用されます。

    -----------------------------------------

    parent (string): このパネルの親のレイアウトを指定します。

    -----------------------------------------

    popupMenuProcedure (script): パネルのポップアップメニューを作成するためにコールされるプロシージャを指定します。既定値は「buildPanelPopupMenu」です。プロシージャは、パネル名である文字列引数を持つ必要があります。

    -----------------------------------------

    replacePanel (string): 指定したパネルをこのパネルと置き換えます。ターゲットパネルが同じレイアウト内にある場合、入れ替えを実行します。

    -----------------------------------------

    tearOff (boolean): このパネルを切り離し、パネルの親としてのpaneLayoutを持つフローティングウィンドウにします。照会すると、パネルが独自のウィンドウに切り離されたかどうかを返します。

    -----------------------------------------

    tearOffCopy (string): このパネルを、指定したソースパネルのコピーを切り離したウィンドウとして作成します。

    -----------------------------------------

    tearOffRestore (boolean): パネルが切り離されていて、フォーカスされている場合に、パネルを復元します。パネルがドッキングされている場合は、ドッキングされたウィンドウ内でアクティブなパネルになります。パネルを切り離す場合のみに使用される-to/-tearOffフラグではなく、このフラグをすべてのパネルに追加される既定のフラグにする必要があります。

    -----------------------------------------

    type (string): このフラグは、作成するスクリプトパネルのタイプを指定します。

    -----------------------------------------

    unParent (boolean): パネルをそのレイアウトから除去するように指定します。照会には使用できません。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringスクリプト パネルの名前です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def scriptedPanelType(addCallback: str = "",copyStateCallback: str = "",createCallback: str = "",customView: bool = False,defineTemplate: str = "",deleteCallback: str = "",exists: bool = False,hotkeyCtxClient: str = "",initCallback: str = "",label: str = "",obsolete: bool = False,removeCallback: str = "",retainOnFileOpen: bool = False,saveStateCallback: str = "",unique: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドは、スクリプト パネルのタイプに関するコールバックを定義します。このコマンドによって作成されるパネル タイプは、スクリプト パネルの作成時に使用されます。'scriptedPanel' コマンドも参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addCallback (string): このフラグは、パネルを特定のコントロールレイアウトに追加するためのコールバックプロシージャを指定します。プロシージャがコールされると、必ず親レイアウトが現在の既定レイアウトになります。親レイアウトの名前が必要な場合は、「setParent-q」を使用して検索できます。エディタはすべてここでペアレント化する必要があります。次のとおりです:globalprocprocName(string$panelName){....}

    -----------------------------------------

    copyStateCallback (string): このフラグは、パネルのティアオフコピーが作成されたときにパネルの状態をコピーするコールバックプロシージャを指定します。コールバックプロシージャの書式は次のとおりです:globalprocprocName(string$panelName,string$newPanelName){....}このプロシージャは、addCallbackプロシージャの実行が終了した直後に実行されます。この時点で、コピーされたパネルは完全に作成されてアクセス可能になっており、パネル設定のコピーが容易になります。注:addCallbackプロシージャは、createCallbackプロシージャがコールされた後でコールされます。

    -----------------------------------------

    createCallback (string): このフラグは、まず最初にパネルオブジェクトを作成するためのコールバックプロシージャを指定します。ここではUIは作成されません。パネルによって所有されるエディタは、ここではペアレント化されずに作成されます。コールバックプロシージャの書式は次のとおりです:globalprocprocName(string$panelName){....}

    -----------------------------------------

    customView (boolean): このフラグは、このビューがMPx3dModelViewタイプに対するカスタム3Dビューであるかどうかを指定します。このフラグは、MPx3dModelViewタイプについてのみ使用してください。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    deleteCallback (string): このフラグは、最後にパネルを削除するためのコールバックプロシージャを指定します。コールバックプロシージャの書式は次のとおりです:globalprocprocName(string$panelName){....}

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    hotkeyCtxClient (string): このフラグは、このパネルタイプに対するホットキーコンテキストクライアントの名前を指定するために使用されます。既定では、パネルタイプと同じです。

    -----------------------------------------

    initCallback (string): このフラグは、初期化コールバックのためのコールバックプロシージャを指定します。このプロシージャは必要に応じてファイル>新規(File>New)とファイル>開く(File>Open)でコールされ、パネルは開始状態に再初期化されます。この場合、パネルはペアレント化されることもされないこともあります。コールバックプロシージャの書式は次のとおりです:globalprocprocName(string$panelName){....}

    -----------------------------------------

    label (string): パネルのラベル

    -----------------------------------------

    obsolete (boolean): このフラグは、このタイプがMayaで使用されなくなったことを指定します。

    -----------------------------------------

    removeCallback (string): このフラグは、パネルを現在のコントロールレイアウトから除去するためのコールバックプロシージャを指定します。すべてのエディタをここでペアレント化解除します。コールバックプロシージャの書式は次のとおりです:globalprocprocName(string$panelName){....}

    -----------------------------------------

    retainOnFileOpen (boolean): このフラグは、ファイルを開く際にパネル設定を復元した後もこのタイプを保持するかどうかを指定します。既定はfalseです。

    -----------------------------------------

    saveStateCallback (string): このフラグは、パネルの状態を保存するためのコールバックプロシージャを指定します。コールバックプロシージャの書式は次のとおりです:globalprocstringprocName(string$panelName){....}procは文字列を返すことに注意してください。この文字列はcreateCallbackがコールされた後で実行され、パネルの状態を容易に復元できるようにします。

    -----------------------------------------

    unique (boolean): このフラグは、所定の時間に存在できるこのタイプのパネルのインスタンスを1つにするかどうかを指定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringスクリプト パネル タイプの名前です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def setFocus() -> None:
    """
    引数として渡された特定のコントロールまたはパネルにキーボード フォーカスを設定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def spreadSheetEditor(allAttr: bool = False,attrRegExp: str = "",control: bool = False,defineTemplate: str = "",docTag: str = "",execute: str = "",exists: bool = False,filter: str = "",fixedAttrList: Tuple[str] = tuple(""),forceMainConnection: str = "",highlightConnection: str = "",keyableOnly: bool = False,lockMainConnection: bool = False,longNames: bool = False,mainListConnection: str = "",niceNames: bool = False,panel: str = "",parent: str = "",precision: int = 1,selectedAttr: bool = False,selectionConnection: str = "",showShapes: bool = False,stateString: bool = False,unParent: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,useTemplate: str = "") -> None:
    """
    新規のスプレッドシート エディタを現在のレイアウトで作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allAttr (boolean): 現在、表示されているアトリビュート名すべてのリストを返します。照会されていない場合、このフラグは無視されます。

    -----------------------------------------

    attrRegExp (string): 現在表示されているアトリビュート名をフィルタします。このエクスプレッションは、アトリビュート名のサブストリングに一致します(大文字と小文字を区別)。

    -----------------------------------------

    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    execute (string): spreadSheetのすべての選択したセルに対してコマンド文字列を一度、直ちに、実行します。コマンドが実行される前に、「#A」にセルのアトリビュート名が代入されます。「#N」にはセルのノード名が代入されます。「#P」には、ノードのフルパス名が代入されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    fixedAttrList (string[]): 強制的に、エディタに指定した名前のアトリビュートだけを表示します。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    keyableOnly (boolean): キー設定可能なアトリビュートだけを表示します。既定ではtrueです。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    longNames (boolean): アトリビュート名をロング名、またはショート名のどちらで表示するか制御します。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    niceNames (boolean): アトリビュート名をもっとユーザフレンドリーで読みやすい表示にするかどうかを制御します。オンの場合、longNamesフラグは無視されます。これがオフの場合、アトリビュート名は、longNamesフラグに応じてロングネームまたはショートネームで表示されます。既定はオンです。照会するとbooleanを返します。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    precision (int): 小数点の右側に表示する最大桁数を指定します。0から20まで指定可能です。

    -----------------------------------------

    selectedAttr (boolean): 選択したアトリビュート名すべてのリストを返します。照会されていない場合、このフラグは無視されます。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    showShapes (boolean): trueの場合、トランスフォームが選択されていると、そのシェイプが代わりに表示されます。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringエディタの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def viewManip(bottomLeft: bool = False,bottomRight: bool = False,compassAngle: float = 1.0,dragSnap: bool = False,drawCompass: bool = False,fitToView: bool = False,frontParameters: str = "",goDefault: bool = False,goHome: bool = False,homeParameters: str = "",levelCamera: bool = False,minOpacity: float = 1.0,namespace: str = "",postCommand: str = "",preCommand: str = "",preserveSceneUp: bool = False,resetFront: bool = False,resetHome: bool = False,restoreCenter: bool = False,selectionLockParameters: str = "",setFront: bool = False,setHome: bool = False,size: str = "",toggleSelectionLock: bool = False,topLeft: bool = False,topRight: bool = False,visible: bool = False,zoomToFitScene: bool = False) -> None:
    """
    ビュー立方体マニピュレータへの MEL アクセス。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    bottomLeft (boolean): 画面の左下に立方体を配置します。

    -----------------------------------------

    bottomRight (boolean): 画面の右下に立方体を配置します。

    -----------------------------------------

    compassAngle (float): コンパスを回転する角度(度数)。

    -----------------------------------------

    dragSnap (boolean): オービット方向のスナップを有効化し、ドラッグ操作中に立方体部分の方向を表示します。

    -----------------------------------------

    drawCompass (boolean): ビュー立方体の下にコンパスを表示します。

    -----------------------------------------

    fitToView (boolean): シーンのバウンディングボックスを、アクティブビューに合わせます。

    -----------------------------------------

    frontParameters (string): 正面の位置のパラメータ文字列です。

    -----------------------------------------

    goDefault (boolean): 既定の位置に移動します。

    -----------------------------------------

    goHome (boolean): ホームポジションに移動します。

    -----------------------------------------

    homeParameters (string): ホームポジションのパラメータ文字列です。

    -----------------------------------------

    levelCamera (boolean): カメラビューの回転を地表プレーンに対して相対的に平らにします。

    -----------------------------------------

    minOpacity (float): カーソルが離れている場合のビュー立方体の不透明度レベル(範囲[0,1])(カーソルがビュー立方体領域にある場合は完全に不透明です)。

    -----------------------------------------

    namespace (string): オブジェクトに使用するネームスペースです。

    -----------------------------------------

    postCommand (string): 移動した後に実行するコマンドです。

    -----------------------------------------

    preCommand (string): 移動する前に実行するコマンドです。

    -----------------------------------------

    preserveSceneUp (boolean): シーンの「アップ」方向を保持するかどうかを指定します。

    -----------------------------------------

    resetFront (boolean): 正面の位置をリセットします。

    -----------------------------------------

    resetHome (boolean): ホームポジションをリセットします。

    -----------------------------------------

    restoreCenter (boolean): シーンのオービットまたはタンブルを行うピボットポイントを、シーンのバウンディングボックスの中央に再配置します。

    -----------------------------------------

    selectionLockParameters (string): 選択ロックのパラメータを含む文字列です。

    -----------------------------------------

    setFront (boolean): 現在のビューを正面ビューに設定します。

    -----------------------------------------

    setHome (boolean): 現在のビューをホームビューに設定します。

    -----------------------------------------

    size (string): ビューキューブのサイズを設定または照会します。値は「tiny」、「small」、「normal」、「large」、「auto」のいずれかです。「auto」に設定すると、ビューキューブはビューにもっとも適切なサイズに自動的に設定されます。

    -----------------------------------------

    toggleSelectionLock (boolean): 選択ロックを切り替えます。

    -----------------------------------------

    topLeft (boolean): 画面の左上に立方体を配置します。

    -----------------------------------------

    topRight (boolean): 画面の右上に立方体を配置します。

    -----------------------------------------

    visible (boolean): ビューマニピュレータを表示/非表示にします。

    -----------------------------------------

    zoomToFitScene (boolean): アニメートされたトランジション中にカメラをズームし、ビューポートのシーンオブジェクトに合わせます。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def visor(addFolder: bool = False,addNodes: str = "",allowPanningInX: bool = False,allowPanningInY: bool = False,allowZooming: bool = False,command: str = "",deleteFolder: str = "",editFolder: str = "",folderList: str = "",menu: str = "",name: str = "",nodeType: str = "",openDirectories: bool = False,openFolder: bool = False,parent: str = "",path: str = "",popupMenuScript: str = "",rebuild: bool = False,refreshAllSwatches: bool = False,refreshSelectedSwatches: bool = False,refreshSwatch: str = "",reset: bool = False,restrictPanAndZoom: bool = False,saveSwatches: bool = False,scrollBar: str = "",scrollPercent: float = 1.0,selectedGadgets: str = "",showDividers: bool = False,showFiles: bool = False,showFolders: bool = False,showNodes: bool = False,stateString: bool = False,style: str = "",transform: str = "",type: str = "") -> None:
    """
    バイザー(Visor)の UI 要素を作成または操作します。バイザーを使用して、シーンの内容、特にレンダリング関連ノードを表示し、またシェーダ ライブラリやテクスチャ ライブラリなど、ディスク上にあるファイルをシーンに読み込んで表示します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addFolder (boolean): 現在のビジュアルブラウザに、新規フォルダを追加します。

    -----------------------------------------

    addNodes (string): ディペンデンシーグラフノードを、ユーザ定義のカスタムフォルダに名前順に追加します。引数は、引用符に囲まれた文字列です。複数のノード名がある場合は空白で区切ります。

    -----------------------------------------

    allowPanningInX (boolean): バイザーの内容を水平方向にパンできるようにするかどうかを指定します。既定はtrueです。

    -----------------------------------------

    allowPanningInY (boolean): バイザーのコンテンツを垂直方向にパンできるようにするかどうかを指定します。既定はtrueです。

    -----------------------------------------

    allowZooming (boolean): バイザーの内容を拡大、縮小できるようにするかどうかを指定します。既定はtrueです。

    -----------------------------------------

    command (string): フォルダに追加するノードのリストを返すMELコマンドです。

    -----------------------------------------

    deleteFolder (string): 指定したフォルダと、そのすべての子を削除します。

    -----------------------------------------

    editFolder (string): 既存のフォルダの名前とMELコマンドを編集します。

    -----------------------------------------

    folderList (string): バイザー内のフォルダの文字配列を返します。

    -----------------------------------------

    menu (string): ポップアップメニューを表示するために実行するスクリプトの名前を設定します。

    -----------------------------------------

    name (string): 新しいフォルダの名前です。

    -----------------------------------------

    nodeType (string): nodeTypeInDAG型のフォルダで使用されるノードタイプです。

    -----------------------------------------

    openDirectories (boolean): 新規のフォルダを追加する場合、サブディレクトリを表示するかどうかを指定します。既定ではサブディレクトリを表示しません。

    -----------------------------------------

    openFolder (boolean): 新規のフォルダを追加する場合、既定で開くか閉じるかを指定します。既定は閉じるです。

    -----------------------------------------

    parent (string): このフォルダの親フォルダです。

    -----------------------------------------

    path (string): フォルダに表示されるファイルシステムディレクトリへのパスです。

    -----------------------------------------

    popupMenuScript (string): バイザーで右マウスボタンを押した場合に、コールするスクリプトを指定します。右マウスボタンを押したエディタの名前は、スクリプトのコール時にスクリプトにアペンドされます。

    -----------------------------------------

    rebuild (boolean): フォルダをインタラクティブに追加した後、バイザーをリビルドします。

    -----------------------------------------

    refreshAllSwatches (boolean): バイザーに現在表示されているすべてのファイルのスウォッチをリフレッシュします。

    -----------------------------------------

    refreshSelectedSwatches (boolean): 任意のバイザーで現在選択しているすべてのファイルのスウォッチをリフレッシュします。

    -----------------------------------------

    refreshSwatch (string): 指定したパスのファイルのスウォッチをリフレッシュします。

    -----------------------------------------

    reset (boolean): 新しいビジュアルブラウザを構築するため、以前にロードしたフォルダ記述をすべてクリアします。

    -----------------------------------------

    restrictPanAndZoom (boolean): バイザーをパンやズームする際、内容がバイザーの表示領域よりも小さい場合に、その内容をバイザーの左上隅に維持するかどうかを指定します。既定はtrueです。

    -----------------------------------------

    saveSwatches (boolean): 現在表示されているイメージファイルのスウォッチをディスクに保存します。

    -----------------------------------------

    scrollBar (string): バイザーにコネクトされたスクロールバーの名前を設定します。

    -----------------------------------------

    scrollPercent (float): スクロールバーのパーセンテージを設定します。通常、スクロールバーのコールバックで使用します。

    -----------------------------------------

    selectedGadgets (string): バイザーで現在選択しているガジェット(ファイル、フォルダ、ノード)の文字配列を返します。

    -----------------------------------------

    showDividers (boolean): バイザーがデバイダを表示するかどうかを指定します。既定はtrueです。-showDividersをfalseに設定した場合、代わりにデバイダがフォルダとして描画されます。

    -----------------------------------------

    showFiles (boolean): バイザーがファイルを表示するかどうかを指定します。既定はtrueです。

    -----------------------------------------

    showFolders (boolean): バイザーがフォルダを表示するかどうかを指定します。既定はtrueです。

    -----------------------------------------

    showNodes (boolean): バイザーがノードを表示するかどうかを指定します。既定はtrueです。

    -----------------------------------------

    stateString (boolean): バイザーにセットアップされたフォルダを保存するためのMELコマンド文字列を返します。

    -----------------------------------------

    style (string): ブラウザの表示スタイルを設定します。オプションは、outlinerアウトライナ(Outliner)スタイルのアイコンとテキストラベルが付いた単一カラムです。singleColumnイメージスタイルのアイコンとテキストラベルが付いた単一カラムです。multiColumnスウォッチの下にテキストラベルが付いた、スウォッチの複数カラムグリッドです。

    -----------------------------------------

    transform (string): nodeTypeInDAG型のフォルダで使用されるトランスフォームノードの名前です。

    -----------------------------------------

    type (string): 新しいフォルダのタイプです。オプションは、commandフォルダに表示するディペンデンシーノードのリストを返すMELコマンドです。connectedNodes指定したノード名に接続されたノードがフォルダ内に表示されます。defaultNodes既定のノードタイプを生成するMELコマンドです。このノードはシーンには属せず、シーン内の新規ノードをドラッグ＆ドロップ作成するために使用します。このタイプで使用するMELコマンドは通常、「listNodetypes」です。directoryファイルシステム内のディレクトリ名です。directoryCommandファイルシステム内のディレクトリ名を返すMELコマンドです。folder空のフォルダ(既定値)です。空のフォルダは、ディペンデンシーグラフノードをドロップすることでユーザ定義フォルダとして使用できます。nodeTypeInDAGDAG内の指定したトランスフォーム下にある指定したタイプのすべてのノードをリストします。たとえば、キャラクタの最上位のトランスフォームを指定することで、キャラクタのすべてのシェーダをリストします。shelfItemsシェルフ項目として使用するMELファイルを含むディレクトリです。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def webBrowser(annotation: str = "",back: bool = False,backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,find: str = "",forward: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),home: bool = False,isObscured: bool = False,manage: bool = False,matchCase: bool = False,matchWholeWorld: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,openURL: str = "",parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,reload: bool = False,searchForward: bool = False,statusBarMessage: str = "",stop: bool = False,urlChangedCb: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1,wrap: bool = False) -> None:
    """
    このコマンドは廃止されました。Maya の次のバージョンで除去される予定です。Maya の内部 Web ブラウザは、ご使用のブラウザと Maya を接続するプラグインに置き換えられました。Maya と外部ブラウザ アプリケーションとの通信をセットアップする方法の詳細については、ヘルプを参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    back (boolean): 1ページ戻る

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    find (string): ページ内のテキストを検索

    -----------------------------------------

    forward (boolean): 1ページ進む

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    home (boolean): ホームページに移動

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    matchCase (boolean): 一致がケースを考慮する必要がある場合はtrue

    -----------------------------------------

    matchWholeWorld (boolean): 一致がワールド全体をチェックする必要がある場合はtrue

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    openURL (string): 名前の付いたURLを開く

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    reload (boolean): 現在のページを再ロード

    -----------------------------------------

    searchForward (boolean): 検索が現在の位置から前方に移動すべき場合はtrue

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    stop (boolean): ページのロードを中止

    -----------------------------------------

    urlChangedCb (string): URLが変更された場合に呼び出すコマンドです。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    wrap (boolean): ページがラップする必要がある場合はtrueに設定します。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def attrColorSliderGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",attrNavDecision: Tuple[str, str] = tuple("", ""),attribute: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),hsvValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rgbValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rowAttach: Tuple[int, str, int] = tuple(1, "", 1),showButton: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    attrNavDecision ([name, string]): 最初の引数はアトリビュートの名前です。ボタンはアトリビュートにアタッチされ、アトリビュートと同期をとることができます。2つめの引数は、ナビゲータが実行する動作のガイドとなる、navigatorDecisionStringです。

    -----------------------------------------

    attribute (string): 3doubleタイプの固有のアトリビュート名です。新しく作成されたフィールドはアトリビュートにアタッチされ、一方を変更すると、もう一方も変更されます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    hsvValue ([float, float, float]): HSV方式でカラーを指定します。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): 既定では、このフィールドのラベルがアトリビュートの名前になります。このフラグを使用して、設定したい名前(文字列)にオーバーライドすることができます。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rgbValue ([float, float, float]): RGB方式でカラーを指定します。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    showButton (boolean): テクスチャリンクボタンの表示をコントロールします。既定ではtrue(表示)です。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string(作成されたグループの名前)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def attrControlGrp(annotation: str = "",attribute: str = "",changeCommand: str = "",enable: bool = False,exists: bool = False,handlesAttribute: str = "",hideMapButton: bool = False,label: str = "",preventOverride: bool = False) -> None:
    """
    このコマンドは、指定したアトリビュートに最適なタイプのコントロールを作成し、そのコントロールをアトリビュートと関連付けます。コントロールを変更すると、アトリビュート値も変更され、アトリビュート値を変更すると、コントロールにも反映されます。すべてのアトリビュート タイプがサポートされているわけではありません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールグループの注釈を設定または照会します。

    -----------------------------------------

    attribute (name): コントロールが表すアトリビュートを設定または照会します。アトリビュート名は、ノード名を含めて完全に指定する必要があります。サポートされていないアトリビュートタイプもありますが、大多数の一般的に使用されるアトリビュートタイプはサポートされています。

    -----------------------------------------

    changeCommand (script): コントロールグループの変更コマンドを設定または照会します。変更コマンドは、コントロールを使用してアトリビュート値を変更する場合に実行されます。

    -----------------------------------------

    enable (boolean): コントロールグループの有効/無効を設定または照会します。falseに設定すると、コントロールはグレー表示されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    handlesAttribute (name): 指定したアトリビュートに対するコントロールをこのコマンドを使用して作成できるかどうかによって、trueまたはfalseを返します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    hideMapButton (boolean): このコントロールで、マップボタンを強制的に非表示にします。

    -----------------------------------------

    label (string): コントロールグループのラベルを設定または照会します。

    -----------------------------------------

    preventOverride (boolean): コントロールグループの調整防止の状態を設定または照会します。trueの場合は、コントロールのRMBメニューで調整を行えません。

    -----------------------------------------

    Return Value:
    None: stringコントロール名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def attrFieldGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",attribute: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,extraButton: bool = False,extraButtonCommand: str = "",extraButtonIcon: str = "",extraLabel: str = "",forceAddMapButton: bool = False,fullPathName: bool = False,height: int = 1,hideMapButton: bool = False,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,maxValue: float = 1.0,minValue: float = 1.0,noBackground: bool = False,numberOfFields: int = 1,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,precision: int = 1,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",step: float = 1.0,useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    attribute (string): タイプベクトルの固有のアトリビュートの名前です。新しく作成されたフィールドはアトリビュートにアタッチされ、一方を変更すると、もう一方も変更されます。「vector」アトリビュートは、子が2つから4つのdouble値のアトリビュートからなる複合アトリビュートです。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): floatFieldsのいずれかの値が変更されると、コマンド文字列を実行します。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    extraButton (boolean): このコントロールの最後にアイコンボタンを追加します(追加のラベルの前)。

    -----------------------------------------

    extraButtonCommand (script): 追加のボタンをクリックすると、コマンド文字列が実行されます。

    -----------------------------------------

    extraButtonIcon (string): 追加のボタンのアイコンファイルの名前です。

    -----------------------------------------

    extraLabel (string): すべてのフィールドの右側に位置するオプションの文字列を設定します。

    -----------------------------------------

    forceAddMapButton (boolean): このコントロールにマップボタンを強制的に追加します。このオプションがTrueの場合、hideMapButtonオプションは抑止されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    hideMapButton (boolean): このコントロールで、マップボタンを強制的に非表示にします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): 既定では、このフィールドのラベルがアトリビュートの名前になります。このフラグを使用して、設定したい名前(文字列)にオーバーライドすることができます。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (float): すべてのフィールドの最大値を設定します。

    -----------------------------------------

    minValue (float): すべてのフィールドの最小値を設定します。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfFields (int): フィールド数を設定します。有効な値は2～4です。指定されていない場合は、既定の3です。注:ウィジェットを作成するときに-atフラグを使用した場合、アトリビュートにある子の数によってフィールドの数が決まります。注:作成後、フィールドの数を-eフラグで変更することはできません。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    precision (int): すべてのフィールドの精度を設定します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (float): すべてのフィールドの増分を設定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールのフル ネーム照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def attrFieldSliderGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",attribute: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,extraButton: bool = False,extraButtonCommand: str = "",extraButtonIcon: str = "",fieldMaxValue: float = 1.0,fieldMinValue: float = 1.0,fieldStep: float = 1.0,forceAddMapButton: bool = False,fullPathName: bool = False,height: int = 1,hideMapButton: bool = False,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,maxValue: float = 1.0,minValue: float = 1.0,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,precision: int = 1,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),sliderMaxValue: float = 1.0,sliderMinValue: float = 1.0,sliderStep: float = 1.0,statusBarMessage: str = "",step: float = 1.0,useTemplate: str = "",vertical: bool = False,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    attribute (string): doubleまたはintタイプの固有のアトリビュートの名前です。新しく作成されたフィールドはアトリビュートにアタッチされ、一方を変更すると、もう一方も変更されます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): スライダまたはfloatフィールドの値が変更されると、コマンド文字列を実行します。このコマンド文字列は、スライダをドラッグした後で1度だけ実行されます。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    extraButton (boolean): このコントロールの最後にアイコンボタンを追加します。

    -----------------------------------------

    extraButtonCommand (script): 追加のボタンをクリックすると、コマンド文字列が実行されます。

    -----------------------------------------

    extraButtonIcon (string): 追加のボタンのアイコンファイルの名前です。

    -----------------------------------------

    fieldMaxValue (float): フィールドの最大値を設定します。このフラグで、スライダよりも高いフィールドの最大値を指定できます(最大値と最小値については前記の注を参照してください)。

    -----------------------------------------

    fieldMinValue (float): フィールドの最小値を設定します。このフラグで、スライダよりも低いフィールドの最小値を指定できます(最大値と最小値については前記の注を参照してください)。

    -----------------------------------------

    fieldStep (float): floatフィールドの増分を設定します。

    -----------------------------------------

    forceAddMapButton (boolean): このコントロールにマップボタンを強制的に追加します。このオプションがTrueの場合、hideMapButtonオプションは抑止されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    hideMapButton (boolean): このコントロールで、マップボタンを強制的に非表示にします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): 既定では、このフィールドのラベルがアトリビュートの名前になります。このフラグを使用して、設定したい名前(文字列)にオーバーライドすることができます。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (float): スライダとフィールドの最大値を設定します。(最小値と最大値については前記の注を参照してくださ)。

    -----------------------------------------

    minValue (float): スライダとフィールドの最小値を設定します。（既定では、最大値と最小値はアトリビュートの内容によって設定されます。最大値と最小値が指定されていない場合、または2つのフィールドのうち1つだけが指定されている場合は、スライダは作成されません）。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    precision (int): 小数点以下の桁数を設定します(intアトリビュートにアタッチされると、これは自動的に0に設定されて上書きできません)。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    sliderMaxValue (float): スライダの最大値を設定します。スライダの最大値は、フィールドの最大値にそろえられます。

    -----------------------------------------

    sliderMinValue (float): スライダの最小値を設定します。スライダの最小値は、フィールドの最小値にそろえられます。

    -----------------------------------------

    sliderStep (float): Linuxでは、スライダのステップ値は、スライダのどちらかの側をクリックしたときに値が増減する量を表します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (float): スライダとfloatフィールドの両方の増分を設定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    vertical (boolean): このグループのコントロールの方向が水平(既定)であるか、垂直であるかを表します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def attrNavigationControlGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",attrNavDecision: Tuple[str, str] = tuple("", ""),attribute: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),connectAttrToDropped: str = "",connectNodeToDropped: str = "",connectToExisting: str = "",createNew: str = "",defaultTraversal: str = "",defineTemplate: str = "",delete: str = "",disconnect: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,extraButton: bool = False,extraButtonCommand: str = "",extraButtonIcon: str = "",fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),ignore: str = "",ignoreNotSupported: bool = False,isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,noIgnorableMenu: bool = False,noKeyableMenu: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,relatedNodes: str = "",rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",unignore: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    attrNavDecision ([name, string]): 最初の引数はアトリビュートの名前です。ボタンはアトリビュートにアタッチされ、アトリビュートと同期をとることができます。2つめの引数は、ナビゲータが実行する動作のガイドとなる、navigatorDecisionStringです。

    -----------------------------------------

    attribute (name): アトリビュートの名前を指定します。ボタンはアトリビュートにアタッチされ、アトリビュートと同期をとることができます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    connectAttrToDropped (script): アトリビュートにノードがドラッグ＆ドロップされたときに実行されるスクリプトです(マルチリスタとアトリビュートエディタ(AttributeEditor)が発行します)。スクリプトは、移動元のノードとそれに対応する移動先のアトリビュートという、2つの引数を取ります。

    -----------------------------------------

    connectNodeToDropped (script): ノードに別のノードがドラッグ＆ドロップされたときに実行されるスクリプトです(Multi-listerが発行します)。スクリプトは、移動元のノードとそれに対応する移動先のノードという、2つの引数を取ります。

    -----------------------------------------

    connectToExisting (script): 既存のノードに、接続を作成しなければならない場合に実行されるスクリプトです。

    -----------------------------------------

    createNew (script): 新しい「接続」が要求されたときに実行されるスクリプトです。

    -----------------------------------------

    defaultTraversal (script): 既定のTraversalノード名を検出したときに実行されるスクリプトです。アタッチするスクリプトは、1つの引数(アトリビュート)を取り、既定のTraversalノードの名前を返す必要があります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    delete (string): 接続(と接続されるノード)を削除しなければならないときに実行するスクリプトです。

    -----------------------------------------

    disconnect (script): 「接続解除」が要求されたときに実行するスクリプトです。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    extraButton (boolean): このコントロールの最後にアイコンボタンを追加します。

    -----------------------------------------

    extraButtonCommand (script): 追加のボタンをクリックすると、コマンド文字列が実行されます。

    -----------------------------------------

    extraButtonIcon (string): 追加のボタンのアイコンファイルの名前です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    ignore (script): 接続が無視されるようにするときに実行するスクリプトです。

    -----------------------------------------

    ignoreNotSupported (boolean): このフラグは現在サポートしていません。効力を持ちません。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): コントロールのラベル用テキストを指定します。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    noIgnorableMenu (boolean): ラベルを右クリックしたときに、無視できる関連ポップアップメニューを表示しません。

    -----------------------------------------

    noKeyableMenu (boolean): ラベルを右クリックしたときに、キー設定可能な関連ポップアップメニューを表示しません。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    relatedNodes (script): 関連するノードが検索されるようにするときに実行するスクリプトです。アタッチするスクリプトは、1つの引数(アトリビュート)を取り、関連するノード名である文字列のリストを返す必要があります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    unignore (script): 接続が無視されないようにするときに実行するスクリプトです。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def button(actOnPress: bool = False,actionIsSubstitute: bool = False,align: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),command: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,recomputeSize: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    テクスチャのラベルを表示したり、選択時にコマンドを実行したりできるボタン コントロールを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    actOnPress (boolean): trueの場合、マウスボタンが押されたときに、コマンドフラグで指定したコマンドが実行されます。falseの場合、マウスボタンが離された後に、コマンドフラグで指定したコマンドが実行されます。既定値はfalseです。

    -----------------------------------------

    actionIsSubstitute (boolean): このフラグは廃止されているので、使用しないでください。

    -----------------------------------------

    align (string): このフラグは廃止されているので、使用しないでください。ボタンラベルは必ず中央ぞろえになります。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    command (script): コントロールを押したときに実行されるコマンドです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): ラベルテキストです。既定のラベルはコントロールの名前です。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    recomputeSize (boolean): trueの場合、ラベルのサイズにぴったり合うようにコントロールのサイズが再計算されます。falseの場合、コントロールのサイズは、ラベルのサイズを変更するときに固定されます。このフラグの既定の値はtrueです。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def canvas(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),hsvValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,pressCommand: str = "",preventOverride: bool = False,rgbValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    カラー サンプルを表示する機能をもつコントロールを作成します。このコントロールは、カラー サンプルを押したときにコールされるコマンドを受け付けることもできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    hsvValue ([float, float, float]): 色相の値が0.0～360.0で、彩度と値のコンポーネントが0.0～1.0の色相、彩度、と値のカラー成分に対応する3つのfloat値。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    pressCommand (script): マウスを押したときに実行されるコマンドです。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rgbValue ([float, float, float]): 赤、緑、青に対応する3つの浮動小数点数の値で、すべて有効範囲は0.0～1.0です。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringキャンバスのフル ネーム照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def channelBox(annotation: str = "",attrBgColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),attrColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),attrFilter: str = "",attrRegex: str = "",attributeEditorMode: bool = False,backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),containerAtTop: bool = False,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,enableLabelSelection: bool = False,execute: Tuple[str, bool] = tuple("", False),exists: bool = False,fieldWidth: int = 1,fixedAttrList: Tuple[str] = tuple(""),fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),historyObjectList: bool = False,hyperbolic: bool = False,inputs: bool = False,isObscured: bool = False,labelWidth: int = 1,longNames: bool = False,mainListConnection: str = "",mainObjectList: bool = False,manage: bool = False,maxHeight: int = 1,maxWidth: int = 1,niceNames: bool = False,noBackground: bool = False,nodeRegex: str = "",numberOfPopupMenus: bool = False,outputObjectList: bool = False,outputs: bool = False,parent: str = "",popupMenuArray: bool = False,precision: int = 1,preventOverride: bool = False,select: str = "",selectedHistoryAttributes: bool = False,selectedMainAttributes: bool = False,selectedOutputAttributes: bool = False,selectedShapeAttributes: bool = False,shapeObjectList: bool = False,shapes: bool = False,showNamespace: bool = False,showTransforms: bool = False,speed: float = 1.0,statusBarMessage: str = "",takeFocus: bool = False,update: bool = False,useManips: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、アクティブ リストに反応するチャネル ボックスを作成します。アクティブ リストにある最後のノードの特定のアトリビュート(チャネル)を表示し、ウィジェットを更新して双方向の接続を提供します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    attrBgColor ([float, float, float]): 特定のアトリビュート名のバックグラウンドテキストカラーをコントロールします。フォアグラウンドカラーのオプションと同様、このテキストのカラーリングは、nodeRegexフラグに対するノード名の選択にも依存します。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。attrRegexを指定しない場合、正規表現については「*」を仮定します。同じ考え方が、フラグnodeRegexにも適用されます。注:名前が変更されたノードでは、チャネルボックス内のノード名のカラーリングが影響されます。

    -----------------------------------------

    attrColor ([float, float, float]): 特定のアトリビュート名のフォアグラウンドテキストカラーをコントロールします。このテキストのカラーリングは、nodeRegexフラグに対するノード名の選択にも依存します。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。attrRegexを指定しない場合、正規表現については「*」を仮定します。同じ考え方が、フラグnodeRegexにも適用されます。注:名前が変更されたノードでは、チャネルボックス内のノード名のカラーリングが影響されます。

    -----------------------------------------

    attrFilter (string): このチャネルボックスに配置する項目フィルタオブジェクトの名前を指定します。これによって、表示されるアトリビュートがフィルタされます。「0」のフィルタを使用すると、フィルタをリセットできます。

    -----------------------------------------

    attrRegex (string): 有効な正規表現を使用して、フォアグラウンドテキストカラーリングのためにどのアトリビュート名を選択するかを指定します。attrRegexを指定しない場合、正規表現については「*」を仮定します。同じ考え方が、フラグnodeRegexにも適用されます。attrColorフラグを指定する必要があります。注:この正規表現は、大文字と小文字を区別せずに扱われます

    -----------------------------------------

    attributeEditorMode (boolean): アトリビュートエディタ(AttributeEditor)で使用されるチャネルボックス(ChannelBox)に表示される内容を変更します。既定はfalseです。照会するとbooleanを返します。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    containerAtTop (boolean): このフラグは、コンテナ内のノードが選択されたときに、コンテナをチャネルボックスの上に描くかどうかを指定します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    enableLabelSelection (boolean): -attributeEditorModeと一緒に使用する場合、channelBoxのアトリビュートの選択を有効にします。既定はfalseです。照会するとbooleanを返します。

    -----------------------------------------

    execute ([string, boolean]): チャネルボックスのセルごと(または、ブーリアン引数がTRUEの場合、選択したセルごと)、またはコマンド文字列を一度即座に実行し、選択したオブジェクトを合わせます(つまり、セルの値を変更すると、すべてのオブジェクトが影響を受けます)。コマンドが実行される前に、「#A」はアトリビュート名に、「#N」はノード名に、「#P」はノードのフルパス名にそれぞれ置き換えられます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fieldWidth (int): チャネルボックスに表示されるフィールドに割り当てられる幅を修正するために使用される、オプションのフラグです。

    -----------------------------------------

    fixedAttrList (string[]): 強制的にチャネルボックスに指定した名前、順序でのみアトリビュートを表示させます。空のリストが指定した場合、チャネルボックスはキー設定可能なアトリビュートすべてをリストする既定の動作に戻ります。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    historyObjectList (boolean): 文字列リストを返します。このリストは、チャネルボックスの入力セクションに表示されるノードと同じタイプの、メインオブジェクトリストにあるオブジェクトに関連付けられた、INPUTノードすべての名前を示します。

    -----------------------------------------

    hyperbolic (boolean): マウスのドラッグ距離をリニアまたは双曲線スケール関数として解釈するかどうかを定義します。既定では、hyperbolicがfalseとして設定されます。

    -----------------------------------------

    inputs (boolean): チャネルボックスの「入力」見出しの下に表示されている項目を返します。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    labelWidth (int): チャネルボックスに表示されるラベルに割り当てられる幅を修正するために使用される、オプションのフラグです。

    -----------------------------------------

    longNames (boolean): インタフェースでアトリビュートにロングネームまたはショートネームのどちらを使用するかを制御します。-niceNameフラグが設定されている場合、このフラグは無視されることに注意してください。既定はショートネームです。照会するとbooleanを返します。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。チャネルボックスは、selectionConnectionオブジェクトにある(最後の)項目のみを表示します。NULL文字列("")を指定すると、チャネルボックスはアクティブリストでの既定の動作に戻ります。

    -----------------------------------------

    mainObjectList (boolean): 文字列リストを返します。このリストは、チャネルボックスの一番上の(メイン)セクションに表示されるオブジェクトと同じタイプの、アクティブリストのオブジェクトすべての名前を示します。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxHeight (int): チャネルボックスの高さを制限するために使用される、オプションのフラグです。

    -----------------------------------------

    maxWidth (int): チャネルボックスの幅を制限するために使用される、オプションのフラグです。

    -----------------------------------------

    niceNames (boolean): アトリビュート名をもっとユーザフレンドリーで読みやすい表示にするかどうかを制御します。オンの場合、longNamesフラグは無視されます。これがオフの場合、アトリビュート名は、longNamesフラグに応じてロングネームまたはショートネームで表示されます。既定はオンです。照会するとbooleanを返します。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    nodeRegex (string): 有効な正規表現を使用して、フォアグラウンドテキストカラーリングのためにどのノード名のアトリビュートを選択するようにするかを指定します。nodeRegexを指定しない場合、正規表現については「*」を仮定します。同じ考え方が、フラグattrRegexにも適用されます。attrColorフラグを指定する必要があります。注:この正規表現は、大文字と小文字を区別せずに扱われます。注:名前空間内のノードは、名前空間内に存在しないかのように正規表現が適用されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    outputObjectList (boolean): 文字列リストを返します。このリストは、チャネルボックスの出力セクションに表示されるノードと同じタイプの、メインオブジェクトリストにあるオブジェクトに関連付けられた、OUTPUTノードすべての名前を示します。

    -----------------------------------------

    outputs (boolean): チャネルボックスの「出力」見出しの下に表示されている項目を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    precision (int): 浮動小数値のチャネルで表示される、小数点の右側の桁数を制御します。既定は3です。照会すると、整数を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    select (string): チャネルボックスで項目(ノードまたはプラグ)をプログラムで選択できます。選択は、マウスで項目をクリックする操作と同等であるため、この方法で選択できるのは、現在チャネルボックスに表示されている項目のみです。

    -----------------------------------------

    selectedHistoryAttributes (boolean): 文字列リストを返します。このリストは、チャネルボックスの入力セクションにある選択したアトリビュートすべての名前を示します。

    -----------------------------------------

    selectedMainAttributes (boolean): 文字列リストを返します。このリストは、チャネルボックスの一番上のセクションにある選択したアトリビュートすべての名前を示します。

    -----------------------------------------

    selectedOutputAttributes (boolean): 文字列リストを返します。このリストは、チャネルボックスの出力セクションにある選択したアトリビュートすべての名前を示します。

    -----------------------------------------

    selectedShapeAttributes (boolean): 文字列リストを返します。このリストは、チャネルボックスの真中(シェイプ)セクションにある選択したアトリビュートすべての名前を示します。

    -----------------------------------------

    shapeObjectList (boolean): 文字列リストを返します。このリストは、チャネルボックスの真中の(シェイプ)セクションに表示されるオブジェクトと同じタイプの、メインオブジェクトリストにあるオブジェクトに関連付けられた、シェイプすべての名前を示します。

    -----------------------------------------

    shapes (boolean): チャネルボックスの「シェイプ」見出しの下に表示されている項目を返します。

    -----------------------------------------

    showNamespace (boolean): オブジェクトがルートネームスペース内にない場合、オブジェクトのネームスペースが表示されるかどうかをコントロールします。

    -----------------------------------------

    showTransforms (boolean): このコントロールでトランスフォームアトリビュートのみを表示するか、またはほかのアトリビュートすべてを表示するかを制御するコントロールです。既定はfalseです。照会するとbooleanを返します。

    -----------------------------------------

    speed (float): マウスのドラッグ距離に基づいて、アトリビュートを変更するスピードを制御します。slow/medium/fastの通常の設定は、それぞれ0.1/1.0/10.0です。既定は1.0です。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    takeFocus (boolean): 可能な場合、チャネルボックスで、キーボードが切り替わります。

    -----------------------------------------

    update (boolean): このフラグを使用して、表示プリファレンスを変更した後などに、チャネルボックス表示の更新を強制できます。

    -----------------------------------------

    useManips (string): チャネルボックスのフィールドまたはラベルをクリックすると、ツールが、3Dビューでドラッグした場合に値を変更できるマニピュレータに切り替わります。このフラグはマニピュレータの種類を制御します。有効な値は、「none」(なし)、「invisible」(何も表示されないがウィンドウでドラッグすると選択したアトリビュートがすべて調整される)、と「standard」(通常のマニピュレータで示される、スケール、回転、移動を除き、非表示と同じ)です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string(新しいチャネル ボックスの名前)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def checkBox(align: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",editable: bool = False,enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,offCommand: str = "",onCommand: str = "",parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,recomputeSize: bool = False,statusBarMessage: str = "",useTemplate: str = "",value: bool = False,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、チェック ボックスを作成します。チェック ボックスは、テキスト ラベルとオン/オフの状態を含む単純なコントロールです。コマンドは、次のイベントのいずれにでも、またすべてにでもアタッチすることができます。チェック ボックスをオンにしたとき、オフにしたとき、または単に状態が変化したとき。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    align (string): このフラグは廃止されているので、使用しないでください。チェックボックスラベルは必ず左ぞろえになります。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): チェックボックスの状態が変更された場合に実行されるコマンドです。このフラグは、onCommandとoffCommandと一緒に使用しないでください。つまり、changeCommandを使用してコールバックの内側でチェックボックスの状態をテストするか、onCommandとoffCommandを独立したコールバックとして使用してください。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): チェックボックスの編集状態です。既定では、このフラグはtrueに設定され、チェックボックスの値はクリックして変更することができます。falseの場合は、チェックボックスは「読み取り専用」になり、クリックできません。チェックボックスの値は、-ed/editableフラグの状態に関わらず、-v/valueフラグで常に変更できます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): ラベルテキストです。既定のラベルはコントロールの名前です。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    offCommand (script): チェックボックスがオフになったときに実行されるコマンドです。

    -----------------------------------------

    onCommand (script): チェックボックスがオンになったときに実行されるコマンドです。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    recomputeSize (boolean): trueの場合、ラベルのサイズにぴったり合うようにコントロールのサイズが再計算されます。falseの場合、コントロールのサイズは、ラベルのサイズを変更するときに固定されます。このフラグの既定の値はtrueです。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (boolean): チェックボックスの状態です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def checkBoxGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",changeCommand1: str = "",changeCommand2: str = "",changeCommand3: str = "",changeCommand4: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",editable: bool = False,enable: bool = False,enable1: bool = False,enable2: bool = False,enable3: bool = False,enable4: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",label1: str = "",label2: str = "",label3: str = "",label4: str = "",labelArray2: Tuple[str, str] = tuple("", ""),labelArray3: Tuple[str, str, str] = tuple("", "", ""),labelArray4: Tuple[str, str, str, str] = tuple("", "", "", ""),manage: bool = False,noBackground: bool = False,numberOfCheckBoxes: int = 1,numberOfPopupMenus: bool = False,offCommand: str = "",offCommand1: str = "",offCommand2: str = "",offCommand3: str = "",offCommand4: str = "",onCommand: str = "",onCommand1: str = "",onCommand2: str = "",onCommand3: str = "",onCommand4: str = "",parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",useTemplate: str = "",value1: bool = False,value2: bool = False,value3: bool = False,value4: bool = False,valueArray2: Tuple[bool, bool] = tuple(False, False),valueArray3: Tuple[bool, bool, bool] = tuple(False, False, False),valueArray4: Tuple[bool, bool, bool, bool] = tuple(False, False, False, False),vertical: bool = False,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): グループの状態が変更されたときに実行されるコマンドです。このフラグは、onCommandとoffCommandと一緒に使用しないでください。つまり、changeCommandを使用してコールバックの内側でチェックボックスの状態をテストするか、onCommandとoffCommandを独立したコールバックとして使用してください。

    -----------------------------------------

    changeCommand1 (script): 

    -----------------------------------------

    changeCommand2 (script): 

    -----------------------------------------

    changeCommand3 (script): 

    -----------------------------------------

    changeCommand4 (script): 各チェックボックスに、changedstateコマンドを指定します。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): グループの編集状態です。既定では、このフラグはtrueに設定され、チェックボックスをクリックして変更することができます。falseの場合、チェックボックスは「読み取り専用」になり、クリックできません。チェックボックスの値は、-ed/editableフラグの状態に関わらず、-v/valueフラグで常に変更できます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enable1 (boolean): 

    -----------------------------------------

    enable2 (boolean): 

    -----------------------------------------

    enable3 (boolean): 

    -----------------------------------------

    enable4 (boolean): 各チェックボックスの有効な状態です。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): 作成時に存在している場合、グループと一緒にオプションのテキストラベルが作成されます。文字列でラベルテキストを指定します。

    -----------------------------------------

    label1 (string): 

    -----------------------------------------

    label2 (string): 

    -----------------------------------------

    label3 (string): 

    -----------------------------------------

    label4 (string): グループの各チェックボックスのラベル文字列を指定します。

    -----------------------------------------

    labelArray2 ([string, string]): 

    -----------------------------------------

    labelArray3 ([string, string, string]): 

    -----------------------------------------

    labelArray4 ([string, string, string, string]): 単一のフラグで複数のラベルを指定します。ラジオボタンの数が一致しない場合、これらのフラグは無視されます。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfCheckBoxes (int): グループ(1-4)のチェックボックスの数です。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    offCommand (script): チェックボックスがオフの場合に実行されるコマンドです。

    -----------------------------------------

    offCommand1 (script): 

    -----------------------------------------

    offCommand2 (script): 

    -----------------------------------------

    offCommand3 (script): 

    -----------------------------------------

    offCommand4 (script): 各チェックボックスのoffコマンドです。

    -----------------------------------------

    onCommand (script): チェックボックスがオンの場合に実行されるコマンドです。

    -----------------------------------------

    onCommand1 (script): 

    -----------------------------------------

    onCommand2 (script): 

    -----------------------------------------

    onCommand3 (script): 

    -----------------------------------------

    onCommand4 (script): 各チェックボックスのonコマンドです。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value1 (boolean): 

    -----------------------------------------

    value2 (boolean): 

    -----------------------------------------

    value3 (boolean): 

    -----------------------------------------

    value4 (boolean): グループの各チェックボックスの値です。

    -----------------------------------------

    valueArray2 ([boolean, boolean]): 

    -----------------------------------------

    valueArray3 ([boolean, boolean, boolean]): 

    -----------------------------------------

    valueArray4 ([boolean, boolean, boolean, boolean]): 1つのフラグに複数の値を指定します。チェックボックスの数が一致しない場合、これらのフラグは無視されます。

    -----------------------------------------

    vertical (boolean): このグループ内のチェックボックスコントロールの向きが横(既定)か縦かの情報です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def cmdScrollFieldExecuter(annotation: str = "",appendText: str = "",autoCloseBraces: bool = False,backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),clear: bool = False,commandCompletion: bool = False,copySelection: bool = False,currentLine: int = 1,cutSelection: bool = False,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,execute: bool = False,executeAll: bool = False,exists: bool = False,fileChangedCommand: str = "",filename: bool = False,filterKeyPress: str = "",fullPathName: bool = False,hasFocus: bool = False,hasSelection: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),insertText: str = "",isObscured: bool = False,load: bool = False,loadContents: str = "",loadFile: str = "",manage: bool = False,modificationChangedCommand: str = "",modified: bool = False,noBackground: bool = False,numberOfLines: int = 1,numberOfPopupMenus: bool = False,objectPathCompletion: bool = False,parent: str = "",pasteSelection: bool = False,popupMenuArray: bool = False,preventOverride: bool = False,redo: bool = False,removeStoredContents: str = "",replaceAll: Tuple[str, str] = tuple("", ""),saveFile: str = "",saveSelection: str = "",saveSelectionToShelf: bool = False,searchAndSelect: bool = False,searchDown: bool = False,searchMatchCase: bool = False,searchString: str = "",searchWraps: bool = False,select: Tuple[int, int] = tuple(1, 1),selectAll: bool = False,selectedText: bool = False,showLineNumbers: bool = False,showTooltipHelp: bool = False,source: bool = False,sourceType: str = "",spacesPerTab: int = 1,statusBarMessage: str = "",storeContents: str = "",tabsForIndent: bool = False,text: str = "",textLength: bool = False,undo: bool = False,useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    Maya に対してスクリプト コマンドを発行するために使用するスクリプト エディタ エクゼキュータ コントロールです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    appendText (string): このフィールドの最後にテキストをアペンドします。

    -----------------------------------------

    autoCloseBraces (boolean): 開き括弧の入力後、自動的に閉じ括弧を追加するか指定します。(既定=オン)。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    clear (boolean): フィールドをクリアします。

    -----------------------------------------

    commandCompletion (boolean): コマンド完了を有効化/無効化します。

    -----------------------------------------

    copySelection (boolean): このフィールドから現在の選択項目をコピーします。

    -----------------------------------------

    currentLine (uint): カーソルがある現在行を設定/返します。

    -----------------------------------------

    cutSelection (boolean): このフィールドから現在の選択項目をカットします。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    execute (boolean): 現在の選択項目を実行します。項目が選択されていない場合、すべてのテキストを実行します。

    -----------------------------------------

    executeAll (boolean): すべてのテキストを実行します。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fileChangedCommand (script): このフィールドにファイルが含まれている場合にのみ有効です。ファイルが外部で修正、名前変更、またはディスクから削除されたときにいつでも呼び出されるスクリプトファイルを設定します。MELでは、この関数には次のシグネチャが必要です:procfileChanged(string$file)

    -----------------------------------------

    filename (boolean): ロードまたは保存されたスクリプトのフルパス+ファイル名を返します。存在しない場合は、空の文字列を返します。

    -----------------------------------------

    filterKeyPress (script): キーを押したときのイベントを処理するために呼び出すスクリプトを設定します。この関数には以下のシグニチャが必要です。procintfilterKeyPress(int$modifiers,string$key)モディファイア:ビットマスクはShiftがビット1、Ctrlがビット3、Altがビット4、Windowsキーボードでは「Windows」キー、Macキーボードではコマンドキーがビット5です。キー:押下するキーを指定します。キーは単一のASCII文字または特殊なキーボード文字のキーワード文字列の1つです。例:Up、Down、Right、Left、Home、End、age_Up、Page_Down、InsertReturn、SpaceF1～F12です。この関数は、キーイベントが処理されたことを示す1、または処理されなかったことを示す0を返します。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    hasFocus (boolean): 現在このコントロールにフォーカスがあるかどうかです。

    -----------------------------------------

    hasSelection (boolean): 現在、このコントロールに選択項目があるかどうかです。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    insertText (string): 指定したテキストをカーソルの位置に挿入し、現在選択されているテキストと置き換えます。選択範囲とカーソル位置は、selectフラグを使用して設定できます。このフィールドの最後にテキストをアペンドします。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    load (boolean): このフィールドにロードするスクリプトを要求するプロンプトが表示されます。ロードされたファイル名はこのエクゼキュータフィールドに関連付けられ、保存によって直接ファイルに保存されます。

    -----------------------------------------

    loadContents (string): 指定したファイル名のファイルの内容をこのフィールドにロードします。このファイル名のパスと拡張子は、内部で指定されます。このコマンドは、このエクゼキュータフィールドのこれまでのインスタンスに今回の内容をロードすることのみを目的とします。

    -----------------------------------------

    loadFile (string): 入力された文字列が完全に指定されたファイルパスである場合、ファイルの内容をこのフィールドにロードしようとします。文字列が空または有効ではない場合、このフィールドにロードするスクリプトを要求するプロンプトが表示されます。どちらの場合でも、ファイル名はこのエクゼキュータフィールドに関連付けられ、保存によって直接ファイルに保存されます。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    modificationChangedCommand (script): 修正状態に影響を与える方法でこのフィールドの内容が変更されたときにいつでも呼び出されるスクリプトを設定します。MELでは、この関数には次のシグネチャが必要です:procmodificationChanged(int$m)$mがtrueである場合、このフィールドは変更されています。そうでない場合はfalseになります。

    -----------------------------------------

    modified (boolean): フィールドが変更されたかどうかを設定または返します。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfLines (uint): 文書の総行数を返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    objectPathCompletion (boolean): パス完了を有効化/無効化します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    pasteSelection (boolean): 現在のキャレット位置で、このフィールドにテキストをペーストします。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    redo (boolean): 最後の操作をやり直します。

    -----------------------------------------

    removeStoredContents (string): 指定したファイル名で格納されているこのフィールドの内容を除去します。ファイルのパスと拡張子は、内部で指定されます。このコマンドは、このエクゼキュータフィールドにこれまで格納された内容を除去することのみを目的とします。

    -----------------------------------------

    replaceAll ([string, string]): フィールドテキスト内の最初の文字列のすべてのインスタンスを2番目の文字列に置き換えます。この操作で大文字小文字を区別するかどうかは-searchMatchCaseフラグで設定します。

    -----------------------------------------

    saveFile (string): このフィールドのスクリプトの内容全体を指定したファイルパスに直接保存します。

    -----------------------------------------

    saveSelection (string): 現在の選択項目をファイルに保存することを求めるプロンプトを表示します。指定した文字列の前に既定のファイル名プロンプトが追加されます。

    -----------------------------------------

    saveSelectionToShelf (boolean): 現在の選択項目をシェルフの項目に保存することを求めるプロンプトを表示します。

    -----------------------------------------

    searchAndSelect (boolean): 指定した検索オプションを使用して指定した検索文字列を検索(と選択)します。

    -----------------------------------------

    searchDown (boolean): カーソルの上下どちらを検索するかを指定します。

    -----------------------------------------

    searchMatchCase (boolean): 検索で大文字/小文字を区別するかどうかを指定します。

    -----------------------------------------

    searchString (string): 検索する文字列を指定します。

    -----------------------------------------

    searchWraps (boolean): 検索の先頭に戻るかどうかを指定します。

    -----------------------------------------

    select ([uint, uint]): 指定範囲内のテキストを選択します。

    -----------------------------------------

    selectAll (boolean): すべてのテキストを選択します。

    -----------------------------------------

    selectedText (boolean): 現在の選択範囲内のテキストです。

    -----------------------------------------

    showLineNumbers (boolean): 行番号カラムを表示/非表示にします。

    -----------------------------------------

    showTooltipHelp (boolean): コマンド実行ウィンドウのツールヒントを有効化/無効化します。

    -----------------------------------------

    source (boolean): ソーススクリプトを要求するプロンプトが表示されます(ロードせずに実行)。

    -----------------------------------------

    sourceType (string): このコマンドエクゼキュータフィールドのソースタイプを設定します。有効な値は「mel」(既定で有効)と「python」です。

    -----------------------------------------

    spacesPerTab (uint): 1つのタブ位置に相当するスペースの数を指定します(既定＝4)。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    storeContents (string): ファイルパスの完全な文字列が指定された場合は、このフィールドの内容がそのパスに格納されます。不完全なパス名の場合は、提供された文字列はファイル名のみに使用され、-loadContentsおよび-removeStoredContentsフラグの場合と同じように、内部で生成されたファイルのパスと拡張子が使用されます。いずれにしても、指定した名前が既に存在する場合は、固有のファイル名が新たに生成されます。完了時には、保存したファイルのファイル名を返します。完了しなかった場合は、空の文字列を返します。

    -----------------------------------------

    tabsForIndent (boolean): インデントの際にタブ記号を表示するかどうかを指定します(既定=オン)。

    -----------------------------------------

    text (string): フィールドテキストを指定した文字列に置き換えます。

    -----------------------------------------

    textLength (boolean): このテキストフィールドの文字数です。

    -----------------------------------------

    undo (boolean): 最後の操作を元に戻します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringエクゼキュータ コントロールの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def cmdScrollFieldReporter(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),clear: bool = False,copySelection: bool = False,cutSelection: bool = False,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",echoAllCommands: bool = False,enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,filterSourceType: str = "",fullPathName: bool = False,hasFocus: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,lineNumbers: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",pasteSelection: bool = False,popupMenuArray: bool = False,preventOverride: bool = False,receiveFocusCommand: str = "",saveSelection: str = "",saveSelectionToShelf: bool = False,select: Tuple[int, int] = tuple(1, 1),selectAll: bool = False,stackTrace: bool = False,statusBarMessage: str = "",suppressErrors: bool = False,suppressInfo: bool = False,suppressResults: bool = False,suppressStackTrace: bool = False,suppressWarnings: bool = False,text: str = "",textLength: bool = False,useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    処理したコマンドのヒストリを受信して表示するために使用するスクリプト エディタ レポータ コントロール。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    clear (boolean): フィールドをクリアします。

    -----------------------------------------

    copySelection (boolean): このフィールドから現在の選択項目をコピーします。

    -----------------------------------------

    cutSelection (boolean): このフィールドから現在の選択項目をカットします。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    echoAllCommands (boolean): すべてのコマンドをエコーします(グローバルパラメータ。すべてのコマンドレポータに影響します)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    filterSourceType (string): このコマンドレポータの表示から、指定したソースタイプをフィルタリングします。現在は、「mel」、「python」または「」(既定)をサポートしています。フィルタに空の文字列(「」)を設定すると、すべてのフィルタリングが除去され、「mel」と「python」の両方の結果が表示されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    hasFocus (boolean): 現在このコントロールにフォーカスがあるかどうかです。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    lineNumbers (boolean): (エラー/警告メッセージで)行番号を表示します(グローバルパラメータ。すべてのコマンドレポータに影響します)。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    pasteSelection (boolean): 現在のキャレット位置で、このフィールドにテキストをペーストします。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    receiveFocusCommand (script): フィールドにフォーカスが移ったときに実行されるコマンドです。

    -----------------------------------------

    saveSelection (string): 現在の選択項目をファイルに保存することを求めるプロンプトを表示します。指定した文字列の前に既定のファイル名プロンプトが追加されます。

    -----------------------------------------

    saveSelectionToShelf (boolean): 現在の選択項目をシェルフの項目に保存することを求めるプロンプトを表示します。

    -----------------------------------------

    select ([uint, uint]): 指定範囲内のテキストを選択します。

    -----------------------------------------

    selectAll (boolean): すべてのテキストを選択します。

    -----------------------------------------

    stackTrace (boolean): スタックトレースを表示します(グローバルパラメータ。すべてのコマンドレポータに影響します)。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    suppressErrors (boolean): エラーを表示しないようにします。

    -----------------------------------------

    suppressInfo (boolean): 情報を表示しないようにします。

    -----------------------------------------

    suppressResults (boolean): 結果を表示しないようにします。

    -----------------------------------------

    suppressStackTrace (boolean): スタックトレースを表示しないようにします。

    -----------------------------------------

    suppressWarnings (boolean): 警告メッセージを表示しないようにします。

    -----------------------------------------

    text (string): フィールドテキストを指定した文字列に置き換えます。

    -----------------------------------------

    textLength (boolean): このテキストフィールドの文字数です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringレポータ コントロールの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def cmdShell(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),clear: bool = False,command: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfHistoryLines: int = 1,numberOfPopupMenus: bool = False,numberOfSavedLines: int = 1,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,prompt: str = "",statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、入力に対して UNIX シェルと同じ動作をするスクロール フィールドを作成します。-nsl/numberOfSavedLines フラグつきのフィールドで保存される行数を指定することができます。保存される既定の行数は 100 です。shellField は、コマンド ヒストリ バッファも保持します。-hlc/historyLineCount フラグで保存される入力行数を指定することができます。このバッファの既定サイズは 10 です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    clear (boolean): 表示されたテキストをすべて消去し、フィールド上部のスクロールされたテキストもすべて削除します。フィールドをクリアしたあとは、空欄になってスクロールアップして前の行を見ることができなくなります。ただし、このフラグはコマンドヒストリバッファに影響を与えません。

    -----------------------------------------

    command (string): 内容が変更されたときに実行されるコマンドです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfHistoryLines (int): コマンドヒストリバッファに保存される入力行数です。上下矢印キーを押すと、このバッファを1つずつ順番に選択することができます。有効な値は0～32767です。0より小さい値は0とみなされます。同様に、32767より大きな値は32767とみなされます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    numberOfSavedLines (int): フィールドで記憶される行(スクロールされる行と現在表示されている行)の総数です。この行数を超える行はすべて失われ、スクロールしても表示することはできません。有効な値は1～32767です。1より小さい値は1とみなされます。同様に、32767より大きな値は32767とみなされます。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    prompt (string): プロンプトとして使用されるテキストです。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def colorIndexSliderGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,extraLabel: str = "",forceDragRefresh: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),invisible: int = 1,isObscured: bool = False,label: str = "",manage: bool = False,maxValue: int = 1,minValue: int = 1,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",useTemplate: str = "",value: int = 1,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): 値が変更されたときに実行されるコマンドです。値が-v/valueフラグによって変更されたときはこのコマンドは起動されません。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): スライダ値マーカーのドラッグによって値が変更されたときに実行されるコマンドです。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    extraLabel (string): 設定した文字列は、追加ラベルのテキストになります。

    -----------------------------------------

    forceDragRefresh (boolean): 使用する場合、ドラッグで強制的にリフレッシュします。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    invisible (int): 非表示のカラーインデックスを設定します。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): グループ用のラベルテキストです。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (int): 最大カラーインデックスです。

    -----------------------------------------

    minValue (int): 最小カラーインデックスです。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (int): カラーインデックスです。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def colorInputWidgetGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,forceDragRefresh: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),hsvValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rgbValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): スライダ値が変更されたときに実行されるコマンド文字列です。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    forceDragRefresh (boolean): 使用する場合、ドラッグで強制的にリフレッシュします。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    hsvValue ([float, float, float]): 色相、彩度、明度の形式のカラーです。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): グループ用のラベルテキストです。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rgbValue ([float, float, float]): 赤、緑、青の形式のカラーです。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string(作成されたグループの名前)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def colorSliderButtonGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),buttonCommand: str = "",buttonLabel: str = "",changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,forceDragRefresh: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),hsvValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),image: str = "",isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rgbValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",symbolButtonCommand: str = "",symbolButtonDisplay: bool = False,useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    buttonCommand (script): ボタンを押したときに実行されるコマンド文字列です。

    -----------------------------------------

    buttonLabel (string): ボタンテキストです。

    -----------------------------------------

    changeCommand (script): スライダ値が変更されたときに実行されるコマンド文字列です。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): スライダ値マーカーがドラッグされたときに実行されるコマンド文字列です。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    forceDragRefresh (boolean): 使用する場合、ドラッグで強制的にリフレッシュします。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    hsvValue ([float, float, float]): 色相、彩度、明度の形式のカラーです。

    -----------------------------------------

    image (string): 記号ボタンに表示されるイメージです。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): グループ用のラベルテキストです。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rgbValue ([float, float, float]): 赤、緑、青の形式のカラーです。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    symbolButtonCommand (script): 記号ボタンが押されたときに実行されるコマンド文字列です。

    -----------------------------------------

    symbolButtonDisplay (boolean): 記号ボタンの可視性です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def colorSliderGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,forceDragRefresh: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),hsvValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rgbValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): スライダ値が変更されたときに実行されるコマンド文字列です。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): スライダ値マーカーがドラッグされたときに実行されるコマンド文字列です。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    forceDragRefresh (boolean): 使用する場合、ドラッグで強制的にリフレッシュします。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    hsvValue ([float, float, float]): 色相、彩度、明度の形式のカラーです。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): グループ用のラベルテキストです。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rgbValue ([float, float, float]): 赤、緑、青の形式のカラーです。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def commandLine(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),command: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,enterCommand: str = "",exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),holdFocus: bool = False,inputAnnotation: str = "",isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfHistoryLines: int = 1,numberOfPopupMenus: bool = False,outputAnnotation: str = "",parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,sourceType: str = "",statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、input/output コマンド用の単一ラインを作成します。 左半分 input 用で、右半分は output 用です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    command (script): コマンドラインテキストが変化するときに実行されるコマンドです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    enterCommand (script): キーパッドの「Enter」キーが押されたときに実行されるコマンドです。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    holdFocus (boolean): コマンドラインがコマンド実行後にフォーカスを保持するかどうかを設定します。

    -----------------------------------------

    inputAnnotation (string): この入力フィールドに文字列値で注釈を付けます。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfHistoryLines (int): コマンドラインヒストリに保存されるコマンドの最大数を設定します。上矢印キーを押すことによって、-nhl/numberOfHistoryLinesまでの以前のコマンドが入力フィールドから使用可能です。既定値は50です。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    outputAnnotation (string): この出力フィールドに文字列値で注釈を付けます。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    sourceType (string): このコマンドラインのソースタイプを設定します。現在は、「mel」(既定では有効)と「python」をサポートしています。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string: コントロールへのフル パス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def componentBox(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,execute: Tuple[str, bool] = tuple("", False),exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,labelWidth: int = 1,manage: bool = False,maxHeight: int = 1,maxWidth: int = 1,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,precision: int = 1,preventOverride: bool = False,rowHeight: int = 1,selectedAttr: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、アクティブ リストに反応するコンポーネント ボックスを作成します。アクティブ リストにある最後のノードの特定のコンポーネントを表示し、ウィジェットを更新して双方向の接続を提供します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    execute ([string, boolean]): コンポーネントボックスのセルごと(または、ブーリアン引数がTRUEの場合、選択したセルごと)に、一致する選択したオブジェクトすべて(つまり、セルの値を変更すると影響を受けるオブジェクトすべて)に対して、コマンド文字列を一度即座に実行します。コマンドが実行される前に、「#A」はアトリビュート名に、「#N」はノード名に、「#P」はノードのフルパス名にそれぞれ置き換えられます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    labelWidth (int): componentBoxに表示されるラベルに割り当てられる幅を修正するために使用される、オプションのフラグです。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxHeight (int): componentBoxの高さを制限するために使用される、オプションのフラグです。

    -----------------------------------------

    maxWidth (int): componentBoxの幅を制限するために使用される、オプションのフラグです。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    precision (int): 浮動小数値のコンポーネントで表示される、小数点の右側の桁数を制御します。既定は3です。照会すると、整数を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowHeight (int): componentBoxのすべての行の高さを設定するために使用される、オプションのフラグです。

    -----------------------------------------

    selectedAttr (boolean): 選択したすべてのアトリビュートのリストを返します。照会されていない場合、このフラグは無視されます。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string(新規コンポーネント ボックスの名前)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def control(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このフラグで、あらゆるコントロールのプロパティを編集、あるいは照会することができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def falloffCurve(addControlVertex: str = "",annotation: str = "",asString: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",currentKey: int = 1,currentKeyValue: Tuple[float, float] = tuple(1.0, 1.0),customCurveWidget: bool = False,defineTemplate: str = "",deleteControlVertex: int = 1,docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,optionVar: str = "",parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,readOnly: bool = False,snapToGrid: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、2D コントロール カーブを編集するためのコントロールを作成します。作成されたコントロールは、文字列に格納されたエンコード済みのコントロール ポイントを格納し、読み込むために使用される optionVar にアタッチされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addControlVertex (string): カーブのコントロール頂点を追加する場合に使用します。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    asString (string): カーブの値をカンマで区切られた値の文字列として照会および設定する場合に使用します。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): このカーブの値が修正されるたびに実行するコマンドを指定します。optionVarを指定する際には、このオプションを使用しないでください。

    -----------------------------------------

    currentKey (int): 現在選択しているキーのインデックスを返します。

    -----------------------------------------

    currentKeyValue ([float, float]): 現在選択しているキーの値を取得または設定します。

    -----------------------------------------

    customCurveWidget (boolean): カーブウィジェットにカスタムカーブが使用されるかどうかを決定します。カスタムカーブが使用されると、減衰カーブによってブラシツール設定に格納され、このフラグをtrueにする必要があります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    deleteControlVertex (int): カーブのコントロール頂点を削除する場合に使用します。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    optionVar (string): カーブをキャプチャする文字列値の格納や読み出しを行う際に使用するoptionVarの名前を指定します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    readOnly (boolean): カーブが読み込み専用かどうかを指定します。Trueの場合、カーブは編集できません。

    -----------------------------------------

    snapToGrid (boolean): カーブのコントロールポイントを移動したときにグリッドにスナップするかどうかを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成または修正されたポート名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def falloffCurveAttr(addControlVertex: str = "",annotation: str = "",asString: str = "",attribute: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",currentKey: int = 1,currentKeyValue: Tuple[float, float] = tuple(1.0, 1.0),customCurveWidget: int = 1,defineTemplate: str = "",deleteControlVertex: int = 1,docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,readOnly: int = 1,selectedPositionControl: str = "",selectedValueControl: str = "",snapToGrid: int = 1,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、2D コントロール カーブを編集するためのコントロールを作成します。このコントロールはカーブ アトリビュートにアタッチし、そのカーブ アトリビュートは、その各エントリが次の複合によって構成されたマルチ アトリビュートである必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addControlVertex (string): カーブのコントロール頂点を追加する場合に使用します。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    asString (string): カーブの値をカンマで区切られた値の文字列として照会および設定する場合に使用します。

    -----------------------------------------

    attribute (name): コントロールするカーブアトリビュートの名前を指定します。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): このカーブの値が修正されるたびに実行するコマンドを指定します。

    -----------------------------------------

    currentKey (int): 現在選択しているキーのインデックスを返します。

    -----------------------------------------

    currentKeyValue ([float, float]): 現在選択しているキーの値を取得または設定します。

    -----------------------------------------

    customCurveWidget (int): カーブウィジェットにカスタムカーブが使用されるかどうかを決定します。カスタムカーブが使用されると、減衰カーブによってブラシツール設定に格納され、フラグがゼロ以外になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    deleteControlVertex (int): カーブのコントロール頂点を削除する場合に使用します。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    readOnly (int): カーブが読み込み専用かどうかを指定します。Trueの場合、カーブは編集できません。

    -----------------------------------------

    selectedPositionControl (string): 選択したキーの位置を編集するfloatスライダの名前を指定します。

    -----------------------------------------

    selectedValueControl (string): 選択したキーの値を編集するfloatスライダの名前を指定します。

    -----------------------------------------

    snapToGrid (int): カーブのコントロールポイントを移動したときにグリッドにスナップするかどうかを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成または修正されたポート名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def floatField(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",editable: bool = False,enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,enterCommand: str = "",exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,maxValue: float = 1.0,minValue: float = 1.0,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,precision: int = 1,preventOverride: bool = False,receiveFocusCommand: str = "",showTrailingZeros: bool = False,statusBarMessage: str = "",step: float = 1.0,useTemplate: str = "",value: float = 1.0,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> float:
    """
    float 値だけを受け入れ、最小値と最大値によって制限されるフィールド コントロールを作成します。フィールドには非表示のスライダがアタッチされています。このスライダを使用するには、Ctrl キーを押したままマウス ボタンのいずれかを押します。中マウス ボタンを押したまま非表示のスライダを右方向にドラッグすると、-s/step フラグで指定した増分だけ、フィールドの値が増加します。左方向にドラッグすると、同じ量だけ減少していきます。マウスの左ボタンでは 0.1 ずつ、右ボタンでは 10 ずつ増減します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): フィールドが変更されたときに実行されるコマンドです。値が-v/valueフラグによって変更されたときはこのコマンドは起動されません。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): フィールドでドラッグしたときに実行されるコマンドです。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): フィールドの編集状態です。既定では、このフラグはtrueに設定され、これに入力することでフィールド値を変更することができます。falseの場合は、フィールドをインタラクティブに変更することはできません。ただし、-ed/editableフラグの状態にかかわらず、-v/valueフラグでフィールドテキストを変更することができます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    enterCommand (script): キーパッドの「Enter」キーが押されたときに実行されるコマンドです。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (float): フィールドの上限です。

    -----------------------------------------

    minValue (float): フィールドの下限です。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    precision (int): 小数点以下の桁数です。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    receiveFocusCommand (script): フィールドにフォーカスが移ったときに実行されるコマンドです。

    -----------------------------------------

    showTrailingZeros (boolean): 末尾のゼロを表示または非表示にします。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (float): 非表示スライダの増分です。非表示スライダをドラッグすると、フィールド値はこの量だけ変化します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (float): フィールドの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    float: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def floatFieldGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enable1: bool = False,enable2: bool = False,enable3: bool = False,enable4: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,extraLabel: str = "",fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfFields: int = 1,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,precision: int = 1,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),showTrailingZeros: bool = False,statusBarMessage: str = "",step: float = 1.0,useTemplate: str = "",value: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0),value1: float = 1.0,value2: float = 1.0,value3: float = 1.0,value4: float = 1.0,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): いずれかのフィールドの値が変更されたときに実行されるコマンド文字列です。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): いずれかのフィールドで非表示スライダをドラッグすると実行されるコマンド文字列です。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enable1 (boolean): 

    -----------------------------------------

    enable2 (boolean): 

    -----------------------------------------

    enable3 (boolean): 

    -----------------------------------------

    enable4 (boolean): それぞれのフィールドの有効、無効です。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    extraLabel (string): 作成時に存在している場合、これはグループに追加のラベルを作成することを指定します。設定した文字列は、フィールドの右側にラベルテキストとして表示されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): 作成時に存在している場合、これはフィールドの左にラベルを作成することを指定します。設定した文字列は、ラベルテキストになります。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfFields (int): 作成時のフィールド数を設定します。1～4つのフィールドを使用できます。既定は1フィールドです。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    precision (int): 小数点以下の桁数を設定します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    showTrailingZeros (boolean): 末尾のゼロを表示または非表示にします。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (float): invisioSliderデルタのデルタを設定します。invisioSliderのステップは左マウスボタンでデルタ/10.0で、中央マウスボタンではデルタで、右マウスボタンではデルタ*10.0です。既定は10.0です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value ([float, float, float, float]): すべてのフィールドの値です。

    -----------------------------------------

    value1 (float): 

    -----------------------------------------

    value2 (float): 

    -----------------------------------------

    value3 (float): 

    -----------------------------------------

    value4 (float): それぞれのフィールドの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def floatScrollBar(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),horizontal: bool = False,isObscured: bool = False,largeStep: float = 1.0,manage: bool = False,maxValue: float = 1.0,minValue: float = 1.0,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",step: float = 1.0,useTemplate: str = "",value: float = 1.0,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> float:
    """
    float 値だけを受け入れ、最小値と最大値によって制限されるスクロール バー コントロールを作成します。スクロール バーには、最小値と最大値に相対的に表される現在値を示すマーカーが表示されます。現在値を変更するには、マーカー、またはスクロール バー自体をクリック＆ドラッグします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): 値が変更されたときに実行されるコマンドです。値が-v/valueフラグによって変更されたときはこのコマンドは起動されません。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): スクロールバーの値マーカーのドラッグによって値が変更されたときに実行されるコマンドです。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    horizontal (boolean): スライダの方向です。このフラグは既定ではtrueになっており、スライダは水平方向に表示されます。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    largeStep (float): スクロールバーの大きい増分、すなわち矢印ボタンとサムの間を押したときに使用される増分です。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (float): スクロールバーの上限です。

    -----------------------------------------

    minValue (float): スクロールバーの下限です。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (float): スクロールバーの小さい方の増分、すなわち矢印ボタンを押したときに適用される増分です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (float): スクロールバーの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    float: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def floatSlider(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),horizontal: bool = False,isObscured: bool = False,manage: bool = False,maxValue: float = 1.0,minValue: float = 1.0,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",step: float = 1.0,useTemplate: str = "",value: float = 1.0,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> float:
    """
    float 値だけを受け入れ、最小値と最大値によって制限されるスライダ コントロールを作成します。スライダには、最小値と最大値に相対的に表される現在値を示すマーカーが表示されます。現在値を変更するには、マーカー、またはスライダ自体をクリック＆ドラッグします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): 値が変更されたときに実行されるコマンドです。値が-v/valueフラグによって変更されたときはこのコマンドは起動されません。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): スライダ値マーカーのドラッグによって値が変更されたときに実行されるコマンドです。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    horizontal (boolean): スライダの方向です。このフラグは既定ではtrueになっており、スライダは水平方向に表示されます。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (float): スライダの上限です。

    -----------------------------------------

    minValue (float): スライダの下限です。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (float): ステップ値は、スライダのどちらかの側をクリックしたときに増加または減少する値を表します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (float): スライダの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    float: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def floatSlider2(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand1: str = "",changeCommand2: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,maximum: float = 1.0,minimum: float = 1.0,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",polarity: int = 1,popupMenuArray: bool = False,positionControl1: str = "",positionControl2: str = "",preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",value1: float = 1.0,value2: float = 1.0,values: Tuple[float, float] = tuple(1.0, 1.0),visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは 2 つのハンドルを持つ浮動小数点スライダを作成します。2 つのハンドルは互いに交わらないように配置されます。よって、値を調整すると、ハンドル 1 の値は必ずハンドル 2 の値以下となります。各ハンドルには、ハンドルが動いたときに発行され、setAttr コマンド経由などでプラグの値の更新に使用できる MEL コマンドを関連付けることもできます。また、ハンドルの現在値を表示する浮動小数点のテキストフィールドも関連付けることができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand1 (string): ハンドル1と関連付けられ、ハンドルの値が変更されるごとに発行されるコマンドです(値-hv/handleValueフラグによって変更された場合は除く)。コマンドの例としては「setAttrnurbsSphere1.tx」が挙げられます。ハンドル1の値が0.23に動かされると、スライダはコマンド「setAttrnurbsSphere1.tx0.23;」を発行します。

    -----------------------------------------

    changeCommand2 (string): ハンドル2と関連付けられ、ハンドルの値が変更されるごとに発行されるコマンドです(値-hv/handleValueフラグによって変更された場合は除く)。コマンドの例としては「setAttrnurbsSphere1.tx」が挙げられます。ハンドル2の値が0.23に動かされると、スライダはコマンド「setAttrnurbsSphere1.tx0.23;」を発行します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maximum (float): スライダの上限です。既定値は10.0です。-polarityが指定されていない場合は、最大値はスライダの(右)上端に表示されます。注:現在の最小値以下の最大値を設定することはできません。

    -----------------------------------------

    minimum (float): スライダの下限です。既定値は0.0です。-polarityが指定されていない場合は、最小値はスライダの下端に表示されます。注:現在の最大値以上の最小値を設定することはできません。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    polarity (int): スライダの極性を指定します。0(既定)の場合、(-minimumフラグで指定される)最小値がスライダの下端、最大値が(右)上に表示され、スライダのハンドルをスライダの上方向に動かすと値が増加します。極性を1に指定した場合は反対の動作となります。最大値が下端、最小値が(右)上に表示され、ハンドルを上方向に動かすと値が減少します。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    positionControl1 (string): このスライダのハンドル1と関連付けられたコントロールの名前を設定します(存在する場合)。コントロールは「floatField」となります。コントロールは常にハンドルの値を表示し、ハンドルが動かされると更新されます。

    -----------------------------------------

    positionControl2 (string): このスライダのハンドル2と関連付けられたコントロールの名前を設定します(存在する場合)。コントロールは「floatField」となります。コントロールは常にハンドルの値を表示し、ハンドルが動かされると更新されます。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value1 (float): ハンドル1の値です。ハンドル1を必ずハンドル2以下にするため、指定した値が大きすぎるとエラーが発生します。両方のハンドルを同時に設定する場合は、-valuesフラグを使用してください。

    -----------------------------------------

    value2 (float): ハンドル2の値です。ハンドル2を必ずハンドル1以上にするため、指定した値が小さすぎるとエラーが発生します。両方のハンドルを同時に設定する場合は、-valuesフラグを使用してください。

    -----------------------------------------

    values ([float, float]): ハンドル1と2の値を同時に設定します。1番目の引数はハンドル1に適用されますので、2番目の(ハンドル2の)引数以下にします。1番目の引数が2番目の引数より大きいと、エラーが発生します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成または修正されたポート名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def floatSliderButtonGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),buttonCommand: str = "",buttonLabel: str = "",changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,extraLabel: str = "",field: bool = False,fieldMaxValue: float = 1.0,fieldMinValue: float = 1.0,fieldStep: float = 1.0,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),image: str = "",isObscured: bool = False,label: str = "",manage: bool = False,maxValue: float = 1.0,minValue: float = 1.0,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,precision: int = 1,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),sliderStep: float = 1.0,statusBarMessage: str = "",step: float = 1.0,symbolButtonCommand: str = "",symbolButtonDisplay: bool = False,useTemplate: str = "",value: float = 1.0,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    buttonCommand (script): ボタンを押したときに実行されるコマンド文字列です。

    -----------------------------------------

    buttonLabel (string): ボタンテキストです。

    -----------------------------------------

    changeCommand (script): スライダの値が変更されたときに実行されるコマンド文字列です。このコマンド文字列は、スライダをドラッグした後で1度だけ実行されます。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): スライダのドラッグ時に繰り返し実行されるコマンド文字列です。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    extraLabel (string): 作成時に存在している場合、これはスライダの後ろに追加のラベルを表示することを指定します。設定した文字列は、追加ラベルのテキストになります。

    -----------------------------------------

    field (boolean): スライダの値を反映する編集可能なfloatフィールドをグループに作成するかどうかを指示します。

    -----------------------------------------

    fieldMaxValue (float): フィールドに入力できる最大値です。この値は、-max/maxValueフラグより大きい任意の値に設定できます。既定では、-max/maxValueフラグと同じです。

    -----------------------------------------

    fieldMinValue (float): フィールドに入力できる最小値です。この値は、-min/minValueフラグより小さい任意の値に設定できます。既定では、-min/minValueフラグと同じです。

    -----------------------------------------

    fieldStep (float): フィールドの増分です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    image (string): 記号ボタンに表示されるイメージです。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): 作成時に存在している場合、グループにスタティックテキストが表示されます。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (float): スライダとフィールドの最大値です。

    -----------------------------------------

    minValue (float): スライダとフィールドの最小値です。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    precision (int): 小数点の右側の桁数です。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    sliderStep (float): スライダのステップ値は、スライダのどちらかのサイドをクリックしたときに値が増加または減少する量を表します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (float): スライダとフィールドの増分です。

    -----------------------------------------

    symbolButtonCommand (script): 記号ボタンが押されたときに実行されるコマンド文字列です。

    -----------------------------------------

    symbolButtonDisplay (boolean): 記号ボタンの可視性です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (float): グループの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def floatSliderGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,extraLabel: str = "",field: bool = False,fieldMaxValue: float = 1.0,fieldMinValue: float = 1.0,fieldStep: float = 1.0,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,maxValue: float = 1.0,minValue: float = 1.0,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,precision: int = 1,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),sliderStep: float = 1.0,statusBarMessage: str = "",step: float = 1.0,useTemplate: str = "",value: float = 1.0,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): スライダの値が変更されたときに実行されるコマンド文字列です。このコマンド文字列は、スライダをドラッグした後で1度だけ実行されます。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): スライダのドラッグ時に繰り返し実行されるコマンド文字列です。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    extraLabel (string): 作成時に存在している場合、これはスライダの後ろに追加のラベルを表示することを指定します。設定した文字列は、追加ラベルのテキストになります。

    -----------------------------------------

    field (boolean): スライダの値を反映する編集可能なfloatフィールドをグループに作成するかどうかを指示します。

    -----------------------------------------

    fieldMaxValue (float): フィールドに入力できる最大値です。この値は、-max/maxValueフラグより大きい任意の値に設定できます。既定では、-max/maxValueフラグと同じです。

    -----------------------------------------

    fieldMinValue (float): フィールドに入力できる最小値です。この値は、-min/minValueフラグより小さい任意の値に設定できます。既定では、-min/minValueフラグと同じです。

    -----------------------------------------

    fieldStep (float): フィールドの増分です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): 作成時に存在している場合、グループにスタティックテキストが表示されます。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (float): スライダとフィールドの最大値です。

    -----------------------------------------

    minValue (float): スライダとフィールドの最小値です。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    precision (int): 小数点の右側の桁数です。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    sliderStep (float): スライダのステップ値は、スライダのどちらかのサイドをクリックしたときに値が増加または減少する量を表します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (float): スライダとフィールドの増分です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (float): グループの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def gradientControl(adaptiveScaling: bool = False,annotation: str = "",attribute: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfControls: int = 1,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,refreshOnRelease: int = 1,selectedColorControl: str = "",selectedInterpControl: str = "",selectedPositionControl: str = "",staticNumberOfControls: bool = False,staticPositions: bool = False,statusBarMessage: str = "",upperLimitControl: str = "",useTemplate: str = "",verticalLayout: bool = False,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、指定したグラディエント アトリビュートを表示するコントロールを作成します。グラディエント アトリビュートは、適切な形と名前を持つ必要があります。これはマルチ アトリビュートであり、各エントリは次のような内容からなる複合アトリビュートです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adaptiveScaling (boolean): ランプウィジェットの表示を垂直方向にスケールして、1.0よりも大きな値に対応できます。adaptiveScalingが有効な場合はtrue、有効でない場合はfalse(既定)を返します。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    attribute (name): コントロールするグラディエントアトリビュートの名前を指定します。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfControls (uint): ランプウィジェットにあるコントロールの数を返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    refreshOnRelease (uint): ランプウィジェットをインタラクティブに編集しているときに、更新をディスパッチする方法を定義します。trueに設定すると、更新は編集後にマウスボタンを離した後にのみディスパッチされます。false(既定)に設定すると、更新は編集時(たとえば、ランプカーブポイントの移動中)にインタラクティブにディスパッチされます。グローバル更新モードが「onrelease」に設定されていると、このオプションの効果が無効になることがあるので注意してください。

    -----------------------------------------

    selectedColorControl (string): 選択したカラーを編集するカラーコントロールの名前を指定します。

    -----------------------------------------

    selectedInterpControl (string): 選択した補間を編集するenumコントロールの名前を指定します。

    -----------------------------------------

    selectedPositionControl (string): 選択した位置を編集するfloatスライダの名前を指定します。

    -----------------------------------------

    staticNumberOfControls (boolean): 「true」の場合、このフラグはランプウィジェットの対話を通じたランプエントリ(コントロールポイント)の作成/削除を無効にします。既定はfalseです。

    -----------------------------------------

    staticPositions (boolean): 「true」の場合、このフラグはランプエントリの位置のインタラクティブな変更を無効にします。既定はfalseです。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    upperLimitControl (string): ランプの表示の現在の上限を使用して更新されるテキストコントロールの名前を指定します。このオプションは、adaptiveScalingが指定されている場合にのみ効果があります。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    verticalLayout (boolean): 「true」の場合、コントロールは水平方向ではなく垂直方向になります。既定は「false」(水平)です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成または修正されたポート名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def gradientControlNoAttr(annotation: str = "",asString: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",currentKey: int = 1,currentKeyChanged: str = "",currentKeyColorValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),currentKeyCurveValue: bool = False,currentKeyInterpValue: int = 1,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,optionVar: str = "",parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rampAsColor: bool = False,statusBarMessage: str = "",useTemplate: str = "",valueAtPoint: float = 1.0,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、ランプ(2D コントロール カーブ)の編集のためのコントロールを作成します。作成されたコントロールは、エンコードされたグラディエント コントロール ポイントを格納し、読み込むために使用される optionVar にアタッチされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    asString (string): ランプの値をカンマで区切られた値の文字列として照会および設定する場合に使用します。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): このランプの値が修正されたときに実行するコマンドを指定します。optionVarを指定する際には、このオプションを使用しないでください。

    -----------------------------------------

    currentKey (int): 現在選択しているキーのインデックスを返します。

    -----------------------------------------

    currentKeyChanged (script): 選択したキーが変更されたときに必ず実行するコマンドを指定します。

    -----------------------------------------

    currentKeyColorValue ([float, float, float]): 現在選択しているキーのカラーを取得または設定します。ランプがカラーランプになるように設定されている場合のみ便利です。

    -----------------------------------------

    currentKeyCurveValue (boolean): 現在選択しているキーの値を取得または設定します。ランプがカーブランプになるように設定されている場合のみ便利です。

    -----------------------------------------

    currentKeyInterpValue (int): 現在のキーの補間値を取得または設定します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): ランプの変更中に実行されるコマンドを指定します。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    optionVar (string): カーブをキャプチャする文字列値の格納や読み出しを行う際に使用するoptionVarの名前を指定します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rampAsColor (boolean): ランプをカラーランプとカーブのどちらとして表示するかを設定します。既定では、カーブとして表示されます。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    valueAtPoint (float): 照会時にカーブを照会するポイントを指定する場合に使用されます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成または修正されたポート名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def helpLine(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、Tool のヘルプ/ヒントを表示するヘルプ ラインを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def hudButton(allowOverlap: bool = False,block: int = 1,blockAlignment: str = "",blockSize: str = "",buttonShape: str = "",buttonWidth: int = 1,label: str = "",labelFontSize: str = "",padding: int = 1,pressCommand: str = "",releaseCommand: str = "",section: int = 1,visible: bool = False) -> None:
    """
    このコマンドは、3D ビューポート上にある 2D の非アクティブ オーバーレイ プレーンに配置されるヘッドアップ ディスプレイ(HUD)のボタン コントロールを作成します。このコマンドを使用して、ユーザ スクリプトで実際的な操作を指定できます。HUD ボタンは一般的な HUD オブジェクトから派生するため、同様のワークフローを継承します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowOverlap (boolean): 重なっているセクションの幅や制限に関わらず、ヘッドアップディスプレイを表示します(詳細については、-s/sectionフラグの説明を参照してください)。

    -----------------------------------------

    block (int): セクション内で、HUDが属する個々のブロックを表します。各セクションは一列のブロックから構成されます。各セクションに含まれるブロックの総数は異なります。各セクションに表示されるブロック数は、各セクションにあるブロックのサイズとウィンドウの現在のサイズによって決まります。ブロック数は0から始まり、必要に応じて増加します。HUDボタンのフォーマットは、標準的なHUDとは異なります。フォーマットフラグ(justify、padding、buttonWidthなど)で定義するパラメータを使用するレイアウトは、次のとおりです。__________________________________|||||||P|J|Button|J|P||_____|_____|__________|_____|_____|P==幅のサブブロック、パディングJ=ブロック全体の行桁揃えButton=幅のサブブロック、buttonWidthブロックの位置決め上部セクションのブロックは主要ビューポートの上端から始まり、下部セクションは下端から始まります。ブロックは、ビューポートの中間から動的に非表示になります。したがって、比較的多いブロック数はビューポートへと引き寄せられません。最後に、単一ブロックを占有できるHUDの数は一つです。占有されているブロックにHUDをさらに配置しようとするとエラーになります。HUDを配置する際の注意点です。

    -----------------------------------------

    blockAlignment (string): ブロックの、その列内での位置合わせを指定します。使用可能な位置合わせは「center」、「left」、「right」で、既定は「left」です。

    -----------------------------------------

    blockSize (string): 各ブロックの高さを設定します。選択できる高さは、small、medium、largeです。ピクセル単位では、それぞれ20、35、50ピクセルに相当します。

    -----------------------------------------

    buttonShape (string): ボタンのシェイプを指定します。使用可能なボタンのシェイプは、「rectangle」と「roundRectangle」です。「rectangle」は四角形のボタン、「roundRectangle」は角が丸い四角形ボタンです。

    -----------------------------------------

    buttonWidth (int): ボタンの幅を指定します。

    -----------------------------------------

    label (string): HUDボタンのテキストラベル。

    -----------------------------------------

    labelFontSize (string): ラベルのフォントサイズを設定します。使用可能なサイズはsmallとlargeです。

    -----------------------------------------

    padding (int): ブロックの左右マージンの幅を指定します。既定値は15ピクセルです。

    -----------------------------------------

    pressCommand (script): マウスボタンをクリックするときに実行するプロシージャまたはスクリプトを指定します。

    -----------------------------------------

    releaseCommand (script): マウスボタンを放すときに実行するプロシージャまたはスクリプトを指定します。

    -----------------------------------------

    section (int): HUDを表示させるセクションを定義します。画面は10セクションに分割されています。メインビューポートを分割する10の要素行列は、5列x2行で構成されます。セクションのレイアウトを以下に示します。________________________|||||||||||||0|1|2|3|4||||||||____|____|____|____|____||||||||||||||5|6|7|8|9||||||||____|____|____|____|____|各セクションは、上記のとおり0から9までの番号で表されます。たとえば、上列の左から2行目の場合、セクションは次のように定義されます。-sec1ヘッドアップディスプレイが重なり合って文字が煩雑になることを回避するため、それぞれの行には表示の優先順位が定義されていて、各セクションの表示にも優先順位が設定されています。この優先順位に従って、画面スペースが狭まって行のセクション幅が重なり合うと、HUDは優先順位が一番低いセクションを自動的に除去します。これらのセクションは非表示になり、除去されたことを伝える警告メッセージが表示されます。この処理は、最優先のセクションのみが残るまで継続されます。それぞれの行の優先順位は、次のように定義されます。上列の場合の例:セクション0が最優先され、セクション4が2番目と、外側のセクションの優先順位が最も高くなります。次にセクション2、続くセクション1と3の優先順位は等しく、共に優先順位が最も低くなります。この優先順位の構造は、下列にも適用されます。外側の2セクションが最優先され、中央のセクションが続き、残りの2セクションの優先順位が最も低くなります。つまりビューポートの幅が狭まって上列のセクションが重なり始めた場合、まずセクション1と3がビューから除去され、続いてセクション2が、最後にセクション4が除去されます。ブロックレイアウトについても、同様の説明が以下に記されています。

    -----------------------------------------

    visible (boolean): ヘッドアップディスプレイのレイアウトの表示(オンかオフ)を切り替えます。

    -----------------------------------------

    Return Value:
    None: intヘッドアップ ディスプレイ(HUD)の ID 番号string|int|int[2]対応する除去コマンドのヘッドアップ ディスプレイの名前、ID またはセクション、ブロック値。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def hudSlider(allowOverlap: bool = False,block: int = 1,blockAlignment: str = "",blockSize: str = "",decimalPrecision: int = 1,dragCommand: str = "",internalPadding: int = 1,label: str = "",labelFontSize: str = "",labelWidth: int = 1,maxValue: float = 1.0,minValue: float = 1.0,padding: int = 1,pressCommand: str = "",releaseCommand: str = "",section: int = 1,sliderIncrement: float = 1.0,sliderLength: int = 1,type: str = "",value: float = 1.0,valueAlignment: str = "",valueFontSize: str = "",valueWidth: int = 1,visible: bool = False) -> None:
    """
    このコマンドは、3D ビューポート上にある 2D の非アクティブ オーバーレイ プレーンに配置されるヘッドアップ ディスプレイ(HUD)のスライダ コントロールを作成します。このコマンドを使用して、ユーザ スクリプトで実際的な操作を指定できます。HUD スライダは一般的な HUD オブジェクトから派生するため、同様のワークフローを継承します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowOverlap (boolean): 重なっているセクションの幅や制限に関わらず、ヘッドアップディスプレイを表示します(詳細については、-s/sectionフラグの説明を参照してください)。

    -----------------------------------------

    block (int): セクション内で、HUDが属する個々のブロックを表します。各セクションは一列のブロックから構成されます。各セクションに含まれるブロックの総数は異なります。各セクションに表示されるブロック数は、各セクションにあるブロックのサイズとウィンドウの現在のサイズによって決まります。ブロック数は0から始まり、必要に応じて増加します。HUDスライダのフォーマットは、標準的なHUDとは異なります。フォーマットフラグ(justify、padding、buttonWidthなど)で定義するパラメータを使用するレイアウトは、次のとおりです。__________________________________________________________________||||||||||P|J|LW|Slider|IP|SliderValue|J|P||_____|_____|________|____________|______|_____________|_____|_____|P=幅のサブブロック、パディングJ=ブロック全体の行端揃えLW=幅のサブブロック、labelWidthSlider=スライダの長さSliderValue=幅のサブブロック、valueWidthIP=内部パディングブロックの位置決め上部セクションのブロックは主要ビューポートの上端から始まり、下部セクションは下端から始まります。ブロックは、ビューポートの中間から動的に非表示になります。したがって、比較的多いブロック数はビューポートへと引き寄せられません。最後に、単一ブロックを占有できるHUDの数は一つです。占有されているブロックにHUDをさらに配置しようとするとエラーになります。HUDを配置する際の注意点です。

    -----------------------------------------

    blockAlignment (string): ブロックの、その列内での位置合わせを指定します。使用可能な位置合わせは「center」、「left」、「right」で、既定は「left」です。

    -----------------------------------------

    blockSize (string): 各ブロックの高さを設定します。選択できる高さは、small、medium、largeです。ピクセル単位では、それぞれ20、35、50ピクセルに相当します。

    -----------------------------------------

    decimalPrecision (int): コマンドが返す浮動小数点値の小数精度を設定します。精度値の有効範囲は、1～8です。

    -----------------------------------------

    dragCommand (script): マウスボタンをドラッグするときに実行するプロシージャまたはスクリプトを指定します。

    -----------------------------------------

    internalPadding (int): HUDの内部要素間のパディング数を指定します。hudSliderの場合、これはスライダバーとスライダ値の間のパディングを表します。既定のパディングは10です。

    -----------------------------------------

    label (string): HUDのテキストラベル。

    -----------------------------------------

    labelFontSize (string): ラベルのフォントサイズを設定します。使用可能なサイズはsmallとlargeです。

    -----------------------------------------

    labelWidth (int): ラベルを保持する仮想「テキストボックス」のピクセル幅を指定します。この「テキストボックス」の内容は左揃えにされます。ラベルの実際の幅が「テキストボックス」の幅を超える場合、「テキストボックス」の寸法に合わせてラベルが切り捨てられます(ブロックのレイアウトを確認する場合は、-blockフラグの説明を参照してください)。

    -----------------------------------------

    maxValue (float): スライダの最大値を指定します。注:このフラグはfloatを引数として使用しますが、HUDタイプが「int」(整数)の場合、この値は自動的に整数に変換されます。

    -----------------------------------------

    minValue (float): スライダの最小値を指定します。注:このフラグはfloatを引数として使用しますが、HUDタイプが「int」(整数)の場合、この値は自動的に整数に変換されます。

    -----------------------------------------

    padding (int): ブロックの左右マージンの幅を指定します。既定値は15ピクセルです。

    -----------------------------------------

    pressCommand (script): マウスボタンをクリックするときに実行するプロシージャまたはスクリプトを指定します。

    -----------------------------------------

    releaseCommand (script): マウスボタンを放すときに実行するプロシージャまたはスクリプトを指定します。

    -----------------------------------------

    section (int): HUDを表示させるセクションを定義します。画面は10セクションに分割されています。メインビューポートを分割する10の要素行列は、5列x2行で構成されます。セクションのレイアウトを以下に示します。________________________|||||||||||||0|1|2|3|4||||||||____|____|____|____|____||||||||||||||5|6|7|8|9||||||||____|____|____|____|____|各セクションは、上記のとおり0から9までの番号で表されます。たとえば、上列の左から2行目の場合、セクションは次のように定義されます。-sec1ヘッドアップディスプレイが重なり合って文字が煩雑になることを回避するため、それぞれの行には表示の優先順位が定義されていて、各セクションの表示にも優先順位が設定されています。この優先順位に従って、画面スペースが狭まって行のセクション幅が重なり合うと、HUDは優先順位が一番低いセクションを自動的に除去します。これらのセクションは非表示になり、除去されたことを伝える警告メッセージが表示されます。この処理は、最優先のセクションのみが残るまで継続されます。それぞれの行の優先順位は、次のように定義されます。上列の場合の例:セクション0が最優先され、セクション4が2番目と、外側のセクションの優先順位が最も高くなります。次にセクション2、続くセクション1と3の優先順位は等しく、共に優先順位が最も低くなります。この優先順位の構造は、下列にも適用されます。外側の2セクションが最優先され、中央のセクションが続き、残りの2セクションの優先順位が最も低くなります。つまりビューポートの幅が狭まって上列のセクションが重なり始めた場合、まずセクション1と3がビューから除去され、続いてセクション2が、最後にセクション4が除去されます。ブロックレイアウトについても、同様の説明が以下に記されています。

    -----------------------------------------

    sliderIncrement (float): スライダの増分数を指定します。この値を設定しない、または0以下に設定した場合にスライダはminValueからmaxValueまで、リニアに均一で連続的になります。注:このフラグはfloatを引数として使用しますが、HUDタイプが「int」(整数)の場合、この値は自動的に整数に変換されます。

    -----------------------------------------

    sliderLength (int): スライダの長さを、ピクセル単位で指定します。

    -----------------------------------------

    type (string): HUDの数値のタイプを指定します。使用可能なタイプは、「float」と「int」です。

    -----------------------------------------

    value (float): HUDが有効なHUDスライダである場合、スライダ値を設定または返します。注:このフラグはfloatを引数として使用しますが、HUDタイプが「int」(整数)の場合、この値は自動的に整数に変換されます。

    -----------------------------------------

    valueAlignment (string): データブロックとデータテキストの、HUDブロック内での位置合わせを指定します。使用可能な位置合わせは「left」と「right」で、既定は「left」です。

    -----------------------------------------

    valueFontSize (string): スライダ値のフォントサイズを設定します。使用可能なサイズはsmallとlargeです。

    -----------------------------------------

    valueWidth (int): スライダ値を保持する仮想「テキストボックス」のピクセル幅を指定します(ブロックのレイアウトを確認する場合は、-blockフラグの説明を参照してください)。

    -----------------------------------------

    visible (boolean): ヘッドアップディスプレイのレイアウトの表示(オンかオフ)を切り替えます。

    -----------------------------------------

    Return Value:
    None: intヘッドアップ ディスプレイ(HUD)の ID 番号string|int|int[2]対応する除去コマンドのヘッドアップ ディスプレイの名前、ID またはセクション、ブロック値。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def hudSliderButton(allowOverlap: bool = False,block: int = 1,blockAlignment: str = "",blockSize: str = "",buttonLabel: str = "",buttonLabelFontSize: str = "",buttonPressCommand: str = "",buttonReleaseCommand: str = "",buttonShape: str = "",buttonWidth: int = 1,decimalPrecision: int = 1,internalPadding: int = 1,maxValue: float = 1.0,minValue: float = 1.0,padding: int = 1,section: int = 1,sliderDragCommand: str = "",sliderIncrement: float = 1.0,sliderLabel: str = "",sliderLabelFontSize: str = "",sliderLabelWidth: int = 1,sliderLength: int = 1,sliderPressCommand: str = "",sliderReleaseCommand: str = "",type: str = "",value: float = 1.0,valueAlignment: str = "",valueFontSize: str = "",valueWidth: int = 1,visible: bool = False) -> None:
    """
    このコマンドは、3D ビューポート上にある 2D の非アクティブ オーバーレイ プレーンに配置されるヘッドアップ ディスプレイ(HUD)スライダ ボタン コントロールを作成します。このコマンドを使用して、ユーザ スクリプトで実際的な操作を指定できます。HUD スライダ ボタン コントロールは一般的な HUD オブジェクトから派生しているため、同様のワークフローを継承します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowOverlap (boolean): 重なっているセクションの幅や制限に関わらず、ヘッドアップディスプレイを表示します(詳細については、-s/sectionフラグの説明を参照してください)。

    -----------------------------------------

    block (int): セクション内で、HUDが属する個々のブロックを表します。各セクションは一列のブロックから構成されます。各セクションに含まれるブロックの総数は異なります。各セクションに表示されるブロック数は、各セクションにあるブロックのサイズとウィンドウの現在のサイズによって決まります。ブロック数は0から始まり、必要に応じて増加します。HUDスライダのフォーマットは、標準的なHUDとは異なります。フォーマットフラグ(justify、padding、buttonWidthなど)で定義するパラメータを使用するレイアウトは、次のとおりです。__________________________________________________________________________||||||||||||P|J|LW|Slider|IP|Value|IP|Button|J|P||_____|_____|______|___________|______|_______|______|________|_____|_____|P=幅のサブブロック、パディングJ=ブロック全体の行端揃えLW=幅のサブブロック、labelWidthSlider=スライダの長さSliderValue=幅のサブブロック、valueWidthButton=幅のサブブロック、buttonWidthIP=内部パディングブロックの位置決め上部セクションのブロックは主要ビューポートの上端から始まり、下部セクションは下端から始まります。ブロックは、ビューポートの中間から動的に非表示になります。したがって、比較的多いブロック数はビューポートへと引き寄せられません。最後に、単一ブロックを占有できるHUDの数は一つです。占有されているブロックにHUDをさらに配置しようとするとエラーになります。HUDを配置する際の注意点です。

    -----------------------------------------

    blockAlignment (string): ブロックの、その列内での位置合わせを指定します。使用可能な位置合わせは「center」、「left」、「right」で、既定は「left」です。

    -----------------------------------------

    blockSize (string): 各ブロックの高さを設定します。選択できる高さは、small、medium、largeです。ピクセル単位では、それぞれ20、35、50ピクセルに相当します。

    -----------------------------------------

    buttonLabel (string): HUDボタンのテキストラベル。

    -----------------------------------------

    buttonLabelFontSize (string): ボタンラベルのフォントサイズを設定します。使用可能なサイズはsmallとlargeです。

    -----------------------------------------

    buttonPressCommand (script): ボタンでマウスをクリックしたときに実行するプロシージャまたはスクリプトを指定します。

    -----------------------------------------

    buttonReleaseCommand (script): ボタンでマウスを放したときに実行するプロシージャまたはスクリプトを指定します。

    -----------------------------------------

    buttonShape (string): ボタンのシェイプを指定します。使用可能なボタンのシェイプは、「rectangle」と「roundRectangle」です。「rectangle」は四角形のボタン、「roundRectangle」は角が丸い四角形ボタンです。

    -----------------------------------------

    buttonWidth (int): ボタンの幅を指定します。

    -----------------------------------------

    decimalPrecision (int): コマンドが返す浮動小数点値の小数精度を設定します。精度値の有効範囲は、1～8です。

    -----------------------------------------

    internalPadding (int): HUDの内部要素間のパディング数を指定します。hudSliderの場合、これはスライダバーとスライダ値の間のパディングを表します。既定のパディングは10です。

    -----------------------------------------

    maxValue (float): スライダの最大値を指定します。注:このフラグはfloatを引数として使用しますが、HUDタイプが「int」(整数)の場合、この値は自動的に整数に変換されます。

    -----------------------------------------

    minValue (float): スライダの最小値を指定します。注:このフラグはfloatを引数として使用しますが、HUDタイプが「int」(整数)の場合、この値は自動的に整数に変換されます。

    -----------------------------------------

    padding (int): ブロックの左右マージンの幅を指定します。既定値は15ピクセルです。

    -----------------------------------------

    section (int): HUDを表示させるセクションを定義します。画面は10セクションに分割されています。メインビューポートを分割する10の要素行列は、5列x2行で構成されます。セクションのレイアウトを以下に示します。________________________|||||||||||||0|1|2|3|4||||||||____|____|____|____|____||||||||||||||5|6|7|8|9||||||||____|____|____|____|____|各セクションは、上記のとおり0から9までの番号で表されます。たとえば、上列の左から2行目の場合、セクションは次のように定義されます。-sec1ヘッドアップディスプレイが重なり合って文字が煩雑になることを回避するため、それぞれの行には表示の優先順位が定義されていて、各セクションの表示にも優先順位が設定されています。この優先順位に従って、画面スペースが狭まって行のセクション幅が重なり合うと、HUDは優先順位が一番低いセクションを自動的に除去します。これらのセクションは非表示になり、除去されたことを伝える警告メッセージが表示されます。この処理は、最優先のセクションのみが残るまで継続されます。それぞれの行の優先順位は、次のように定義されます。上列の場合の例:セクション0が最優先され、セクション4が2番目と、外側のセクションの優先順位が最も高くなります。次にセクション2、続くセクション1と3の優先順位は等しく、共に優先順位が最も低くなります。この優先順位の構造は、下列にも適用されます。外側の2セクションが最優先され、中央のセクションが続き、残りの2セクションの優先順位が最も低くなります。つまりビューポートの幅が狭まって上列のセクションが重なり始めた場合、まずセクション1と3がビューから除去され、続いてセクション2が、最後にセクション4が除去されます。ブロックレイアウトについても、同様の説明が以下に記されています。

    -----------------------------------------

    sliderDragCommand (script): スライダでマウスボタンをドラッグしたときに実行するプロシージャまたはスクリプトを指定します。

    -----------------------------------------

    sliderIncrement (float): スライダの増分数を指定します。この値を設定しない、または0以下に設定した場合にスライダはminValueからmaxValueまで、リニアに均一で連続的になります。注:このフラグはfloatを引数として使用しますが、HUDタイプが「int」(整数)の場合、この値は自動的に整数に変換されます。

    -----------------------------------------

    sliderLabel (string): HUDスライダのテキストラベル。

    -----------------------------------------

    sliderLabelFontSize (string): スライダラベルのフォントサイズを設定します。使用可能なサイズはsmallとlargeです。

    -----------------------------------------

    sliderLabelWidth (int): ラベルを保持する仮想「テキストボックス」のピクセル幅を指定します。この「テキストボックス」の内容は左揃えにされます。ラベルの実際の幅が「テキストボックス」の幅を超える場合、「テキストボックス」の寸法に合わせてラベルが切り捨てられます(ブロックのレイアウトを確認する場合は、-blockフラグの説明を参照してください)。

    -----------------------------------------

    sliderLength (int): スライダの長さを、ピクセル単位で指定します。

    -----------------------------------------

    sliderPressCommand (script): スライダでマウスをクリックしたときに実行するプロシージャまたはスクリプトを指定します。

    -----------------------------------------

    sliderReleaseCommand (script): スライダでマウスボタンを放したときに実行するプロシージャまたはスクリプトを指定します。

    -----------------------------------------

    type (string): HUDの数値のタイプを指定します。使用可能なタイプは、「float」と「int」です。

    -----------------------------------------

    value (float): HUDが有効なHUDスライダである場合、スライダ値を設定または返します。注:このフラグはfloatを引数として使用しますが、HUDタイプが「int」(整数)の場合、この値は自動的に整数に変換されます。

    -----------------------------------------

    valueAlignment (string): データブロックとデータテキストの、HUDブロック内での位置合わせを指定します。使用可能な位置合わせは「left」と「right」で、既定は「left」です。

    -----------------------------------------

    valueFontSize (string): スライダ値のフォントサイズを設定します。使用可能なサイズはsmallとlargeです。

    -----------------------------------------

    valueWidth (int): スライダ値を保持する仮想「テキストボックス」のピクセル幅を指定します(ブロックのレイアウトを確認する場合は、-blockフラグの説明を参照してください)。

    -----------------------------------------

    visible (boolean): ヘッドアップディスプレイのレイアウトの表示(オンかオフ)を切り替えます。

    -----------------------------------------

    Return Value:
    None: intヘッドアップ ディスプレイ(HUD)の ID 番号string|int|int[2]対応する除去コマンドのヘッドアップ ディスプレイの名前、ID またはセクション、ブロック値。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def iconTextButton(align: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),command: str = "",commandRepeatable: bool = False,defineTemplate: str = "",disabledImage: str = "",docTag: str = "",doubleClickCommand: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,flat: bool = False,flipX: bool = False,flipY: bool = False,font: str = "",fullPathName: bool = False,handleNodeDropCallback: str = "",height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),highlightImage: str = "",image: str = "",image1: str = "",image2: str = "",image3: str = "",imageOverlayLabel: str = "",isObscured: bool = False,label: str = "",labelEditingCallback: str = "",labelOffset: int = 1,ltVersion: str = "",manage: bool = False,marginHeight: int = 1,marginWidth: int = 1,noBackground: bool = False,numberOfPopupMenus: bool = False,overlayLabelBackColor: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0),overlayLabelColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rotation: float = 1.0,scaleIcon: bool = False,selectionImage: str = "",sourceType: str = "",statusBarMessage: str = "",style: str = "",useAlpha: bool = False,useTemplate: str = "",version: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコントロールは、アイコン イメージを最大 3 つまで、ディスプレイ スタイルを最大 4 つまでサポートします。現在のスタイルが指定されている場合、表示されるアイコン イメージは、コントロールの現在のサイズに最適なイメージです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    align (string): ラベル位置合わせです。位置合わせの値は、「left」、「right」、「center」です。既定では、ラベルは「center」に位置合わせます。現在は、-st/styleが「iconAndTextCentered」に設定されている場合にのみ使用可能です。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    command (script): コントロールを押したときに実行されるコマンドです。

    -----------------------------------------

    commandRepeatable (boolean): コマンドフラグで指定したMELコマンドを繰り返し可能にするかどうかを設定します。既定では、最後に実行したコマンドを繰り返すためのショートカットは「g」キーです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    disabledImage (string): ボタンが無効になっているときに使用されるイメージです。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    doubleClickCommand (script): コントロールをダブルクリックしたときに実行されるコマンドです。

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    flat (boolean): コントロールをフラットなボタンにするかどうかを設定します(0:false、1:true)。

    -----------------------------------------

    flipX (boolean): イメージを水平方向に反転するかどうかを指定します。

    -----------------------------------------

    flipY (boolean): イメージを垂直方向に反転するかどうかを指定します。

    -----------------------------------------

    font (string): テキストのフォントです。有効な値は、「boldLabelFont」、「smallBoldLabelFont」、「tinyBoldLabelFont」、「plainLabelFont」、「smallPlainLabelFont」、「obliqueLabelFont」、「smallObliqueLabelFont」、「fixedWidthFont」、「smallFixedWidthFont」です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    handleNodeDropCallback (script): ノードがコントロールにドロップされるとコールされるスクリプトコールバックを指定します。ドロップ中のノード名は関数(Pythonによりコール可能)に渡されるか、末尾(スクリプト)にアペンドされて実行されるコマンドを形成します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    highlightImage (string): カーソルがコントロールの上にあるときに、ハイライトされるイメージ。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    image (string): サイズの異なるイメージがなければ、このフラグをコントロールのイメージに使用できます。「iconOnly」スタイルを設定すると、アイコンはコントロールのサイズに合わせてスケーリングされます。

    -----------------------------------------

    image1 (string): 3つの可能なアイコンの中の1番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    image2 (string): 3つの可能なアイコンの中の2番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    image3 (string): 3つの可能なアイコンの中の3番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    imageOverlayLabel (string): イメージ上に表示されるラベルを表す、最大6文字の短い文字列です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): コントロールに表示されるテキストです。

    -----------------------------------------

    labelEditingCallback (script): コントロールのラベルをダブルクリックして新しいラベルを適用した後コールするコールバックを指定します。新規ラベル文字列がコールバックに渡されます。

    -----------------------------------------

    labelOffset (int): ラベルオフセットです。既定は0です。現在は、-st/styleが「iconAndTextCentered」に設定されている場合にのみ使用可能です。

    -----------------------------------------

    ltVersion (string): このフラグは、バージョンフラグが指定されない場合、またはバージョンフラグは指定されているが引数が異なる場合に、このコントロール機能が導入されているMayaLTバージョンを指定するために使用されます。この値はMayaLTのみで使用され、それ以外では無視されます。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    marginHeight (uint): コントロールコンテンツの上下にあるピクセル数。既定値は1ピクセルです。

    -----------------------------------------

    marginWidth (uint): コントロールコンテンツの両側にあるピクセル数。既定値は1ピクセルです。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    overlayLabelBackColor ([float, float, float, float]): imageOverlayLabelが定義するラベルの影のRGBAカラーです。既定は透過率50%の黒です:000.5

    -----------------------------------------

    overlayLabelColor ([float, float, float]): imageOverlayLabelが定義するラベルのRGBカラーです。既定は薄いグレーです:.8.8.8

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rotation (float): イメージの回転値(ラジアン)です。

    -----------------------------------------

    scaleIcon (boolean): 「textOnly」と「iconOnly」スタイルの場合は、このフラグは無視されます。他のスタイルの場合、フラグが指定されていれば、アイコンはコントロールのサイズに合わせてスケーリングされます。

    -----------------------------------------

    selectionImage (string): コントロールを選択したときに表示されるイメージ。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    sourceType (string): コマンドスクリプトの言語タイプを設定します。c/commandやdcc/doubleClickCommandフラグと一緒にのみ使用できます。有効な値は「mel」(既定で有効)と「python」です。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    style (string): コントロールの描画スタイルです。有効なスタイルは、「iconOnly」、「textOnly」、「iconAndTextHorizontal」、「iconAndTextVertical」と「iconAndTextCentered」です(注:「iconAndTextCentered」はWindowsのみで使用可能です)。「iconOnly」スタイルを設定すると、アイコンはコントロールのサイズに合わせてスケーリングされます。

    -----------------------------------------

    useAlpha (boolean): イメージにアルファチャネルを使用するかどうかを指定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    version (string): このコントロール機能が導入されたバージョンを指定します。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringiconTextButton の名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def iconTextCheckBox(align: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",disabledImage: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,flat: bool = False,flipX: bool = False,flipY: bool = False,font: str = "",fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),highlightImage: str = "",image: str = "",image1: str = "",image2: str = "",image3: str = "",imageOverlayLabel: str = "",isObscured: bool = False,label: str = "",labelOffset: int = 1,ltVersion: str = "",manage: bool = False,marginHeight: int = 1,marginWidth: int = 1,noBackground: bool = False,numberOfPopupMenus: bool = False,offCommand: str = "",onCommand: str = "",overlayLabelBackColor: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0),overlayLabelColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rotation: float = 1.0,selectionHighlightImage: str = "",selectionImage: str = "",statusBarMessage: str = "",style: str = "",useAlpha: bool = False,useTemplate: str = "",value: bool = False,version: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコントロールは、アイコン イメージを最大 3 つまで、ディスプレイ スタイルを最大 4 つまでサポートします。現在のスタイルが指定されている場合、表示されるアイコン イメージは、コントロールの現在のサイズに最適なイメージです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    align (string): ラベル位置合わせです。位置合わせの値は、「left」、「right」、「center」です。既定では、ラベルは「center」に位置合わせます。現在は、-st/styleが「iconAndTextCentered」に設定されている場合にのみ使用可能です。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): コントロールの状態を変更したときに実行されるコマンドです。このフラグは、onCommandとoffCommandと一緒に使用しないでください。changeCommandを使用してコールバックの内側でコントロールの状態をテストするか、onCommandとoffCommandを独立したコールバックとして使用してください。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    disabledImage (string): ボタンが無効になっているときに使用されるイメージです。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    flat (boolean): コントロールをフラットなボタンにするかどうかを設定します(0:false、1:true)。

    -----------------------------------------

    flipX (boolean): イメージを水平方向に反転するかどうかを指定します。

    -----------------------------------------

    flipY (boolean): イメージを垂直方向に反転するかどうかを指定します。

    -----------------------------------------

    font (string): テキストのフォントです。有効な値は、「boldLabelFont」、「smallBoldLabelFont」、「tinyBoldLabelFont」、「plainLabelFont」、「smallPlainLabelFont」、「obliqueLabelFont」、「smallObliqueLabelFont」、「fixedWidthFont」、「smallFixedWidthFont」です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    highlightImage (string): カーソルがコントロールの上にあるときに、ハイライトされるイメージ。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    image (string): サイズの異なるイメージがなければ、このフラグをコントロールのイメージに使用できます。「iconOnly」スタイルを設定すると、アイコンはコントロールのサイズに合わせてスケーリングされます。

    -----------------------------------------

    image1 (string): 3つの可能なアイコンの中の1番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    image2 (string): 3つの可能なアイコンの中の2番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    image3 (string): 3つの可能なアイコンの中の3番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    imageOverlayLabel (string): イメージ上に表示されるラベルを表す、最大6文字の短い文字列です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): コントロールに表示されるテキストです。

    -----------------------------------------

    labelOffset (int): ラベルオフセットです。既定は0です。現在は、-st/styleが「iconAndTextCentered」に設定されている場合にのみ使用可能です。

    -----------------------------------------

    ltVersion (string): このフラグは、バージョンフラグが指定されない場合、またはバージョンフラグは指定されているが引数が異なる場合に、このコントロール機能が導入されているMayaLTバージョンを指定するために使用されます。この値はMayaLTのみで使用され、それ以外では無視されます。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    marginHeight (uint): コントロールコンテンツの上下にあるピクセル数。既定値は1ピクセルです。

    -----------------------------------------

    marginWidth (uint): コントロールコンテンツの両側にあるピクセル数。既定値は1ピクセルです。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    offCommand (script): コントロールをオフにしたときに実行されるコマンドです。

    -----------------------------------------

    onCommand (script): コントロールをオンにしたときに実行されるコマンドです。

    -----------------------------------------

    overlayLabelBackColor ([float, float, float, float]): imageOverlayLabelが定義するラベルの影のRGBAカラーです。既定は透過率50%の黒です:000.5

    -----------------------------------------

    overlayLabelColor ([float, float, float]): imageOverlayLabelが定義するラベルのRGBカラーです。既定は薄いグレーです:.8.8.8

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rotation (float): イメージの回転値(ラジアン)です。

    -----------------------------------------

    selectionHighlightImage (string): コントロールが選択され、カーソルがコントロールの上にあるときに表示されるイメージです。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    selectionImage (string): コントロールを選択したときに表示されるイメージ。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    style (string): コントロールの描画スタイルです。有効なスタイルは、「iconOnly」、「textOnly」、「iconAndTextHorizontal」、「iconAndTextVertical」と「iconAndTextCentered」です(注:「iconAndTextCentered」はWindowsのみで使用可能です)。「iconOnly」スタイルを設定すると、アイコンはコントロールのサイズに合わせてスケーリングされます。

    -----------------------------------------

    useAlpha (boolean): イメージにアルファチャネルを使用するかどうかを指定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (boolean): コントロールの状態を設定、または返します。

    -----------------------------------------

    version (string): このコントロール機能が導入されたバージョンを指定します。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def iconTextRadioButton(align: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",collection: str = "",defineTemplate: str = "",disabledImage: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,flat: bool = False,flipX: bool = False,flipY: bool = False,font: str = "",fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),highlightImage: str = "",image: str = "",image1: str = "",image2: str = "",image3: str = "",imageOverlayLabel: str = "",isObscured: bool = False,label: str = "",labelOffset: int = 1,ltVersion: str = "",manage: bool = False,marginHeight: int = 1,marginWidth: int = 1,noBackground: bool = False,numberOfPopupMenus: bool = False,offCommand: str = "",onCommand: str = "",overlayLabelBackColor: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0),overlayLabelColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rotation: float = 1.0,select: bool = False,selectionHighlightImage: str = "",selectionImage: str = "",statusBarMessage: str = "",style: str = "",useAlpha: bool = False,useTemplate: str = "",version: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコントロールは、アイコン イメージを最大 3 つまで、ディスプレイ スタイルを最大 4 つまでサポートします。現在のスタイルが指定されている場合、表示されるアイコン イメージは、コントロールの現在のサイズに最適なイメージです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    align (string): ラベル位置合わせです。位置合わせの値は、「left」、「right」、「center」です。既定では、ラベルは「center」に位置合わせます。現在は、-st/styleが「iconAndTextCentered」に設定されている場合にのみ使用可能です。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): コントロールの状態を変更したときに実行されるコマンドです。このフラグは、onCommandとoffCommandと一緒に使用しないでください。changeCommandを使用してコールバックの内側でコントロールの状態をテストするか、onCommandとoffCommandを独立したコールバックとして使用してください。

    -----------------------------------------

    collection (string): 指定したコレクションに、コントロールを明示的に追加します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    disabledImage (string): ボタンが無効になっているときに使用されるイメージです。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    flat (boolean): コントロールをフラットなボタンにするかどうかを設定します(0:false、1:true)。

    -----------------------------------------

    flipX (boolean): イメージを水平方向に反転するかどうかを指定します。

    -----------------------------------------

    flipY (boolean): イメージを垂直方向に反転するかどうかを指定します。

    -----------------------------------------

    font (string): テキストのフォントです。有効な値は、「boldLabelFont」、「smallBoldLabelFont」、「tinyBoldLabelFont」、「plainLabelFont」、「smallPlainLabelFont」、「obliqueLabelFont」、「smallObliqueLabelFont」、「fixedWidthFont」、「smallFixedWidthFont」です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    highlightImage (string): カーソルがコントロールの上にあるときに、ハイライトされるイメージ。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    image (string): サイズの異なるイメージがなければ、このフラグをコントロールのイメージに使用できます。「iconOnly」スタイルを設定すると、アイコンはコントロールのサイズに合わせてスケーリングされます。

    -----------------------------------------

    image1 (string): 3つの可能なアイコンの中の1番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    image2 (string): 3つの可能なアイコンの中の2番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    image3 (string): 3つの可能なアイコンの中の3番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    imageOverlayLabel (string): イメージ上に表示されるラベルを表す、最大6文字の短い文字列です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): コントロールに表示されるテキストです。

    -----------------------------------------

    labelOffset (int): ラベルオフセットです。既定は0です。現在は、-st/styleが「iconAndTextCentered」に設定されている場合にのみ使用可能です。

    -----------------------------------------

    ltVersion (string): このフラグは、バージョンフラグが指定されない場合、またはバージョンフラグは指定されているが引数が異なる場合に、このコントロール機能が導入されているMayaLTバージョンを指定するために使用されます。この値はMayaLTのみで使用され、それ以外では無視されます。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    marginHeight (uint): コントロールコンテンツの上下にあるピクセル数。既定値は1ピクセルです。

    -----------------------------------------

    marginWidth (uint): コントロールコンテンツの両側にあるピクセル数。既定値は1ピクセルです。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    offCommand (script): コントロールをオフにしたときに実行されるコマンドです。

    -----------------------------------------

    onCommand (script): コントロールをオンにしたときに実行されるコマンドです。

    -----------------------------------------

    overlayLabelBackColor ([float, float, float, float]): imageOverlayLabelが定義するラベルの影のRGBAカラーです。既定は透過率50%の黒です:000.5

    -----------------------------------------

    overlayLabelColor ([float, float, float]): imageOverlayLabelが定義するラベルのRGBカラーです。既定は薄いグレーです:.8.8.8

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rotation (float): イメージの回転値(ラジアン)です。

    -----------------------------------------

    select (boolean): このボタンを選択します。

    -----------------------------------------

    selectionHighlightImage (string): コントロールが選択され、カーソルがコントロールの上にあるときに表示されるイメージです。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    selectionImage (string): コントロールを選択したときに表示されるイメージ。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    style (string): コントロールの描画スタイルです。有効なスタイルは、「iconOnly」、「textOnly」、「iconAndTextHorizontal」、「iconAndTextVertical」と「iconAndTextCentered」です(注:「iconAndTextCentered」はWindowsのみで使用可能です)。「iconOnly」スタイルを設定すると、アイコンはコントロールのサイズに合わせてスケーリングされます。

    -----------------------------------------

    useAlpha (boolean): イメージにアルファチャネルを使用するかどうかを指定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    version (string): このコントロール機能が導入されたバージョンを指定します。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成された iconTextRadioButton の名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def iconTextRadioCollection(collectionItemArray: bool = False,defineTemplate: str = "",disableCommands: bool = False,exists: bool = False,gl: bool = False,numberOfCollectionItems: bool = False,parent: str = "",select: str = "",useTemplate: str = "") -> None:
    """
    このコマンドは iconTextRadioButtons のクラスタを作成します。-p/parent フラグを使って親が指定されていなければ、現在の既定のレイアウトがクラスタの親になります。クラスタはレイアウトの子なので、レイアウトが削除されるとクラスタもいっしょに削除されます。-g/global フラグが使用されている場合、クラスタを複数のウィンドウにスパンさせることも可能です。この場合、クラスタには親がないので、deleteUI コマンドを使用して明示的に削除する必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    collectionItemArray (boolean): このコレクションにあるすべてのオブジェクトのロングネームを示す文字列リストを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    disableCommands (boolean): コマンドを呼び出さずに選択されるコレクション内の特定のiconTextRadioButtonを、-cc/changeCommand、-onc/onCommand、または-ofc/offCommandの各フラグにアタッチすることができます。このフラグは、-editフラグと-selectフラグと一緒に使用される場合のみ有効です。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    gl (boolean): コレクションが親のレイアウトを持たないように設定します。コレクションに親のレイアウトがある場合、レイアウトとともに削除されます。グローバルになるように設定されている場合、明示的に削除する必要があります。

    -----------------------------------------

    numberOfCollectionItems (boolean): このコレクションにあるオブジェクトの数を返します。

    -----------------------------------------

    parent (string): 指定したレイアウトが、クラスタの親のレイアウトになるように設定します。

    -----------------------------------------

    select (string): 指定したコレクションオブジェクトを選択します。照会すると、現在選択されているコレクションオブジェクトの名前を返します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: string作成された iconTextRadioCollection の名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def iconTextScrollList(allowMultiSelection: bool = False,annotation: str = "",append: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",deselectAll: bool = False,docTag: str = "",doubleClickCommand: str = "",dragCallback: str = "",dragFeedbackVisible: bool = False,dropCallback: str = "",dropRectCallback: str = "",editIndexed: int = 1,editable: bool = False,enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,itemAt: Tuple[int, int] = tuple(1, 1),itemTextColor: Tuple[int, float, float, float] = tuple(1, 1.0, 1.0, 1.0),manage: bool = False,noBackground: bool = False,numberOfIcons: int = 1,numberOfPopupMenus: bool = False,numberOfRows: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,removeAll: bool = False,selectCommand: str = "",selectIndexedItem: int = 1,selectItem: str = "",statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",visualRectAt: Tuple[int, int] = tuple(1, 1),width: int = 1) -> None:
    """
    このコマンドは、テキストのスクロール リストの作成、編集、照会を行います。リストは、一度に 1 つの項目だけを選択するシングル セレクト モード、または複数の項目が選択できるマルチセレクト モードにすることができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowMultiSelection (boolean): マルチあるいはシングルセレクションモードを指定します。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    append (string): リストの最後に項目を追加します。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): リストの変更時に実行するスクリプトです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    deselectAll (boolean): すべての項目を選択解除します。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    doubleClickCommand (script): 項目をダブルクリックしたときに実行するコマンドを指定します。

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragFeedbackVisible (boolean): ドラッグのフィードバックをスクロールバーに表示する必要がありますか?

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    dropRectCallback (script): ドラッグ＆ドロップ操作の、マウスをドロップ位置の上に置いたままにしたときにコールされるコールバックを追加します。コントロールがドロップされたデータを受信できると、エントリをハイライトするために描画した長方形のシェイプを戻します。MELバージョンのコールバックの書式は次のとおりです。globalprocint[]callbackName(string$dropControl,int$x,int$y)戻り値は、サイズを表す4つの数字から成る配列で、パラメータを伴います。数値は、描画される長方形の左上のX座標、左上のY座標、幅、高さの順です。この機能は、現在、MELでのみ実装されます。

    -----------------------------------------

    editIndexed (uint): 編集済みフィールドのインデックスです。

    -----------------------------------------

    editable (boolean): フィールドが編集可能かどうかを設定します。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    itemAt ([int, int]): 存在する場合は、指定位置にある項目名を戻します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    itemTextColor ([int, float, float, float]): 指定されたインデックスにある項目のテキストカラーを設定します。引数は、index、red、green、およびblueです。インデックスは1ベースです。それぞれのカラーコンポーネントの値は、0.0～1.0です。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfIcons (uint): アイコンの数です。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    numberOfRows (boolean): 可視となる行の数。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    removeAll (boolean): 全項目を除去します。

    -----------------------------------------

    selectCommand (script): 項目を選択したときに実行するコマンドを指定します。

    -----------------------------------------

    selectIndexedItem (int): インデックスされた項目を選択します。インデックスは1ベースです。

    -----------------------------------------

    selectItem (string): 指定したテキストを含む項目を選択します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    visualRectAt ([int, int]): 存在する場合は、指定位置にある項目を示す長方形表示を戻します。結果は、長方形を表すローカル座標の4つの整数から成る配列で、順番は次のとおりです。左上のX座標、左上のY座標、幅、高さ。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def iconTextStaticLabel(align: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",disabledImage: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,flipX: bool = False,flipY: bool = False,font: str = "",fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),image: str = "",image1: str = "",image2: str = "",image3: str = "",imageOverlayLabel: str = "",isObscured: bool = False,label: str = "",labelOffset: int = 1,ltVersion: str = "",manage: bool = False,marginHeight: int = 1,marginWidth: int = 1,noBackground: bool = False,numberOfPopupMenus: bool = False,overlayLabelBackColor: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0),overlayLabelColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rotation: float = 1.0,statusBarMessage: str = "",style: str = "",useAlpha: bool = False,useTemplate: str = "",version: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコントロールは、アイコン イメージを最大 3 つまで、ディスプレイ スタイルを最大 4 つまでサポートします。現在のスタイルが指定されている場合、表示されるアイコン イメージは、コントロールの現在のサイズに最適なイメージです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    align (string): ラベル位置合わせです。位置合わせの値は、「left」、「right」、「center」です。既定では、ラベルは「center」に位置合わせます。現在は、-st/styleが「iconAndTextCentered」に設定されている場合にのみ使用可能です。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    disabledImage (string): ボタンが無効になっているときに使用されるイメージです。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    flipX (boolean): イメージを水平方向に反転するかどうかを指定します。

    -----------------------------------------

    flipY (boolean): イメージを垂直方向に反転するかどうかを指定します。

    -----------------------------------------

    font (string): テキストのフォントです。有効な値は、「boldLabelFont」、「smallBoldLabelFont」、「tinyBoldLabelFont」、「plainLabelFont」、「smallPlainLabelFont」、「obliqueLabelFont」、「smallObliqueLabelFont」、「fixedWidthFont」、「smallFixedWidthFont」です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    image (string): サイズの異なるイメージがなければ、このフラグをコントロールのイメージに使用できます。「iconOnly」スタイルを設定すると、アイコンはコントロールのサイズに合わせてスケーリングされます。

    -----------------------------------------

    image1 (string): 3つの可能なアイコンの中の1番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    image2 (string): 3つの可能なアイコンの中の2番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    image3 (string): 3つの可能なアイコンの中の3番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    imageOverlayLabel (string): イメージ上に表示されるラベルを表す、最大6文字の短い文字列です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): コントロールに表示されるテキストです。

    -----------------------------------------

    labelOffset (int): ラベルオフセットです。既定は0です。現在は、-st/styleが「iconAndTextCentered」に設定されている場合にのみ使用可能です。

    -----------------------------------------

    ltVersion (string): このフラグは、バージョンフラグが指定されない場合、またはバージョンフラグは指定されているが引数が異なる場合に、このコントロール機能が導入されているMayaLTバージョンを指定するために使用されます。この値はMayaLTのみで使用され、それ以外では無視されます。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    marginHeight (uint): コントロールコンテンツの上下にあるピクセル数。既定値は1ピクセルです。

    -----------------------------------------

    marginWidth (uint): コントロールコンテンツの両側にあるピクセル数。既定値は1ピクセルです。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    overlayLabelBackColor ([float, float, float, float]): imageOverlayLabelが定義するラベルの影のRGBAカラーです。既定は透過率50%の黒です:000.5

    -----------------------------------------

    overlayLabelColor ([float, float, float]): imageOverlayLabelが定義するラベルのRGBカラーです。既定は薄いグレーです:.8.8.8

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rotation (float): イメージの回転値(ラジアン)です。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    style (string): コントロールの描画スタイルです。有効なスタイルは、「iconOnly」、「textOnly」、「iconAndTextHorizontal」、「iconAndTextVertical」と「iconAndTextCentered」です(注:「iconAndTextCentered」はWindowsのみで使用可能です)。「iconOnly」スタイルを設定すると、アイコンはコントロールのサイズに合わせてスケーリングされます。

    -----------------------------------------

    useAlpha (boolean): イメージにアルファチャネルを使用するかどうかを指定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    version (string): このコントロール機能が導入されたバージョンを指定します。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成された iconTextStaticLabel の名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def image(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),image: str = "",isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドにより、xpm 以外のファイルで使用されるスタティック イメージが作成されます。ファイル テクスチャ ノードでサポートされているすべてのイメージ ファイル フォーマットは、このコマンドでサポートされています。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    image (string): 指定したファイル名を、イメージに設定します。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成されたイメージの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def intField(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",editable: bool = False,enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,enterCommand: str = "",exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,maxValue: int = 1,minValue: int = 1,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,receiveFocusCommand: str = "",statusBarMessage: str = "",step: int = 1,useTemplate: str = "",value: int = 1,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    整数値だけを受け付けるフィールド コントロールを作成し、最大値と最小値を設定します。フィールドには非表示のスライダがアタッチされています。このスライダを使用するには、Ctrl キーを押したままマウス ボタンのいずれかを押します。中マウス ボタンを押したまま非表示のスライダを右方向にドラッグすると、-s/step フラグで指定した増分だけ、フィールドの値が増加します。左方向にドラッグすると、同じ量だけ減少していきます。マウスの左ボタンでは 0.1 ずつ、右ボタンでは 10 ずつ増減します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): 値が変更されたときに実行されるコマンドです。値が-v/valueフラグによって変更されたときはこのコマンドは起動されません。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): 非表示のスライダをドラッグして値が変更されたときに実行されるコマンドです。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): フィールドの編集状態です。既定では、このフラグはtrueに設定され、これに入力することでフィールド値を変更することができます。falseの場合は、フィールドは「読み取り専用」になるので、フィールドに入力することはできません。フィールドの値は、-ed/editableフラグの状態に関係なく、-v/valueフラグを使用していつでも変更することができます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    enterCommand (script): キーパッドの「Enter」キーが押されたときに実行されるコマンドです。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (int): フィールドの上限です。

    -----------------------------------------

    minValue (int): フィールドの下限です。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    receiveFocusCommand (script): フィールドにフォーカスが移ったときに実行されるコマンドです。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (int): 非表示スライダの増分です。非表示スライダをドラッグすると、フィールド値はこの量だけ変化します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (int): フィールドの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def intFieldGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enable1: bool = False,enable2: bool = False,enable3: bool = False,enable4: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,extraLabel: str = "",fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfFields: int = 1,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",useTemplate: str = "",value: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),value1: int = 1,value2: int = 1,value3: int = 1,value4: int = 1,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): いずれかのフィールドの値が変更されたときに実行されるコマンド文字列です。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): いずれかのフィールドで非表示スライダをドラッグすると実行されるコマンド文字列です。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enable1 (boolean): 

    -----------------------------------------

    enable2 (boolean): 

    -----------------------------------------

    enable3 (boolean): 

    -----------------------------------------

    enable4 (boolean): それぞれのフィールドの有効、無効です。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    extraLabel (string): 作成時に存在している場合、これはグループに追加のラベルを作成することを指定します。設定した文字列は、フィールドの右側にラベルテキストとして表示されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): 作成時に存在している場合、これはフィールドの左にラベルを作成することを指定します。設定した文字列は、ラベルテキストになります。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfFields (int): 作成時のフィールド数を設定します。1～4つのフィールドを使用できます。既定は1フィールドです。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value ([int, int, int, int]): すべてのフィールドの値です。

    -----------------------------------------

    value1 (int): 

    -----------------------------------------

    value2 (int): 

    -----------------------------------------

    value3 (int): 

    -----------------------------------------

    value4 (int): それぞれのフィールドの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def intScrollBar(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),horizontal: bool = False,isObscured: bool = False,largeStep: int = 1,manage: bool = False,maxValue: int = 1,minValue: int = 1,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",step: int = 1,useTemplate: str = "",value: int = 1,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    整数値だけを受け付けるスクロール バー コントロールを作成し、最大値と最小値を設定します。スクロール バーには、最小値と最大値に相対的に表される現在値を示すマーカーが表示されます。現在値を変更するには、マーカー、またはスクロール バー自体をクリック＆ドラッグします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): 値が変更されたときに実行されるコマンドです。値が-v/valueフラグによって変更されたときはこのコマンドは起動されません。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): スクロールバーの値マーカーのドラッグによって値が変更されたときに実行されるコマンドです。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    horizontal (boolean): スクロールバーの方向です。このフラグは既定ではtrueになっており、スクロールバーは水平方向に表示されます。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    largeStep (int): スクロールバーの大きい増分、すなわち矢印ボタンとサムの間を押したときに使用される増分です。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (int): スクロールバーの上限です。

    -----------------------------------------

    minValue (int): スクロールバーの下限です。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (int): スクロールバーの小さい方の増分、すなわち矢印ボタンを押したときに適用される増分です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (int): スクロールバーの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def intSlider(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),horizontal: bool = False,isObscured: bool = False,manage: bool = False,maxValue: int = 1,minValue: int = 1,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",step: int = 1,useTemplate: str = "",value: int = 1,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    整数値だけを受け付けるスライダ コントロールを作成し、最大値と最小値を設定します。スライダには、最小値と最大値に相対的に表される現在値を示すマーカーが表示されます。現在値を変更するには、マーカー、またはスライダ自体をクリック＆ドラッグします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): 値が変更されたときに実行されるコマンドです。値が-v/valueフラグによって変更されたときはこのコマンドは起動されません。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): スライダ値マーカーのドラッグによって値が変更されたときに実行されるコマンドです。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    horizontal (boolean): スライダの方向です。このフラグは既定ではtrueになっており、スライダは水平方向に表示されます。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (int): スライダの上限です。

    -----------------------------------------

    minValue (int): スライダの下限です。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (int): ステップ値は、スライダのどちらかの側をクリックしたときに増加または減少する値を表します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (int): スライダの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def intSliderGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,extraLabel: str = "",field: bool = False,fieldMaxValue: int = 1,fieldMinValue: int = 1,fieldStep: int = 1,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,maxValue: int = 1,minValue: int = 1,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),sliderStep: int = 1,statusBarMessage: str = "",step: int = 1,useTemplate: str = "",value: int = 1,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): スライダの値が変更されたときに実行されるコマンド文字列です。このコマンド文字列は、スライダをドラッグした後で1度だけ実行されます。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): スライダをドラッグしている間、繰り返し実行されるコマンド文字列です。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    extraLabel (string): 作成時に存在している場合、これはスライダの後ろに追加のラベルを表示することを指定します。設定した文字列は、追加ラベルのテキストになります。

    -----------------------------------------

    field (boolean): 作成時にtrueの場合、グループが、スライダの値を反映する編集可能な整数フィールドを持つようになります。

    -----------------------------------------

    fieldMaxValue (int): フィールドに入力できる最大値です。この値は、-max/maxValueフラグより大きい任意の値に設定できます。既定では、-max/maxValueフラグと同じです。

    -----------------------------------------

    fieldMinValue (int): フィールドに入力できる最小値です。この値は、-min/minValueフラグより小さい任意の値に設定できます。既定では、-min/minValueフラグと同じです。

    -----------------------------------------

    fieldStep (int): フィールドの増分です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): 作成時に存在している場合、グループにスタティックテキストが表示されます。照会された文字列が返されます。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (int): スライダとフィールドの最大値を設定します。

    -----------------------------------------

    minValue (int): スライダとフィールドの最小値を設定します。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    sliderStep (int): Linuxでは、スライダのステップ値は、スライダのどちらかの側をクリックしたときに値が増減する量を表します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (int): スライダとフィールドの増分です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (int): グループの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成時のコントロールへのフル パス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def layerButton(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",color: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),command: str = "",current: bool = False,defineTemplate: str = "",docTag: str = "",doubleClickCommand: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,hideOnPlaybackCommand: str = "",highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),identification: int = 1,isObscured: bool = False,label: str = "",labelWidth: bool = False,layerHideOnPlayback: bool = False,layerState: str = "",layerVisible: bool = False,manage: bool = False,name: str = "",noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,renameCommand: str = "",select: bool = False,statusBarMessage: str = "",transparent: bool = False,typeCommand: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",visibleCommand: str = "",width: int = 1) -> None:
    """
    レイヤ バー ボタンが作成されます。レイヤ バー ボタンには、参照するレイヤの名前とカラー割当てを表すカラー サンプルが含まれます。レイヤ バーとレイヤ エディタ ウィンドウの構築に主に使用し、それぞれのリストの各レイヤでレイヤ バー ボタンが使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): あらゆる種類の変更で呼び出すコマンドを設定します。

    -----------------------------------------

    color ([float, float, float]): レイヤカラー。正規化した実数を用いて、R、G、Bの空間に指定します。

    -----------------------------------------

    command (script): シングルクリックでコールするコマンドを設定します。

    -----------------------------------------

    current (boolean): 現在のレイヤとして表示するようにこのボタンが設定されます。現在のレイヤは、ユーザが新しく作成したすべてのオブジェクトを追加できるレイヤです。NB:レイヤボタンをこの状態に設定しても、実際の現在のレイヤは影響されません。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    doubleClickCommand (script): ダブルクリックでコールするコマンドを設定します。

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    hideOnPlaybackCommand (script): レイヤボタンの「再生時に非表示」インジケータを押した場合にコールされるコマンド

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    identification (int): レイヤに関連する整数識別番号。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): ボタンのラベルテキストです。

    -----------------------------------------

    labelWidth (boolean): ラベル部分とカラースウォッチ部分のいずれがボタンクリックされたかを判定するするために、ラベル部分の幅を照会します。

    -----------------------------------------

    layerHideOnPlayback (boolean): 再生時にレイヤが表示されているか非表示になっているかが示されます。

    -----------------------------------------

    layerState (string): レイヤの状態が記述されます。normal、template、referenceのうちの、いずれかになります。

    -----------------------------------------

    layerVisible (boolean): レイヤが表示されているか非表示になっているかが示されます。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    name (string): レイヤ名です。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    renameCommand (string): レイヤの名前を変更した場合にコールされるようにコマンドが設定されます。文字列「#1」はコントロールの名前で置き換えられ、「#2」はレイヤの新しい名前で置き換えられます。

    -----------------------------------------

    select (boolean): 選択したレイヤとして表示するようにこのボタンを設定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    transparent (boolean): レイヤカラーを表示するか透明にするかを指定します。

    -----------------------------------------

    typeCommand (script): レイヤボタンのタイプインジケータを押した場合にコールされるコマンド

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    visibleCommand (script): レイヤボタンの可視性インジケータを押した場合にコールされるコマンド

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def messageLine(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    ツール フィードバックを表示するメッセージ ラインが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string: コントロールへのフル パス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nameField(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",drawInactiveFrame: bool = False,dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,nameChangeCommand: str = "",noBackground: bool = False,numberOfPopupMenus: bool = False,object: str = "",parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,receiveFocusCommand: str = "",statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、Maya オブジェクト名にリンクできる、編集可能なフィールドを作成します。このフィールドは常にそのオブジェクト名を表示します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): ユーザがフィールドのテキストを変更すると、このコマンドが実行されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    drawInactiveFrame (boolean): 名前フィールドが非アクティブのときにフレーム付きで自身を描画するかどうかを設定します。既定では、このオプションはfalseです。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    nameChangeCommand (script): ノード名が変更されたときに実行されるコマンドです。注:フィールド入力による名前の変更かどうかに拘わらず、このコマンドはノード名が変更されると実行されます。フィールドに入力した場合に実行されるコマンドをアタッチする場合は、-cc/changeCommandフラグを使用してください。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    object (string): 指定したdageオブジェクトにフィールドをアタッチし、このフィールドが常にオブジェクト名を表示するようにします。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    receiveFocusCommand (script): フィールドにフォーカスが移ったときに実行されるコマンドです。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nodeTreeLister(addFavorite: str = "",addItem: Tuple[str, str, str] = tuple("", "", ""),addVnnItem: Tuple[str, str, str] = tuple("", "", ""),annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),clearContents: bool = False,collapsePath: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,executeItem: str = "",exists: bool = False,expandPath: str = "",expandToDepth: int = 1,favoritesCallback: str = "",favoritesList: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,itemScript: str = "",manage: bool = False,noBackground: bool = False,nodeLibrary: str = "",numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,refreshCommand: str = "",removeFavorite: str = "",removeItem: str = "",resultsPathUnderCursor: bool = False,selectPath: str = "",statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",vnnString: bool = False,width: int = 1) -> None:
    """
    このコマンドは、ノードのツリー形式のコントロールを作成、編集、照会します。nodeTreeLister は treeLister ですが、項目にはディペンデンシー ノード名を返すコマンドがあると仮定されます。結果パネルからのドラッグ移動はサポートされています。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addFavorite (string): お気に入りフォルダに項目パスを追加します。項目パスは、実際にツリー内に存在する必要はありません。

    -----------------------------------------

    addItem ([string, string, script]): コントロールに項目を追加します。引数は項目パス、アイコンパス、コマンドです。ここでの項目パスはツリーのルートから項目名までのパス、アイコンパスは結果リストに表示されるアイコン、コマンドは項目を左クリックしたときに実行されるスクリプトです。

    -----------------------------------------

    addVnnItem ([string, string, string]): コントロールにVNN(VirtualNodeNetwork)アイテムを追加します。引数はitem-path、icon-path、vnn-stringです。item-pathはツリーのルートから項目名までのパスです。icon-pathは結果リストに表示されるアイコンです。vnn-stringは中マウスボタンで項目をドラッグしている場合のドラッグデータに使用されます。vnn-stringは「VNNruntime,VNNlibrary,VNNnode」で構成する必要があります。VNNlibraryには「/」で区切られたサブライブラリを含めることができます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    clearContents (boolean): コントロールの内容をクリアします。

    -----------------------------------------

    collapsePath (string): ツリーのパスを折り畳みます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    executeItem (string): 項目に関連付けられているコマンドを実行します。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    expandPath (string): ツリーのパスを展開します。

    -----------------------------------------

    expandToDepth (int): ツリーを指定した深さまで展開します。

    -----------------------------------------

    favoritesCallback (script): このスクリプトは、お気に入りを追加または除去するときにコールされます。項目パスと、項目をお気に入りに追加(True)するか除去(False)するかを示すブーリアンの2つの引数が渡されます。

    -----------------------------------------

    favoritesList (boolean): お気に入り項目のリストを返します。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    itemScript (string): 渡された項目のパスの言語とスクリプトコマンドを2要素のリストとして返します。1番目の要素は文字列「MEL」または「Python」で、2番目の要素はコマンドスクリプトです。Pythonのコール可能なコマンド付きの項目は文字列として戻されることに注意してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    nodeLibrary (string): このツリー形式を現在表示しているノードライブラリです。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    refreshCommand (script): リフレッシュボタンを押したときに実行されるコマンドです。注:既定ではリフレッシュボタンは非表示です。このコマンドスクリプトがアタッチされている場合は、自動的に表示されます。

    -----------------------------------------

    removeFavorite (string): 項目をお気に入りから除去します。お気に入り項目のフルパス、またはフルパスの末尾のみのどちらでも受け取ります。

    -----------------------------------------

    removeItem (string): 項目パスを除去します。

    -----------------------------------------

    resultsPathUnderCursor (boolean): 結果パネル(右パネル)でマウスカーソルの下にある項目のパスを返します。項目がない場合は空の文字列を返します。

    -----------------------------------------

    selectPath (string): ツリーのパスを選択します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    vnnString (boolean): 渡された項目パスのVNN(VirtualNodeNetwork)文字列を返します。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成したコントロールの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def palettePort(actualTotal: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",colorEditable: bool = False,colorEdited: str = "",defineTemplate: str = "",dimensions: Tuple[int, int] = tuple(1, 1),docTag: str = "",dragCallback: str = "",dropCallback: str = "",editable: bool = False,enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),hsvValue: Tuple[int, int, float, float, float] = tuple(1, 1, 1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,redraw: bool = False,rgbValue: Tuple[int, float, float, float] = tuple(1, 1.0, 1.0, 1.0),setCurCell: int = 1,statusBarMessage: str = "",topDown: bool = False,transparent: int = 1,useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    カラー セルの配列を作成します。作業セッション中に管理するカラーの格納と取り出しができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    actualTotal (int): パレットエントリの実際の数を設定します。この数は0より大きくする必要がありますが、dimensionsフラグで指定したパレットエントリの最大数より大きくしてはなりません。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): パレットのカラーが変更されると、このコマンド文字列を実行します。

    -----------------------------------------

    colorEditable (boolean): そうでない場合、ユーザは現在のインデックスのカラーを修正できます。

    -----------------------------------------

    colorEdited (script): パレットのカラーが編集されると、このコマンド文字列を実行します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    dimensions ([int, int]): 配列の次元を設定します。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): trueの場合、ユーザは現在のカラーを変更できます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    hsvValue ([int, int, float, float, float]): 指定したセルのカラーを、HSVフォーマットを使用して設定します。照会すると、現在のセルのカラーを返します。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    redraw (boolean): 配列を強制的に再描画します。

    -----------------------------------------

    rgbValue ([int, float, float, float]): 指定したセルのカラーを、RGBフォーマットを使用して設定します。照会すると、現在のセルのカラーを返します。

    -----------------------------------------

    setCurCell (int): 配列内の現在のセルを特定のインデックスに設定します。検索が実行されると、現在のセルを返します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    topDown (boolean): このフラグをtrueにすると、最初のエントリが左下ではなく左上に表示されます。

    -----------------------------------------

    transparent (int): 特定のセルのカラーを透明に設定します。セル値「-1」は、透明なセルがないという指定です。照会すると、透明になっている現在のセルを返します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成された palettePort の名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def picture(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),image: str = "",isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",tile: bool = False,useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    スタティック イメージが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    image (string): .xpmファイル名に指定したイメージを設定します。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    tile (boolean): trueの場合、画像は画像領域全体にタイル表示されます。既定はfalseです。(Windowsのみのフラグです)。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成されたピクチャ コントロールの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def progressBar(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),beginProgress: bool = False,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,endProgress: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isCancelled: bool = False,isInterruptable: bool = False,isMainProgressBar: bool = False,isObscured: bool = False,manage: bool = False,maxValue: int = 1,minValue: int = 1,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,progress: int = 1,status: str = "",statusBarMessage: str = "",step: int = 1,useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    進行状況を視覚的に表す、プログレス バーのコントロールを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    beginProgress (boolean): メインプログレスバーに対してのみ有効メインプログレスバーを表示します(通常はヘルプラインにあります)。これは通常、長さの計算を開始しようとするときに、MELを通じて発行されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    endProgress (boolean): メインプログレスバーに対してのみ有効メインプログレスバーを非表示にします。他のフラグとは一緒に使用できません。これは通常、-ic/isCancelledフラグが設定された場合、もしくはプログレス値が最大値になった場合に、MELを通じて発行されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isCancelled (boolean): 操作を解除しようとした場合、trueを返します。その他の場合、falseを返します。

    -----------------------------------------

    isInterruptable (boolean): メインプログレスバーに対してのみ有効isCancelledフラグを、操作のキャンセルの試行に対応させる場合にtrueを返します。これをtrueに設定すると、ユーザに対するヘルプライン表示メッセージにノートが追加され、操作をキャンセルできることが示されます。

    -----------------------------------------

    isMainProgressBar (boolean): このprogressBarを使用して、ファイルを開く/保存するなどすべての基本的な操作の進行状況を示すかどうかを決定します。メインのprogressBarの動作は、基本操作が継続している場合のみ表示されるため、大幅に異なります。既定はfalseで、「メイン」のプログレスバーとして認識されるのは1つだけです。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxValue (int): プログレスインジケータの最大値または「終了」値です。プログレス値が-max/maxValueより大きい場合、プログレス値は最大に設定されます。既定値は100です。

    -----------------------------------------

    minValue (int): プログレスインジケータの最小値または「開始」値です。プログレス値が-min/minValueより小さい場合、プログレス値は最小に設定されます。既定値は0です。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    progress (int): コントロールに現在表示される進捗状況です。値は常に最小値と最大値の間になり、既定値はコントロールが作成された時点の最小値です。

    -----------------------------------------

    status (string): メインプログレスバーに対してのみ有効progressBarが表示されているときに、helpLineコントロールの内容を表示します。ヘルプラインを直接設定するかわりにこれを使うと、戻る前にグラフィックを強制的にリフレッシュします。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (int): 指定した量の単位で-pr/progressの値を増分します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def radioButton(align: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",collection: str = "",data: int = 1,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",editable: bool = False,enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,offCommand: str = "",onCommand: str = "",parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,recomputeSize: bool = False,select: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    -cl/collection フラグが使用されていない場合、ラジオ ボタンを作成し、最後に作成されたラジオ コレクションに追加します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    align (string): このフラグは廃止されているので、使用しないでください。ラジオボタンラベルは必ず左ぞろえになります。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): ラジオボタンの状態が変化した場合に実行されるコマンドです。このフラグは、onCommandとoffCommandと一緒に使用しないでください。つまり、changeCommandを使用してコールバックの内側でラジオボタンの状態をテストするか、onCommandとoffCommandを独立したコールバックとして使用してください。

    -----------------------------------------

    collection (string): ラジオボタンをラジオボタンのコレクションに明示的に追加するには、ラジオコレクションの名前を指定します。

    -----------------------------------------

    data (int): ラジオボタンに関連する内部データ。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): ラジオボタンの編集状態です。既定では、このフラグの値はtrueに設定されており、ラジオボタンの値はクリックして変更することができます。falseの場合、ラジオボタンは「読み取り専用」になり、クリックできません。ラジオボタンの値は、-ed/editableフラグの状態に関係なく、-sl/selectフラグで常に変更できます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): ラベルテキストです。既定のラベルはコントロールの名前です。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    offCommand (script): ラジオボタンがオフの場合に実行されるコマンドです。

    -----------------------------------------

    onCommand (script): ラジオボタンがオンの場合に実行されるコマンドです。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    recomputeSize (boolean): trueの場合、ラベルのサイズにぴったり合うようにコントロールのサイズが再計算されます。falseの場合、コントロールのサイズは、ラベルのサイズを変更するときに固定されます。このフラグの既定の値はtrueです。

    -----------------------------------------

    select (boolean): ラジオボタンを選択します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def radioButtonGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",annotation1: str = "",annotation2: str = "",annotation3: str = "",annotation4: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",changeCommand1: str = "",changeCommand2: str = "",changeCommand3: str = "",changeCommand4: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),data1: int = 1,data2: int = 1,data3: int = 1,data4: int = 1,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",editable: bool = False,enable: bool = False,enable1: bool = False,enable2: bool = False,enable3: bool = False,enable4: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",label1: str = "",label2: str = "",label3: str = "",label4: str = "",labelAnnotation: str = "",labelArray2: Tuple[str, str] = tuple("", ""),labelArray3: Tuple[str, str, str] = tuple("", "", ""),labelArray4: Tuple[str, str, str, str] = tuple("", "", "", ""),manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,numberOfRadioButtons: int = 1,offCommand: str = "",offCommand1: str = "",offCommand2: str = "",offCommand3: str = "",offCommand4: str = "",onCommand: str = "",onCommand1: str = "",onCommand2: str = "",onCommand3: str = "",onCommand4: str = "",parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),select: int = 1,shareCollection: str = "",statusBarMessage: str = "",useTemplate: str = "",vertical: bool = False,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    annotation1 (string): 最初のラジオボタンのヒントを指定します。

    -----------------------------------------

    annotation2 (string): 2番目のラジオボタンのヒントを指定します。

    -----------------------------------------

    annotation3 (string): 3番目のラジオボタンのヒントを指定します。

    -----------------------------------------

    annotation4 (string): 4番目のラジオボタンのヒントを指定します。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): グループの状態が変更されたときに実行されるコマンドです。このフラグは、onCommandとoffCommandと一緒に使用しないでください。つまり、changeCommandを使用してコールバックの内側でラジオボタンの状態をテストするか、onCommandとoffCommandを独立したコールバックとして使用してください。

    -----------------------------------------

    changeCommand1 (script): 

    -----------------------------------------

    changeCommand2 (script): 

    -----------------------------------------

    changeCommand3 (script): 

    -----------------------------------------

    changeCommand4 (script): 各ラジオボタンに、状態が変化した場合のコマンドを指定します。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    data1 (int): 

    -----------------------------------------

    data2 (int): 

    -----------------------------------------

    data3 (int): 

    -----------------------------------------

    data4 (int): 各ラジオボタンに関連する内部データ。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): グループの編集状態です。既定では、このフラグの値はtrueに設定されており、ラジオボタンの値はクリックして変更することができます。falseの場合、ラジオボタンは「読み取り専用」になり、クリックできません。ラジオボタンの値は、ed/editableフラグの状態に関係なく、sl/selectフラグで常に変更できます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enable1 (boolean): 

    -----------------------------------------

    enable2 (boolean): 

    -----------------------------------------

    enable3 (boolean): 

    -----------------------------------------

    enable4 (boolean): 各ラジオボタンの有効、無効の状態です。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): 作成時に存在している場合、グループと一緒にオプションのテキストラベルが作成されます。文字列でラベルテキストを指定します。

    -----------------------------------------

    label1 (string): 

    -----------------------------------------

    label2 (string): 

    -----------------------------------------

    label3 (string): 

    -----------------------------------------

    label4 (string): グループの各ラジオボタンのラベルの文字列を指定します。

    -----------------------------------------

    labelAnnotation (string): 作成時に存在している場合、グループと一緒にオプションのテキストラベルが作成されます。文字列でラベルヒントを指定します。

    -----------------------------------------

    labelArray2 ([string, string]): 

    -----------------------------------------

    labelArray3 ([string, string, string]): 

    -----------------------------------------

    labelArray4 ([string, string, string, string]): 単一のフラグで複数のラベルを指定します。ラジオボタンの数が一致しない場合、これらのフラグは無視されます。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    numberOfRadioButtons (int): グループ内のラジオボタンの数(1-4)。

    -----------------------------------------

    offCommand (script): ラジオボタンがオフの場合に実行されるコマンドです。

    -----------------------------------------

    offCommand1 (script): 

    -----------------------------------------

    offCommand2 (script): 

    -----------------------------------------

    offCommand3 (script): 

    -----------------------------------------

    offCommand4 (script): 各ラジオボタンのOffコマンドです。

    -----------------------------------------

    onCommand (script): ラジオボタンがオンの場合に実行されるコマンドです。

    -----------------------------------------

    onCommand1 (script): 

    -----------------------------------------

    onCommand2 (script): 

    -----------------------------------------

    onCommand3 (script): 

    -----------------------------------------

    onCommand4 (script): 各ラジオボタンのOnコマンドです。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    select (int): 選択した状態にするラジオボタン。引数は1ベースの整数です。

    -----------------------------------------

    shareCollection (string): このラジオグループを関連付けるradioButtonGrpを指定します。ラジオグループは、既定で別個のコレクションになります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    vertical (boolean): このグループ内のラジオボタンコントロールの向きが横(既定)か縦かの情報です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def radioCollection(collectionItemArray: bool = False,defineTemplate: str = "",exists: bool = False,gl: bool = False,numberOfCollectionItems: bool = False,parent: str = "",select: str = "",useTemplate: str = "") -> None:
    """
    ラジオ ボタン コレクションを作成します。-p/parent フラグで親を指定しない場合、現在 既定のレイアウトがコレクションの親になります。クラスタはレイアウトの子なので、レイアウトが削除されるとクラスタもいっしょに削除されます。-gl/global フラグを使用しない場合は、コレクションを複数のウィンドウにスパンさせることもできます。この場合、コレクションには親が含まれず、必要なくなった際に deleteUI コマンドでコレクションを明確に削除する必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    collectionItemArray (boolean): このコレクションに含まれる、すべての項目のロングネームを表す文字列リストを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    gl (boolean): コレクションが親のレイアウトを持たないように設定します。グローバルコレクションは明示的に削除する必要があります。

    -----------------------------------------

    numberOfCollectionItems (boolean): このコレクション内の項目数を返します。

    -----------------------------------------

    parent (string): コレクションの親です。コレクションは、親と一緒に削除されます。

    -----------------------------------------

    select (string): 指定したコレクションオブジェクトを選択します。照会すると、現在選択されているコレクションオブジェクトの名前を返します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringコレクションのフル パス名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def rangeControl(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changedCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,maxRange: float = 1.0,minRange: float = 1.0,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1,widthHeight: Tuple[int, int] = tuple(1, 1)) -> None:
    """
    現在の再生範囲の表示と修正に使用する コントロールを作成します。注: マスタ rangeControl は 1 つだけです。ユーザが追加で作成する rangeControl はマスタ rangeControl ウィジェットのスレーブになります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changedCommand (script): 範囲が変化した場合に実行されるスクリプトです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxRange (time): コントロール内で表示可能な最大範囲を制御します。

    -----------------------------------------

    minRange (time): コントロール内で表示可能な最大範囲を制御します。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    widthHeight ([int, int]): コントロールの寸法をコントロールします。

    -----------------------------------------

    Return Value:
    None: string新しく作成された rangeControl の名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def scriptTable(afterCellChangedCmd: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),cellBackgroundColorCommand: str = "",cellChangedCmd: str = "",cellForegroundColorCommand: str = "",cellIndex: Tuple[int, int] = tuple(1, 1),cellValue: str = "",clearRow: int = 1,clearTable: bool = False,columnFilter: Tuple[int, str] = tuple(1, ""),columnWidth: Tuple[int, int] = tuple(1, 1),columns: int = 1,defineTemplate: str = "",deleteRow: int = 1,docTag: str = "",dragCallback: str = "",dropCallback: str = "",editable: bool = False,enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,excludingHeaders: bool = False,exists: bool = False,fullPathName: bool = False,getCellCmd: str = "",height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),insertRow: int = 1,isObscured: bool = False,label: Tuple[int, str] = tuple(1, ""),manage: bool = False,multiEditEnabled: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowHeight: int = 1,rows: int = 1,rowsRemovedCmd: str = "",rowsToBeRemovedCmd: str = "",selectedCells: Tuple[int] = tuple(1),selectedColumns: Tuple[int] = tuple(1),selectedRow: bool = False,selectedRows: Tuple[int] = tuple(1),selectionBehavior: int = 1,selectionChangedCmd: str = "",selectionMode: int = 1,sortEnabled: bool = False,statusBarMessage: str = "",underPointerColumn: bool = False,underPointerRow: bool = False,useDoubleClickEdit: bool = False,useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、スクリプト テーブルのコントロールを作成、編集、照会します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    afterCellChangedCmd (script): セルの値が変更された後にコールするスクリプトを設定します。プロシージャは、値が変更された行とカラムを指定する2つの整数引数でコールされます。3番目の引数は、そのセルに入力された文字列です。プロシージャは、値を返す必要はありません。渡される行と列の番号は1ベースです(つまり、(1,1)は左上のセルです)。このプロシージャは次のようなフォームになります。globalprocprocedureName(int$row,int$column,string$value)

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    cellBackgroundColorCommand (script): セルのバックグラウンドカラーが必要な場合にコールするスクリプトを設定します。プロシージャは、必要な値を含む行とカラムを指定する2つの整数引数でコールされ、セルのRGBカラーの値である整数の配列を返します。渡される行と列の番号は1ベースです(つまり、(1,1)は左上のセルです)。このプロシージャは次のような形式になります。globalprocint[]procedureName(int$row,int$column){return{255,0,0};//セルのバックグラウンドカラーとして赤を返します。}

    -----------------------------------------

    cellChangedCmd (script): セルの値が変更された場合にコールするスクリプトを設定します。プロシージャは、値が変更された行とカラムを指定する2つの整数引数でコールされます。3番目の引数は、そのセルに入力された文字列です。プロシージャは、その値を受け取るかどうかを示す整数値を返します(受け取る場合は1、受け取らない場合は0を返します)。渡される行と列の番号は1ベースです(つまり、(1,1)は左上のセルです)。このプロシージャは次のようなフォームになります。globalprocintprocedureName(int$row,int$column,string$value)

    -----------------------------------------

    cellForegroundColorCommand (script): セルのフォアグラウンドカラーが必要な場合にコールするスクリプトを設定します。プロシージャは、必要な値を含む行とカラムを指定する2つの整数引数でコールされ、セルのRGBカラーの値である整数の配列を返します。渡される行と列の番号は1ベースです(つまり、(1,1)は左上のセルです)。このプロシージャは次のような形式になります。globalprocint[]procedureName(int$row,int$column){return{0,0,0};//テキストカラーとして黒を返します。}

    -----------------------------------------

    cellIndex ([int, int]): cellValueとともに使用され、行と列のインデックスを与えます。このフラグと引数は、-qフラグより前にコマンドに渡されなければなりません(例を参照)。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    cellValue (string): -cellIndexフラグで参照される行と列のインデックスによって、テーブルのセル値を照会および設定します。編集モードでは、-multiEditEnabledフラグがtrueで任意のセルが選択されている場合、-cellIndexフラグは使用されずに選択されたセルが変更されます。

    -----------------------------------------

    clearRow (int): 指定した行のすべてのセルの内容をクリアします。クリアされたセルを埋めるために、-gccフラグで指定したプロシージャが呼び出されます。行番号は1ベースです(つまり、先頭の行は0ではなく1です)。

    -----------------------------------------

    clearTable (boolean): テーブル内のすべてのセルの内容をクリアします。クリアされたセルを埋めるために、-gccフラグで指定したプロシージャが呼び出されます。

    -----------------------------------------

    columnFilter ([int, string]): 指定した列を文字列の値でフィルタします。列0にフィルタを設定するとすべての列にフィルタが適用されます。フィルタは大文字と小文字を区別し、ワイルドカードをサポートします。ワイルドカード照合:ワイルドカード照合は完全な正規表現よりもはるかに簡単で、機能は4つしかありません。c任意の文字は、次に説明するものを除いて、その文字自体を表します。したがって、cは文字cに一致します。?は任意の1文字に一致します。これは、完全な正規表現における.と同じです。*は0文字以上の任意の文字列に一致します。これは、完全な正規表現における.*と同じです。[...]文字列の集合は、完全な正規表現と同様に角括弧で表されます。文字クラス内では、バックスラッシュには特別な意味はありません。(つまり、「y*u」、「??Val??」、「[MyThe]Value」または「MyValue」内の任意の文字列で「MyValue」を検索できます。)列番号は1ベースです。(つまり、先頭の行は0ではなく1です。)

    -----------------------------------------

    columnWidth ([int, int]): 指定したカラムの幅を設定します。カラム番号は1ベースです（つまり、先頭のカラムは0ではなく1です）。

    -----------------------------------------

    columns (int): テーブルにカラム番号を設定します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    deleteRow (int): 指定された行を削除します。行番号は1ベースです(つまり、先頭の行は0ではなく1です)。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): テーブルの編集状態です。既定ではtrueに設定されていて、テーブルを編集できます。falseの場合は、テーブルは「読み取り専用」になるので、テーブルに入力することはできません。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    excludingHeaders (boolean): 行または列の数を照会する場合、返される数にはヘッダーは含まれません。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    getCellCmd (script): セルの内容が必要な場合にコールするスクリプトを設定します。プロシージャは、必要な値を含む行とカラムを指定する2つの整数引数でコールされ、セルの値である文字列を返します。渡される行とカラムの番号は1ベースです（つまり、(1,1)は左上のセルです)。このプロシージャは次のようなフォームになります。globalprocstringprocedureName(int$row,int$column)

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    insertRow (int): 指定した行の前に空の行を挿入します。新しいセルを埋めるために、-gccフラグで指定したプロシージャがコールされます。行番号は1ベースです(つまり、先頭の行は0ではなく1です)。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label ([int, string]): 指定したカラムのラベルを設定します。カラム番号は1ベースです（つまり、先頭のカラムは0ではなく1です）。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    multiEditEnabled (boolean): True:scriptTableはマルチ編集関数をサポートします。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowHeight (int): scriptTableの各行の高さを設定します。

    -----------------------------------------

    rows (int): テーブルにローの番号を設定します。

    -----------------------------------------

    rowsRemovedCmd (script): [Delete]キーまたは[Backspace]キーを押して行を削除した後に呼び出すスクリプトを設定します。プロシージャは、選択した行が削除されたことを示す1つの引数で呼び出されます。渡される行は1ベースです。このプロシージャは次のようなフォームになります。globalprocprocedureName(int$rows[])

    -----------------------------------------

    rowsToBeRemovedCmd (script): [Delete]キーまたは[Backspace]キーを押したときに呼び出すスクリプトを設定します。プロシージャは、削除する選択中の行を示す1つの引数で呼び出されます。プロシージャは、選択中の行を削除するかどうかを示す整数値を返します(削除する場合は1、削除しない場合は0を返します)。渡される行は1ベースです。このプロシージャは次のようなフォームになります。globalprocintprocedureName(int$rows[])

    -----------------------------------------

    selectedCells (int[]): セルを選択するか、現在選択されているセルを返します。インデックスのリストを返します。各ペアの1番目は行、2番目は列で、選択したセルごとに繰り返されます。返されるセルの番号は1ベースです(つまり、先頭の行は0ではなく1、先頭の列は0ではなく1です)。

    -----------------------------------------

    selectedColumns (int[]): 列を選択するか、現在選択されている列を返します。全体を選択した各列のインデックスのリストを返します。返される列番号は1ベースです。

    -----------------------------------------

    selectedRow (boolean): 選択した現在行です。行番号は1ベースです（つまり、先頭の行は0ではなく1です）。

    -----------------------------------------

    selectedRows (int[]): 編集モードでは、引数として与えられた行を選択します。照会モードでは、全体を選択した行のインデックスのリストを返します。行番号は1ベースです。

    -----------------------------------------

    selectionBehavior (int): 選択の動作を設定します。有効な値は0～2の範囲です。0-単一項目の選択。1-行のみの選択。2-列のみの選択。

    -----------------------------------------

    selectionChangedCmd (script): ユーザによって起動された完全な選択操作が正常に発生した場合に呼び出すスクリプトを設定します。スクリプトが渡すパラメータはなく、値を返す必要もありません(つまり、単なる通知メカニズムです)。

    -----------------------------------------

    selectionMode (int): 選択モードを設定します。有効な値は0～4の範囲です。0-項目を選択できません。1-ユーザが項目を選択した場合、既に選択している項目は解除されます。選択された項目をクリックしても選択を解除することはできません。2-ユーザが通常の方法で項目を選択した場合、その項目の選択状態が切り替わり、その他の項目はそのままです。マウスをドラッグすると、複数の項目を切り替えることができます。3-ユーザが通常の方法で項目を選択した場合、選択がクリアされ、新しい項目が選択されます。ただし、ユーザが[Ctrl]キーを押しながら項目をクリックした場合、クリックされた項目が切り替わり、その他の項目はすべてそのままです。ユーザが[Shift]キーを押しながら項目をクリックした場合、現在の項目とクリックした項目の間ですべての項目が、クリックした項目の状態に応じて選択または選択解除されます。マウスをドラッグすると、複数の項目を選択できます。4-ユーザが通常の方法で項目を選択した場合、選択がクリアされ、新しい項目が選択されます。ただし、ユーザが[Shift]キーを押しながら項目をクリックした場合、現在の項目とクリックした項目の間ですべての項目が、クリックした項目の状態に応じて選択または選択解除されます。

    -----------------------------------------

    sortEnabled (boolean): scriptTableを列ごとにソートできるようにします。既定値はfalseで、行全体がソートされます。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    underPointerColumn (boolean): マウスカーソルがある列です。返されるカラム番号は1ベースです(つまり、先頭の行は0ではなく1です)。

    -----------------------------------------

    underPointerRow (boolean): マウスカーソルがある行です。返される行番号は1ベースです(つまり、先頭の行は0ではなく1です)。

    -----------------------------------------

    useDoubleClickEdit (boolean): これによってセル編集モードをコントロールします。False:セルをクリックして選択します(行選択では行の最後のセルが編集されます。列選択では列の最後のセルが編集されます)(既定)。True:セルをダブルクリックした場合のみ編集します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成されたスクリプト テーブルのコントロールへのフル パス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def scrollField(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",clear: bool = False,command: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",editable: bool = False,enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,enterCommand: str = "",exists: bool = False,font: str = "",fontPointSize: int = 1,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),insertText: str = "",insertionPosition: int = 1,isObscured: bool = False,keyPressCommand: str = "",manage: bool = False,noBackground: bool = False,numberOfLines: int = 1,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,qtFont: str = "",selection: bool = False,statusBarMessage: str = "",text: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1,wordWrap: bool = False) -> None:
    """
    このコマンドは、複数行のテキストを処理するスクロール可能フィールドを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): 値が変更されたときに実行されるコマンドです。このコマンドは、フィールドのフォーカスがほかに移ると必ず実行されます。

    -----------------------------------------

    clear (boolean): フィールド内のすべてのテキストを除去します。

    -----------------------------------------

    command (string): 廃止-代わりに「enterCommand」を使用してください。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): フィールドの編集状態です。既定では、このフラグはtrueに設定され、これに入力することでフィールド値を変更することができます。falseの場合は、フィールドは「読み取り専用」になるので、フィールドに入力することはできません。フィールドのテキストは、-ed/editableフラグの状態にかかわらず、常に-tx/textフラグを使用して変更できます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    enterCommand (script): Enterキーが押されたときに実行されるコマンド。このコマンドはテンキーにあるEnterキーにのみ適用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    font (string): テキストのフォントです。有効な値は、「boldLabelFont」、「smallBoldLabelFont」、「tinyBoldLabelFont」、「plainLabelFont」、「smallPlainLabelFont」、「obliqueLabelFont」、「smallObliqueLabelFont」、「fixedWidthFont」、「smallFixedWidthFont」です。

    -----------------------------------------

    fontPointSize (int): テキストのフォントポイントサイズです。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    insertText (string): 現在の挿入位置で、フィールドにテキストを挿入します(-ip/insertionPositionflagで指定します)。

    -----------------------------------------

    insertionPosition (int): 挿入テキストの挿入位置です。これは1をベースにした値です。つまり、位置1はフィールドの先頭を示します。位置0を使用してフィールドの最後を指定することもできます。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    keyPressCommand (script): 任意のキーを押したときに実行されるコマンド。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfLines (int): スクロール可能フィールド内の行数。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    qtFont (string): テキストのQtフォントファミリです。

    -----------------------------------------

    selection (boolean): フィールド内の選択したテキスト。選択したテキストが存在しない場合は、空の文字列が返されます。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    text (string): フィールドテキストです。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    wordWrap (boolean): trueを指定すると、スペース、タブ位置、あるいは新しい行で改行されます。テキストは次の行に続きます。falseを指定すると、テキストは語と語の間で分割されず、フィールドの端を越える部分のテキストは表示されません。このフラグは、作成時に設定する必要があります。既定では、行は折り返されません。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def separator(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),horizontal: bool = False,isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",style: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、さまざまな描画スタイルのセパレータを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    horizontal (boolean): セパレータの方向を指定します。水平の場合はtrue、垂直の場合はfalseを指定します。スタイルが「single」の場合にのみ有効です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    style (string): セパレータのスタイルを指定します。有効な値は、「none」、「single」、「in」、「out」、「shelf」です。注:値「double」、「singleDash」、「doubleDash」はサポートされていません。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def shelfButton(align: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),command: str = "",commandRepeatable: bool = False,defineTemplate: str = "",disabledImage: str = "",docTag: str = "",doubleClickCommand: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableCommandRepeat: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,flat: bool = False,flexibleWidthType: int = 1,flexibleWidthValue: int = 1,flipX: bool = False,flipY: bool = False,font: str = "",fullPathName: bool = False,handleNodeDropCallback: str = "",height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),highlightImage: str = "",image: str = "",image1: str = "",image2: str = "",image3: str = "",imageOverlayLabel: str = "",isObscured: bool = False,label: str = "",labelEditingCallback: str = "",labelOffset: int = 1,ltVersion: str = "",manage: bool = False,marginHeight: int = 1,marginWidth: int = 1,menuItem: Tuple[str, str] = tuple("", ""),menuItemPython: int = 1,noBackground: bool = False,noDefaultPopup: bool = False,numberOfPopupMenus: bool = False,overlayLabelBackColor: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0),overlayLabelColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rotation: float = 1.0,scaleIcon: bool = False,selectionImage: str = "",sourceType: str = "",statusBarMessage: str = "",style: str = "",useAlpha: bool = False,useTemplate: str = "",version: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコントロールは、アイコン イメージを最大 3 つまで、ディスプレイ スタイルを最大 4 つまでサポートします。現在のスタイルが指定されている場合、表示されるアイコン イメージは、コントロールの現在のサイズに最適なイメージです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    align (string): ラベル位置合わせです。位置合わせの値は、「left」、「right」、「center」です。既定では、ラベルは「center」に位置合わせます。現在は、-st/styleが「iconAndTextCentered」に設定されている場合にのみ使用可能です。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    command (script): コントロールを押したときに実行されるコマンドです。

    -----------------------------------------

    commandRepeatable (boolean): コマンドフラグで指定したMELコマンドを繰り返し可能にするかどうかを設定します。既定では、最後に実行したコマンドを繰り返すためのショートカットは「g」キーです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    disabledImage (string): ボタンが無効になっているときに使用されるイメージです。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    doubleClickCommand (script): コントロールをダブルクリックしたときに実行されるコマンドです。

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableCommandRepeat (boolean): コマンドをアタッチできるメニュー項目のみに影響します。trueを指定すると、コマンドrepeatLastが実行されてコマンドが繰り返されます。このフラグは、オプションボックス項目を除くすべての項目で既定でtrueになっています。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    flat (boolean): コントロールをフラットなボタンにするかどうかを設定します(0:false、1:true)。

    -----------------------------------------

    flexibleWidthType (int): このフラグは、シェルフボタンの幅を広げる、または狭める場合に使用されます。有効な値:標準(Standard)=1、カスタム(Custom)=2、自動(Automatic)=3。標準(Standard)タイプは、サイズを変更できますが、アスペクト比は32x32ピクセルを維持します。自動(Automatic)タイプは、幅の広いイメージを適切に使用できるようにボタンの幅を調整できます。カスタム(Custom)タイプの場合は、アイコンの特定の幅をユーザが指定できます。既定値は3です。

    -----------------------------------------

    flexibleWidthValue (int): このフラグが役立つのは、flexibleWidthTypeにカスタム(Custom)が選択されている場合のみです。幅の値はピクセル単位で指定します。

    -----------------------------------------

    flipX (boolean): イメージを水平方向に反転するかどうかを指定します。

    -----------------------------------------

    flipY (boolean): イメージを垂直方向に反転するかどうかを指定します。

    -----------------------------------------

    font (string): テキストのフォントです。有効な値は、「boldLabelFont」、「smallBoldLabelFont」、「tinyBoldLabelFont」、「plainLabelFont」、「smallPlainLabelFont」、「obliqueLabelFont」、「smallObliqueLabelFont」、「fixedWidthFont」、「smallFixedWidthFont」です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    handleNodeDropCallback (script): ノードがコントロールにドロップされるとコールされるスクリプトコールバックを指定します。ドロップ中のノード名は関数(Pythonによりコール可能)に渡されるか、末尾(スクリプト)にアペンドされて実行されるコマンドを形成します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    highlightImage (string): カーソルがコントロールの上にあるときに、ハイライトされるイメージ。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    image (string): サイズの異なるイメージがなければ、このフラグをコントロールのイメージに使用できます。「iconOnly」スタイルを設定すると、アイコンはコントロールのサイズに合わせてスケーリングされます。

    -----------------------------------------

    image1 (string): 3つの可能なアイコンの中の1番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    image2 (string): 3つの可能なアイコンの中の2番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    image3 (string): 3つの可能なアイコンの中の3番目です。コントロールの現在のサイズに最適なアイコンが表示されます。

    -----------------------------------------

    imageOverlayLabel (string): イメージ上に表示されるラベルを表す、最大6文字の短い文字列です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): コントロールに表示されるテキストです。

    -----------------------------------------

    labelEditingCallback (script): コントロールのラベルをダブルクリックして新しいラベルを適用した後コールするコールバックを指定します。新規ラベル文字列がコールバックに渡されます。

    -----------------------------------------

    labelOffset (int): ラベルオフセットです。既定は0です。現在は、-st/styleが「iconAndTextCentered」に設定されている場合にのみ使用可能です。

    -----------------------------------------

    ltVersion (string): このフラグは、バージョンフラグが指定されない場合、またはバージョンフラグは指定されているが引数が異なる場合に、このコントロール機能が導入されているMayaLTバージョンを指定するために使用されます。この値はMayaLTのみで使用され、それ以外では無視されます。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    marginHeight (uint): コントロールコンテンツの上下にあるピクセル数。既定値は1ピクセルです。

    -----------------------------------------

    marginWidth (uint): コントロールコンテンツの両側にあるピクセル数。既定値は1ピクセルです。

    -----------------------------------------

    menuItem ([string, string]): このボタンのメニュー項目を、各項目に対応するメニュー項目ラベルおよびコマンドの引数に入れて渡すことにより、作成します。コマンドでこのフラグを使用するたびに、これらを文字列「"label""command"」として渡す必要があります。

    -----------------------------------------

    menuItemPython (int): このフラグは、メニュー項目がPython内にあることを指定する場合に使用します。整数値は、このフラグによって修正されたmenuItemのインデックスです。この値の基数は0であるため、/-mi/-menuItemフラグの(インデックス+1)回目の出現に対応します。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    noDefaultPopup (boolean): 既定のポップアップメニューを無効にします。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    overlayLabelBackColor ([float, float, float, float]): imageOverlayLabelが定義するラベルの影のRGBAカラーです。既定は透過率50%の黒です:000.5

    -----------------------------------------

    overlayLabelColor ([float, float, float]): imageOverlayLabelが定義するラベルのRGBカラーです。既定は薄いグレーです:.8.8.8

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rotation (float): イメージの回転値(ラジアン)です。

    -----------------------------------------

    scaleIcon (boolean): 「textOnly」と「iconOnly」スタイルの場合は、このフラグは無視されます。他のスタイルの場合、フラグが指定されていれば、アイコンはコントロールのサイズに合わせてスケーリングされます。

    -----------------------------------------

    selectionImage (string): コントロールを選択したときに表示されるイメージ。イメージのサイズは、-i/imageフラグで指定したイメージのサイズと同じである必要があります。これはWindows専用のフラグです。

    -----------------------------------------

    sourceType (string): コマンドスクリプトの言語タイプを設定します。c/commandやdcc/doubleClickCommandフラグと一緒にのみ使用できます。有効な値は「mel」(既定で有効)と「python」です。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    style (string): コントロールの描画スタイルです。有効なスタイルは、「iconOnly」、「textOnly」、「iconAndTextHorizontal」、「iconAndTextVertical」と「iconAndTextCentered」です(注:「iconAndTextCentered」はWindowsのみで使用可能です)。「iconOnly」スタイルを設定すると、アイコンはコントロールのサイズに合わせてスケーリングされます。

    -----------------------------------------

    useAlpha (boolean): イメージにアルファチャネルを使用するかどうかを指定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    version (string): このコントロール機能が導入されたバージョンを指定します。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringボタンのフル ネーム。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def soundControl(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),beginScrub: bool = False,defineTemplate: str = "",displaySound: bool = False,docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,endScrub: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,maxTime: float = 1.0,minTime: float = 1.0,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,pressCommand: str = "",preventOverride: bool = False,releaseCommand: str = "",repeatChunkSize: float = 1.0,repeatOnHold: bool = False,resample: bool = False,sound: str = "",statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",waveform: str = "",width: int = 1) -> None:
    """
    このコマンドは、現在のタイムの変更や、音声ファイルのスクラッチ/スクラブを行う際に使用するコントロールを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    beginScrub (boolean): サウンドをスクラブするには、このウィジェットを設定します。その後に現在のタイムが変更されると、このウィジェットに対して「-endScrub」コマンドが発行されるまで、「サウンドスクラブ」動作を実行します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    displaySound (boolean): サウンド表示をオフにします。照会すると、このフラグは整数を返します。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    endScrub (boolean): このウィジェットのサウンドスクラブを終了します。これでサウンドスクラブ動作が停止します。これは、その後の「-beginScrub」フラグの前に発行する必要があります。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxTime (time): コントロールに表示される範囲の最大時間を制御します。照会すると、このフラグはfloatを返します。

    -----------------------------------------

    minTime (time): コントロールに表示される範囲の最小時間を制御します。照会すると、このフラグはfloatを返します。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    pressCommand (string): このコントロールでのマウスダウンイベント時に実行するスクリプトです。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    releaseCommand (string): このコントロールでのマウスアップイベント時に実行するスクリプトです。

    -----------------------------------------

    repeatChunkSize (float): -repeatOnHoldがtrueの場合に繰り返すサウンドの量(現在の時間単位)。既定は1.0です。

    -----------------------------------------

    repeatOnHold (boolean): マウスダウンイベント時にサウンドを繰り返します。

    -----------------------------------------

    resample (boolean): ウィジェットに適合するように、サウンド表示を再びサンプリングします。

    -----------------------------------------

    sound (string): サウンド表示ウィジェットにデータを表示するオーディオディペンデンシーノードの名前です。照会すると、このフラグはstringを返します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    waveform (string): -displaySoundが「true」の場合に、表示するサウンドの波形の部分を定義します。有効な値は、「top」、「bottom」、「both」です。既定は「top」です。照会すると、このフラグはstringを返します。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成または編集されたコントロールの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def swatchDisplayPort(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),borderColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),borderWidth: int = 1,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,pressCommand: str = "",preventOverride: bool = False,renderPriority: int = 1,renderSize: int = 1,shadingNode: str = "",statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1,widthHeight: Tuple[int, int] = tuple(1, 1)) -> None:
    """
    このコマンドは、シェーディング ノードを表現するスウォッチを表示する 3D ポートを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    borderColor ([float, float, float]): スウォッチの境界のカラー。

    -----------------------------------------

    borderWidth (int): スウォッチの境界幅。値は0～4で固定です。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    pressCommand (script): スウォッチをクリックしたときに実行されるコマンドを指定します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    renderPriority (int): スウォッチをレンダーする優先順位を指定します。このフラグは平行スウォッチレンダリングでのみ使用できます。複数のスウォッチがレンダーキューで待機している場合、どのスウォッチがより高い優先順位を持っているかを特定するためにこのフラグを使用できます。既定では、このフラグは0-低い優先度に設定されています。この数値を大きくすると、スウォッチのレンダリングにより高い優先順位が使用されるようになります。Mayaでは、ノードエディタ、アトリビュートエディタ、ハイパーシェードにあるスウォッチのレンダリングの優先順位を次のように事前定義しています。0:最も低いレンダリングの優先順位、1:ノードエディタにあるスウォッチのレンダリングの優先順位、2:ハイパーシェードの作業領域にあるスウォッチのレンダリングの優先順位、3:アトリビュートエディタにあるスウォッチのレンダリングの優先順位たとえば、swatchDisplayPortコマンドを使用してアトリビュートエディタで表示ポートを作成するときは、オプション「-rp3」を使用します。

    -----------------------------------------

    renderSize (int): スウォッチのレンダーサイズ。値は32～512で固定です。

    -----------------------------------------

    shadingNode (name): シェーディングノード名

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    widthHeight ([int, int]): ポートの幅と高さを指定します。

    -----------------------------------------

    Return Value:
    None: string- 作成または修正されたポート名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def switchTable(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label1: str = "",label2: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,selectedRow: bool = False,statusBarMessage: str = "",switchNode: str = "",underPointerRow: bool = False,useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、スイッチ テーブルのコントロールを作成、編集、照会します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label1 (string): 1列目のラベルを設定します。

    -----------------------------------------

    label2 (string): 2列目のラベルを設定します。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    selectedRow (boolean): 選択した現在行です。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    switchNode (name): コントロールに表示するスイッチノードです。

    -----------------------------------------

    underPointerRow (boolean): マウスカーソルがある行です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringスイッチ テーブル コントロールの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def symbolButton(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),command: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),image: str = "",isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドはシンボル ボタンを作成します。シンボル ボタンは通常のボタンと同じように動作しますが、シンボル ボタンの場合、テキスト ラベルの代わりに絵が使われます。コマンドをボタンにアタッチすると、ボタンが押されたときに実行されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    command (script): シンボルボタンを押したときに実行されるコマンドです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    image (string): ボタンのイメージを指定します。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def symbolCheckBox(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",disableOffImage: str = "",disableOnImage: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),image: str = "",innerMargin: bool = False,isObscured: bool = False,ltVersion: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,offCommand: str = "",offImage: str = "",onCommand: str = "",onImage: str = "",parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",value: bool = False,version: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、シンボル チェック ボックスを作成します。シンボル チェック ボックスは、ピックスマップと、オンまたはオフの状態を含む単純なコントロールです。コマンドは、次のイベントのいずれにでも、またすべてにでもアタッチすることができます。シンボル チェック ボックスをオンにする、オフにする、または状態を変更するだけの 3 つのイベント。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): チェックボックスの状態が変更された場合に実行されるコマンドです。このフラグは、onCommandとoffCommandと一緒に使用しないでください。つまり、changeCommandを使用してコールバックの内側でチェックボックスの状態をテストするか、onCommandとoffCommandを独立したコールバックとして使用してください。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    disableOffImage (string): チェックボックスがオフかつ無効のときに表示されるイメージを指定します。

    -----------------------------------------

    disableOnImage (string): チェックボックスがオンかつ無効のときに表示されるイメージを指定します。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    image (string): チェックボックスのイメージを指定します。

    -----------------------------------------

    innerMargin (boolean): このフラグは、symbolChechBoxの動作を2.5以前の状態にし、2ピクセルの内部マージンを持つようにします。このフラグはLinux上でのみ、下位互換性維持のために使用可能で、将来のリリースでは除去される予定です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    ltVersion (string): このフラグは、バージョンフラグが指定されない場合、またはバージョンフラグは指定されているが引数が異なる場合に、このコントロール機能が導入されているMayaLTバージョンを指定するために使用されます。この値はMayaLTのみで使用され、それ以外では無視されます。引数は、バージョン番号の文字列として指定する必要があります(例:「2017」、「2018」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2017Ext1または2017.5は「2018」と指定する必要があります)。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    offCommand (script): シンボルチェックボックスがオフになったときに実行されるコマンドです。

    -----------------------------------------

    offImage (string): チェックボックスがオフのときに表示されるイメージを指定します。

    -----------------------------------------

    onCommand (script): シンボルチェックボックスがオンになったときに実行されるコマンドです。

    -----------------------------------------

    onImage (string): チェックボックスがオンのときに表示されるイメージを指定します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (boolean): チェックボックスの値。

    -----------------------------------------

    version (string): このコントロール機能が導入されたバージョンを指定します。引数は、バージョン番号の文字列として指定する必要があります(例:「2017」、「2018」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2017Ext1または2017.5は「2018」と指定する必要があります)。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def text(align: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",dropRectCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,font: str = "",fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),hyperlink: bool = False,isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,recomputeSize: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1,wordWrap: bool = False) -> None:
    """
    単純なテキスト ラベル コントロールを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    align (string): ラベル位置合わせです。位置合わせの値は、「left」、「right」、「center」です。位置合わせは、コントロールがラベル長よりも広い場合のみ意味を持ちます。既定では、ラベルは「center」に位置合わせます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    dropRectCallback (script): ドラッグ＆ドロップ操作の、マウスをドロップ位置の上に置いたままにしたときにコールされるコールバックを追加します。コントロールがドロップされたデータを受信できると、エントリをハイライトするために描画した長方形のシェイプを戻します。MELバージョンのコールバックの書式は次のとおりです。globalprocint[]callbackName(string$dropControl,int$x,int$y)戻り値は、サイズを表す4つの数字から成る配列で、パラメータを伴います。数値は、描画される長方形の左上のX座標、左上のY座標、幅、高さの順です。この機能は、現在、MELでのみ実装されます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    font (string): テキストのフォントです。有効な値は、「boldLabelFont」、「smallBoldLabelFont」、「tinyBoldLabelFont」、「plainLabelFont」、「smallPlainLabelFont」、「obliqueLabelFont」、「smallObliqueLabelFont」、「fixedWidthFont」、「smallFixedWidthFont」です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    hyperlink (boolean): 引数がtrueの場合にラベルテキストがハイパーリンクになるように設定します。ラベルテキストは適切なHTMLリンクである必要があります。MELでは、多くの場合、リンクの二重引用符はバックスラッシュを前に付けてMELインタープリタから保護する必要があります。リンクをクリックすると、外部Webブラウザで開きます。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): ラベルテキストです。既定のラベルはコントロールの名前です。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    recomputeSize (boolean): trueの場合、ラベルのサイズにぴったり合うようにコントロールのサイズが再計算されます。falseの場合、コントロールのサイズは、ラベルのサイズを変更するときに固定されます。このフラグの既定の値はtrueです。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    wordWrap (boolean): trueの場合、ラベルテキストを必要に応じ、単語の途中で改行します。falseの場合、一切改行しません。このフラグの既定値はfalseです。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def textField(alwaysInvokeEnterCommandOnReturn: bool = False,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",disableButtons: bool = False,disableClearButton: bool = False,disableHistoryButton: bool = False,docTag: str = "",dragCallback: str = "",drawInactiveFrame: bool = False,dropCallback: str = "",editable: bool = False,enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,enterCommand: str = "",exists: bool = False,fileName: str = "",font: str = "",fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),insertText: str = "",insertionPosition: int = 1,isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",placeholderText: str = "",popupMenuArray: bool = False,preventOverride: bool = False,receiveFocusCommand: str = "",searchField: bool = False,statusBarMessage: str = "",text: str = "",textChangedCommand: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    テキスト フィールド コントロールを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alwaysInvokeEnterCommandOnReturn (boolean): 常にenterコマンドを起動するか、ユーザがReturnキーを押したときのみ起動するかを設定します。既定では、このオプションはfalseです。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): フィールドテキストが変更されたときに実行されるコマンドを指定します。-tx/textフラグを使用して値を変更した場合は、このコマンドは呼び出されません。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    disableButtons (boolean): 渡された値に応じて、検索(Search)フィールドのボタンの可視性の状態をtrue/falseに設定します。照会モードでは、両方のボタンが表示されるかどうかを返します。

    -----------------------------------------

    disableClearButton (boolean): 渡された値に応じて、検索(Search)フィールドのクリア(Clear)ボタンの可視性の状態をtrue/falseに設定します。照会モードでは、検索(Search)フィールドのクリア(Clear)ボタンを表示するかどうかを返します。

    -----------------------------------------

    disableHistoryButton (boolean): 渡された値に応じて、検索(Search)フィールドのヒストリ(History)ボタンの可視性の状態をtrue/falseに設定します。照会モードでは、検索(Search)フィールドのヒストリ(History)ボタンを表示するかどうかを返します。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    drawInactiveFrame (boolean): テキストフィールドが非アクティブのときにフレーム付きで自身を描画するかどうかを設定します。既定では、このオプションはfalseです。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): フィールドの編集状態です。既定では、このフラグはtrueに設定され、これに入力することでフィールド値を変更することができます。falseの場合は、フィールドは「読み取り専用」になるので、フィールドに入力することはできません。フィールドのテキストは、-ed/editableフラグの状態にかかわらず、常に-tx/textフラグを使用して変更できます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    enterCommand (script): キーパッドの「Enter」キーが押されたときに実行されるコマンドです。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fileName (string): ファイル名としてフィールドにあるテキストです。これは、内部と外部の間で(UI)ファイル表現を変換します。

    -----------------------------------------

    font (string): テキストのフォントです。有効な値は、「boldLabelFont」、「smallBoldLabelFont」、「tinyBoldLabelFont」、「plainLabelFont」、「smallPlainLabelFont」、「obliqueLabelFont」、「smallObliqueLabelFont」、「fixedWidthFont」、「smallFixedWidthFont」です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    insertText (string): 現在の挿入位置で、フィールドにテキストを挿入します(-ip/insertionPositionflagで指定します)。

    -----------------------------------------

    insertionPosition (int): 挿入テキストの挿入位置です。これは1をベースにした値です。つまり、位置1はフィールドの先頭を示します。位置0を使用してフィールドの最後を指定することもできます。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    placeholderText (string): このプロパティを設定すると、テキストフィールドが空でウィジェットにフォーカスがない限り、ライン編集にはグレー表示のプレースホルダテキストが表示されます。このプロパティには既定で空の文字列が含まれます。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    receiveFocusCommand (script): フィールドにフォーカスが移ったときに実行されるコマンドです。

    -----------------------------------------

    searchField (boolean): テキストフィールドの代わりに、検索(Search)フィールドを作成します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    text (string): フィールドテキストです。

    -----------------------------------------

    textChangedCommand (script): フィールドテキストを変更するとただちに実行されるコマンドです。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def textFieldButtonGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),buttonCommand: str = "",buttonLabel: str = "",changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",editable: bool = False,enable: bool = False,enableBackground: bool = False,enableButton: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fileName: str = "",forceChangeCommand: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),insertText: str = "",insertionPosition: int = 1,isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",placeholderText: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",text: str = "",textChangedCommand: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    buttonCommand (script): ボタンにアタッチされるコマンド。

    -----------------------------------------

    buttonLabel (string): ボタンのラベルテキスト。

    -----------------------------------------

    changeCommand (script): フィールドテキストを変更し、ユーザが[Enter]または[Return]を押したときに実行されるコマンドです。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): フィールドの編集状態です。既定では、このフラグはtrueに設定され、これに入力することでフィールド値を変更することができます。falseの場合は、フィールドは「読み取り専用」になるので、フィールドに入力することはできません。フィールドのテキストは、-ed/editableフラグの状態にかかわらず、常に-tx/textフラグを使用して変更できます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableButton (boolean): コントロールの有効、無効を指定します。既定ではtrueに設定されていて、コントロールは有効になります。falseの場合、グレー表示になり無効になります。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fileName (string): ファイル名としてフィールドにあるテキストです。これは、内部と外部の間で(UI)ファイル表現を変換します。

    -----------------------------------------

    forceChangeCommand (boolean): -textや-inserTextフラグとともに使用した場合、テキスト修正後にchangeコマンドが実行されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    insertText (string): 現在の挿入位置で、フィールドにテキストを挿入します(-ip/insertionPositionflagで指定します)。

    -----------------------------------------

    insertionPosition (int): 挿入テキストの挿入位置です。これは1をベースにした値です。つまり、位置1はフィールドの先頭を示します。位置0を使用してフィールドの最後を指定することもできます。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): グループ用のラベルテキストです。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    placeholderText (string): このプロパティを設定すると、テキストフィールドが空でウィジェットにフォーカスがない限り、ライン編集にはグレー表示のプレースホルダテキストが表示されます。このプロパティには既定で空の文字列が含まれます。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    text (string): フィールド内のテキストです。

    -----------------------------------------

    textChangedCommand (script): フィールドテキストを変更するとただちに実行されるコマンドです。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def textFieldGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",editable: bool = False,enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fileName: str = "",forceChangeCommand: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),insertText: str = "",insertionPosition: int = 1,isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",placeholderText: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",text: str = "",textChangedCommand: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): フィールドテキストを変更し、ユーザが[Enter]または[Return]を押したときに実行されるコマンドです。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): フィールドの編集状態です。既定では、このフラグはtrueに設定され、これに入力することでフィールド値を変更することができます。falseの場合は、フィールドは「読み取り専用」になるので、フィールドに入力することはできません。フィールドのテキストは、-ed/editableフラグの状態にかかわらず、常に-tx/textフラグを使用して変更できます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fileName (string): ファイル名としてフィールドにあるテキストです。これは、内部と外部の間で(UI)ファイル表現を変換します。

    -----------------------------------------

    forceChangeCommand (boolean): -textや-inserTextフラグとともに使用した場合、テキスト修正後にchangeコマンドが実行されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    insertText (string): 現在の挿入位置で、フィールドにテキストを挿入します(-ip/insertionPositionflagで指定します)。

    -----------------------------------------

    insertionPosition (int): 挿入テキストの挿入位置です。これは1をベースにした値です。つまり、位置1はフィールドの先頭を示します。位置0を使用してフィールドの最後を指定することもできます。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): グループ用のラベルテキストです。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    placeholderText (string): このプロパティを設定すると、テキストフィールドが空でウィジェットにフォーカスがない限り、ライン編集にはグレー表示のプレースホルダテキストが表示されます。このプロパティには既定で空の文字列が含まれます。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    text (string): フィールド内のテキストです。

    -----------------------------------------

    textChangedCommand (script): フィールドテキストを変更するとただちに実行されるコマンドです。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def textScrollList(allItems: bool = False,allowAutomaticSelection: bool = False,allowMultiSelection: bool = False,annotation: str = "",append: str = "",appendPosition: Tuple[int, str] = tuple(1, ""),backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",deleteKeyCommand: str = "",deselectAll: bool = False,deselectIndexedItem: int = 1,deselectItem: str = "",docTag: str = "",doubleClickCommand: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,font: str = "",fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,lineFont: Tuple[int, str] = tuple(1, ""),manage: bool = False,noBackground: bool = False,numberOfItems: bool = False,numberOfPopupMenus: bool = False,numberOfRows: int = 1,numberOfSelectedItems: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,removeAll: bool = False,removeIndexedItem: int = 1,removeItem: str = "",selectCommand: str = "",selectIndexedItem: int = 1,selectItem: str = "",selectUniqueTagItem: str = "",showIndexedItem: int = 1,statusBarMessage: str = "",uniqueTag: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、テキストのスクロール リストの作成、編集、照会を行います。リストは、一度に 1 つの項目だけを選択するシングル セレクト モード、または複数の項目が選択できるマルチセレクト モードにすることができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allItems (boolean): すべての項目。

    -----------------------------------------

    allowAutomaticSelection (boolean): 自動セレクションモードを指定します。automaticSelectionがONの場合、マウスが通過した項目(ドラッグするときに項目が選択されます)が選択されます。-sc/selectCommandsomeCommandが設定されている場合、someCommandは選択項目それぞれでコールされます。-aas/allowAutomaticSelectionがオフの場合、マウスボタンを離した状態で選択されているのは選択項目のみです。そのため、この引数が設定されていると、-sc/selectCommandsomeCommandは1回だけコールされます。

    -----------------------------------------

    allowMultiSelection (boolean): マルチあるいはシングルセレクションモードを指定します。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    append (string): リストの最後に項目を追加します。

    -----------------------------------------

    appendPosition ([int, string]): 指定した場所に項目をアペンドします。場所は1ベースのインデックスです。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    deleteKeyCommand (script): DeleteキーまたはBackspaceキーを押したときに実行するコマンドを指定します。

    -----------------------------------------

    deselectAll (boolean): すべての項目を選択解除します。

    -----------------------------------------

    deselectIndexedItem (int): インデックスされた項目を選択解除します。インデックスは1ベースです。

    -----------------------------------------

    deselectItem (string): 指定したテキストを含む項目を選択解除します。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    doubleClickCommand (script): 項目をダブルクリックしたときに実行するコマンドを指定します。

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    font (string): 項目リストのフォントです。有効な値は、「boldLabelFont」、「smallBoldLabelFont」、「tinyBoldLabelFont」、「plainLabelFont」、「smallPlainLabelFont」、「obliqueLabelFont」、「smallObliqueLabelFont」、「fixedWidthFont」、「smallFixedWidthFont」です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    lineFont ([int, string]): リストの特定の行のフォントを指定します。インデックスは1ベースです。フォントの有効な値は、「boldLabelFont」、「smallBoldLabelFont」、「tinyBoldLabelFont」、「plainLabelFont」、「smallPlainLabelFont」、「obliqueLabelFont」、「smallObliqueLabelFont」、「fixedWidthFont」、「smallFixedWidthFont」です。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfItems (boolean): 項目の数。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    numberOfRows (int): 可視となる行の数。

    -----------------------------------------

    numberOfSelectedItems (boolean): 選択した項目の数。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    removeAll (boolean): 全項目を除去します。

    -----------------------------------------

    removeIndexedItem (int): インデックスされた項目を除去します。インデックスは1ベースです。

    -----------------------------------------

    removeItem (string): 指定したテキストがある項目を除去します。

    -----------------------------------------

    selectCommand (script): 項目を選択したときに実行するコマンドを指定します。

    -----------------------------------------

    selectIndexedItem (int): インデックスされた項目を選択します。インデックスは1ベースです。

    -----------------------------------------

    selectItem (string): 指定したテキストを含む項目を選択します。

    -----------------------------------------

    selectUniqueTagItem (string): 一意のタグに基づいて項目を選択できます。照会モードでは、選択した項目の一意のタグを返します。

    -----------------------------------------

    showIndexedItem (int): インデックスされた項目を表示します。必要に応じてリストをスクロールし、インデックスされた項目を可視にします。インデックスは1ベースです。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    uniqueTag (string): このフラグは、appendまたはappendPositionフラグと一緒に使用した場合のみに使用できます。文字列は、アペンドした項目に対する一意のタグを指定します。このタグは項目の照会に使用できます。このタグは、インデックスではなく文字列を使用してリスト項目を一意に識別するための代替手段を提供します。タグの大文字と小文字は区別されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timeControl(animCurveNames: bool = False,animLayerFilterOptions: str = "",animLayerShowWeight: bool = False,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),beginScrub: bool = False,currentFrameColor: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0),defineTemplate: str = "",displaySound: bool = False,docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,endScrub: bool = False,exists: bool = False,forceRedraw: bool = False,forceRefresh: bool = False,foregroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),fullPathName: bool = False,globalTime: bool = False,greasePencilSequenceNames: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,mainListConnection: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,pressCommand: str = "",preventOverride: bool = False,range: bool = False,rangeArray: bool = False,rangeVisible: bool = False,releaseCommand: str = "",repeatChunkSize: float = 1.0,repeatOnHold: bool = False,resample: bool = False,showGreaseFrames: str = "",showKeys: str = "",showKeysCombined: bool = False,snap: bool = False,sound: str = "",statusBarMessage: str = "",tickSize: int = 1,tickSpan: int = 1,useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",waveform: str = "",width: int = 1) -> None:
    """
    このコマンドは、現在のタイムを変更したり、キーフレームを表示/編集したり、サウンドを表示/編集したりできるコントロールを作成します。注: 作成できる timeControl は 1 つのみです。起動時に Maya が作成する timeControl は、グローバル文字列変数 $gPlayBackSlider からアクセスできます。また、timeControl を削除してはいけません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    animCurveNames (boolean): 「showKeys」が「none」以外のとき、このフラグを照会すると、キーフレームにチェックマークがついているanimCurveすべての名前を返します。照会すると、string[]を返します。

    -----------------------------------------

    animLayerFilterOptions (string): アニメーションレイヤを表示するときに、フィルタを適用するかどうかを指定します。適用する場合、オプションは「allAffecting」(フィルタなし)、「active」(オブジェクト上のアクティブレイヤのみ表示)、または「animLayerEditor」(設定をアニメーションレイヤエディタから取得)になります。

    -----------------------------------------

    animLayerShowWeight (boolean): アニメーションレイヤを表示するときに、ウェイトを表示するかどうかを指定または照会します。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    beginScrub (boolean): サウンドをスクラブするには、このウィジェットを設定します。その後に現在のタイムが変更されると、このウィジェットに対して「-endScrub」コマンドが発行されるまで、「サウンドスクラブ」動作を実行します。

    -----------------------------------------

    currentFrameColor ([float, float, float, float]): このフラグを使用して、timeControlにある現在のフレームのオーバーレイの長方形が持つRGBAカラーを指定します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    displaySound (boolean): サウンド表示をオフにします。照会すると、このフラグは整数を返します。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    endScrub (boolean): このウィジェットのサウンドスクラブを終了します。これでサウンドスクラブ動作が停止します。これは、その後の「-beginScrub」フラグの前に発行する必要があります。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    forceRedraw (boolean): 時間コントロールUIの再描画を強制します。forceRefreshと似ていますが、キー情報のリビルドは行いません。

    -----------------------------------------

    forceRefresh (boolean): 時間コントロールUIのリフレッシュを強制します。

    -----------------------------------------

    foregroundColor ([float, float, float]): このフラグを使用して、timeControlの垂直線と数値テキストのRGBカラーを指定します。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    globalTime (boolean): trueでは、このウィジェットがグローバルのディペンデンシーグラフの時間を制御および表示します。falseでは、このウィジェットでの時間の変更がディペンデンシーグラフに影響しません。照会すると、このフラグは整数を返します。

    -----------------------------------------

    greasePencilSequenceNames (boolean): タイムラインに表示されているフレームのあるすべてのグリースペンシルシーケンスの名前を返します。照会すると、string[]を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    mainListConnection (string): タイムスライダでコンテンツのソースとして使用されるselectionConnectionオブジェクトの名前を指定します。タイムスライダは、selectionConnectionオブジェクトの項目のキーフレームのみを表示します。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    pressCommand (script): このコントロールでのマウスダウンイベント時に実行するスクリプトです。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    range (boolean): タイムスライダで現在ハイライト表示されている範囲を示す文字列を返します。10から20の場合、「10:20」と返されます。タイムスライダに可視となっている範囲がない場合、照会すると現在のタイムを範囲にしたものを返します。たとえば、「10:11」となります。これらの値は現在のタイムの単位で返されます。

    -----------------------------------------

    rangeArray (boolean): タイムスライダで現在ハイライト表示されている範囲を示すfloat配列を返します。10から20の場合、{10.0,20.0}となります。タイムスライダに可視となっている範囲がない場合、照会すると現在のタイムを範囲にしたものを返します。{10.0,11.0}.これらの値は現在のタイムの単位で返されます。

    -----------------------------------------

    rangeVisible (boolean): 現在ハイライトされた範囲がスライダに可視になっていればtrueが、そうでなければfalseを返します。

    -----------------------------------------

    releaseCommand (script): このコントロールでのマウスアップイベント時に実行するスクリプトです。

    -----------------------------------------

    repeatChunkSize (float): -repeatOnHoldがtrueの場合に繰り返すサウンドの量(現在の時間単位)。既定は1.0です。

    -----------------------------------------

    repeatOnHold (boolean): マウスダウンイベント時にサウンドを繰り返します。

    -----------------------------------------

    resample (boolean): ウィジェットに適合するように、サウンド表示を再びサンプリングします。

    -----------------------------------------

    showGreaseFrames (string): 「active」にすると、アクティブなカメラのグリースフレームが表示されます。「none」にすると、グリースフレームは表示されません。「all」にすると、すべてのグリースフレームが表示されます。既定は「active」です。照会すると、このフラグはstringを返します。

    -----------------------------------------

    showKeys (string): 「active」を指定すると、すべてのアクティブオブジェクトのキーフレームをチェックマークで表示します。「none」を指定すると、チェックマークは表示されません。ほかの名前は、選択したアトリビュートがチェックマークで表示されるチャネルボックス名として扱われます。既定は「active」です。照会すると、このフラグはstringを返します。

    -----------------------------------------

    showKeysCombined (boolean): このフラグは、showKeysフラグと一緒に使用すると、「active」と「channelbox」動作を組み合わせることができます。具体的には、チャネルボックスのアトリビュートが選択されると、それらのアトリビュートにキーマークが表示されます。チャネルボックスのアトリビュートが選択されない場合は、すべてのアクティブオブジェクトのキーフレームにキーマークが表示されます。

    -----------------------------------------

    snap (boolean): 「true」では、このウィジェットの値が現在のタイムの単位を示す整数値であるようにコンストレイントされます。「false」では、現在のタイムインジケータは「freefloating」であり、コンストレイントされません。

    -----------------------------------------

    sound (string): サウンド表示ウィジェットにデータを表示するオーディオディペンデンシーノードの名前です。照会すると、このフラグはstringを返します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    tickSize (int): タイムスライダの中に描かれているキーフレームのキーマークの幅を指定します。この値は[1,63]の範囲に固定されます。

    -----------------------------------------

    tickSpan (int): timeControlのキーフレームのキーマーク間に間隔を指定します。たとえば、値を10に指定すると、キーマークは、0、10、20のように配置されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    waveform (string): -displaySoundが「true」の場合に、表示するサウンドの波形の部分を定義します。有効な値は、「top」、「bottom」、「both」です。既定は「top」です。照会すると、このフラグはstringを返します。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成または編集されたコントロールの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timeField(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",editable: bool = False,enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,enterCommand: str = "",exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,precision: int = 1,preventOverride: bool = False,receiveFocusCommand: str = "",statusBarMessage: str = "",step: float = 1.0,useTemplate: str = "",value: float = 1.0,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    時間値のみを受け入れるフィールド コントロールを作成します。フィールドには非表示のスライダがアタッチされています。このスライダを使用するには、Ctrl キーを押したままマウス ボタンのいずれかを押します。中マウス ボタンを押したまま非表示のスライダを右方向にドラッグすると、-s/step フラグで指定した増分だけ、フィールドの値が増加します。左方向にドラッグすると、同じ量だけ減少していきます。マウスの左ボタンでは 0.1 ずつ、右ボタンでは 10 ずつ増減します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): フィールドが変更されたときに実行されるコマンドです。値が-v/valueフラグによって変更されたときはこのコマンドは起動されません。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): フィールドでドラッグしたときに実行されるコマンドです。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editable (boolean): フィールドの編集状態です。既定では、このフラグはtrueに設定され、これに入力することでフィールド値を変更することができます。falseの場合は、フィールドをインタラクティブに変更することはできません。ただし、フィールドの文字は、-ed/editableフラグの状態に関係なく、-v/valueフラグを使用していつでも変更することができます。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    enterCommand (script): キーパッドの「Enter」キーが押されたときに実行されるコマンドです。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    precision (int): 小数点以下の桁数です。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    receiveFocusCommand (script): フィールドにフォーカスが移ったときに実行されるコマンドです。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (time): 非表示スライダの増分です。非表示スライダをドラッグすると、フィールド値はこの量だけ変化します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (time): フィールドの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timeFieldGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dragCommand: str = "",dropCallback: str = "",enable: bool = False,enable1: bool = False,enable2: bool = False,enable3: bool = False,enable4: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,extraLabel: str = "",fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfFields: int = 1,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,precision: int = 1,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",step: float = 1.0,useTemplate: str = "",value: Tuple[float, float, float, float] = tuple(1.0, 1.0, 1.0, 1.0),value1: float = 1.0,value2: float = 1.0,value3: float = 1.0,value4: float = 1.0,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): いずれかのフィールドの値が変更されたときに実行されるコマンド文字列です。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dragCommand (script): いずれかのフィールドで非表示スライダをドラッグすると実行されるコマンド文字列です。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enable1 (boolean): 

    -----------------------------------------

    enable2 (boolean): 

    -----------------------------------------

    enable3 (boolean): 

    -----------------------------------------

    enable4 (boolean): それぞれのフィールドの有効、無効です。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    extraLabel (string): 作成時に存在している場合、これはグループに追加のラベルを作成することを指定します。設定した文字列は、フィールドの右側にラベルテキストとして表示されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): 作成時に存在している場合、これはフィールドの左にラベルを作成することを指定します。設定した文字列は、ラベルテキストになります。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfFields (int): 作成時のフィールド数を設定します。1～4つのフィールドを使用できます。既定は1フィールドです。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    precision (int): 小数点以下の桁数を設定します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    step (time): invisioSliderデルタのデルタを設定します。invisioSliderのステップは左マウスボタンでデルタ/10.0で、中央マウスボタンではデルタで、右マウスボタンではデルタ*10.0です。既定は10.0です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value ([time, time, time, time]): すべてのフィールドの値です。

    -----------------------------------------

    value1 (time): 

    -----------------------------------------

    value2 (time): 

    -----------------------------------------

    value3 (time): 

    -----------------------------------------

    value4 (time): それぞれのフィールドの値です。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def timePort(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,globalTime: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,snap: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは簡単なタイム コントロール ウィジェットを作ります。「timeControl」コマンドも参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    globalTime (boolean): trueでは、このウィジェットがグローバルのディペンデンシーグラフの時間を制御および表示します。falseでは、このウィジェットでの時間の変更がディペンデンシーグラフに影響しません。照会すると、このフラグは整数を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    snap (boolean): 「true」では、このウィジェットの値が現在のタイムの単位を示す整数値であるようにコンストレイントされます。「false」では、現在のタイムインジケータは「freefloating」であり、コンストレイントされません。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringウィジェット名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def toolButton(allowMultipleTools: bool = False,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",collection: str = "",defineTemplate: str = "",docTag: str = "",doubleClickCommand: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),image1: str = "",image2: str = "",image3: str = "",imageOverlayLabel: str = "",isObscured: bool = False,ltVersion: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,offCommand: str = "",onCommand: str = "",parent: str = "",popupIndicatorVisible: bool = False,popupMenuArray: bool = False,preventOverride: bool = False,select: bool = False,statusBarMessage: str = "",style: str = "",tool: str = "",toolArray: bool = False,toolCount: bool = False,toolImage1: Tuple[str, str] = tuple("", ""),toolImage2: Tuple[str, str] = tuple("", ""),toolImage3: Tuple[str, str] = tuple("", ""),useTemplate: str = "",version: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    cl/collection が使用されていない場合、toolButton を作成し、最後に作成されたツール ボタン コレクションに追加します。さらに、指定したツールを配置し、コントロールが選択した時点で有効にします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowMultipleTools (boolean): このコントロールで2つ以上のツールをアタッチできるかどうかを示します。既定では、このコントロールには1つのツールしかアタッチできません。このフラグをtrueにすると、複数のツールを追加することが可能になります。ただし、現在のツールになり表示されるのは、一度に1つのツールだけです。全ツールを見るには、右マウスボタンにをクリックして表示されるポップアップメニューを使用します。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): コントロールの状態を変更したときに実行されるコマンドです。このフラグは、onCommandとoffCommandと一緒に使用しないでください。changeCommandを使用してコールバックの内側でコントロールの状態をテストするか、onCommandとoffCommandを独立したコールバックとして使用してください。

    -----------------------------------------

    collection (string): ツールボタンをツールコレクションに明示的に追加します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    doubleClickCommand (script): コントロールをダブルクリックしたときに実行されるコマンドです。

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    image1 (string): 

    -----------------------------------------

    image2 (string): 

    -----------------------------------------

    image3 (string): このコントロールは3つの画像をサポートします。現在のコントロールのサイズにもっとも合う画像が表示されます。このフラグは、この画像を現在のツールに適用します。

    -----------------------------------------

    imageOverlayLabel (string): アイコンの上に表示される短い文字列(5文字)のラベルです。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    ltVersion (string): このフラグは、バージョンフラグが指定されない場合、またはバージョンフラグは指定されているが引数が異なる場合に、このコントロール機能が導入されているMayaLTバージョンを指定するために使用されます。この値はMayaLTのみで使用され、それ以外では無視されます。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    offCommand (script): コントロールをオフにしたときに実行されるコマンドです。

    -----------------------------------------

    onCommand (script): コントロールをオンにしたときに実行されるコマンドです。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupIndicatorVisible (boolean): このフラグを編集して、ポップアップツールインディケータの可視性を設定することができます。このインディケータはボタン右上に表示されるシンプルな画像で、多くの場合、そのツールはこのコントロールに関連付けられています。このフラグは既定では照会可能で、trueになっています。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    select (boolean): このボタンを選択します。また、このフラグはコントロールの選択状態を照会します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    style (string): コントロールの描画スタイルです。有効な値は、「iconOnly」、「textOnly」、「iconAndTextHorizontal」、「iconAndTextVertical」です。

    -----------------------------------------

    tool (string): ツールの名前をボタンにアタッチします。すでにこのボタンに指定したツールがアタッチされている場合は、そのツールが選択されます。このフラグへの照会は現在のツールを返します。このフラグは、2つ以上のツールをアタッチするために2回以上指定されることがあります。

    -----------------------------------------

    toolArray (boolean): 照会すると、toolButtonコントロールにアタッチされた全ツールの名前が返されます。

    -----------------------------------------

    toolCount (boolean): 照会すると、toolButtonコントロールにアタッチされたツールの数が返されます。

    -----------------------------------------

    toolImage1 ([string, string]): 

    -----------------------------------------

    toolImage2 ([string, string]): 

    -----------------------------------------

    toolImage3 ([string, string]): このコントロールは3つの画像をサポートします。現在のコントロールのサイズにもっとも合う画像が表示されます。このフラグは、この画像を指定したツールに適用します。最初の引数はツールの名前、2番目は画像の名前です。照会すると、1組のツールアイコンの配列が返されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    version (string): このツールボタン機能が導入されたバージョンを指定します。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成された toolButton の名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def toolCollection(collectionItemArray: bool = False,defineTemplate: str = "",exists: bool = False,gl: bool = False,numberOfCollectionItems: bool = False,parent: str = "",select: str = "",useTemplate: str = "") -> None:
    """
    ツール ボタン コレクションを作成するコマンドです。-p/parent フラグで親を指定しない場合、現在の既定のレイアウトがコレクションの親になります。クラスタはレイアウトの子なので、レイアウトが削除されるとクラスタもいっしょに削除されます。-gl/global フラグを使用しない場合は、コレクションを複数のウィンドウにスパンさせることもできます。この場合、コレクションには親がなく、不要になったら「deleteUI」コマンドでコレクションを明示的に削除する必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    collectionItemArray (boolean): このコレクションにあるすべてのオブジェクトのロングネームを示す文字列リストを返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    gl (boolean): コレクションが親のレイアウトを持たないように設定します。このフラグはコレクションの作成時に指定しなければなりません。照会、編集できません。したがって、グローバルコレクションは明示的に削除する必要があります。

    -----------------------------------------

    numberOfCollectionItems (boolean): このコレクションにあるオブジェクトの数を返します。

    -----------------------------------------

    parent (string): コレクションを関連付けるための親を指定します。コレクションは、親と一緒に削除されます。このフラグはコレクションの作成時に指定しなければなりません。編集はできません。

    -----------------------------------------

    select (string): 指定したコレクションオブジェクトを選択します。照会すると、現在選択されているコレクションオブジェクトの名前を返します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: string作成された toolCollection の名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def treeLister(addFavorite: str = "",addItem: Tuple[str, str, str] = tuple("", "", ""),addVnnItem: Tuple[str, str, str] = tuple("", "", ""),annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),clearContents: bool = False,collapsePath: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,executeItem: str = "",exists: bool = False,expandPath: str = "",expandToDepth: int = 1,favoritesCallback: str = "",favoritesList: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,itemScript: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,refreshCommand: str = "",removeFavorite: str = "",removeItem: str = "",resultsPathUnderCursor: bool = False,selectPath: str = "",statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",vnnString: bool = False,width: int = 1) -> None:
    """
    このコマンドは、ツリー形式のコントロールを作成、編集、照会します。オプションの引数はコントロールの名前です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addFavorite (string): お気に入りフォルダに項目パスを追加します。項目パスは、実際にツリー内に存在する必要はありません。

    -----------------------------------------

    addItem ([string, string, script]): コントロールに項目を追加します。引数は項目パス、アイコンパス、コマンドです。ここでの項目パスはツリーのルートから項目名までのパス、アイコンパスは結果リストに表示されるアイコン、コマンドは項目を左クリックしたときに実行されるスクリプトです。

    -----------------------------------------

    addVnnItem ([string, string, string]): コントロールにVNN(VirtualNodeNetwork)アイテムを追加します。引数はitem-path、icon-path、vnn-stringです。item-pathはツリーのルートから項目名までのパスです。icon-pathは結果リストに表示されるアイコンです。vnn-stringは中マウスボタンで項目をドラッグしている場合のドラッグデータに使用されます。vnn-stringは「VNNruntime,VNNlibrary,VNNnode」で構成する必要があります。VNNlibraryには「/」で区切られたサブライブラリを含めることができます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    clearContents (boolean): コントロールの内容をクリアします。

    -----------------------------------------

    collapsePath (string): ツリーのパスを折り畳みます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    executeItem (string): 項目に関連付けられているコマンドを実行します。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    expandPath (string): ツリーのパスを展開します。

    -----------------------------------------

    expandToDepth (int): ツリーを指定した深さまで展開します。

    -----------------------------------------

    favoritesCallback (script): このスクリプトは、お気に入りを追加または除去するときにコールされます。項目パスと、項目をお気に入りに追加(True)するか除去(False)するかを示すブーリアンの2つの引数が渡されます。

    -----------------------------------------

    favoritesList (boolean): お気に入り項目のリストを返します。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    itemScript (string): 渡された項目のパスの言語とスクリプトコマンドを2要素のリストとして返します。1番目の要素は文字列「MEL」または「Python」で、2番目の要素はコマンドスクリプトです。Pythonのコール可能なコマンド付きの項目は文字列として戻されることに注意してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    refreshCommand (script): リフレッシュボタンを押したときに実行されるコマンドです。注:既定ではリフレッシュボタンは非表示です。このコマンドスクリプトがアタッチされている場合は、自動的に表示されます。

    -----------------------------------------

    removeFavorite (string): 項目をお気に入りから除去します。お気に入り項目のフルパス、またはフルパスの末尾のみのどちらでも受け取ります。

    -----------------------------------------

    removeItem (string): 項目パスを除去します。

    -----------------------------------------

    resultsPathUnderCursor (boolean): 結果パネル(右パネル)でマウスカーソルの下にある項目のパスを返します。項目がない場合は空の文字列を返します。

    -----------------------------------------

    selectPath (string): ツリーのパスを選択します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    vnnString (boolean): 渡された項目パスのVNN(VirtualNodeNetwork)文字列を返します。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成したコントロールの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def treeView(addItem: Tuple[str, str] = tuple("", ""),allowDragAndDrop: bool = False,allowHiddenParents: bool = False,allowMultiSelection: bool = False,allowReparenting: bool = False,annotation: str = "",attachButtonRight: int = 1,backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),borderHighlite: Tuple[str, bool] = tuple("", False),borderHighliteColor: Tuple[str, float, float, float] = tuple("", 1.0, 1.0, 1.0),buttonErase: Tuple[str, bool] = tuple("", False),buttonState: Tuple[str, int, str] = tuple("", 1, ""),buttonStyle: Tuple[str, int, str] = tuple("", 1, ""),buttonTextIcon: Tuple[str, int, str] = tuple("", 1, ""),buttonTooltip: Tuple[str, int, str] = tuple("", 1, ""),buttonTransparencyColor: Tuple[str, int, float, float, float] = tuple("", 1, 1.0, 1.0, 1.0),buttonTransparencyOverride: Tuple[str, int, bool] = tuple("", 1, False),buttonVisible: Tuple[str, int, bool] = tuple("", 1, False),children: str = "",clearSelection: bool = False,contextMenuCommand: str = "",defineTemplate: str = "",displayLabel: Tuple[str, str] = tuple("", ""),displayLabelSuffix: Tuple[str, str] = tuple("", ""),docTag: str = "",dragAndDropCommand: str = "",dragCallback: str = "",dropCallback: str = "",editLabelCommand: str = "",enable: bool = False,enableBackground: bool = False,enableButton: Tuple[str, int, int] = tuple("", 1, 1),enableKeyboardFocus: bool = False,enableKeys: bool = False,enableLabel: Tuple[str, int] = tuple("", 1),exists: bool = False,expandCollapseCommand: str = "",expandItem: Tuple[str, bool] = tuple("", False),flatButton: int = 1,font: Tuple[str, str] = tuple("", ""),fontFace: Tuple[str, int] = tuple("", 1),fullPathName: bool = False,height: int = 1,hideButtons: bool = False,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),highlite: Tuple[str, bool] = tuple("", False),highliteColor: Tuple[str, float, float, float] = tuple("", 1.0, 1.0, 1.0),ignoreButtonClick: Tuple[str, int, int] = tuple("", 1, 1),image: Tuple[str, int, str] = tuple("", 1, ""),isItemExpanded: str = "",isLeaf: str = "",isObscured: bool = False,item: str = "",itemAnnotation: Tuple[str, str] = tuple("", ""),itemDblClickCommand: str = "",itemDblClickCommand2: str = "",itemExists: str = "",itemIndex: str = "",itemParent: str = "",itemRenamedCommand: str = "",itemSelected: str = "",itemVisible: Tuple[str, bool] = tuple("", False),labelBackgroundColor: Tuple[str, float, float, float] = tuple("", 1.0, 1.0, 1.0),manage: bool = False,noBackground: bool = False,numberOfButtons: int = 1,numberOfPopupMenus: bool = False,ornament: Tuple[str, int, int, int] = tuple("", 1, 1, 1),ornamentColor: Tuple[str, float, float, float] = tuple("", 1.0, 1.0, 1.0),parent: str = "",popupMenuArray: bool = False,pressCommand: Tuple[int, str] = tuple(1, ""),preventOverride: bool = False,removeAll: bool = False,removeItem: str = "",reverseTreeOrder: bool = False,rightPressCommand: Tuple[int, str] = tuple(1, ""),select: Tuple[str, int] = tuple("", 1),selectCommand: str = "",selectItem: Tuple[str, bool] = tuple("", False),selectionChangedCommand: str = "",selectionColor: Tuple[str, float, float, float] = tuple("", 1.0, 1.0, 1.0),showItem: str = "",statusBarMessage: str = "",textColor: Tuple[str, float, float, float] = tuple("", 1.0, 1.0, 1.0),useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドはカスタム コントロールを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addItem ([string, string]): ツリービュー項目をツリービューに追加します。1番目の引数は項目名を、2番目の引数は項目の親を指定します(項目をツリーのトップレベルに配置する場合は空文字列を使用します)。

    -----------------------------------------

    allowDragAndDrop (boolean): treeView項目のドラッグ＆ドロップ操作が可能になります。有効にすると、中マウスボタンでre-ordering/re-parentingの操作を実行できます。このフラグは、フラグに関するほかのドラッグ＆ドロップ操作よりも優先されます。既定はtrueです。

    -----------------------------------------

    allowHiddenParents (boolean): クリアされない場合(既定)、treeViewでは、表示ノードの親ノードが自動的に可視になります。

    -----------------------------------------

    allowMultiSelection (boolean): マルチあるいはシングルセレクションモードを指定します。CtrlキーまたはShiftキーを押しながらtreeView項目を選択すると、複数の項目を選択できます。既定はtrueです。

    -----------------------------------------

    allowReparenting (boolean): ツリービューで中マウスボタンを使用して項目を再ペアレント化できるようにします。既定はtrueです。falseに設定しても、ツリービューで中マウスボタンを使用して項目の順序を変更することは可能です。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    attachButtonRight (int): ツリービュー項目のボタンの表示を右または左に設定します。右にアタッチする場合は引数によって指定されます。falseに設定されると左にアタッチされます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    borderHighlite ([string, boolean]): 項目の境界を強調表示するかどうかを設定します。1番目の引数は項目を指定し、2番目はオンまたはオフを指定します。

    -----------------------------------------

    borderHighliteColor ([string, float, float, float]): 強調表示を有効にしたときに、項目の境界の強調表示として使用される色を設定します。1番目のパラメータはレイヤを指定します。0～1までの3つのfloat値は、RGB値を指定します。

    -----------------------------------------

    buttonErase ([string, boolean]): buttonEraseをtrueに設定した場合、treeView項目のボタンを非表示に設定した場合も、treeViewはバックグラウンドでこのtreeView項目のbuttonRectを消去します。最初の引数は項目の名前、2番目の引数はbuttonEraseがtrueまたはfalseに設定されているかを示します。

    -----------------------------------------

    buttonState ([string, int, string]): ボタンの状態を設定します。1番目の引数はレイヤ、2番目は対象のボタン、3番目は状態を指定します。可能な状態は次のとおりです。「buttonUp」-ボタンは上がっています。「buttonDown」-ボタンは下がっています。「buttonThirdState」-ボタンは第3の状態にあります(「3StateButton」ボタンスタイルで使用)

    -----------------------------------------

    buttonStyle ([string, int, string]): ボタンのタイプ、指定可能な状態および放したときにリセットされるかどうかを設定します。1番目の引数はレイヤ、2番目は対象のボタン、3番目はボタンタイプを指定します。可能なボタンタイプは次のとおりです。「pushButton」-可能な状態は2つです。ボタンを放すとupにリセットされます。「2StateButton」-可能な状態は2つです。ボタンの状態はクリックで変化します。「3StateButton」-可能な状態は3つです。ボタンの状態はクリックで変化します。

    -----------------------------------------

    buttonTextIcon ([string, int, string]): 指定した項目上の指定したボタンを示すアイコンとして使用する1文字のテキストを設定します。1番目の引数は項目、2番目はボタン、3番目はアイコンテキストを指定します。

    -----------------------------------------

    buttonTooltip ([string, int, string]): 指定した項目上の指定したボタンにツールヒントを指定します。1番目の引数は項目、2番目はボタン、3番目はツールヒントを指定します。

    -----------------------------------------

    buttonTransparencyColor ([string, int, float, float, float]): buttonTransparencyOverrideが有効な場合に使用される、ボタンのバックグラウンドカラーを設定します。1番目の引数は項目、2番目はボタン、3番目はRGB値(0～1)を指定します。

    -----------------------------------------

    buttonTransparencyOverride ([string, int, boolean]): ボタンのバックグラウンドをオーバーライドするかどうかを設定します。1番目の引数は項目、2番目はボタン、3番目はオーバーライドの有無を指定します。

    -----------------------------------------

    buttonVisible ([string, int, boolean]): ボタンを表示/非表示に設定します。1番目の引数は項目を指定します。2番目の引数はボタンを指定します。3番目の引数は表示/非表示を指定します。

    -----------------------------------------

    children (string): 項目の子を照会します。引数がnullの場合は、すべての項目が返されます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    clearSelection (boolean): 選択項目をすべてクリアします。

    -----------------------------------------

    contextMenuCommand (script): アタッチされたいずれかのコンテキストメニューが表示される直前にコールバック関数が起動されるように設定します。これはpopupMenuコマンドのpostMenuCommandフラグの代わりとして、またはこのフラグに追加して使用できます。この関数は、クリックした項目に該当する文字列(項目をクリックしていない場合、空文字列)を受け入れる必要があります。関数は、メニューを表示する場合にtrueを、表示しない場合にfalseを返す必要があります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    displayLabel ([string, string]): 項目に対し、それを特定する文字列と異なるラベルを設定します。このラベルは項目の表示に使用します。1番目のパラメータは項目を指定し、2番目は表示ラベルを指定します。

    -----------------------------------------

    displayLabelSuffix ([string, string]): 項目の表示ラベルに拡張子を指定します。この拡張子は、項目の名前をツリービューで変更する場合は表示されません。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragAndDropCommand (script): レイヤのドラッグ＆ドロップ時にコールバック関数が起動されるように設定します。コールバック関数は次のものをパラメータとして使用する必要があります。-ドロップされた項目の文字配列-項目の以前の親の文字配列-項目の以前のインデックスの整数配列-項目の新しい親の文字列-項目の新しいインデックスの整数配列-ドロップされた項目の前に来るようになった項目の文字列-ドロップされた項目の後に来るようになった項目の文字列

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    editLabelCommand (script): ユーザが項目をUI上でダブルクリックして名前を変更したときに、コールバック関数が起動されるように設定します。コールバックは、2つの文字列引数を受け入れる必要があります。項目名と新しい名前です。項目名は、表示ラベルではなく項目の名前を参照します。コールバック関数は文字列を返す必要があります。空文字列は、コントロールを元の名前に戻すことを示します。名前の変更操作が有効な場合、コールバックは項目を特定する文字列を返す必要があります。これはユーザが入力する新しい表示名とは異なる可能性があります。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableButton ([string, int, int]): 指定した項目の指定したボタンを使用可能または不可能に指定します。1番目の引数は項目、2番目はボタン、3番目はオンまたはオフを指定します。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    enableKeys (boolean): 既定では、ツリービューではキーボード入力は使用できません。キーボードのサポートを有効にすると上下矢印キーでツリービューを上下にナビゲーションできるようになります。

    -----------------------------------------

    enableLabel ([string, int]): ツリービュー項目のラベルの表示と非表示を切り替えます。1番目のパラメータは項目を指定し、2番目はオンまたはオフを指定します。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    expandCollapseCommand (script): 展開/折り畳みボタンをクリックしたときにコールバック関数が起動されるように設定します。この関数は次のものをパラメータとして使用する必要があります。-展開/折り畳みボタンをクリックした項目に対する文字列-展開状態を表す整数

    -----------------------------------------

    expandItem ([string, boolean]): 項目の子を展開するか折り畳みます。1番目の引数は項目を指定し、2番目は展開または折り畳みを指定します。

    -----------------------------------------

    flatButton (int): 使用するフラットボタンのタイプです。

    -----------------------------------------

    font ([string, string]): 1番目のパラメータはTtreeNodeMapのTtreeViewNodeの項目文字列を指定します。2番目の文字列はテキストのフォントを指定します。有効な値は、「boldLabelFont」、「smallBoldLabelFont」、「tinyBoldLabelFont」、「plainLabelFont」、「smallPlainLabelFont」、「obliqueLabelFont」、「smallObliqueLabelFont」、「fixedWidthFont」、「smallFixedWidthFont」です。

    -----------------------------------------

    fontFace ([string, int]): 指定した項目のテキストに使用するフォントフェースを設定します。0は通常、1は太字、2は斜体です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    hideButtons (boolean): ツリービュー内の項目のボタンを非表示にします。「addItem」フラグを使用してツリーに項目を追加する場合にのみ使用できます。操作後も項目が親の配下に並ぶよう、ボタンのための場所はそのまま残ります。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    highlite ([string, boolean]): 項目を強調表示に設定します。強調表示は、項目をアウトラインすることで行われます。1番目のパラメータは項目を指定し、2番目は強調表示するかどうかを指定します。

    -----------------------------------------

    highliteColor ([string, float, float, float]): 強調表示を有効にしたときに、項目の境界の強調表示として使用される色を設定します。1番目のパラメータはレイヤを指定します。0～1までの3つのfloat値は、RGB値を指定します。

    -----------------------------------------

    ignoreButtonClick ([string, int, int]): 指定した項目の指定したボタンを、ボタンクリックを無視するように設定します。1番目の引数は項目、2番目はボタン、3番目はオンまたはオフを指定します。

    -----------------------------------------

    image ([string, int, string]): ボタンのアイコンとして使用するイメージを設定します。1番目の引数で項目を、2番目の引数でボタンを、3番目の引数でイメージを指定します。

    -----------------------------------------

    isItemExpanded (string): ツリービューの項目が展開されているかどうかを示します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    isLeaf (string): 項目がリーフかどうかを照会します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    item (string): 照会する項目を指定します。「selectionColor」および「itemAnnotation」フラグと一緒に使用されます。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    itemAnnotation ([string, string]): 指定された項目に文字列値で注釈を付けます。照会に使用する場合、このフラグは引数を使用せず、「item」フラグと一緒に使用する必要があります。

    -----------------------------------------

    itemDblClickCommand (script): ツリー内の項目の名前をダブルクリックしたときにコールバック関数が起動されるように設定します。コールバックは、ダブルクリックした項目の表示ラベルである1つの文字列を受け入れる必要があります。このコールバックが定義されている場合は、動作の名前変更を行う通常の項目より優先されます。

    -----------------------------------------

    itemDblClickCommand2 (script): ツリー内の項目の名前をダブルクリックしたときにコールバック関数が起動されるように設定します。このコールバックはitemDblClickCommand(idc)と似ていますが、ダブルクリックした項目の名前と表示ラベルという2つの文字列を受け入れます。このコールバックが定義されている場合は、動作の名前変更を行う通常の項目より優先されます。

    -----------------------------------------

    itemExists (string): 指定したツリービュー項目の存在を照会します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    itemIndex (string): 指定した項目の親の子リストから、その項目のインデックスを取得します。これは0から始まるインデックスです。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    itemParent (string): 指定した項目が子の場合は親項目を返し、子ではない場合は何も返しません。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    itemRenamedCommand (script): ツリー内の項目の名前が変更されたときにコールバック関数が起動されるように設定します。これは、「editLabelCommand」によってアタッチされたコマンドが成功して戻ってきたとき、あるいはeditLabelCommandがない場合は無条件に発生します。コールバックは2つの文字列を受け入れる必要があります。名前が変更される項目の、古い名前と新しい名前です。

    -----------------------------------------

    itemSelected (string): 項目が現在選択されているかどうかを照会します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    itemVisible ([string, boolean]): 指定した項目の可視性をコントロールします。

    -----------------------------------------

    labelBackgroundColor ([string, float, float, float]): ツリー内の特定項目のテキストラベルにバックグラウンドカラーを設定します。最初のパラメータはレイヤを指定します。バックグラウンドを「transparent」の既定値復元するには、(-1.0,-1.0,-1.0)を設定します。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfButtons (int): ツリー内の項目に対してボタンの数を指定します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    ornament ([string, int, int, int]): 項目がオーナメント(小さい色付きの円)を持つようにし、そのオン/オフ状態、点の有無とサイズを設定します。1番目の引数は項目、2番目の引数はオン/オフの指定、3番目の引数は点の有無、4番目の引数は半径(ピクセル単位)を指定します。

    -----------------------------------------

    ornamentColor ([string, float, float, float]): 指定したレイヤで、オーナメントを描画する色を設定します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    pressCommand ([int, script]): treeViewボタンをクリックしたときに起動するようコールバック関数を設定します。最初の引数でtreeViewボタンを指定します。2番目の引数は実行するコールバック関数を指定します。コールバック関数は次のものをパラメータとして使用する必要があります。-クリックしたボタンの項目を示す文字列-クリックしたボタンの状態を示す整数

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    removeAll (boolean): 項目をツリービューからすべて除去します。

    -----------------------------------------

    removeItem (string): ツリービュー項目をツリービューから除去します。この項目に子項目が存在する場合は、すべての子項目が除去されます。1番目の引数は項目の名前を指定します。

    -----------------------------------------

    reverseTreeOrder (boolean): ツリーを描画する順序をコントロールします(trueの場合、逆順になります)。

    -----------------------------------------

    rightPressCommand ([int, script]): treeViewボタンを右クリックしたときに起動するようコールバック関数を設定します。最初の引数でtreeViewボタンを指定します。2番目の引数は実行するコールバック関数を指定します。コールバック関数は次のものをパラメータとして使用する必要があります。-クリックしたボタンの項目を示す文字列-クリックしたボタンの状態を示す整数

    -----------------------------------------

    select ([string, int]): 要素の選択を設定します。1番目のパラメータは項目を指定し、2番目はオンまたはオフを指定します。

    -----------------------------------------

    selectCommand (script): ツリー内の項目の名前が変更されたときにコールバック関数が起動されるように設定します。関数は、1つの文字列引数と1つの整数引数を受け入れる必要があります。それぞれ、項目名と選択状態です。関数がtrueを返した場合、選択/選択解除は有効とみなされ正常に実行されます。そうでない場合は許可されません。nameand

    -----------------------------------------

    selectItem ([string, boolean]): 項目の選択状態を設定します。1番目の引数は項目を指定し、2番目は選択状態を指定します。引数なしの照会に使用する場合、ツリービューで選択されたすべての項目を返します。

    -----------------------------------------

    selectionChangedCommand (script): ユーザによって起動された完全な選択操作が正常に発生した場合に、コールバック関数を起動するように設定します。このコールバックは、「selectCommand」コールバックが空でない値を返した場合に(または、「selectCommand」コールバックがない場合は常に)起動します。「selectCommand」との違いは、単純な選択置換では「selectCommand」によって2つのコールバックが生成される(1つが古い項目の選択解除、もう1つが新しい項目の選択)のに対して、「selectionChangedCommand」は選択が完了したときに1回だけ起動されるということです。コールバックに渡されるパラメータはなく、コールバックから値を返す必要もありません(つまり、単なる通知メカニズムです)。

    -----------------------------------------

    selectionColor ([string, float, float, float]): 項目が選択されたときに変化する色を設定します。1番目のパラメータは項目を指定します。0～1までの3つのfloat値は、RGB値を指定します。照会に使用する場合、このフラグは引数を使用せず、「item」フラグと一緒に使用する必要があります。項目が選択されたときに変化する項目のカラーを返します。

    -----------------------------------------

    showItem (string): 項目を表示します。必要に応じてリストをスクロールし、項目を可視にします。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    textColor ([string, float, float, float]): 指定したレイヤに対する、ラベルのテキスト文字列を設定します。1番目の引数はレイヤを指定します。0～1までの3つのfloat値は、RGB値を指定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールのフル ネーム照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def columnLayout(adjustableColumn: bool = False,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),childArray: bool = False,columnAlign: str = "",columnAttach: Tuple[str, int] = tuple("", 1),columnOffset: Tuple[str, int] = tuple("", 1),columnWidth: int = 1,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfChildren: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowSpacing: int = 1,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、子を縦一列に配置したレイアウトを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (boolean): レイアウトの子を設定して両側にアタッチします。子はレイアウトとともに伸長または縮小されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    columnAlign (string): テキストまたはピクスマップを含む子の位置合わせを設定します。位置合わせの値は「left」、「right」、または「center」です。

    -----------------------------------------

    columnAttach ([string, int]): レイアウトの子のアタッチメントやオフセットを設定します。サイドの値は「left」、「right」、または「both」です。leftまたはbothをお勧めします。

    -----------------------------------------

    columnOffset ([string, int]): レイアウトの子のオフセットを設定します。サイドの値は「left」、「right」、または「both」です。

    -----------------------------------------

    columnWidth (int): カラムの幅を設定します。子がカラムの両サイドにアタッチされなければ、幅は実行されません。子のサイズが大きい場合はレイアウトが広がります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowSpacing (int): 子の間のスペースを設定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dockControl(allowedArea: str = "",annotation: str = "",area: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),closeCommand: str = "",content: str = "",defineTemplate: str = "",docTag: str = "",dockStation: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,enablePopupOption: bool = False,exists: bool = False,fixedHeight: bool = False,fixedWidth: bool = False,floatChangeCommand: str = "",floating: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,moveable: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,r: bool = False,retain: bool = False,sizeable: bool = False,splitLayout: str = "",state: str = "",statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    ドック可能なコントロールを作成します。これはツール パレットまたはユーティリティ ウィンドウとも呼ばれます。ドック コントロールは、メイン ウィンドウの中央コントロールの周囲のドック領域に配置される補助的なウィンドウです。ドック ウィンドウは、現在の領域より内側へ移動したり、新しい領域へ移動したり、あるいはフロート状態にする(例: 固定しない)ことができます。ドック コントロールはタイトルバーと内容領域からなります。タイトルバーにはドック コントロール ウィンドウのタイトル、フロート ボタン、閉じるボタンが表示されます。ドック コントロールの状態に応じて、フロート ボタンと閉じるボタンはどちらかが無効になるか、または全く表示されません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowedArea (string): ドックコントロールが配置される領域です。有効な値は「top」、「left」、「bottom」、「right」、「all」です。既定は「all」です。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    area (string): このドックコントロールの最初のドック領域です。これは必須フラグです。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    closeCommand (script): ドックコントロールが閉じた後に、スクリプトが実行されます。

    -----------------------------------------

    content (string): コントロールの名前で、このドックコントロールの内容を示します。これは必須フラグです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dockStation (string): ウィンドウをドッキングできるコントロールの名前です。設定されていない場合は、メインウィンドウになります。

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    enablePopupOption (boolean): UI要素のポップアップメニューのドックコントロールのメニューオプションが有効になっているかどうかを示します。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fixedHeight (boolean): ドックコントロール高さのサイズをインタラクティブに変更できるようにするかどうかを指定します。

    -----------------------------------------

    fixedWidth (boolean): ドックコントロール幅のサイズをインタラクティブに変更できるようにするかどうかを指定します。

    -----------------------------------------

    floatChangeCommand (script): スクリプトは、ドックウィジェットのフロート状態が変更されたときに実行されます。

    -----------------------------------------

    floating (boolean): ドックウィジェットをフロート状態にするかどうかを定義します。フローティングドックウィジェットは、メインウィンドウに固定されずに、メインウィンドウの「最上部」に独立したウィンドウとして表示されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): ラベルテキストです。既定のラベルはコントロールの名前です。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    moveable (boolean): ドッグコントロールをドッキング解除/再ドッキング可能にするかどうかをコントロールします。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    r (boolean): ドックウィジェットが表示されているかどうか、そしてフローティングになっているか、あるいはドックウィジェット領域の上部にあるかどうかを示します。

    -----------------------------------------

    retain (boolean): ウィンドウを閉じたときに、ウィンドウとそのコンテンツを削除するかどうかを制御します。既定はtrueです。この値がfalseに設定されている場合を除き、ウィンドウを閉じても、ウィンドウとそのコンテンツは保持されます。

    -----------------------------------------

    sizeable (boolean): ドックコントロール幅のサイズをインタラクティブに変更できるようにするかどうかを指定します。非推奨です!!代わりにfixedWidthフラグを使用してください。

    -----------------------------------------

    splitLayout (string): 2つのウィンドウを単一のドッキング領域に追加すると、既定では両方がタブ化されます。splitLayoutの値を設定すると、同じ領域の別のコントロールの横に配置できるようになります。フラグの引数は、分割の方向を制御します。有効な値は、「horizontal」または「vertical」です。

    -----------------------------------------

    state (string): このフラグを照会すると、ドックコントロール状態情報を含む文字列が返されます。この文字列はバイナリ文字列の16進数表現であり、可読形式ではありません。ただし、optionVarコマンドを使用してこの文字列を保存し、ロードすることにより、Mayaのセッション間でドックコントロールの状態を復元することができます。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def flowLayout(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),childArray: bool = False,columnSpacing: int = 1,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),horizontal: bool = False,isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfChildren: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",vertical: bool = False,visible: bool = False,visibleChangeCommand: str = "",width: int = 1,wrap: bool = False) -> None:
    """
    このコマンドは子を一列(水平または垂直)に配置するレイアウトを作成します。レイアウトの親がすべての子を一列に配置できない場合、子は次の列へと折り返されるか切り捨てられます(-wrap ブーリアン フラグの値で指定。既定は false)。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    columnSpacing (int): 子の間のスペースを設定します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    horizontal (boolean): レイアウトの方向です。このフラグは既定ではtrueになっており、コントロールは水平方向に置かれます。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    vertical (boolean): このフラグは現在サポートされていません。代わりに-hr/-horizontalフラグを使用してください。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    wrap (boolean): trueに設定されて、レイアウトの親がすべての子を一列に配置できない場合、子は次の列へと折り返されます(既定設定はfalse)。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def formLayout(annotation: str = "",attachControl: Tuple[str, str, int, str] = tuple("", "", 1, ""),attachForm: Tuple[str, str, int] = tuple("", "", 1),attachNone: Tuple[str, str] = tuple("", ""),attachOppositeControl: Tuple[str, str, int, str] = tuple("", "", 1, ""),attachOppositeForm: Tuple[str, str, int] = tuple("", "", 1),attachPosition: Tuple[str, str, int, int] = tuple("", "", 1, 1),backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),childArray: bool = False,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfChildren: bool = False,numberOfDivisions: int = 1,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドはフォームのレイアウト コントロールを作成します。フォーム レイアウトでは、その直接の子であるコントロールの絶対的な位置決めと相対的な位置決めができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    attachControl ([string, string, int, string]): 引数は次のとおりです。コントロール、エッジ、オフセット、コントロール。有効なエッジの値は以下のとおりです:「top」、「bottom」、「left」、または「right」です。別のコントロールにコントロールをアタッチします。

    -----------------------------------------

    attachForm ([string, string, int]): 引数は次のとおりです。コントロール、エッジ、オフセット。有効なエッジの値は、「top」、「bottom」、「left」、または「right」です。指定したコントロールをフォームにアタッチして、指定した量だけオフセットします。

    -----------------------------------------

    attachNone ([string, string]): 引数は次のとおりです。コントロール、エッジ。有効なエッジの値は、「top」、「bottom」、「left」、または「right」です。何にもコントロールをアタッチしません。

    -----------------------------------------

    attachOppositeControl ([string, string, int, string]): 引数は次のとおりです。コントロール、エッジ、オフセット、コントロール。有効なエッジの値は以下のとおりです:「top」、「bottom」、「left」、または「right」です。別のコントロールの反対側にコントロールをアタッチします。

    -----------------------------------------

    attachOppositeForm ([string, string, int]): 引数は次のとおりです。コントロール、エッジ、オフセット。有効なエッジの値は、「top」、「bottom」、「left」、または「right」です。フォームの反対側にコントロールをアタッチします。

    -----------------------------------------

    attachPosition ([string, string, int, int]): 引数は次のとおりです。コントロール、エッジ、オフセット、位置。有効なエッジの値は、「top」、「bottom」、「left」、または「right」です。フォームの位置にコントロールをアタッチします。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfDivisions (int): フォームが水平と垂直に分割される数を指定します。0より大きな数値である必要があります。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールのフル ネーム照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def frameLayout(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),backgroundShade: bool = False,borderStyle: str = "",borderVisible: bool = False,childArray: bool = False,collapsable: bool = False,collapse: bool = False,collapseCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,expandCommand: str = "",font: str = "",fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",labelAlign: str = "",labelIndent: int = 1,labelVisible: bool = False,labelWidth: int = 1,manage: bool = False,marginHeight: int = 1,marginWidth: int = 1,noBackground: bool = False,numberOfChildren: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preCollapseCommand: str = "",preExpandCommand: str = "",preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドはフレーム レイアウト コントロールを作成します。フレーム レイアウトでは、子コントロールの周りに境界を引いたり、タイトルを表示したりできます。フレーム レイアウトは折り畳むこともできます。フレーム レイアウトを折り畳むと、フレーム レイアウトの子は非表示になり、フレーム レイアウトのサイズが縮小します。フレーム レイアウトを展開して、子を表示させることもできます。フレーム レイアウトには子コントロールを 1 つだけしか組み込めないので注意してください。フレーム レイアウトに子を 2 つ以上設定したい場合は、別のコントロール レイアウトをフレーム レイアウトの直接の子として使用する必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    backgroundShade (boolean): フレームレイアウトのバックグラウンドにシェーディングエフェクトを作成するかどうかをコントロールします。既定ではオフに設定されています。

    -----------------------------------------

    borderStyle (string): このフラグは現在サポートされていません。境界線のスタイルはサポートされなくなりました。このフラグを使用すると警告が表示されます。

    -----------------------------------------

    borderVisible (boolean): 境界の可視性です。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    collapsable (boolean): フレームレイアウトを折り畳むかどうか。

    -----------------------------------------

    collapse (boolean): フレームレイアウトの折り畳まれた状態です。

    -----------------------------------------

    collapseCommand (script): フレームを折り畳んだ後に実行されるコマンドです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    expandCommand (script): フレームを展開した後に実行されるコマンドです。

    -----------------------------------------

    font (string): フレームラベルのフォントです。有効な値は、「boldLabelFont」、「smallBoldLabelFont」、「tinyBoldLabelFont」、「plainLabelFont」、「smallPlainLabelFont」、「obliqueLabelFont」、「smallObliqueLabelFont」、「fixedWidthFont」、「smallFixedWidthFont」です。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): フレームレイアウトのラベル文字列です。

    -----------------------------------------

    labelAlign (string): ラベルを整列する方法です。既定は「top」です。

    -----------------------------------------

    labelIndent (int): フレームラベルの字下げです。

    -----------------------------------------

    labelVisible (boolean): フレームラベルの可視性です。

    -----------------------------------------

    labelWidth (int): ラベルの幅を指定します。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    marginHeight (int): フレームとその子との縦の距離です。

    -----------------------------------------

    marginWidth (int): フレームとその子との横の距離です。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preCollapseCommand (script): フレームを折り畳む直前に実行されるコマンドです。

    -----------------------------------------

    preExpandCommand (script): フレームを展開する直前に実行されるコマンドです。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def gridLayout(allowEmptyCells: bool = False,annotation: str = "",autoGrow: bool = False,backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),cellHeight: int = 1,cellWidth: int = 1,cellWidthHeight: Tuple[int, int] = tuple(1, 1),childArray: bool = False,columnsResizable: bool = False,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,gridOrder: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfChildren: bool = False,numberOfColumns: int = 1,numberOfPopupMenus: bool = False,numberOfRows: int = 1,numberOfRowsColumns: Tuple[int, int] = tuple(1, 1),parent: str = "",popupMenuArray: bool = False,position: Tuple[str, int] = tuple("", 1),preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このレイアウトは、グリッド スタイルで子を配列します。このスタイルでは、グリッドのセルの大きさはすべて同じです。行とカラムの数、とグリッド セルの幅と高さを指定することもできます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowEmptyCells (boolean): 子を自由に配置できるレイアウトで、子の間に空のセルを残せるようにしたい場合はtrueを指定します。子を常に一まとまりにしたい場合はfalseを指定します。既定はtrueです。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    autoGrow (boolean): trueを指定すると、子の追加に合わせてグリッドレイアウトのサイズが拡大します。たとえばこのフラグがtrueで、グリッドレイアウトが2つのカラムと2つの行のときに5番目の子を追加すると、行は3つに拡大されます。フラグがfalseの場合はグリッドサイズは変わらず、新規の子は適切なフラグでグリッドサイズを拡大するまで非表示になります。既定はtrueです。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    cellHeight (int): グリッドレイアウトにあるセルの高さを示す、ゼロ以外の正の整数値です。

    -----------------------------------------

    cellWidth (int): グリッドレイアウトにあるセルの幅を示す、ゼロ以外の正の整数値です。

    -----------------------------------------

    cellWidthHeight ([int, int]): それぞれグリッドレイアウトにあるセルの幅と高さを示す、2つのゼロ以外の正の整数値です。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    columnsResizable (boolean): trueを指定すると、レイアウト幅に合わせてカラム数を調整します。falseに設定すると、レイアウト幅を変更してもカラム数は固定です。既定はfalseです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    gridOrder (boolean): childArrayフラグとは異なり、gridOrderフラグはウィンドウに表示される順序でグリッドレイアウトの子を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfColumns (int): グリッドレイアウトにあるカラムの数を示す、ゼロ以外の正の整数値です。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    numberOfRows (int): グリッドレイアウトにある行の数を示す、ゼロ以外の正の整数値です。

    -----------------------------------------

    numberOfRowsColumns ([int, int]): グリッドレイアウトにある行とカラムの数を示す、2つのゼロ以外の正の整数値です。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    position ([string, int]): 子のコントロールを配置したい位置を示す1から始まる整数値とともに、グリッドレイアウトの子のコントロールの名前を指定します。位置の値は、ロー内で左から右へ、それから下のローへというふうに増加します。たとえば、3つのカラムと2つのローで構成されるグリッドレイアウトには可視となる6つの位置があり、1、2、3が最初のロー、4、5、6が2行目のローになります。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def layout(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),childArray: bool = False,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfChildren: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    レイアウトのプロパティの編集または照会を実行できます。引数はレイアウト名です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def menuBarLayout(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),childArray: bool = False,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,menuArray: bool = False,menuBarVisible: bool = False,menuIndex: Tuple[str, int] = tuple("", 1),noBackground: bool = False,numberOfChildren: bool = False,numberOfMenus: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    メニュー バーを含むレイアウトが作成されます。このメニュー バーは、「window -menuBar true」コマンドで作成されたメニュー バーと同じように表示されて動作します。メニューは、menuBarLayout を親として作成できます。子のコントロールは、メニュー バーの下の menuBarLayout 領域を埋めるように単純に配置されるので、別のレイアウトを直接の子として使用する必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    menuArray (boolean): レイアウトのメニューバーにあるメニュー名を含む文字配列が返されます。

    -----------------------------------------

    menuBarVisible (boolean): メニューバーの表示/非表示。

    -----------------------------------------

    menuIndex ([string, uint]): 指定したメニューのインデックスを設定します。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfMenus (boolean): レイアウトのメニューバーにアタッチされたメニューの数が返されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def paneLayout(activeFrameThickness: int = 1,activePane: str = "",activePaneIndex: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),childArray: bool = False,configuration: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfChildren: bool = False,numberOfPopupMenus: bool = False,numberOfVisiblePanes: bool = False,pane1: bool = False,pane2: bool = False,pane3: bool = False,pane4: bool = False,paneSize: Tuple[int, int, int] = tuple(1, 1, 1),paneUnderPointer: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,separatorMovedCommand: str = "",separatorThickness: int = 1,setPane: Tuple[str, int] = tuple("", 1),staticHeightPane: int = 1,staticWidthPane: int = 1,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    ペイン レイアウトを作成します。ペイン レイアウトには子を任意の数含めることができますが、現在のレイアウト設定で決められた、特定の子しか同時に可視にできません。たとえば水平に分割されたペインには、上下に 2 つの子とその間にセパレータしか可視にできません。セパレータを移動すると、それぞれのペインのサイズを変更できます。その他にもさまざまなペイン設定を使用でき、そのすべてで、レイアウト内のそれぞれのペインのサイズを決める、移動可能なセパレータが表示されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activeFrameThickness (int): アクティブなフレームの周囲に描画されるフレームの太さを指定します。0以上の整数値を指定してください。

    -----------------------------------------

    activePane (string): アクティブなペインは、カラーの枠で囲まれています。同時にアクティブにできるのは、1つのペインだけです。フラグ-ap/activePaneか-api/activePaneIndexを使用すると、それまでアクティブだったペインが自動的にアクティブでなくなります。引数は、子のコントロールのフルネームかショートネームです。

    -----------------------------------------

    activePaneIndex (int): アクティブなペインのインデックス。アクティブなペインは、カラーの枠で囲まれています。同時にアクティブにできるのは、1つのペインだけです。フラグ-ap/activePaneか-api/activePaneIndexを使用すると、それまでアクティブだったペインが自動的にアクティブでなくなります。引数は、1～4の整数値です。特定の設定のペインには、レイアウトの左上のペインから時計まわりに番号が割り当てられます。その他のインデックスを指定すると、現在アクティブなペインがアクティブでなくなります。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    configuration (string): ペインのレイアウト構成を設定します。有効な値は、「single」、「horizontal2」、「vertical2」、「horizontal3」、「vertical3」、「top3」、「left3」、「bottom3」、「right3」、「horizontal4」、「vertical4」、「top4」、「left4」、「bottom4」、「right4」、「quad」です。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    numberOfVisiblePanes (boolean): 現在の設定で可視となるペインの数を返します。

    -----------------------------------------

    pane1 (boolean): 

    -----------------------------------------

    pane2 (boolean): 

    -----------------------------------------

    pane3 (boolean): 

    -----------------------------------------

    pane4 (boolean): それぞれのペインのコントロールの名前を返します。

    -----------------------------------------

    paneSize ([int, int, int]): 現在のペインレイアウト設定のペインのサイズを指定します。第1引数はペインインデックスを指定する1～4の整数値です。特定の設定のペインには、レイアウトの左上のペインから時計まわりに番号が割り当てられます。最後の2つの引数では、ペインの幅と高さを指定します。両方とも整数値で、ピクセル数ではなく、パネルレイアウトの全サイズのパーセンテージを表します。

    -----------------------------------------

    paneUnderPointer (boolean): ポインタが上にある、ペインを占有している子の名前を返します。ポインタがペインの上にない場合は、空の文字列を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    separatorMovedCommand (script): ペインセパレータが移動した場合に、実行するコマンドを指定します。

    -----------------------------------------

    separatorThickness (int): ペイン間のセパレータの太さを指定します。0より大きい整数値を指定します。このフラグはWindowsシステムでは何の効力も持ちません。

    -----------------------------------------

    setPane ([string, int]): このレイアウトの子を特定のペインに配置します。第1引数は、コントロールのフルネームかショートネームです。第2引数は、1～4の整数値です。特定の設定のペインには、レイアウトの左上のペインから時計まわりに番号が割り当てられます。

    -----------------------------------------

    staticHeightPane (int): ペインの高さを固定高さ、すなわちレイアウトのサイズがダイナミックに変化しても変わらない高さに設定します。固定高さを設定できるのは、一度に1つだけです。この状態は、ペインの表示を別の子に切り替えても保持されます。0を指定するとペインは既定の状態に戻ります。ペインの設定を変更すると、すべての状態が失われます。

    -----------------------------------------

    staticWidthPane (int): ペインの幅を固定幅、すなわちレイアウトのサイズがダイナミックに変化しても変わらない幅に設定します。固定幅を設定できるのは、一度に1つだけです。この状態は、ペインの表示を別の子に切り替えても保持されます。0を指定するとペインは既定の状態に戻ります。ペインの設定を変更すると、すべての状態が失われます。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def rowColumnLayout(adjustableColumn: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),childArray: bool = False,columnAlign: Tuple[int, str] = tuple(1, ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnOffset: Tuple[int, str, int] = tuple(1, "", 1),columnSpacing: Tuple[int, int] = tuple(1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfChildren: bool = False,numberOfColumns: int = 1,numberOfPopupMenus: bool = False,numberOfRows: int = 1,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowAlign: Tuple[int, str] = tuple(1, ""),rowAttach: Tuple[int, str, int] = tuple(1, "", 1),rowHeight: Tuple[int, int] = tuple(1, 1),rowOffset: Tuple[int, str, int] = tuple(1, "", 1),rowSpacing: Tuple[int, int] = tuple(1, 1),statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは rowColumn レイアウトを作成します。1 つの rowColumn レイアウトには、水平一行か垂直一列のいずれかで子レイアウトが複数できます。-nc/numberOfColumns フラグを指定した列のレイアウトには、レイアウト内の各列でテキストの位置合わせ、アタッチメント、オフセットが設定できます。1 つの列のすべてのメンバーに、同じ位置合わせ、アタッチメント、オフセットが適用されます。同様に、-nr/numberOfRows フラグで指定した行フォーマットのレイアウトでは、各行でこのアトリビュートを設定できます。1 つの行のすべてのメンバーに同じアトリビュートが適用されます。レイアウトは、水平一行か垂直一列のいずれかでなければなりません。このレイアウトは両方を同時に使うことができず、子ごとに個別のアトリビュートを指定することもできません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    columnAlign ([int, string]): 指定したカラムのテキストとピックスマップの位置合わせ。指定できる値は、「left」、「right」、「center」です。カラムフォーマットでのみ有効です。つまり、カラム数は-nc/numberOfColumnsフラグで指定されています。

    -----------------------------------------

    columnAttach ([int, string, int]): 指定したカラム内の子のアタッチメントとオフセットです。第1引数は、1をベースにしたカラムインデックスです。第2引数はアタッチメントで、有効な値は、「left」、「right」、「both」です。第3引数は0より大きくする必要があり、オフセットを指定します。

    -----------------------------------------

    columnOffset ([int, string, int]): 指定したカラムのアタッチメントとオフセット。第1引数は、1をベースにしたカラムインデックスです。第2引数はアタッチメントで、有効な値は、「left」、「right」、「both」です。第3引数は0より大きくする必要があり、オフセットを指定します。

    -----------------------------------------

    columnSpacing ([int, int]): ピクセルで表したカラムの間隔。このフラグは、カラムフォーマットでは、指定したカラムの左側のスペースを指定します。ローフォーマットでは、すべてのカラム間のスペースを指定しますが、有効なカラムインデックスが必要です。第1引数は、1をベースにしたカラムインデックスです。第2引数は0より大きくする必要があり、間隔を指定します。

    -----------------------------------------

    columnWidth ([int, int]): カラムの幅。このフラグはカラムフォーマットでのみ有効です。カラムの幅は0より大きくなければなりません。第1引数は、1をベースにしたカラムインデックスです。第2引数は0より大きくする必要があり、カラムの幅を指定します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfColumns (int): カラムの数。このフラグは-nr/numRowsフラグと互いに排他的な関係にあります。つまり、どちらか一方しか指定できません。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    numberOfRows (int): ローの数。このフラグは-nc/numColumnsフラグと互いに排他的な関係にあります。つまり、どちらか一方しか指定できません。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAlign ([int, string]): 指定したローのテキストとピックスマップの位置合わせ。指定できる値は、「left」、「right」、「center」です。ローフォーマットでのみ有効です。つまり、ローの数は-nr/numberOfRowsフラグで指定されています。

    -----------------------------------------

    rowAttach ([int, string, int]): 指定したロー内の子のアタッチメントとオフセットです。第1引数は、1をベースにしたローインデックスです。第2引数はアタッチメントで、有効な値は、「top」、「bottom」、「both」です。第3引数は0より大きくする必要があり、オフセットを指定します。

    -----------------------------------------

    rowHeight ([int, int]): ローの高さ。このフラグはローフォーマットでのみ有効です。ローの高さは0より大きくなければなりません。第1引数は、1をベースにしたローインデックスです。第2引数は0より大きくする必要があり、ローの高さを指定します。

    -----------------------------------------

    rowOffset ([int, string, int]): 指定したローのアタッチメントとオフセット。第1引数は、1をベースにしたローインデックスです。第2引数はアタッチメントで、有効な値は、「top」、「bottom」、「both」です。第3引数は0より大きくする必要があり、オフセットを指定します。

    -----------------------------------------

    rowSpacing ([int, int]): ピクセルで表したローの間隔。このフラグは、ローフォーマットでは、指定したローの上部のスペースを指定します。カラムフォーマットでは、すべてのロー間のスペースを指定しますが、有効なローインデックスが必要です。第1引数は、1をベースにしたローインデックスです。第2引数は0より大きくする必要があり、間隔を指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def rowLayout(adjustableColumn: int = 1,adjustableColumn1: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),childArray: bool = False,columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign1: str = "",columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach1: str = "",columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset1: int = 1,columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,manage: bool = False,noBackground: bool = False,numberOfChildren: bool = False,numberOfColumns: int = 1,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、子を水平一列に配置できるレイアウトを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。

    -----------------------------------------

    adjustableColumn1 (int): 親レイアウトのサイズに従ってサイズを調整できる1つのカラムを指定します。カラムがちょうど1つではない場合は無視されます。

    -----------------------------------------

    adjustableColumn2 (int): 親レイアウトのサイズに従ってサイズを調整できる、2つのカラムを指定します。カラムがちょうど2つではない場合は無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親レイアウトのサイズに従ってサイズを調整できる、3つのカラムを指定します。カラムがちょうど3つではない場合は無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親レイアウトのサイズに従ってサイズを調整できる、4つのカラムを指定します。カラムがちょうど4つではない場合は無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親レイアウトのサイズに従ってサイズを調整できる、5つのカラムを指定します。カラムがちょうど5つではない場合は無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親レイアウトのサイズに従ってサイズを調整できる、6つのカラムを指定します。カラムがちょうど6つではない場合は無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    columnAlign ([int, string]): 指定したカラムのテキストの位置合わせです。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign1 (string): 1つのカラムのテキストの位置合わせです。有効な値は「left」、「right」、「center」です。カラムがちょうど1つではない場合は無視されます。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキストの位置合わせです。有効な値は「left」、「right」、「center」です。カラムがちょうど2つではない場合は無視されます。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つすべてのカラムのテキストの位置合わせです。有効な値は「left」、「right」、「center」です。カラムがちょうど3つではない場合は無視されます。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つすべてのカラムのテキストの位置合わせです。有効な値は「left」、「right」、「center」です。カラムがちょうど4つではない場合は無視されます。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つすべてのカラムのテキストの位置合わせです。有効な値は「left」、「right」、「center」です。カラムがちょうど5つではない場合は無視されます。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つすべてのカラムのテキストの位置合わせです。有効な値は「left」、「right」、「center」です。カラムがちょうど6つではない場合は無視されます。

    -----------------------------------------

    columnAttach ([int, string, int]): 特定のカラムへの水平アタッチメント。第1引数は、1をベースにしたカラムを指定するインデックスです。第2引数はアタッチメントで、有効な値は、「left」、「right」、「both」です。第3引数はオフセット値です。

    -----------------------------------------

    columnAttach1 (string): 1つのカラムへのアタッチメントタイプ。カラムがちょうど1つではない場合は無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムへのアタッチメントタイプ。カラムがちょうど2つではない場合は無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つすべてのカラムへのアタッチメントタイプ。カラムがちょうど3つではない場合は無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つすべてのカラムへのアタッチメントタイプ。カラムがちょうど4つではない場合は無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つすべてのカラムへのアタッチメントタイプ。カラムがちょうど5つではない場合は無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つすべてのカラムへのアタッチメントタイプ。カラムがちょうど6つではない場合は無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset1 (int): -columnAttach1フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。第1カラムのオフセットを設定します。適用されるオフセットは、-columnAttach1フラグで指定したアタッチメントに基づいています。カラムがちょうど1つではない場合は無視されます。

    -----------------------------------------

    columnOffset2 ([int, int]): -columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。両方のカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): -columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つすべてのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): -columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つすべてのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): -columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つすべてのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): -columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つすべてのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 特定のカラムの幅。第1引数は、1をベースにしたカラムを指定するインデックスです。第2引数は幅の値です。

    -----------------------------------------

    columnWidth1 (int): 1つのカラムの幅。カラムがちょうど1つではない場合は無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅。カラムがちょうど2つではない場合は無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つすべてのカラムの幅。カラムがちょうど3つではない場合は無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つすべてのカラムの幅。カラムがちょうど4つではない場合は無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つすべてのカラムの幅。カラムがちょうど5つではない場合は無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つすべてのカラムの幅。カラムがちょうど6つではない場合は無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfColumns (int): ロー内のカラム数。指定したカラム数は0より大きくなければなりません。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 特定のカラムへの垂直アタッチメント。第1引数は、1をベースにしたカラムを指定するインデックスです。第2引数はアタッチメントで、有効な値は、「top」、「bottom」、「both」です。第3引数はオフセット値です。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def scrollLayout(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),borderVisible: bool = False,childArray: bool = False,childResizable: bool = False,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),horizontalScrollBarThickness: int = 1,isObscured: bool = False,manage: bool = False,minChildWidth: int = 1,noBackground: bool = False,numberOfChildren: bool = False,numberOfPopupMenus: bool = False,panEnabled: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,resizeCommand: str = "",scrollAreaHeight: bool = False,scrollAreaValue: bool = False,scrollAreaWidth: bool = False,scrollByPixel: Tuple[str, int] = tuple("", 1),scrollPage: str = "",statusBarMessage: str = "",useTemplate: str = "",verticalScrollBarAlwaysVisible: bool = False,verticalScrollBarThickness: int = 1,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、スクロール レイアウトを作成します。スクロール レイアウトは、複数のコントロールがあり、それらすべてを一度に可視にできない場合に便利です。隠されたコントロールを表示する必要がある場合、スクロール レイアウトに水平と/または垂直スクロール バーが表示されます。スクロール レイアウトは子の実際の位置を提供しないので、直接の子として別のコントロール レイアウトを使用する必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    borderVisible (boolean): 境界の可視性です。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    childResizable (boolean): コントロールレイアウトの子をスクロール領域と同じ幅にしたい場合は、trueに設定します。-mcw/minimumChildWidthフラグを使用して、子の最小の幅を示すこともできます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    horizontalScrollBarThickness (int): 水平スクロールバーの厚みです。0以上のピクセル整数値を指定してください。値に0を設定してスクロールバーを非表示にする以外は、このフラグはWindowsシステムに影響しません。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    minChildWidth (int): スクロールレイアウトの子の最小の幅を示す0以外の正の整数値。このフラグは、-cr/childResizableフラグがtrueに設定されている場合だけ、有効です。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    panEnabled (boolean): Alt+MMBを使用してスクロールレイアウトをパンする場合はtrueに設定します。1つのボタンと2つのボタンモードがあるOSXでは、Command+Alt+LMBを使用してパンすることができます。パンの効果は既定では無効になっています。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    resizeCommand (script): スクロールレイアウトのサイズが変更されたときに起動されるコマンド。

    -----------------------------------------

    scrollAreaHeight (boolean): スクロール領域の高さを返します(ピクセル単位)。

    -----------------------------------------

    scrollAreaValue (boolean): スクロール領域の横方向と縦方向の値を、ピクセル単位で返します。

    -----------------------------------------

    scrollAreaWidth (boolean): スクロール領域の幅を返します(ピクセル単位)。

    -----------------------------------------

    scrollByPixel ([string, int]): 文字列の方向にクライアント領域をスクロールします。intにはピクセル数を指定します。

    -----------------------------------------

    scrollPage (string): 文字列の方向にクライアント領域をスクロールします。有効な値は、「up」、「down」、「left」、または「right」です。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    verticalScrollBarAlwaysVisible (boolean): 垂直スクロールバーを常に表示する場合は、trueに設定します。

    -----------------------------------------

    verticalScrollBarThickness (int): 垂直スクロールバーの厚みです。0以上のピクセル整数値を指定してください。このフラグはWindowsシステムでは何の効力も持ちません。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def shelfLayout(alignment: str = "",annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),cellHeight: int = 1,cellWidth: int = 1,cellWidthHeight: Tuple[int, int] = tuple(1, 1),childArray: bool = False,defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),horizontal: bool = False,isObscured: bool = False,ltVersion: str = "",manage: bool = False,noBackground: bool = False,numberOfChildren: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,position: Tuple[str, int] = tuple("", 1),preventOverride: bool = False,spacing: int = 1,statusBarMessage: str = "",style: str = "",useTemplate: str = "",version: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、新しい空のシェルフ レイアウトを作成します。シェルフ レイアウトは、コマンド スクリプトのドロップを受け取ることができます。最上位のシェルフにシェルフを追加するには、addNewShelfTab MEL コマンドを使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alignment (string): レイアウト内のボタンの位置合わせを設定します。horizontalがtrueの場合、有効なオプションは「left」と「right」です。horizontalがfalseの場合、有効なオプションは「top」と「bottom」です。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    cellHeight (int): シェルフ内の項目の高さを設定または照会します。

    -----------------------------------------

    cellWidth (int): シェルフ内の項目の幅を設定または照会します。

    -----------------------------------------

    cellWidthHeight ([int, int]): シェルフ内の項目の幅と高さを設定します。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    horizontal (boolean): レイアウトの方向です。このフラグは既定ではtrueになっており、シェルフは水平方向に置かれます。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    ltVersion (string): このフラグは、バージョンフラグが指定されない場合、またはバージョンフラグは指定されているが引数が異なる場合に、このコントロール機能が導入されているMayaLTバージョンを指定するために使用されます。この値はMayaLTのみで使用され、それ以外では無視されます。引数は、バージョン番号の文字列として指定する必要があります(例:「2014」、「2015」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2014.5は「2014」と指定する必要があります)。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    position ([string, int]): 子のコントロールを配置したい位置を示す1から始まる整数値とともに、グリッドレイアウトの子のコントロールの名前を指定します。位置の値は、ロー内で左から右へ、それから下のローへというふうに増加します。たとえば、3つのカラムと2つのローで構成されるグリッドレイアウトには可視となる6つの位置があり、1、2、3が最初のロー、4、5、6が2行目のローになります。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    spacing (int): 子の間のスペースを設定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    style (string): シェルフ内の項目の現在のスタイルを設定または照会します。有効な値は、「iconOnly」、「textOnly」、「iconAndTextHorizontal」、「iconAndTextVertical」です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    version (string): この機能が導入されたバージョンを指定します。引数は、バージョン番号の文字列として指定する必要があります(例:「2014」、「2015」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2014.5は「2014」と指定する必要があります)。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringレイアウトの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def shelfTabLayout(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),borderStyle: str = "",changeCommand: str = "",childArray: bool = False,childResizable: bool = False,defineTemplate: str = "",docTag: str = "",doubleClickCommand: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),horizontalScrollBarThickness: int = 1,image: str = "",imageVisible: bool = False,innerMarginHeight: int = 1,innerMarginWidth: int = 1,isObscured: bool = False,manage: bool = False,minChildWidth: int = 1,moveTab: Tuple[int, int] = tuple(1, 1),newTabCommand: str = "",noBackground: bool = False,numberOfChildren: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preSelectCommand: str = "",preventOverride: bool = False,scrollable: bool = False,scrollableTabs: bool = False,selectCommand: str = "",selectTab: str = "",selectTabIndex: int = 1,showNewTab: bool = False,statusBarMessage: str = "",tabLabel: Tuple[str, str] = tuple("", ""),tabLabelIndex: Tuple[int, str] = tuple(1, ""),tabPosition: str = "",tabTooltip: Tuple[str, str] = tuple("", ""),tabTooltipIndex: Tuple[int, str] = tuple(1, ""),tabsClosable: bool = False,tabsVisible: bool = False,useTemplate: str = "",verticalScrollBarThickness: int = 1,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは、タブ バー内にドロップ動作を持つ本質的には通常の tabLayout であるシェルフ タブ グループを作成／編集／照会します。右上隅にシェルフからドラッグされたボタンを廃棄するごみ箱アイコンを表示できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    borderStyle (string): タブレイアウトの境界のスタイルを指定します。有効な値は、「none」、「top」、「notop」、「full」です。既定では、タブレイアウトのボディ領域の周囲に単純なフレームを作成する「full」が使用されます。none:タブレイアウトのボディ領域の周囲に境界を描画しないtop:タブの下に単純な線を表示notop:タブレイアウトの左/右/下部(上部以外)に単純なフレームを描画full:タブレイアウトのボディ領域の周囲に単純なフレームを描画

    -----------------------------------------

    changeCommand (script): タブをインタラクティブに選択したときに実行されるコマンドです。このコマンドは、選択したタブが変更されたときにのみ起動されます。現在のタブを再度選択しても、このコマンドは起動されません。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    childResizable (boolean): コントロールレイアウトの子をスクロール領域と同じ幅にしたい場合は、trueに設定します。-mcw/minChildWidthフラグを使用して、子の最小の幅を示すこともできます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    doubleClickCommand (script): タブをダブルクリックしたときに実行されるコマンドです。1回目のクリックでタブが選択されて、2回目のクリックでダブルクリックコマンドが実行されます。現在のタブをダブルクリックすると、ダブルクリックコマンドが再起動されます。

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    horizontalScrollBarThickness (int): 水平スクロールバーの厚みです。0以上の整数値を指定します。このフラグはWindowsシステムでは何の効力も持ちません。

    -----------------------------------------

    image (string): タブレイアウトの右上に表示されるイメージです。

    -----------------------------------------

    imageVisible (boolean): タブイメージの可視性です。

    -----------------------------------------

    innerMarginHeight (int): すべてのタブの子に対する余白の高さです。

    -----------------------------------------

    innerMarginWidth (int): すべてのタブの子に対する余白の幅です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    minChildWidth (int): タブレイアウトの子の最小幅を指定します。ゼロ以外の正の整数値を指定します。このフラグは、-cr/childResizableフラグがtrueに設定されている場合だけ、有効です。

    -----------------------------------------

    moveTab ([int, int]): 現在のインデックスから新しいインデックスにタブを移動します。

    -----------------------------------------

    newTabCommand (script): タブバーにある新規タブ(NewTab)ボタンをクリックしたときに実行されるコマンドです。注:新規タブ(NewTab)ボタンを表示するには、-snt/showNewTabフラグを使用します。このコマンドを使用すると、新規タブを追加するための内部Mayaロジックがオーバーライドされます(このコマンドのみが実行されます)。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preSelectCommand (script): コンテンツが可視となる前にタブを選択したときに実行されるコマンドです。現在のタブを再度選択しても、このコマンドは起動されません。-st/selectTabまたは-sti/selectTabIndexのいずれかのフラグを使用すると、このコマンドは実行されないことに注意してください。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    scrollable (boolean): スクロール領域内にこのレイアウトすべての子を入れます。

    -----------------------------------------

    scrollableTabs (boolean): trueの場合、レイアウト内のアクティブなタブをマウスホイールでスクロールできます。既定はtrueです。

    -----------------------------------------

    selectCommand (script): タブをインタラクティブに選択したときに実行されるコマンドです。このコマンドは、タブを選択するたびに起動します。すなわち、現在のタブを再び選択すると、このコマンドは起動します。-st/selectTabまたは-sti/selectTabIndexのいずれかのフラグを使用すると、このコマンドは実行されないことに注意してください。

    -----------------------------------------

    selectTab (string): 選択したタブの名前(略式)です。子のタブがない場合、照会すると空の文字列が返されます。

    -----------------------------------------

    selectTabIndex (int): このフラグは、選択したタブを判定するために1をベースにしたインデックスをとることを除いては、-st/selectTabフラグと同じです。子のタブがない場合、照会すると0の値が返されます。

    -----------------------------------------

    showNewTab (boolean): 新規タブ(NewTab)ボタンをタブバーの最後に表示する場合は、trueに設定します。注:このボタンをクリックしたときに実行されるコマンドを設定するには、-ntc/newTabCommandフラグを使用します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    tabLabel ([string, string]): タブラベルを設定します。第1引数は、タブレイアウトの子の必要があるコントロールの名前です。2つめの引数は、子に関連付けられたタブのラベルです。照会されると、このフラグはすべての子のタブラベルを返します。

    -----------------------------------------

    tabLabelIndex ([int, string]): このフラグは、ラベルを設定するタブを判定するために1をベースにしたインデックスをとることを除いては、-tl/tabLabelフラグと同じです。照会されると、このフラグはすべての子のタブラベルを返します。

    -----------------------------------------

    tabPosition (string): タブの位置を変更します。有効な値は「north」、「east」、「west」です。

    -----------------------------------------

    tabTooltip ([string, string]): タブのツールチップを設定します。第1引数は、タブレイアウトの子の必要があるコントロールの名前です。2つめの引数は、子に関連付けられたツールチップのラベルです。照会されると、このフラグはすべての子のタブツールチップを返します。

    -----------------------------------------

    tabTooltipIndex ([int, string]): このフラグは、ツールチップを設定するタブを判定するために1をベースにしたインデックスをとることを除いては、-tl/tabTooltipフラグと同じです。照会されると、このフラグはすべての子のタブツールチップを返します。

    -----------------------------------------

    tabsClosable (boolean): 作成したすべてのタブに閉じるボタンアイコンを表示する場合は、trueに設定します。

    -----------------------------------------

    tabsVisible (boolean): タブラベルの可視性です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    verticalScrollBarThickness (int): 垂直スクロールバーの厚みです。0以上の整数値を指定します。このフラグはWindowsシステムでは何の効力も持ちません。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成された shelfTabLayout の名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def tabLayout(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),borderStyle: str = "",changeCommand: str = "",childArray: bool = False,childResizable: bool = False,defineTemplate: str = "",docTag: str = "",doubleClickCommand: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),horizontalScrollBarThickness: int = 1,image: str = "",imageVisible: bool = False,innerMarginHeight: int = 1,innerMarginWidth: int = 1,isObscured: bool = False,manage: bool = False,minChildWidth: int = 1,moveTab: Tuple[int, int] = tuple(1, 1),newTabCommand: str = "",noBackground: bool = False,numberOfChildren: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preSelectCommand: str = "",preventOverride: bool = False,scrollable: bool = False,scrollableTabs: bool = False,selectCommand: str = "",selectTab: str = "",selectTabIndex: int = 1,showNewTab: bool = False,statusBarMessage: str = "",tabLabel: Tuple[str, str] = tuple("", ""),tabLabelIndex: Tuple[int, str] = tuple(1, ""),tabPosition: str = "",tabTooltip: Tuple[str, str] = tuple("", ""),tabTooltipIndex: Tuple[int, str] = tuple(1, ""),tabsClosable: bool = False,tabsVisible: bool = False,useTemplate: str = "",verticalScrollBarThickness: int = 1,visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドはタブ グループを作成します。タブ グループは、レイアウトの制御のみを行う特殊な形のコントロール レイアウトのひとつです。タブ グループに制御レイアウトが追加されると、タブが追加され、ほかのタブ化された コントロール グループの中からそれを選択することが可能になります。可視になるのは 一度に 1 つのタブ レイアウトのみです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    borderStyle (string): タブレイアウトの境界のスタイルを指定します。有効な値は、「none」、「top」、「notop」、「full」です。既定では、タブレイアウトのボディ領域の周囲に単純なフレームを作成する「full」が使用されます。none:タブレイアウトのボディ領域の周囲に境界を描画しないtop:タブの下に単純な線を表示notop:タブレイアウトの左/右/下部(上部以外)に単純なフレームを描画full:タブレイアウトのボディ領域の周囲に単純なフレームを描画

    -----------------------------------------

    changeCommand (script): タブをインタラクティブに選択したときに実行されるコマンドです。このコマンドは、選択したタブが変更されたときにのみ起動されます。現在のタブを再度選択しても、このコマンドは起動されません。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    childResizable (boolean): コントロールレイアウトの子をスクロール領域と同じ幅にしたい場合は、trueに設定します。-mcw/minChildWidthフラグを使用して、子の最小の幅を示すこともできます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    doubleClickCommand (script): タブをダブルクリックしたときに実行されるコマンドです。1回目のクリックでタブが選択されて、2回目のクリックでダブルクリックコマンドが実行されます。現在のタブをダブルクリックすると、ダブルクリックコマンドが再起動されます。

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    horizontalScrollBarThickness (int): 水平スクロールバーの厚みです。0以上の整数値を指定します。このフラグはWindowsシステムでは何の効力も持ちません。

    -----------------------------------------

    image (string): タブレイアウトの右上に表示されるイメージです。

    -----------------------------------------

    imageVisible (boolean): タブイメージの可視性です。

    -----------------------------------------

    innerMarginHeight (int): すべてのタブの子に対する余白の高さです。

    -----------------------------------------

    innerMarginWidth (int): すべてのタブの子に対する余白の幅です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    minChildWidth (int): タブレイアウトの子の最小幅を指定します。ゼロ以外の正の整数値を指定します。このフラグは、-cr/childResizableフラグがtrueに設定されている場合だけ、有効です。

    -----------------------------------------

    moveTab ([int, int]): 現在のインデックスから新しいインデックスにタブを移動します。

    -----------------------------------------

    newTabCommand (script): タブバーにある新規タブ(NewTab)ボタンをクリックしたときに実行されるコマンドです。注:新規タブ(NewTab)ボタンを表示するには、-snt/showNewTabフラグを使用します。このコマンドを使用すると、新規タブを追加するための内部Mayaロジックがオーバーライドされます(このコマンドのみが実行されます)。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preSelectCommand (script): コンテンツが可視となる前にタブを選択したときに実行されるコマンドです。現在のタブを再度選択しても、このコマンドは起動されません。-st/selectTabまたは-sti/selectTabIndexのいずれかのフラグを使用すると、このコマンドは実行されないことに注意してください。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    scrollable (boolean): スクロール領域内にこのレイアウトすべての子を入れます。

    -----------------------------------------

    scrollableTabs (boolean): trueの場合、レイアウト内のアクティブなタブをマウスホイールでスクロールできます。既定はtrueです。

    -----------------------------------------

    selectCommand (script): タブをインタラクティブに選択したときに実行されるコマンドです。このコマンドは、タブを選択するたびに起動します。すなわち、現在のタブを再び選択すると、このコマンドは起動します。-st/selectTabまたは-sti/selectTabIndexのいずれかのフラグを使用すると、このコマンドは実行されないことに注意してください。

    -----------------------------------------

    selectTab (string): 選択したタブの名前(略式)です。子のタブがない場合、照会すると空の文字列が返されます。

    -----------------------------------------

    selectTabIndex (int): このフラグは、選択したタブを判定するために1をベースにしたインデックスをとることを除いては、-st/selectTabフラグと同じです。子のタブがない場合、照会すると0の値が返されます。

    -----------------------------------------

    showNewTab (boolean): 新規タブ(NewTab)ボタンをタブバーの最後に表示する場合は、trueに設定します。注:このボタンをクリックしたときに実行されるコマンドを設定するには、-ntc/newTabCommandフラグを使用します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    tabLabel ([string, string]): タブラベルを設定します。第1引数は、タブレイアウトの子の必要があるコントロールの名前です。2つめの引数は、子に関連付けられたタブのラベルです。照会されると、このフラグはすべての子のタブラベルを返します。

    -----------------------------------------

    tabLabelIndex ([int, string]): このフラグは、ラベルを設定するタブを判定するために1をベースにしたインデックスをとることを除いては、-tl/tabLabelフラグと同じです。照会されると、このフラグはすべての子のタブラベルを返します。

    -----------------------------------------

    tabPosition (string): タブの位置を変更します。有効な値は「north」、「east」、「west」です。

    -----------------------------------------

    tabTooltip ([string, string]): タブのツールチップを設定します。第1引数は、タブレイアウトの子の必要があるコントロールの名前です。2つめの引数は、子に関連付けられたツールチップのラベルです。照会されると、このフラグはすべての子のタブツールチップを返します。

    -----------------------------------------

    tabTooltipIndex ([int, string]): このフラグは、ツールチップを設定するタブを判定するために1をベースにしたインデックスをとることを除いては、-tl/tabTooltipフラグと同じです。照会されると、このフラグはすべての子のタブツールチップを返します。

    -----------------------------------------

    tabsClosable (boolean): 作成したすべてのタブに閉じるボタンアイコンを表示する場合は、trueに設定します。

    -----------------------------------------

    tabsVisible (boolean): タブラベルの可視性です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    verticalScrollBarThickness (int): 垂直スクロールバーの厚みです。0以上の整数値を指定します。このフラグはWindowsシステムでは何の効力も持ちません。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def toolBar(allowedArea: str = "",annotation: str = "",area: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),content: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    ツール ボックスを作成します。ツール ボックスはコントロールのセットを含む移動可能なパネルです。これはメイン ウィンドウの中央コントロールを囲むツール ボックス領域に配置されます。ツール ボックスは、現在の領域より内側へ移動したり、新しい領域へ移動したり、あるいはフロート状態にすることができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowedArea (string): ドックコントロールが配置される領域です。有効な値は「top」、「left」、「bottom」、「right」、「all」です。既定は「all」です。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    area (string): このドックコントロールの最初のドック領域です。有効な値は「top」、「left」、「bottom」、「right」です。これは必須フラグです。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    content (string): コントロールの名前で、このドックコントロールの内容を示します。これは必須フラグです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): ラベルテキストです。既定のラベルはコントロールの名前です。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def workspaceControl(checksPlugins: bool = False,close: bool = False,closeCommand: str = "",collapse: bool = False,defineTemplate: str = "",dockToControl: Tuple[str, str] = tuple("", ""),dockToMainWindow: Tuple[str, bool] = tuple("", False),dockToPanel: Tuple[str, str, bool] = tuple("", "", False),duplicatable: bool = False,exists: bool = False,floating: bool = False,height: bool = False,heightProperty: str = "",horizontal: bool = False,initCallback: str = "",initialHeight: int = 1,initialWidth: int = 1,label: str = "",loadImmediately: bool = False,minimumHeight: int = 1,minimumWidth: int = 1,r: bool = False,requiredControl: str = "",requiredPlugin: str = "",resizeHeight: int = 1,resizeWidth: int = 1,restore: bool = False,retain: bool = False,stateString: str = "",tabPosition: Tuple[str, bool] = tuple("", False),tabToControl: Tuple[str, int] = tuple("", 1),uiScript: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: bool = False,widthProperty: str = "") -> None:
    """
    レイアウトにウィンドウを配置するために使われるウィジェットを作成および管理します。これによりウィンドウのドッキングと積み重ねが可能になります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    checksPlugins (boolean): (uiScriptによって定義された)UIがコード内の1つまたは複数のプラグインのロード状態を確認するのかどうかを設定します。プラグインの自動ロードが完了するまでUIはロードされません。既定はfalseです。

    -----------------------------------------

    close (boolean): ワークスペースコントロールを閉じます。

    -----------------------------------------

    closeCommand (script): ワークスペースコントロールを閉じたときに実行されるコマンドです。

    -----------------------------------------

    collapse (boolean): ワークスペースコントロールのタブウィジェットの親を折り畳むか、または展開します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    dockToControl ([string, string]): このワークスペースコントロールを指定されたコントロールの横にドッキングします。1番目の引数はコントロール名で、2番目の引数はコントロールに対して相対的なドッキング位置です(有効値は「left」、「right」、「top」、「bottom」)。

    -----------------------------------------

    dockToMainWindow ([string, boolean]): このワークスペースコントロールをメインウィンドウにドッキングします。1番目の引数はメインウィンドウの枠に沿ったドッキング位置です(有効値は「left」、「right」、「top」、「bottom」)。2番目の引数は、ドッキング位置にある1番目のコントロールに対してコントロールをタブ化するかどうかを示します。

    -----------------------------------------

    dockToPanel ([string, string, boolean]): このワークスペースコントロールを、指定したワークスペースコントロールが含まれているワークスペースのドッキングパネルにドッキングします。1番目の引数はコントロール名で、2番目の引数はパネルの枠に沿ったドッキング位置です(有効値は「left」、「right」、「top」、「bottom」)。3番目の引数はドッキング位置にある1番目のコントロールに対してコントロールをタブ化するかどうかを示します。

    -----------------------------------------

    duplicatable (boolean): このワークスペースコントロールを複製できるかどうかを制御します。既定の複製状態は、パネルが固有かどうかによって制御されます。固有のパネルを複製またはコピーすることはできません。パネルなしのワークスペースコントロールも、このフラグを使用して複製可能に設定されている場合を除いて複製できません。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    floating (boolean): ワークスペースコントロールがフロート状態であるかどうかを示します。

    -----------------------------------------

    height (boolean): コントロールの現在の高さを返す照会モード専用フラグです。

    -----------------------------------------

    heightProperty (string): ワークスペースコントロールの高さプロパティを設定します。有効な値は、固定(fixed)-サイズを手動で変更できず、最大化や動的なサイズ変更を行うときに余分なスペースは生じません。優先(preferred)-サイズを手動で変更できますが、最大化や動的なサイズ変更を行うときに余分なスペースは生じません。自由設定(free)-サイズを手動で変更でき、最大化や動的なサイズ変更を行うときに余分なスペースが生じます。既定値:自由設定(free)照会モードの場合は、ワークスペースコントロールの現在の高さプロパティが返されます。

    -----------------------------------------

    horizontal (boolean): コントロールの方向です。このフラグは既定ではtrueになっており、ウィジェットは水平方向に表示されます。注:現在は、「Toolbox」および「Shelf」のみが垂直の方向をサポートしています。

    -----------------------------------------

    initCallback (string): コントロールをレイアウトに追加するときに実行されるMELコマンドを追加します。このコマンドはMELプロシージャである必要があり、workspaceControl名と一緒にパラメータとして呼び出されます。MELコマンドは次の形式にする必要があります。globalproccallbackName(string$workspaceControlName)コマンド名に「save」を追加した場合は、レイアウトの保存中に呼び出されます。globalproccallbackNameSave(string$workspaceControlName)

    -----------------------------------------

    initialHeight (int): ワークスペースコントロールを最初に表示する際の初期の高さです。

    -----------------------------------------

    initialWidth (int): ワークスペースコントロールを最初に表示する際の初期の幅です。

    -----------------------------------------

    label (string): ラベルテキストです。既定のラベルはワークスペースコントロールの名前です。

    -----------------------------------------

    loadImmediately (boolean): uiScriptによって定義されるUIをワークスペースコントロールの作成後すぐに構築するか(True)、またはコントロールが実際に表示されるまで遅らせるか(False)を設定します。既定はfalseです。

    -----------------------------------------

    minimumHeight (int): コントロールの高さの最小値を、指定した値に設定します。この値を0(False)に設定すると、高さの最小値は0に設定されます。この値を1(True)に設定すると、高さの最小値は高さの初期値に設定されます。この値を1より大きな値に設定すると、高さの最小値は指定した値に設定されます。照会モードでは、コントロールの現在の高さの最小値を返します。

    -----------------------------------------

    minimumWidth (int): コントロールの幅の最小値を、指定した値に設定します。このフラグパラメータはリリース2018でブール値から整数値に変更されましたが、次に示すように、従来の設定も考慮されます。この値を0(False)に設定すると、幅の最小値は0に設定されます。この値を1(True)に設定すると、幅の最小値は幅の初期値に設定されます。この値を1より大きな値に設定すると、幅の最小値は指定した値に設定されます。照会モードでは、コントロールの現在の幅の最小値を返します。

    -----------------------------------------

    r (boolean): ワークスペースコントロールを上に上げ、これをアクティブにします。照会モードでは、このフラグはワークスペースコントロールがアクティブであるかどうかを返します。最小化されているか、または折りたたまれている場合は、このフラグはコントロールを上に上げません。代わりにフラグ-rs/restoreを使用します。

    -----------------------------------------

    requiredControl (string): ワークスペースコントロールの名前で、このワークスペースコントロールを正しく機能させるために開いておく必要があります。必要なコントロールが開いていない場合、このワークスペースコントロールは作成されません。また、必要なコントロールを閉じると、このワークスペースコントロールも閉じます。

    -----------------------------------------

    requiredPlugin (string): ワークスペースコントロールのUIを構築するためにロードする必要があるプラグインの名前です。

    -----------------------------------------

    resizeHeight (int): フローティングワークスペースコントロールの高さを指定の値にサイズ変更します。

    -----------------------------------------

    resizeWidth (int): フローティングワークスペースコントロールの幅を指定の値にサイズ変更します。

    -----------------------------------------

    restore (boolean): 次のルールに従ってコントロールを復元します。折り畳まれているコントロールは展開されます。非表示のコントロールは表示されます。最小化されているコントロールは復元されます。コントロールがタブグループ内の非アクティブなタブである場合は、アクティブなタブになります。

    -----------------------------------------

    retain (boolean): ワークスペースコントロールを閉じたときに維持するか(つまり、非表示にするのみ)、または削除するかを設定します。既定はtrueです。

    -----------------------------------------

    stateString (string): コントロールの状態を含む文字列です。initCallbackフラグと組み合わせて使用されます。

    -----------------------------------------

    tabPosition ([string, boolean]): タブの位置を変更します。有効な値は「north」、「east」、「west」です。boolean値です。trueに設定されている場合は、親ウィジェット内のすべてのコントロールのタブの位置を変更します。trueに設定されていない場合は、現在のコントロールの位置が変更されます。コントロールにはタブウィジェットと異なる方向を指定できます。コントロールタブの位置がタブウィジェットの位置と異なる場合に、コントロールがタブウィジェット内の唯一のコントロールになると、タブの位置が変更されます。照会時はコントロールタブの位置のみが返され、タブウィジェットの位置は返されません。これらは異なることがあります。

    -----------------------------------------

    tabToControl ([string, int]): このワークスペースコントロールを指定のコントロールにタブ化します。1番目の引数はコントロール名で、2番目の引数は含まれているタブウィジェット内のインデックス位置です(無効値はアペンドを意味します)。

    -----------------------------------------

    uiScript (script): 指定したスクリプトが起動され、workspaceControlのUIが構築されます。これは必須フラグです。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): ワークスペースコントロールの可視の状態です。既定では、コントロールは表示されます。非可視として作成されたコントロールは、閉じた状態で作成されます。このコントロールを表示するには、コントロールを編集してフラグfloatingまたはvisibleをtrueに設定します。コントロールが最小化または折りたたまれている場合、このフラグはtrueを返すため、コントロールのアクティブなステータスを取得するには、フラグ-r/raiseを使用します。

    -----------------------------------------

    visibleChangeCommand (script): ワークスペースコントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (boolean): コントロールの現在の幅を返す照会モード専用フラグです。

    -----------------------------------------

    widthProperty (string): ワークスペースコントロールの幅プロパティを設定します。有効な値は、固定(fixed)-サイズを手動で変更できず、最大化や動的なサイズ変更を行うときに余分なスペースは生じません。優先(preferred)-サイズを手動で変更できますが、最大化や動的なサイズ変更を行うときに余分なスペースは生じません。自由設定(free)-サイズを手動で変更でき、最大化や動的なサイズ変更を行うときに余分なスペースが生じます。既定値:自由設定(free)照会モードの場合は、ワークスペースコントロールの現在の幅プロパティが返されます。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def workspaceLayoutManager(collapseMainWindowControls: Tuple[str, bool] = tuple("", False),current: bool = False,delete: str = "",i: str = "",listLayouts: bool = False,listModuleLayouts: bool = False,listUserLayouts: bool = False,modified: str = "",parentWorkspaceControl: str = "",reset: bool = False,restoreMainWindowControls: bool = False,save: bool = False,saveAs: str = "",setCurrent: str = "",setCurrentCallback: str = "",setModifiedCallback: str = "",type: str = "") -> None:
    """
    ワークスペース レイアウト マネージャは、ユーザ インタフェースにさまざまなツールバーとウィンドウのレイアウトをロードおよび保存します。このコマンドにより、そのプロパティをリストおよび管理できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    collapseMainWindowControls ([string, boolean]): メインウィンドウのレイアウトを保存します。サイズに関するコンストレイントがない場合は、指定されたレイアウト(最初のパラメータ)を除く、メインウィンドウ内の他のすべてのコントロールを折り畳みます。2番目のパラメータは、メインウィンドウのUI要素を非表示にするかどうかを指定します。

    -----------------------------------------

    current (boolean): 現在のレイアウトの名前を取得します。

    -----------------------------------------

    delete (string): 指定されたワークスペースを削除します。文字列は、ファイル名ではなくレイアウトの名前です。

    -----------------------------------------

    i (string): 指定されたワークスペースのファイルをワークスペースフォルダに読み込みます。文字列は絶対パスです。

    -----------------------------------------

    listLayouts (boolean): 登録されているすべてのレイアウトの名前をリストします。

    -----------------------------------------

    listModuleLayouts (boolean): モジュールのレイアウトの名前をリストします。

    -----------------------------------------

    listUserLayouts (boolean): ユーザのレイアウトの名前をリストします。

    -----------------------------------------

    modified (string): 指定されたレイアウトが変更されたかどうかを確認します。

    -----------------------------------------

    parentWorkspaceControl (string): 指定したUI(パネル)の親ワークスペースコントロールを返します。このコントロールが存在しない場合は、空の文字列を返します。

    -----------------------------------------

    reset (boolean): 現在のワークスペースを元のレイアウトにリセットします。ファクトリレイアウトは既定のレイアウトに戻され、ユーザレイアウトはディスクから再ロードされます。

    -----------------------------------------

    restoreMainWindowControls (boolean): メインウィンドウのレイアウトを-cmw/-collapseMainWindowControlsフラグで保存されたレイアウトに復元します。ワークスペースを復元すると、ロードされたワークスペースファイルは削除されます。

    -----------------------------------------

    save (boolean): 現在のレイアウトを保存します。

    -----------------------------------------

    saveAs (string): 現在のレイアウトを指定された名前で保存します。

    -----------------------------------------

    setCurrent (string): 指定されたワークスペースをロードします。文字列は、ファイル名ではなくレイアウトの名前です。

    -----------------------------------------

    setCurrentCallback (string): MELのみ。文字列は、(-setCurrentフラグを使用して)レイアウトが現在のレイアウトとして設定されるたびに呼び出されるMELコールバックとして解釈されます。コールバックの形式は次のとおりです。globalprocMySetCurrentCallback(string$layoutName)

    -----------------------------------------

    setModifiedCallback (string): MELのみ。文字列は、レイアウトを変更または復元するたびに、つまり-modifiedフラグ値を変更するたびに呼び出されるMELコールバックとして解釈されます。コールバックの形式は次のとおりです。globalprocMySetModifiedCallback()

    -----------------------------------------

    type (string): 指定したレイアウトのタイプを取得します(FACTORY、FACTORY_OVERRIDE、MODULE、MODULE_OVERRIDE、またはUSER)。

    -----------------------------------------

    Return Value:
    None: string[]引数によって照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def artBuildPaintMenu() -> None:
    """
    ??



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def attrEnumOptionMenu(annotation: str = "",attribute: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,enumeratedItem: Tuple[int, str] = tuple(1, ""),exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドは列挙型アトリビュート コントロールを作成します。通常はオプション メニューになります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    attribute (name): メニューがコントロールするアトリビュートです。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): オプションメニューの値が変更されると、コマンド文字列を実行します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    enumeratedItem ([int, string]): 列挙型項目と対応する文字列です。コントロール作成時にこのフラグが設定されないと、コマンドはアトリビュートから値を読み込もうとします。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): ラベルテキストです。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールのフル ネーム照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def attrEnumOptionMenuGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",attribute: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,enumeratedItem: Tuple[int, str] = tuple(1, ""),exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),statusBarMessage: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    attribute (name): アトリビュートの名前を指定します。ボタンはアトリビュートにアタッチされ、アトリビュートと同期をとることができます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    enumeratedItem ([int, string]): 列挙型項目と対応する文字列です。コントロール作成時にこのフラグが設定されないと、コマンドはアトリビュートから値を読み込もうとします。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label (string): コントロールのラベル用テキストを指定します。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成時のコントロールのフル ネーム照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def attributeMenu(beginMenu: bool = False,editor: str = "",finishMenu: bool = False,inputs: bool = False,plug: str = "",regPulldownMenuCommand: str = "",unregPulldownMenuCommand: int = 1) -> None:
    """
    ハイパーシェード(Hypershade)の接続ポップアップメニューを生成するアクションです。このコマンドは、ハイパーシェード パネルで内部的に使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    beginMenu (boolean): trueの場合、メニューは接続の編集を開始するために使用されるので、入力か出力のどちらかで使用可能なすべてのアトリビュートをリスト表示します。falseの場合、メニューは接続を完了するために使用されるので、接続の反対側にあるアトリビュートと互換性のあるアトリビュートのみをリスト表示します。この場合はプラグを指定する必要があります。

    -----------------------------------------

    editor (string): このメニューの構築対象であるハイパーグラフ(Hypergraph)、ハイパーシェード、またはバイザー(Visor)エディタの名前です。この引数は現在は必須ではありません。省略する場合、検索対象を指定するために入力フラグとノードを使用する必要があります。これにより、ハイパーシェードエディタがなくてもattributeMenuを使用できます。

    -----------------------------------------

    finishMenu (boolean): メニューを終了します。

    -----------------------------------------

    inputs (boolean): trueの場合、入力として使用できるアトリビュートのみがリスト表示されます。falseの場合、出力として使用できるアトリビュートのみがリスト表示されます。

    -----------------------------------------

    plug (name): 入力がfalseの場合、接続を完了しており、接続の反対側のプラグ名を指定する必要があります。

    -----------------------------------------

    regPulldownMenuCommand (string): このフラグは、コールバックを登録して、ユーザがハイパーシェードやハイパーグラフエディタで使用する特定のノードタイプに対する独自のポップアップメニューを定義できるようにします。コマンドシグネチャは次のようになります:globalprocintproc_name>(string$editorName,string$nodeName,string$plug,string$mode,string$menuType)メソッドがノードタイプを認識しない場合は0を返し、既定のattributeMenuポップアップメニューが表示されます。コールバックが何かを返すと、メニューが構築されたとみなされ、他のメニュー項目はポップアップに追加されません。このフラグの戻り値が、-unregPulldownMenuCommandフラグで使用するIDになります。

    -----------------------------------------

    unregPulldownMenuCommand (int): このフラグは、-regPulldownMenuCommandフラグを使用して登録されたコールバックプロシージャを登録解除します。引数はregPulldownMenuCommandフラグから返される整数の識別子です。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def hotBox(PaneOnlyMenus: bool = False,PaneToggleMenus: bool = False,animationOnlyMenus: bool = False,animationToggleMenus: bool = False,clothOnlyMenus: bool = False,clothToggleMenus: bool = False,commonOnlyMenus: bool = False,commonToggleMenus: bool = False,customMenuSetsToggleMenus: bool = False,displayCenterOnly: bool = False,displayHotbox: bool = False,displayStyle: bool = False,displayZonesOnly: bool = False,dynamicsOnlyMenus: bool = False,dynamicsToggleMenus: bool = False,liveOnlyMenus: bool = False,liveToggleMenus: bool = False,menuSetOnly: str = "",menuSetToggle: Tuple[str, bool] = tuple("", False),modelingOnlyMenus: bool = False,modelingToggleMenus: bool = False,noClickCommand: str = "",noClickDelay: float = 1.0,noClickPosition: bool = False,noKeyPress: bool = False,polygonsOnlyMenus: bool = False,polygonsToggleMenus: bool = False,position: Tuple[int, int] = tuple(1, 1),release: bool = False,renderingOnlyMenus: bool = False,renderingToggleMenus: bool = False,riggingOnlyMenus: bool = False,riggingToggleMenus: bool = False,rmbPopups: bool = False,showAllToggleMenus: bool = False,surfacesOnlyMenus: bool = False,surfacesToggleMenus: bool = False,transparenyLevel: int = 1,updateMenus: bool = False) -> None:
    """
    このコマンドは、ホットボックスのメニューバー パレットに関連するパラメータを制御します。このコマンドがフラグなしで呼び出されると、ホットボックスがポップ アップします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    PaneOnlyMenus (boolean): メニューの列を可視専用の列に設定します。

    -----------------------------------------

    PaneToggleMenus (boolean): メニューの列の表示をオンまたはオフに設定します。

    -----------------------------------------

    animationOnlyMenus (boolean): 

    -----------------------------------------

    animationToggleMenus (boolean): 

    -----------------------------------------

    clothOnlyMenus (boolean): 

    -----------------------------------------

    clothToggleMenus (boolean): 

    -----------------------------------------

    commonOnlyMenus (boolean): 

    -----------------------------------------

    commonToggleMenus (boolean): 

    -----------------------------------------

    customMenuSetsToggleMenus (boolean): 

    -----------------------------------------

    displayCenterOnly (boolean): ホットボックスに対して次の3種類の表示スタイルが定義されています。完全に表示(dh)、マーキングメニューゾーンのみ表示(dzo)、表示しない(dco)。「表示しない」は、スクリーン全体から中央ゾーンに定義されたマーキングメニューにアクセスできることを意味します。

    -----------------------------------------

    displayHotbox (boolean): 

    -----------------------------------------

    displayStyle (boolean): 現在の表示スタイルを設定するために使われたフラグを識別する文字列を返します。現在使用されているホットボックスのスタイルに応じて、dh、dzo、またはdcoのいずれかが返されます。

    -----------------------------------------

    displayZonesOnly (boolean): 

    -----------------------------------------

    dynamicsOnlyMenus (boolean): 

    -----------------------------------------

    dynamicsToggleMenus (boolean): 

    -----------------------------------------

    liveOnlyMenus (boolean): 

    -----------------------------------------

    liveToggleMenus (boolean): 

    -----------------------------------------

    menuSetOnly (string): 名前の付いたメニューセットのみを表示します。

    -----------------------------------------

    menuSetToggle ([string, boolean]): ペア化されたトグル値が指定されたメニューセットを更新します。

    -----------------------------------------

    modelingOnlyMenus (boolean): 

    -----------------------------------------

    modelingToggleMenus (boolean): 

    -----------------------------------------

    noClickCommand (script): ホットボックスを使用してからnoClickDelayに指定した時間単位の間使用しなかった場合は、このコマンドを実行する必要があります。

    -----------------------------------------

    noClickDelay (float): ホットボックスを使用してからこの時間間隔の間使用しなかった場合は、noClickCommandコマンドが実行されます。時間間隔は秒単位です。既定値は0.1です。

    -----------------------------------------

    noClickPosition (boolean): -noClickCommandが指定されている場合、このフラグはマウスポインタのXおよびY画面座標をコマンドの引数としてアペンドします。使用される座標は、hotboxコマンドが実行された時点でのポインタの座標です。

    -----------------------------------------

    noKeyPress (boolean): キーボードのキーを押すことによって、通常はホットボックスがポップされます。nkpフラグを使用すると、キーボード以外のデバイスからホットボックスがポップされます(ただしホットボックスをポップ解除するにはrlフラグを使用します)。

    -----------------------------------------

    polygonsOnlyMenus (boolean): 

    -----------------------------------------

    polygonsToggleMenus (boolean): 

    -----------------------------------------

    position ([uint, uint]): ホットボックスが画面に次回表示される時の中心位置を指定します。既定はカーソルの位置です。

    -----------------------------------------

    release (boolean): ホットボックスを呼び出したキーを放すときにコールされるアクションです。

    -----------------------------------------

    renderingOnlyMenus (boolean): 

    -----------------------------------------

    renderingToggleMenus (boolean): 

    -----------------------------------------

    riggingOnlyMenus (boolean): 

    -----------------------------------------

    riggingToggleMenus (boolean): 

    -----------------------------------------

    rmbPopups (boolean): 現在の関数セットのポップアップメニューを有効/無効にします。このポップアップメニューは、ホットボックスの中央ゾーンで右マウスボタンを押したときに表示されます。

    -----------------------------------------

    showAllToggleMenus (boolean): すべてのメニューの表示をオンまたはオフに設定します。照会時、すべてのメニューの列が可視の状態であれば、trueだけを返します。

    -----------------------------------------

    surfacesOnlyMenus (boolean): 

    -----------------------------------------

    surfacesToggleMenus (boolean): 

    -----------------------------------------

    transparenyLevel (int): 0～100の透明度のパーセンテージです。現在、0、25、50、75、100の値だけがサポートされています。他の値はすべて、サポートされている最も近い値に切り捨てられます。

    -----------------------------------------

    updateMenus (boolean): メインメニューバーからホットボックスメニューを再読み込みします。メインメニューバーのメニューが変更され、ホットボックスメニューをリフレッシュする必要があるときに、このフラグを使います。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def menu(allowOptionBoxes: bool = False,defineTemplate: str = "",deleteAllItems: bool = False,docTag: str = "",enable: bool = False,exists: bool = False,familyImage: str = "",helpMenu: bool = False,itemArray: bool = False,label: str = "",ltVersion: str = "",mnemonic: str = "",numberOfItems: bool = False,parent: str = "",postMenuCommand: str = "",postMenuCommandOnce: bool = False,scrollable: bool = False,tearOff: bool = False,useTemplate: str = "",version: str = "",visible: bool = False) -> None:
    """
    新しいメニューが作成され、親を指定していない場合は、既定のウィンドウのメニューバーに追加されます。メニューは有効、無効を切り替えることができます。コマンド menuItem -sm/subMenu true を使用して作成されたメニュー オブジェクト上でもこのコマンドを使用できることに注意してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowOptionBoxes (boolean): 非推奨です。すべてのメニューは、オプションボックスを常に許可するようになりました。メニューがオプションウィンドウのメニュー項目をサポートできるかどうかを指定します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    deleteAllItems (boolean): このメニューにあるすべての項目を削除します。

    -----------------------------------------

    docTag (string): メニューにタグがアタッチされます。

    -----------------------------------------

    enable (boolean): メニューの有効、無効を切り替えます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    familyImage (string): メニューに関連付けられたアイコンのファイル名。メニュー項目に定義されたアイコンイメージがない場合、このアイコンが使用されます。

    -----------------------------------------

    helpMenu (boolean): メニューをヘルプメニューに指定し、メニューバーの右端に配置します。UNIXシステムでも、ヘルプメニューはメニューバーで右に寄せられます。

    -----------------------------------------

    itemArray (boolean): メニュー項目名の文字配列を返します。

    -----------------------------------------

    label (string): メニューに表示されるテキスト。ラベルが提供されければ、menuNameが使用されます。

    -----------------------------------------

    ltVersion (string): このフラグは、バージョンフラグが指定されない場合、またはバージョンフラグは指定されているが引数が異なる場合に、このコントロール機能が導入されているMayaLTバージョンを指定するために使用されます。この値はMayaLTのみで使用され、それ以外では無視されます。引数は、バージョン番号の文字列として指定する必要があります(例:「2014」、「2015」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2014.5は「2014」と指定する必要があります)。

    -----------------------------------------

    mnemonic (string): メニューの表示にAltキーを割り当てます。指定する文字の大文字と小文字は、メニュー項目テキストの文字に合わせる必要がありますが、キーボードから選択する場合、大文字と小文字は区別されません。

    -----------------------------------------

    numberOfItems (boolean): メニューにあるオブジェクトの数を返します。

    -----------------------------------------

    parent (string): メニューを表示するウィンドウを指定します。

    -----------------------------------------

    postMenuCommand (script): メニューを表示するときに実行されるスクリプトを指定します。

    -----------------------------------------

    postMenuCommandOnce (boolean): -pmc/postMenuCommandを一度だけ起動されるように指定します。既定値はfalse、つまりメニューが表示されるたびに-pmc/postMenuCommandが呼び出されます。

    -----------------------------------------

    scrollable (boolean): ポップアップメニューがスクロールをサポートするようにします。既定はfalseです。

    -----------------------------------------

    tearOff (boolean): メニューを切り離せるようにします。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    version (string): このメニュー機能が導入されたバージョンを指定します。引数は、バージョン番号の文字列として指定する必要があります(例:「2014」、「2015」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2014.5は「2014」と指定する必要があります)。

    -----------------------------------------

    visible (boolean): メニューの表示/非表示を切り替えます。

    -----------------------------------------

    Return Value:
    None: stringメニューへのフル パス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def menuEditor(annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),cellHeight: int = 1,cellWidth: int = 1,cellWidthHeight: Tuple[int, int] = tuple(1, 1),checkBoxPresent: Tuple[bool, str, int] = tuple(False, "", 1),checkBoxState: Tuple[bool, str, int] = tuple(False, "", 1),childArray: bool = False,command: Tuple[str, str, int] = tuple("", "", 1),defineTemplate: str = "",delete: Tuple[str, int] = tuple("", 1),docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),iconMenuCallback: str = "",image: Tuple[str, str, int] = tuple("", "", 1),isObscured: bool = False,label: Tuple[str, str, int] = tuple("", "", 1),manage: bool = False,menuItemTypes: bool = False,noBackground: bool = False,numberOfChildren: bool = False,numberOfPopupMenus: bool = False,optionBoxCommand: Tuple[str, str, int] = tuple("", "", 1),optionBoxPresent: Tuple[bool, str, int] = tuple(False, "", 1),parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,radioButtonPresent: Tuple[bool, str, int] = tuple(False, "", 1),radioButtonState: Tuple[bool, str, int] = tuple(False, "", 1),separator: Tuple[str, int] = tuple("", 1),statusBarMessage: str = "",style: str = "",subMenuAt: Tuple[str, int] = tuple("", 1),subMenuEditorWindow: str = "",subMenuEditorsOpen: bool = False,subMenuOf: Tuple[str, str, int] = tuple("", "", 1),topLevelMenu: str = "",useTemplate: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    ポップアップ メニューの内容を表示し、メニュー項目を編集できるようにします。メニュー項目はラベル付きアイコンとして表現され、エディタ内でドラッグしてメニューのレイアウトを変更できます。さまざまなオブジェクトのドラッグとドロップを menuEditor で行い、シェルフかツール ボックスの toolButtons、シェルフの shelfButtons、コマンドがアタッチされた iconTextButtons、コマンド ウィンドウのスクリプトなど、新しいメニュー項目を作成できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    cellHeight (int): menuEditor内のアイコンの高さ。

    -----------------------------------------

    cellWidth (int): menuEditor内のアイコンの幅。

    -----------------------------------------

    cellWidthHeight ([int, int]): menuEditor内のアイコンの幅と高さ。

    -----------------------------------------

    checkBoxPresent ([boolean, string, int]): メニュー項目にチェックボックスを含めるかどうかが制御されます。引数は存在を示すフラグで、後にメニュー項目の位置が続きます。メニュー項目がサブメニュー項目である場合、このフラグは無視されます。照会すると、すべてのラベルを含むブーリアン配列を返します。配列の最初の8個のエントリはラジアル項目に対応し("N"、"NE"、..."NW")、その後すべてのエントリはオーバーフロー(直線)メニュー項目に対応します。

    -----------------------------------------

    checkBoxState ([boolean, string, int]): メニュー項目に関連付けられたチェックボックスの状態。引数としては、状態を示すフラグに続けてメニュー項目の位置を指定します。メニュー項目にチェックボックスが含まれない場合、このフラグは無視されます。照会すると、すべてのラベルを含むブーリアン配列を返します。配列の最初の8個のエントリはラジアル項目に対応し("N"、"NE"、..."NW")、その後すべてのエントリはオーバーフロー(直線)メニュー項目に対応します。

    -----------------------------------------

    childArray (boolean): レイアウトの直接の子の名前を文字配列で返します。

    -----------------------------------------

    command ([string, string, int]): メニュー項目で実行されるコマンドかスクリプト。引数はコマンド文字列かスクリプト名で、後にメニュー項目の位置が続きます。メニュー項目がサブメニュー項目かセパレータ項目である場合、このフラグは無視されます。照会すると、すべてのコマンドを含む文字配列が返されます。配列の最初の8個のエントリはラジアル項目に対応し("N"、"NE"、..."NW")、その後すべてのエントリはオーバーフロー(直線)メニュー項目に対応します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    delete ([string, int]): 指定した位置のメニュー項目がメニューから除去されます。メニュー項目にサブメニューがあり、sub-menuEditorが開いていてアタッチされている場合、sub-menuEditorのウィンドウと子menuEditorウィンドウすべてが反復的に閉じます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    iconMenuCallback (string): menuEditorのアイコンにアタッチされたポップアップメニューを作成するときにコールされる、MELコールバックプロシージャの名前。このコールバックは、アイコンが新しく作成された場合とmenuEditor内でアイコンが移動した場合にコール出されます。コールバックで作成されるポップアップメニューには、アイコンに関連付けられたメニュー項目を編集するコマンドが含まれていなければなりません。メニューからアクセスできる操作には、項目の削除、項目のラベル、コマンド、イメージ、チェックボックス、オプションボックスの編集、サブメニューの作成、sub-menuEditorのポップアップ表示が含まれている必要があります。コールバックの引数は、callbackProc(string$menuEditorName,string$parentIconName,string$menuTitle,string$radialPosition,int$overflowRow);という形式でなければなりません。ポップアップメニューの親は、$parentIconNameである必要があります。sub-menuEditorを作成する場合は、親のmenuEditorの-imc/iconMenuCallbackフラグの値に等しい既定値が採用されるので、このフラグを指定する必要はないことに注意してください。

    -----------------------------------------

    image ([string, string, int]): メニュー項目に関連付けられたアイコンのファイル名。このアイコンはmenuEditorで表示され、メニュー項目を表します。引数はアイコンのファイル名で、後にメニュー項目の位置が続きます。照会すると、すべてのアイコンのファイル名を含む文字配列が返されます。配列の最初の8個のエントリはラジアル項目に対応し("N"、"NE"、..."NW")、その後すべてのエントリはオーバーフロー(直線)メニュー項目に対応します。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    label ([string, string, int]): メニュー項目のラベル。引数はラベルテキストで、後にメニュー項目の位置が続きます。照会すると、すべてのラベルを含む文字配列が返されます。配列の最初の8個のエントリはラジアル項目に対応し("N"、"NE"、..."NW")、その後すべてのエントリはオーバーフロー(直線)メニュー項目に対応します。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    menuItemTypes (boolean): これは照会専用フラグです。menuEditorの各セルに含まれる内容のタイプを表す文字配列が返されます。セルは、「vacant」、通常メニュー項目の「item」、「separator」、「submenu」項目にすることができます。それぞれのケースで、対応する文字列が返されます。配列の最初の8個のエントリはラジアル項目に対応し("N"、"NE"、..."NW")、その後すべてのエントリはオーバーフロー(直線)メニュー項目に対応します。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfChildren (boolean): レイアウトの直接の子の数を整数で返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    optionBoxCommand ([string, string, int]): メニュー項目に関連付けられたオプションボックスの項目で実行されるコマンドかスクリプト。引数はコマンド文字列かスクリプト名で、後にメニュー項目の位置が続きます。メニュー項目にオプションボックス項目が関連していない場合、このフラグは無視されます。照会すると、すべてのコマンドを含む文字配列が返されます。配列の最初の8個のエントリはラジアル項目に対応し("N"、"NE"、..."NW")、その後すべてのエントリはオーバーフロー(直線)メニュー項目に対応します。

    -----------------------------------------

    optionBoxPresent ([boolean, string, int]): メニュー項目にオプションボックスの項目を関連付けるかどうかが制御されます。引数は存在を示すフラグで、後にメニュー項目の位置が続きます。メニュー項目がサブメニュー項目である場合、このフラグは無視されます。照会すると、すべてのラベルを含むブーリアン配列を返します。配列の最初の8個のエントリはラジアル項目に対応し("N"、"NE"、..."NW")、その後すべてのエントリはオーバーフロー(直線)メニュー項目に対応します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    radioButtonPresent ([boolean, string, int]): メニュー項目にラジオボタンを含めるかどうかが制御されます。引数は存在を示すフラグで、後にメニュー項目の位置が続きます。メニュー項目がサブメニュー項目である場合、このフラグは無視されます。照会すると、すべてのラベルを含むブーリアン配列を返します。配列の最初の8個のエントリはラジアル項目に対応し("N"、"NE"、..."NW")、その後すべてのエントリはオーバーフロー(直線)メニュー項目に対応します。

    -----------------------------------------

    radioButtonState ([boolean, string, int]): メニュー項目に関連付けられたラジオボタンの状態。引数としては、状態を示すフラグに続けてメニュー項目の位置を指定します。メニュー項目にラジオボタンが含まれない場合、このフラグは無視されます。照会すると、すべてのラベルを含むブーリアン配列を返します。配列の最初の8個のエントリはラジアル項目に対応し("N"、"NE"、..."NW")、その後すべてのエントリはオーバーフロー(直線)メニュー項目に対応します。

    -----------------------------------------

    separator ([string, int]): 編集モードでは、指定した位置でmenuEditorにセパレータが追加されます。パラメータは、radialPositionとoverflowRowです。照会すると、項目がセパレータ項目であるかどうかを表すブーリアン配列を返します。配列の最初の8個のエントリはラジアル項目に対応し("N"、"NE"、..."NW")、その後すべてのエントリはオーバーフロー(直線)メニュー項目に対応します。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    style (string): menuEditor内のアイコンのスタイル。有効な値は、「iconOnly」、「textOnly」、「iconAndTextHorizontal」、「iconAndTextVertical」です。

    -----------------------------------------

    subMenuAt ([string, int]): 指定した位置にサブメニュー項目が作成されます。メニューのラジアル部分に作成されたサブメニューの項目は、指定した位置に現在ある項目(もしあれば)はすべて上書きします。メニューのオーバーフロー(リニア)部分に作成されたサブメニューの項目は、指定した位置に現在ある項目の前に挿入されます。

    -----------------------------------------

    subMenuEditorWindow (string): sub-menuEditorを含むウィンドウの名前。sub-menuEditorを作成するときにだけ使用します。親のmenuEditorが閉じた場合、または親のメニュー項目が削除された場合、このウィンドウは自動的に閉じます。

    -----------------------------------------

    subMenuEditorsOpen (boolean): これは照会専用フラグです。sub-menuEditorが開いていて、特定セルでメニュー項目にアタッチされているかどうかを示すブーリアン配列を返します。セルが空であるか、サブメニュー以外の項目を含んでいても、menuEditorのそれぞれのセルでブーリアン値が返されます(両方のケースでfalseが返されます)。セルにサブメニュー項目が含まれる場合に限ってtrueが返されます。配列の最初の8個のエントリはラジアル項目に対応し("N"、"NE"、..."NW")、その後すべてのエントリはオーバーフロー(直線)メニュー項目に対応します。

    -----------------------------------------

    subMenuOf ([string, string, int]): sub-menuEditorがその親のmenuEditorにアタッチされます。sub-menuEditorを作成するときにだけ使用します。引数としては、親menuEditorの名前に続けて、親の中でのサブメニュー項目の位置を指定します。サブメニュー項目は、親の特定位置にすでに存在している必要があります。サブメニュー項目には、複数のサブmenuEditorをアタッチできません。

    -----------------------------------------

    topLevelMenu (string): エディタにアタッチするポップアップメニュー。エディタ内で実行したすべての編集操作(項目の挿入、削除、移動など)は、このメニューにすぐに反映されます。エディタがsub-menuEditorである場合、このフラグは無視されます。このフラグの値を初期値から変更すると、エディタは適切に更新されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringエディタへのフル パス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def menuItem(allowOptionBoxes: bool = False,annotation: str = "",boldFont: bool = False,checkBox: bool = False,collection: str = "",command: str = "",data: int = 1,defineTemplate: str = "",divider: bool = False,dividerLabel: str = "",docTag: str = "",dragDoubleClickCommand: str = "",dragMenuCommand: str = "",echoCommand: bool = False,enable: bool = False,enableCommandRepeat: bool = False,exists: bool = False,familyImage: str = "",image: str = "",imageOverlayLabel: str = "",insertAfter: str = "",isCheckBox: bool = False,isOptionBox: bool = False,isRadioButton: bool = False,italicized: bool = False,label: str = "",longDivider: bool = False,ltVersion: str = "",optionBox: bool = False,optionBoxIcon: str = "",parent: str = "",postMenuCommand: str = "",postMenuCommandOnce: bool = False,radialPosition: str = "",radioButton: bool = False,sourceType: str = "",subMenu: bool = False,tearOff: bool = False,useTemplate: str = "",version: str = "") -> None:
    """
    メニュー項目の作成、編集、照会が実行されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowOptionBoxes (boolean): 非推奨です。すべてのメニューとメニュー項目は、オプションボックスを常に許可します。サブメニュー項目の場合、このフラグは、オプションボックスのメニュー項目をサブメニューでサポートするかどうかを指定します。必ずtrueを返します。

    -----------------------------------------

    annotation (string): このメニュー項目に文字列の値で注釈を付けます。

    -----------------------------------------

    boldFont (boolean): テキストを太字にするときに指定します。マーキングメニューの実装を使用するメニューだけサポートされます。既定は、Windowsではfalse、その他のすべてのプラットフォームではtrueです。

    -----------------------------------------

    checkBox (boolean): チェックボックスのメニュー項目が作成されます。引数により、チェックボックスの値が指定されます。

    -----------------------------------------

    collection (string): ラジオメニュー項目を明示的にradioMenuItemCollectionに追加します。

    -----------------------------------------

    command (script): 項目を選択した場合に実行されるコマンドかスクリプトがアタッチされます。このコマンドは、メニュー項目がoptionMenuコントロールにある場合には実行されないことに注意してください。

    -----------------------------------------

    data (int): ユーザ定義データの断片がメニュー項目にアタッチされます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    divider (boolean): ディバイダのメニュー項目が作成されます。

    -----------------------------------------

    dividerLabel (string): ディバイダのメニュー項目にラベルを追加します。

    -----------------------------------------

    docTag (string): メニュー項目にタグがアタッチされます。

    -----------------------------------------

    dragDoubleClickCommand (script): メニュー項目をシェルフに配置すると、対応するシェルフオブジェクトがダブルクリックされた際にこのコマンドが呼び出されます。

    -----------------------------------------

    dragMenuCommand (script): メニュー項目をシェルフに配置すると、対応するシェルフオブジェクトがクリックされた際にこのコマンドが呼び出されます。

    -----------------------------------------

    echoCommand (boolean): c/commandフラグでアタッチしたアクションが呼び出された場合に、コマンド出力領域にエコーするかどうかを指定します。このフラグは既定でfalseになっており、c/commandフラグとともに指定する必要があります。

    -----------------------------------------

    enable (boolean): メニュー項目の有効、無効の状態です。無効になっているメニュー項目はグレー表示で反応しません。有効になっているメニュー項目は選択することができ、通常どおりに表示されます。

    -----------------------------------------

    enableCommandRepeat (boolean): コマンドをアタッチできるメニュー項目のみに影響します。trueを指定すると、コマンドrepeatLastが実行されてコマンドが繰り返されます。このフラグは、オプションボックス項目を除くすべての項目で既定でtrueになっています。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    familyImage (string): メニューに関連付けられたファミリアイコンのファイル名を取得します。imageフラグで指定されるアイコンがなければ、ファミリアイコンがシェルフに使用されます。

    -----------------------------------------

    image (string): メニュー項目に関連付けられたアイコンのファイル名。メニュー項目を含むメニューをmenuEditorで編集する場合、menuEditorではメニュー項目がこのアイコンで表されます。このアイコンは、メニュー項目を配置するとシェルフ上に表示されます。

    -----------------------------------------

    imageOverlayLabel (string): メニュー項目に関連付けられたアイコンの上に重ねて表示する短いテキスト文字列(5文字)を指定します。これは、アイコンイメージが明確に定義されていないためにファミリアイコンを使用するメニュー項目を差別化するメカニズムです。アイコンイメージがメニュー項目用に定義されていない場合、イメージオーバーレイラベルは使用しません。

    -----------------------------------------

    insertAfter (string): どの項目の後に新規の項目を配置するかを指定します。このフラグが指定されない場合、項目はメニューの最後に追加されます。メニューの先頭項目の前に挿入するには、空の文字列""を使用します。

    -----------------------------------------

    isCheckBox (boolean): 項目がチェックボックス項目である場合にtrueが返されます。

    -----------------------------------------

    isOptionBox (boolean): 項目がオプションボックスの項目である場合にtrueが返されます。

    -----------------------------------------

    isRadioButton (boolean): 項目がラジオボタン項目である場合にtrueが返されます。

    -----------------------------------------

    italicized (boolean): テキストを斜体にするときに指定します。マーキングメニューの実装を使用するメニューだけサポートされます。既定はfalseです。

    -----------------------------------------

    label (string): 項目に表示されるテキスト。

    -----------------------------------------

    longDivider (boolean): ディバイダが長いか短いかを示します。ディバイダラベルが設定されている場合は効果はありません。既定はtrueです。

    -----------------------------------------

    ltVersion (string): このフラグは、バージョンフラグが指定されない場合、またはバージョンフラグは指定されているが引数が異なる場合に、このコントロール機能が導入されているMayaLTバージョンを指定するために使用されます。この値はMayaLTのみで使用され、それ以外では無視されます。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    optionBox (boolean): メニュー項目をオプションボックスの項目に指定します。この項目は、前のメニュー項目の右側に表示されます。

    -----------------------------------------

    optionBoxIcon (string): 通常のオプションボックスアイコンの代わりに使用されるアイコンのファイル名です。このアイコンは、XBMLANGPATH環境変数で指定したフォルダで検索されます。このアイコンは任意のサイズにすることができますが、描画時に標準の16x16ピクセルにサイズ変更されます。

    -----------------------------------------

    parent (string): 項目を表示するメニューを指定します。

    -----------------------------------------

    postMenuCommand (script): サブメニューを表示したときに実行されるスクリプトを指定します。

    -----------------------------------------

    postMenuCommandOnce (boolean): pmc/postMenuCommandを一度だけ起動されるように指定します。既定値はfalse、つまりサブメニューが表示されるたびに、pmc/postMenuCommandが呼び出されます。

    -----------------------------------------

    radialPosition (string): メニューがマーキングメニューにある場合は、メニュー項目のラジアル位置。ラジアル位置は、「N」、「NW」、「W」、「SW」、「S」、「SE」、「E」、「NE」のように、方位の形式で指定します。

    -----------------------------------------

    radioButton (boolean): ラジオボタンのメニュー項目が作成されます。引数により、ラジオボタン値が指定されます。

    -----------------------------------------

    sourceType (string): コマンドスクリプトの言語タイプを設定します。必ず、コマンドフラグとともに使用してください。このフラグがないコマンドは、既存のスクリプトと同じ言語であると仮定されます。照会モードでは、指定コマンドの言語が返されます。有効な値は、「mel」と「python」です。

    -----------------------------------------

    subMenu (boolean): 項目にサブメニューを含めるよう指定します。setParent-menuがコールされるまで、この後のメニュー項目はサブメニューに追加されます。サブメニュー項目がメニューオブジェクトを作成し、その結果、コマンドmenuをサブメニュー項目上で使用できることに注意してください。

    -----------------------------------------

    tearOff (boolean): メニュー項目がサブメニューである場合は、このフラグにより、サブメニューの切り離しが可能になります。このフラグが、その他のメニュー項目タイプに影響しないことに注意してください。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    version (string): このメニュー項目機能が導入されたバージョンを指定します。引数は、バージョン番号の文字列として指定する必要があります(例:「2013」、「2014」)。現時点では、メジャーバージョン番号のみが受け入れられます(例:2013Ext1または2013.5は「2014」と指定する必要があります)。

    -----------------------------------------

    Return Value:
    None: stringメニュー項目へのフル パス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def menuSet(addMenu: str = "",allMenuSets: bool = False,currentMenuSet: str = "",exists: str = "",hotBoxVisible: bool = False,insertMenu: Tuple[str, int] = tuple("", 1),label: str = "",menuArray: Tuple[str] = tuple(""),moveMenu: Tuple[str, int] = tuple("", 1),moveMenuSet: Tuple[str, int] = tuple("", 1),numberOfMenuSets: bool = False,numberOfMenus: bool = False,permanent: bool = False,removeMenu: str = "",removeMenuSet: str = "") -> None:
    """
    メイン メニュー バーに表示するメニューを論理的に順序付けするメニュー セットを作成します。このメニュー セットは動的に編集や順序変更を行うことができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addMenu (string): メニューを現在のメニューセットの最後にアペンドします。

    -----------------------------------------

    allMenuSets (boolean): 使用中のすべてのメニューセットのオブジェクト名の配列を返します。照会すると、このフラグは文字配列を返します。

    -----------------------------------------

    currentMenuSet (string): すべての操作(アペンド、挿入、除去など)の作用対象となる、現在アクティブなメニューセットです。照会すると、このフラグはstringを返します。

    -----------------------------------------

    exists (string): 指定したメニューセットが存在するかどうかを返します。この照会フラグは文字列の引数(つまり、menuSet-q-existsanimationMenuSet;)をサポートします。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    hotBoxVisible (boolean): このメニューセットをメインメニューバーだけでなくホットボックスにも表示するかどうかを指定します。

    -----------------------------------------

    insertMenu ([string, uint]): メニューを現在のメニューセットの指定したインデックス内に挿入します。

    -----------------------------------------

    label (string): 現在のメニューセットのラベルです。照会すると、このフラグはstringを返します。

    -----------------------------------------

    menuArray (string[]): 現在のメニューセットのメニュー名(文字列)の配列です。照会すると、このフラグは文字配列を返します。

    -----------------------------------------

    moveMenu ([string, uint]): 指定したメニューを現在のメニューセットから新しい位置に移動します。

    -----------------------------------------

    moveMenuSet ([string, uint]): 指定したメニューセットを別のインデックスに移動します。

    -----------------------------------------

    numberOfMenuSets (boolean): メニューセットの合計数です。照会すると、このフラグは整数を返します。

    -----------------------------------------

    numberOfMenus (boolean): 現在のメニューセットのメニュー数です。照会すると、このフラグは整数を返します。

    -----------------------------------------

    permanent (boolean): このメニューセットを移動できるかどうかを指定します。

    -----------------------------------------

    removeMenu (string): 指定したメニューを現在のメニューセットから除去します。

    -----------------------------------------

    removeMenuSet (string): 指定したメニューセットオブジェクトをすべてのメニューセットのリストから除去します。

    -----------------------------------------

    Return Value:
    None: string結果のメニュー セットの名前。(残りのメニュー セットがない場合は、空の文字列)照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def menuSetPref(exists: bool = False,force: bool = False,loadAll: bool = False,removeAll: bool = False,saveAll: bool = False,saveBackup: bool = False,version: bool = False) -> None:
    """
    Maya のセッション間でメニュー セットを保存してロードする機能を提供します。内部使用限定。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    exists (boolean): メニューセットプリファレンスファイルが存在するかどうかを返します。

    -----------------------------------------

    force (boolean): エラーに遭遇しても(無効なプリファレンスなど)、強制的に指定した操作を続行します。

    -----------------------------------------

    loadAll (boolean): プリファレンスバージョンが一致しているか、または-forceフラグが有効な場合のみ、プリファレンスファイルからすべてのメニューセットをロードします。プリファレンスファイルのロードに成功した場合は、空の文字列が返され、失敗した場合は、遭遇した問題の説明が返されます。

    -----------------------------------------

    removeAll (boolean): プリファレンスファイルからすべてのメニューセットを除去します(ファイル全体を除去)。

    -----------------------------------------

    saveAll (boolean): すべての現在のメニューセットをプリファレンスファイルに保存します。

    -----------------------------------------

    saveBackup (boolean): 現在のメニューセットプリファレンスファイルがあれば、そのバックアップを保存します。このバックアップは、現在のプリファレンスファイルと同じ場所に保存されます。

    -----------------------------------------

    version (boolean): ファイルに保存されたベースバージョンの文字列です。これは、最後にプリファレンスが保存されてからの既定のプリファレンスの変更を示すために、ロード時にもチェックされます。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def optionMenu(alwaysCallChangeCommand: bool = False,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),beforeShowPopup: str = "",changeCommand: str = "",defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,itemListLong: bool = False,itemListShort: bool = False,label: str = "",manage: bool = False,maxVisibleItems: int = 1,noBackground: bool = False,numberOfItems: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,select: int = 1,statusBarMessage: str = "",useTemplate: str = "",value: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    このコマンドはポップアップ メニュー コントロールを作成します。このコマンドはコントロールを作成してそのメニューを提供します。menuItem への後続のコールは、それをポップアップ メニューに配置します。メニュー項目にアタッチされたコマンドはコールされないことに注意してください。コマンドはすべて、-cc/changedCommand フラグを使ってアタッチします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alwaysCallChangeCommand (boolean): 変更の有無にかかわらず、変更コマンドを常に呼び出すかどうかを切り替えます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    beforeShowPopup (script): ドロップダウンメニューを表示する前にコールされるコールバックです。

    -----------------------------------------

    changeCommand (script): 新しい項目が選択されたときにコールされるコールバックを追加します。MELスクリプトでは、#1が新しく選択した項目の値に置き換えられます。Pythonでは、コールバックは1つの引数(新しく選択した項目の値)を受け入れるコール可能なオブジェクトである必要があります。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    itemListLong (boolean): メニュー項目のロングネームです。

    -----------------------------------------

    itemListShort (boolean): メニュー項目のショートネームです。

    -----------------------------------------

    label (string): ポップアップメニュー左側のオプションのラベルテキストです。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    maxVisibleItems (int): ポップアップメニューに表示される項目の最大数です。ポップアップに含まれている項目数がこれよりも多い場合は、スクロールバーが自動的に追加されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfItems (boolean): メニュー項目の数です。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    select (int): 現在のメニュー項目です。引数と戻り値は1から始まります。現在のメニュー項目は、有効になっているときのみ設定できることに注意してください。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (string): 現在のメニュー項目のテキストです。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: stringコントロールへのフル パス名です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def optionMenuGrp(adjustableColumn: int = 1,adjustableColumn2: int = 1,adjustableColumn3: int = 1,adjustableColumn4: int = 1,adjustableColumn5: int = 1,adjustableColumn6: int = 1,annotation: str = "",backgroundColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),changeCommand: str = "",columnAlign: Tuple[int, str] = tuple(1, ""),columnAlign2: Tuple[str, str] = tuple("", ""),columnAlign3: Tuple[str, str, str] = tuple("", "", ""),columnAlign4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAlign5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAlign6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnAttach: Tuple[int, str, int] = tuple(1, "", 1),columnAttach2: Tuple[str, str] = tuple("", ""),columnAttach3: Tuple[str, str, str] = tuple("", "", ""),columnAttach4: Tuple[str, str, str, str] = tuple("", "", "", ""),columnAttach5: Tuple[str, str, str, str, str] = tuple("", "", "", "", ""),columnAttach6: Tuple[str, str, str, str, str, str] = tuple("", "", "", "", "", ""),columnOffset2: Tuple[int, int] = tuple(1, 1),columnOffset3: Tuple[int, int, int] = tuple(1, 1, 1),columnOffset4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnOffset5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnOffset6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),columnWidth: Tuple[int, int] = tuple(1, 1),columnWidth1: int = 1,columnWidth2: Tuple[int, int] = tuple(1, 1),columnWidth3: Tuple[int, int, int] = tuple(1, 1, 1),columnWidth4: Tuple[int, int, int, int] = tuple(1, 1, 1, 1),columnWidth5: Tuple[int, int, int, int, int] = tuple(1, 1, 1, 1, 1),columnWidth6: Tuple[int, int, int, int, int, int] = tuple(1, 1, 1, 1, 1, 1),defineTemplate: str = "",docTag: str = "",dragCallback: str = "",dropCallback: str = "",enable: bool = False,enableBackground: bool = False,enableKeyboardFocus: bool = False,exists: bool = False,extraLabel: str = "",fullPathName: bool = False,height: int = 1,highlightColor: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),isObscured: bool = False,itemListLong: bool = False,itemListShort: bool = False,label: str = "",manage: bool = False,noBackground: bool = False,numberOfItems: bool = False,numberOfPopupMenus: bool = False,parent: str = "",popupMenuArray: bool = False,preventOverride: bool = False,rowAttach: Tuple[int, str, int] = tuple(1, "", 1),select: int = 1,statusBarMessage: str = "",useTemplate: str = "",value: str = "",visible: bool = False,visibleChangeCommand: str = "",width: int = 1) -> None:
    """
    どのグループ コマンドを使用しても、カラム 1 から始まるカラムに個々のコントロールが配置されます。各コントロール(カラム)のレイアウトは、-cw/columnWidth、-co/columnOffset、-cat/columnAttach、-cal/columnAlign、-adj/adjustableColumn の各フラグを使用してカスタマイズできます。既定では、カラムはオフセットなしで左に揃えられ、幅は 100 ピクセルです。どのグループでも、1 つのカラムだけが調整できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    adjustableColumn (int): レイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムの値は1から始まるインデックスです。直前の調整可能なカラムをオフにする引数として0を渡します。

    -----------------------------------------

    adjustableColumn2 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn3 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn4 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn5 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    adjustableColumn6 (int): 親のレイアウトのサイズ変更に従ってサイズを変化させるカラムを指定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    annotation (string): コントロールに文字列値で注釈を付けます。

    -----------------------------------------

    backgroundColor ([float, float, float]): コントロールのバックグラウンドカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。backgroundColorを設定する場合、enableBackgroundをfalseに指定していない限り、バックグラウンドは自動的に有効になります。

    -----------------------------------------

    changeCommand (script): 新しいオブジェクトを選択したときに実行されるコマンドです。

    -----------------------------------------

    columnAlign ([int, string]): 引数は、カラム番号、位置合わせタイプです。指定可能な位置合わせは、「left」、「right」、または「center」です。指定したカラムの位置合わせタイプを設定します。

    -----------------------------------------

    columnAlign2 ([string, string]): 2つのカラムのテキスト位置合わせを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign3 ([string, string, string]): 3つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign4 ([string, string, string, string]): 4つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign5 ([string, string, string, string, string]): 5つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAlign6 ([string, string, string, string, string, string]): 6つのカラムすべてのテキスト位置合わせを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「center」です。

    -----------------------------------------

    columnAttach ([int, string, int]): 引数は、カラム番号、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「left」、「right」、または「both」です。カラムのアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    columnAttach2 ([string, string]): 2つのカラムのアタッチメントタイプを設定します。カラムがちょうど2つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach3 ([string, string, string]): 3つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど3つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach4 ([string, string, string, string]): 4つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど4つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach5 ([string, string, string, string, string]): 5つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど5つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnAttach6 ([string, string, string, string, string, string]): 6つのカラムすべてのアタッチメントタイプを設定します。カラムがちょうど6つではない場合は、無視されます。有効な値は「left」、「right」、「both」です。

    -----------------------------------------

    columnOffset2 ([int, int]): このフラグは-columnAttach2フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。2つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach2フラグで指定したアタッチメントに基づいています。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnOffset3 ([int, int, int]): このフラグは-columnAttach3フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。3つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach3フラグで指定したアタッチメントに基づいています。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnOffset4 ([int, int, int, int]): このフラグは-columnAttach4フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。4つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach4フラグで指定したアタッチメントに基づいています。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnOffset5 ([int, int, int, int, int]): このフラグは-columnAttach5フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。5つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach5フラグで指定したアタッチメントに基づいています。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnOffset6 ([int, int, int, int, int, int]): このフラグは-columnAttach6フラグと一緒に使用します。そのフラグと一緒に使用しない場合、このフラグは無視されます。6つのカラムのオフセットを設定します。適用されるオフセットは、-columnAttach6フラグで指定したアタッチメントに基づいています。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    columnWidth ([int, int]): 引数は、カラム番号、カラム幅です。指定したカラムの幅を設定します。ここで、最初のパラメータがカラム(インデックスは1から始まる)を指定し、2つめのパラメータが幅を指定します。

    -----------------------------------------

    columnWidth1 (int): 第1カラムの幅を設定します。カラムがちょうど1つではない場合は、無視されます。

    -----------------------------------------

    columnWidth2 ([int, int]): 2つのカラムの幅を設定します。カラムがちょうど2つではない場合は、無視されます。

    -----------------------------------------

    columnWidth3 ([int, int, int]): 3つのカラムすべての幅を設定します。カラムがちょうど3つではない場合は、無視されます。

    -----------------------------------------

    columnWidth4 ([int, int, int, int]): 4つのカラムすべての幅を設定します。カラムがちょうど4つではない場合は、無視されます。

    -----------------------------------------

    columnWidth5 ([int, int, int, int, int]): 5つのカラムすべての幅を設定します。カラムがちょうど5つではない場合は、無視されます。

    -----------------------------------------

    columnWidth6 ([int, int, int, int, int, int]): 6つのカラムすべての幅を設定します。カラムがちょうど6つではない場合は、無視されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    docTag (string): コントロールにドキュメンテーションフラグを追加します。ドキュメンテーションフラグは、ディレクトリ構造になっています。(例:-dtrender/multiLister/createNode/material)

    -----------------------------------------

    dragCallback (script): 中マウスボタンを押すとコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalprocstring[]callbackName(string$dragControl,int$x,int$y,int$mods)procはドロップ先に転送される文字配列を返します。規則により、配列の先頭文字列はユーザ設定可能なメッセージタイプを表しています。アプリケーションで定義されたドラッグ元のコントロールは、このコールバックを無視する可能性があります。$modsで、キーモディファイアであるCTRLとSHIFTをテストできます。有効な値は、0==モディファイアなし、1==SHIFT、2==CTRL、3==CTRL+SHIFTです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defcallbackName(dragControl,x,y,modifiers):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「x」、「y」、「modifiers」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(x)d%(y)d%(modifiers)d'」)。

    -----------------------------------------

    dropCallback (script): ドラッグ＆ドロップ操作をドロップ位置で解放したときにコールされるコールバックを追加します。MELバージョンのコールバックの書式は次のとおりです。globalproccallbackName(string$dragControl,string$dropControl,string$msgs[],int$x,int$y,int$type)procは、ドラッグ元から転送される文字配列を受け取ります。msgs配列の先頭文字列はユーザ定義のメッセージタイプを表します。アプリケーションで定義されたドロップ先のコントロールでは、このコールバックが無視されることがあります。$typeの値は、1==移動、2==コピー、3==リンクのいずれかです。Pythonでも同様ですが、コールバックの指定方法が2つあります。お勧めの方法は、引数としてPython関数オブジェクトを渡すことです。この場合、Pythonコールバックの書式は次のようになります。defpythonDropTest(dragControl,dropControl,messages,x,y,dragType):この引数の値は、上記のMELバージョンの引数と同じです。Pythonでコールバックを指定するもう1つの方法では、実行する文字列を指定します。この場合、Pythonの標準的なフォーマット演算子を介して文字列に値が代入されます。このフォーマットの値は、キー「dragControl」、「dropControl」、「messages」、「x」、「y」、「type」と共に辞書で渡されます。dragControlの値は文字列で、その他の値は整数です(コールバック文字列の例:「print'%(dragControl)s%(dropControl)s%(messages)r%(x)d%(y)d%(type)d'」)。

    -----------------------------------------

    enable (boolean): コントロールの有効、無効です。既定ではtrueに設定されていて、コントロールは有効になっています。falseを指定するとコントロールはグレー表示になって無効になります。

    -----------------------------------------

    enableBackground (boolean): コントロールのバックグラウンドカラーを有効にします。

    -----------------------------------------

    enableKeyboardFocus (boolean): 有効にすると、[Tab]キーを押してコントロールに移動し、キーボードで値を選択することができます。有効でない場合は、マウスのみを使用できます。このフラグは通常、編集コントロールやリストコントロールなどで既定で使用されるコントロールから、キーボードフォーカスのサポートをオフにするために使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    extraLabel (string): 作成時にこのフラグを指定すると、オプションメニューの右側にラベルが追加されます。設定した文字列は、追加ラベルのテキストになります。

    -----------------------------------------

    fullPathName (boolean): すべての親を含むウィジェットのフルパス名を返します。

    -----------------------------------------

    height (int): コントロールの高さです。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    highlightColor ([float, float, float]): コントロールのハイライトカラーです。引数は、赤、緑、青のカラー成分に対応しています。それぞれの成分の値は、0.0～1.0です。

    -----------------------------------------

    isObscured (boolean): コントロールが実際に表示されるかどうかを返します。コントロールは、次の場合に隠れた状態になります。非表示の場合、別のコントロールで(完全に、または部分的に)ブロックされた場合、コントロールまたは親のレイアウトを制御できない場合、あるいはコントロールのウィンドウが非表示またはアイコン化されている場合。

    -----------------------------------------

    itemListLong (boolean): メニュー項目のロングネームを返します。

    -----------------------------------------

    itemListShort (boolean): メニュー項目のショートネームを返します。

    -----------------------------------------

    label (string): 作成時にこのフラグを指定すると、オプションメニューの左側にラベルが表示されます。設定した文字列は、ラベルテキストになります。

    -----------------------------------------

    manage (boolean): コントロールの状態を管理します。管理されていないコントロールは表示されず、画面の領域も占有しません。既定では、コントロールは管理できるように作成されます。

    -----------------------------------------

    noBackground (boolean): コントロールのバックグラウンドをクリア/リセットします。バックグラウンドは、trueを渡すと一切描画されず、falseを渡すと描画されます。このフラグの状態は、このコントロールの子に継承されます。

    -----------------------------------------

    numberOfItems (boolean): メニュー項目の数を返します。

    -----------------------------------------

    numberOfPopupMenus (boolean): このコントロールにアタッチされるポップアップメニューの数を返します。

    -----------------------------------------

    parent (string): コントロールの親のレイアウトです。

    -----------------------------------------

    popupMenuArray (boolean): このコントロールにアタッチされる全ポップアップメニューの名前を返します。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    rowAttach ([int, string, int]): 引数は、カラム、アタッチメントタイプ、オフセットです。指定可能なアタッチメントは、「top」、「bottom」、または「both」です。行全体のアタッチメントタイプとオフセットを指定します。

    -----------------------------------------

    select (int): インデックスで項目を選択します。最初の項目が1になります。

    -----------------------------------------

    statusBarMessage (string): マウスがコントロール上にある場合にステータスバーに表示する追加の文字列です。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    value (string): 値で項目を選択します。また、現在選択されている項目のテキストを返します。

    -----------------------------------------

    visible (boolean): コントロールの可視の状態です。既定では、コントロールは表示されます。コントロールの実際の外見も、その親レイアウトの可視の状態によって異なることに注意してください。

    -----------------------------------------

    visibleChangeCommand (script): コントロールの可視の状態が変更されたときに実行されるコマンドです。

    -----------------------------------------

    width (int): コントロールの幅を指定します。コントロールは親のレイアウトの条件によって無効にされない限り、このサイズを保持しようとします。

    -----------------------------------------

    Return Value:
    None: string作成時のコントロールのフル ネーム照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def popupMenu(allowOptionBoxes: bool = False,altModifier: bool = False,button: int = 1,ctrlModifier: bool = False,defineTemplate: str = "",deleteAllItems: bool = False,exists: bool = False,itemArray: bool = False,markingMenu: bool = False,numberOfItems: bool = False,parent: str = "",postMenuCommand: str = "",postMenuCommandOnce: bool = False,shiftModifier: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドはポップアップ メニューを作成し、親が指定されていない場合は現在のコントロールにアタッチします。既定では、ポップアップ メニューは右マウス ボタンで表示されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowOptionBoxes (boolean): メニューがオプションウィンドウのメニュー項目をサポートできるかどうかを指定します。オプションのフィールド項目をそれをサポートしていないメニューに追加すると、エラーになります。このフラグは照会が可能で、ポップアップメニューの作成時に指定する必要があります。既定値はfalseです。

    -----------------------------------------

    altModifier (boolean): ポップアップメニューを表示する際に、Altキーを押す必要があるときは、このフラグを指定します。

    -----------------------------------------

    button (int): ポップアップメニューを表示するボタンを指定します。有効な値は1～3です。マウスの左ボタンは1となります。

    -----------------------------------------

    ctrlModifier (boolean): ポップアップメニューを表示する際にCtrlモディファイアキーを押す必要があるときは、このフラグを指定します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    deleteAllItems (boolean): このメニューにあるすべての項目を削除します。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    itemArray (boolean): メニュー項目名の文字配列を返します。

    -----------------------------------------

    markingMenu (boolean): このポップアップメニューのマーキングメニューの状態を設定します。

    -----------------------------------------

    numberOfItems (boolean): メニューにあるオブジェクトの数を返します。

    -----------------------------------------

    parent (string): ポップアップメニューを表示するコントロールを指定します。

    -----------------------------------------

    postMenuCommand (script): ポップアップメニューが表示されるときに、実行されるスクリプトを指定します。

    -----------------------------------------

    postMenuCommandOnce (boolean): -pmc/postMenuCommandを一度だけ起動されるように指定します。既定値はfalseで、ポップアップメニューが表示されるたびに-pmc/postMenuCommandが起動されます。

    -----------------------------------------

    shiftModifier (boolean): ポップアップメニューを表示する際にShiftモディファイアキーを押す必要があるときは、このフラグを指定します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringメニューへのフル パス名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def radioMenuItemCollection(defineTemplate: str = "",exists: bool = False,gl: bool = False,parent: str = "",useTemplate: str = "") -> None:
    """
    radioMenuItemCollection を作成します。ラジオ メニュー項目コレクション オブジェクトにラジオ メニュー項目をアタッチし、ラジオ ボタンの動作を取得してください。-p/parent フラグで親を指定しない場合、現在のメニューがラジオ メニュー項目コレクションの親になります。ラジオ メニュー項目コレクションはメニューの子なので、メニューが削除されると削除されます。-g/global フラグを使用しない場合は、コレクションを複数のウィンドウにスパンさせることもできます。この場合、コレクションには親メニューが含まれず、必要なくなったら deleteUIコマンドでコレクションを明示的に削除する必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    gl (boolean): コレクションが親メニューを持たないように設定します。グローバルコレクションは明示的に削除する必要があります。

    -----------------------------------------

    parent (string): コレクションの親です。コレクションは、親と一緒に削除されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: stringコレクションのフル パス名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def saveMenu() -> None:
    """
    このコマンドを使用して、メニューの内容を保存し、メニューの別のインスタンスを後から再作成できるようにします。このコマンドは、スクリプトとして実行する場合にオリジナル メニューに含まれるメニュー項目をリビルドするファイルを書き出します。ファイル名は、ユーザのマーキング メニューのプリファレンス ディレクトリからの相対位置で表されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string保存されたファイルの名前です。
    """
    pass

    
def annotate(point: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),text: str = "") -> None:
    """
    このコマンドを使って、指定したポイントの指定したオブジェクトにアタッチする注釈を作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    point ([linear, linear, linear]): 注釈テキストの中心となるポイントを指定します。

    -----------------------------------------

    text (string): 注釈のテキストを指定します。

    -----------------------------------------

    Return Value:
    None: string追加された注釈
    """
    pass

    
def autoPlace(useMouse: bool = False) -> None:
    """
    現在のモデリング ペインの中心のポイントを取って、ライブ サーフェスに投影します。ポイントは 3 次元で返されます。um/useMouse フラグが設定されている場合、モデル ペインの中心ではなく、現在のマウスの位置が使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    useMouse (boolean): アクティブビューの中心ではなく、現在のマウスの位置を使用します。

    -----------------------------------------

    Return Value:
    None: float[]3D 空間での配置場所
    """
    pass

    
def buttonManip(icon: str = "") -> None:
    """
    このコマンドは、ボタン マニピュレータを作成します。このマニピュレータは空間内に位置し、位置決めのために 3 ポイント マニピュレータを持っています。マニピュレータの上部をクリックすると、1 番目の引数によって定義されたコマンドが実行されます。このコマンドは、作成されたときのマニピュレータに関連付けられています。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    icon (string): マニピュレータを表すアイコンを指定します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def callbacks(addCallback: str = "",clearAllCallbacks: bool = False,clearCallbacks: bool = False,describeHooks: bool = False,dumpCallbacks: bool = False,executeCallbacks: bool = False,hook: str = "",listCallbacks: bool = False,owner: str = "",removeCallback: str = "") -> None:
    """
    このコマンドでは、Maya UI の作成時、キーの時間にコールバックを追加して UI を拡張できます。標準の Maya フックおよびコンテキストに応じてコールバックに渡す引数は、以下の「describeHooks」 UI を拡張するプラグインを追加するサード パーティもカスタム フックを追加できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addCallback (script): 指定したフックにコールバックを追加します。コールバックを追加する際にはオーナーも指定する必要があります。

    -----------------------------------------

    clearAllCallbacks (boolean): すべてのフックおよびオーナーのすべてのコールバックをクリアします。これは、Mayaおよび他のサードパーティが登録したすべてのコールバックに影響するため、通常プラグインの開発およびテスト時のみ使用します。

    -----------------------------------------

    clearCallbacks (boolean): 指定したオーナーのコールバックをすべてクリアします。フックを指定した場合は、そのフックのコールバックとオーナーのみがクリアされます。

    -----------------------------------------

    describeHooks (boolean): 標準のMayaフックをリストします。以下にフック、およびそれに関連付けられた引数と戻り値を示します。サードパーティによって追加されたカスタムフックはリストには含まれていません。hyperShadePanelBuildCreateMenuこのフックは、ハイパーシェードパネルの作成メニューにコンテンツを追加するためにコールされます。これは、標準のMayaノードエントリの作成後にコールされます。このコールバックには、引数や戻り値はありません。適切なMayaUIの外観を保持するには、menuItem-dividertrueを使用し、これらのコールバックが返される直前にメニュー項目分割を追加する必要があります。hyperShadePanelBuildCreateSubMenuこのフックは、標準のMayaノードとカスタムレンダラシェーディングノードを一緒にリストしない分類文字列を取得するためにコールされます。このコールバックには引数はありません。戻り値:次のような分類文字列rendernode/myrendererhyperShadePanelPluginChangeこのフックは、ハイパーシェードパネルを再構築する必要があることをMayaに通知する、プラグイン変更イベント(ロード/アンロード)が発生するとコールされます。classification(文字列):プラグインノードの分類文字列(別のプラグインのものである可能性もあります)changeType(文字列):loadPluginまたはunloadPluginのいずれ戻り値:(int)プラグインがこの分類のノードを対象としており、ハイパーシェードの再構築が必要な場合は0以外createRenderNodeSelectNodeCategoriesこのフックは、[レンダーノードの作成(CreateRenderNode)]ダイアログの構築時に、サードパーティのノードが既定で選択されることを許可する場合にコールされます。標準のフラグ形式は、-allWithMyRendererUpで、選択項目はコールバックのツリーリスタで設定できます。このコールバックには戻り値はありません。flag(文字列):[レンダーノードの作成(CreateRenderNode)]ダイアログコマンドに渡される、先頭のマイナス(-)を除去したフラグtreeLister(文字列):影響を受けるツリーリスタウィジェットたとえば、次のようなコールバックになります。globalprocmyRendererCreateRenderNodeSelectNodeCategoriesCallback(string$flag,string$treeLister){if($flag=="allWithMyRendererUp"){treeLister-e-selectPath"myrenderer"$treeLister;}}createRenderNodePluginChangeこのフックは、[レンダーノードの作成(CreateRenderNode)]ダイアログを閉じる必要があるかどうかを判断するプラグインの変更イベントが発生したときにコールされます。classification(文字列):プラグインノードの分類文字列(別のプラグインのものである可能性もあります)戻り値:(int)プラグインがこの分類のノードを対象としており、[レンダーノードの作成(CreateRenderNode)]ダイアログを閉じる必要がある場合は0以外renderNodeClassificationこのフックは、カスタムレンダラシェーディングノード用の分類文字列を取得するためにコールされます。これは、指定したノードタイプがプラグインレンダラに属するかどうかを判断するために使用されます。このコールバックには引数はありません。戻り値:次のような分類文字列rendernode/myrenderercreateRenderNodeCommandこのフックは、プラグインレンダラに、レンダラノードtreeListerおよびノードエディタからノードを作成する独自のコマンドを登録する機会を与えるためにコールされます。コールバックでは、問題のノードタイプの分類から自身のタイプであるかどうかを判断する必要があります。該当する場合、そのタイプの新しいノードを作成する適切なコマンドを返します。postCommand(文字列):作成コマンドの後に実行するコマンドtype(文字列):nodeType戻り値:(文字列)MEL作成コマンドbuildRenderNodeTreeListerContentこのフックは、プラグインレンダラに、レンダラノードツリーリスタにそのコンテンツを追加する機会を与えるためにコールされます。renderNodeTreeLister(文字列):レンダラノードツリーリスタpostCommand(文字列):作成後に実行するコマンドfilterString(文字列):フィルタのスペース区切りのリストAETemplateCustomContentこのフックは、ソースがAEdependNodeTemplateのノードにアトリビュートエディタのコンテンツを追加する機会をプラグインに与えるためにコールされます。nodeName(文字列):アトリビュートエディタが構築されているノードの名前firstConnectedShaderこのフックは、指定したシェーディングエンジンに接続された一次カスタムシェーダを判断するためにコールされます。nodeName(文字列):シェーディングエンジンの名前returns(文字列):存在する場合、カスタムシェーダの名前allConnectedShadersこのフックは、指定したシェーディングエンジンに接続されているすべてのシェーダを判断するためにコールされます。nodeName(文字列):シェーディングエンジンの名前戻り値(文字列):接続されているカスタムシェーダのコロン区切りのリスト(shader1:shader2:shader3)renderLayerPresetMenuこのフックはrenderLayerノードにプリセットを追加する機会をプラグインに与えるためにコールされます。nodeName(文字列):renderLayerノードの名前addBakingMenuItemsこのフックは、グローバルの[レンダー(Render)]>[ライティング/シェーディング(Lighting/Shading)]メニューにベイクメニュー項目を追加する機会をプラグインに与えるためにコールされます。menuItemAnchor(文字列):後ろに新しいベイクメニュー項目を挿入するmenuItemの名前。addVertexBakingMenuItemsこのフックは、グローバルの[ポリゴン(Polygon)]>[カラー(Color)]メニューにベイクメニュー項目を追加する機会をプラグインに与えるためにコールされます。addPrelightMenuItemsこのフックは、グローバルの[ポリゴン(Polygon)]>[カラーセットエディタ(ColorSetEditor)]メニューにプリライティングメニュー項目を追加する機会をプラグインに与えるためにコールされます。addRMBBakingMenuItemsこのフックは、右マウスボタンメニューにベイクメニュー項目を追加する機会をプラグインに与えるためにコールされます。objectName(文字列):右マウスボタンイベントが発生したオブジェクトの名前addMayaRenderingPreferencesこのフックはMayaの[レンダリングプリファレンス(RenderingPreferences)]セクションにカスタムプリファレンスを追加する機会をプラグインに与えるためにコールされます。updateMayaRenderingPreferencesこのフックはMayaの[レンダリングプリファレンス(RenderingPreferences)]セクションのカスタムプリファレンスを更新する機会をプラグインに与えるためにコールされます。addMayaMuscleMenuItemsこのフックは、Mayaマッスルの[ディスプレイスメント(Displace)]メニューにメニュー項目を追加する機会をプラグインに与えるためにコールされます。menuItemAnchor(文字列):後ろに新しいMayaマッスルメニュー項目を挿入するmenuItemの名前。addMayaMuscleShelfButtonsこのフックは、Mayaマッスルシェルフに項目を追加する機会をプラグインに与えるためにコールされます。addBackburnerRendererMenuItemsこのフックは、Mayaの利用可能なレンダラのBackburnerリストに項目を追加する機会をプラグインに与えるためにコールされます。注:追加したmenuItemの名前は、レンダラと同等にショートネームにする必要があります。例:Mayaソフトウェアレンダラによって「sw」という名前のmenuItemが追加されます。provideAETemplateForNodeTypeこのフックは、対応するAE'nodeType'Templateプロシージャを持たないノードにUIテンプレートを提供する機会をプラグインに与えるためにコールされます。nodeType(文字列):AEが構築されているノードのタイプ戻り値(文字列):要求されたノードタイプのAETemplateとして使用するMELコマンドまたはプロシージャの名前AEnewMultiHandlerこのフックは、マルチアトリビュートにUI作成ハンドラを提供する機会をプラグインに与えるためにコールされます。nodeName(文字列):AEが構築されているノードの名前atributeName(文字列):マルチアトリビュートの名前uiName(文字列):アトリビュートのUI名changedCommand(文字列):マルチアトリビュートの値を変更したときに実行されるMELコマンドまたはプロシージャelementIndexString(文字列):マルチアトリビュートの要素があるインデックスのコロン区切りのリスト戻り値(文字列):コールバックでアトリビュートを処理した場合、作成した最上位のUI要素のフルネームを返す必要があります。そうでない場合は、空の文字列を返す必要があります。AEreplaceMultiHandlerこのフックは、マルチアトリビュートに更新ハンドラを提供する機会をプラグインに与えるためにコールされます。layoutName(文字列):マルチアトリビュートを表すMayaUIコンポーネントの明確に定義された名前nodeName(文字列):AEが構築されているノードの名前atributeName(文字列):マルチアトリビュートの名前changedCommand(文字列):マルチアトリビュートの値を変更したときに実行されるMELコマンドまたはプロシージャelementIndexString(文字列):マルチアトリビュートの要素があるインデックスのコロン区切りのリスト戻り値(整数):コールバックでマルチアトリビュートを処理した場合は1、Mayaで既定の処理を提供する必要がある場合は0を返します。AEnewAttributeHandlerこのフックは、アトリビュートにUI作成ハンドラを提供する機会をプラグインに与えるためにコールされます。nodeName(文字列):AEが構築されているノードの名前atributeName(文字列):アトリビュートの名前uiName(文字列):アトリビュートのUI名changedCommand(文字列):アトリビュートの値を変更したときに実行されるMELコマンドまたはプロシージャ戻り値(文字列):コールバックでアトリビュートを処理した場合、作成した最上位のUI要素のフルネームを返す必要があります。そうでない場合は、空の文字列を返す必要があります。AEreplaceAttributeHandlerこのフックは、アトリビュートに更新ハンドラを提供する機会をプラグインに与えるためにコールされます。nodeName(文字列):AEが構築されているノードの名前atributeName(文字列):アトリビュートの名前changedCommand(文字列):アトリビュートの値を変更したときに実行されるMELコマンドまたはプロシージャ戻り値(整数):コールバックでアトリビュートを処理した場合は1、Mayaで既定の処理を提供する必要がある場合は0を返します。provideClassificationStringsこのフックは、「shader/surface」分類ネームスペースにノードを追加するすべてのサードパーティが指定する必要があります。戻り値(文字列):さまざまなプラグインノードの分類を表すコロン区切りのリストprovideClassificationExclusionStringsこのフックは、nodeTreeListerカテゴリから除外する必要がある分類のリストを提供する機会をプラグインに与えるためにコールされます。たとえば、プラグインは、「material」と「legacy」の両方に分類されたノードを「material」カテゴリから除外することができます。classification(文字列):nodeTreeBuilderが照会している分類戻り値(文字列):nodeTreeBuilderが照会している分類から除外する必要があるさまざまな分類を表すコロン区切りのリストprovideClassificationStringsForFilteredTreeListerこのフックは「createAssignNewMaterialTreeLister」によってコールされ、ツリーリスタビルダに渡される分類フィルタにアペンドする機会をプラグインに与えます。新しい分類がそれぞれ空白で区切られている文字列を返す必要があります。currentFilterString(文字列):現在の分類を表す、空白で区切られた文字列nodeCanBeUsedAsMaterialこのフックはRMBの[お気に入りのマテリアルの割り当て]メニューで使用され、マテリアルとして使用できるシェーディングノードを定義します。ノードをマテリアルノードとして使用できる場合は1、できない場合は0を返す必要があります。nodeId(文字列):照会するシェーディングノードのノードIDnodeOwner(文字列):ノードが属するプラグインの名前addHeaderContentToMayaLambertianShadersAEこのフックは、Mayaのランベルトから生じるシェーダのアトリビュートエディタのヘッダーにコンテンツを追加する機会をプラグインに与えるためにコールされます。nodeName(文字列):アトリビュートエディタが構築されているノードの名前provideNodeToAttrConnectionこのフックは、ノードが入力アトリビュートに接続される場合に、使用する出力アトリビュートをプラグインで指定するためにコールされます。入力アトリビュートタイプが与えられた場合、一致するタイプの出力アトリビュートを返す必要があります。アトリビュートタイプが指定されない場合(空の文字列)、任意のタイプの希望する出力アトリビュートを返すことができます。一致するタイプの出力アトリビュートが使用できない場合は、空の文字列が返されます。nodeType(文字列):照会されたノードのノードタイプattributeType(文字列):入力アトリビュートのデータタイプreturns(文字列):使用する出力アトリビュート名provideNodeToNodeConnectionこのフックは、ノード間の接続がなされた場合に、どのアトリビュートを接続するべきかをプラグインが提供する機会を与えるためにコールされます。ソースおよび目的のアトリビュートはどちらも、「src1:dst1:src2:dst2:src3:dst3」のようなコロン区切りのリストで返される必要があります。srcType(文字列):ソースノードのノードタイプdstType(文字列):目的のノードのノードタイプreturns(文字列):ソースおよび目的のアトリビュート名のコロン区切りのリストprovideOutputAttributeNameForTextureNodeこのフックは、テクスチャノードに異なる出力アトリビュート名を提供する機会をプラグインに与えるためにコールされます。このフックが提供されない場合、「outColor」が使用されます。nodeName(文字列):照会されるテクスチャノードの名前戻り値(文字列):テクスチャノードの出力アトリビュート名addItemsToHypergraphNodePopupMenuこのフックは、ハイパーグラフノードポップアップメニューに項目を追加する機会をプラグインに与えるためにコールされます。nodeName(文字列):ハイパーグラフノードメニューが構築されているノードの名前addItemsToRenderLayerEditorPopupMenuこのフックは、レンダーレイヤエディタポップアップメニューに項目を追加する機会をプラグインに与えるためにコールされます。layerName(string):ポップアップメニューが構築されているレンダーレイヤの名前preventMaterialDeletionFromCleanUpSceneCommandこのフックはcleanUpSceneコマンドによってコールされ、マテリアルノードが使用中で削除してはならないことを伝える機会をプラグインに与えます。フックは各シェーダインスタンスのプラグ/接続ペアごとに1回コールされます。shader(文字列):削除するシェーダノードの名前plug(文字列):照会されたプラグの名前connection(文字列):照会された接続の名前connectNodeToNodeOverrideCallbackこのフックは、ドラッグ＆ドロップの動作を再定義する機会をプラグインに与えるためにコールされます。srcNode(文字列):ソースノード(ドラッグしたノード)の名前dstNode(文字列):目的のノード(ドロップ先のノード)の名前戻り値(整数):この接続の結果として通常生じる操作をMayaが実行する必要がある場合は1を返します。オーバーライドしてカスタムの動作を提供する場合は0を返します。prepareRenderChangedこのフックは、prepareRenderコマンドで走査セットを編集した後に呼び出されます。enableRenderPassMenuOfRenderViewこのフックは、レンダービューのレンダーパスメニュー(ファイル>レンダーパスのロード(File>LoadRenderPass))を有効にする必要があることをMayaに指示する機会をプラグインに与えるためにコールされます。「addRenderPassMenuItemsToRenderView」を使用すると、このメニューに項目を追加することができます。戻り値(整数):プラグインでレンダービューのレンダーパスメニューを有効にする必要がある場合は1を返します。そうでない場合は0を返します。addItemsToRenderPassMenuOfRenderViewこのフックは、レンダービューの「レンダーパス」メニュー(ファイル>レンダーパスのロード(File>LoadRenderPass))にメニュー項目を追加する機会をプラグインに与えるためにコールされます。「enableRenderPassMenuOfRenderView」を使用すると、レンダービューのレンダーパスメニューを有効にすることができます。addItemsToRMBMenuOfTreeListerこのフックは、ツリーリスタにリストされているノードの右マウスボタンメニューを生成する機会をプラグインに与えるためにコールされます。プラグインは、右マウスボタンメニューに項目を追加する前に、メニュー項目分割(menuItem-dividertrueを使用)を追加する必要があります。nodeType(文字列):右マウスボタンメニューが構築されるツリーリスタノードのノードタイプscriptCommand(文字列):右マウスボタンメニューが構築されるツリーリスタノードに関連付けられたスクリプトコマンド戻り値(整数):Mayaが現在のノードタイプのメニューに独自の項目をアペンドする必要がある場合は0を返します。これは、プラグインが明示的に関係していないすべてのノードタイプの戻り値である必要があります。Mayaが現在のノードタイプのメニューに項目を追加しない場合は1を返します。注:ツリーリスタのお気に入り(Favorites)セクションの管理に関連するすべてのメニュー項目は、戻り値に関係なく常に右マウスボタンメニューに追加されます(これらは特殊なケースとして扱われます)。saveCustomNodePresetAttributesこのフックは、保存されるノードプリセットファイルに追加のコマンドを保存する機会をプラグインに与えるためにコールされます。presetNodeToSave(文字列):保存されるプリセットノードの名前。戻り値(文字列):現在のpresetNode保存イベントのnodePreset-customフラグにアペンドされるMELスクリプトを生成するために使用するカスタムプロシージャ(-customフラグのフォーマットの詳細についてはnodePresetコマンドのマニュアルを参照)addItemToFileMenuこのフックは、メインのファイルメニューにメニュー項目を追加する機会をプラグインに与えるためにコールされます。addItemToCreateLightMenuこのフックは、ライト作成(createlight)メニューにメニュー項目を追加する機会をプラグインに与えるためにコールされます。textureReloadこのフックは、テクスチャファイルを参照するすべてのノードを更新する機会をプラグインに与えるためにコールされます。ファイル(文字列):リロードするテクスチャファイルのパス。renderSettingsBuiltこのフックは、レンダー設定(RenderSettings)ウィンドウを作成した後に呼び出されます。rendererAddOneTabToGlobalsWindowCreateProcこのフックは、レンダラが、統一レンダーグローバル(RenderGlobals)ウィンドウ(レンダー設定ウィンドウ)に、レンダラ特有のタブを追加する機会を許可するために呼び出されます。createProc(文字列):タブのコンテンツの作成に使用するプロシージャの名前です。

    -----------------------------------------

    dumpCallbacks (boolean): すべてのフックおよびオーナーによって登録されたすべてのコールバックのリストを取得できます。デバッグに便利です。

    -----------------------------------------

    executeCallbacks (boolean): 指定したフックのコールバックを、実行時に追加の引数を各コールバックに渡しながら実行します。実行された各コールバックの戻り値を含む配列(MEL)またはリスト(Python)を返します。コールバックが値を返さない場合、配列は空の文字列(MEL)またはNone(Python)になります。

    -----------------------------------------

    hook (string): コールバックを登録するフックの名前。

    -----------------------------------------

    listCallbacks (boolean): 指定したフック名のコールバックのリストを取得します。オーナーを指定した場合は、指定したフックのコールバックとオーナーのみがリストされます。

    -----------------------------------------

    owner (string): コールバックを登録するオーナーの名前。これは通常はプラグイン名になります。

    -----------------------------------------

    removeCallback (script): 指定したフック名の既存のコールバックを除去します。コールバックを除去する際にはオーナーも指定する必要があります。

    -----------------------------------------

    Return Value:
    None: string[]コマンドの結果
    """
    pass

    
def disableIncorrectNameWarning() -> None:
    """
    Maya ファイルを開くときに不正なノード名について知らせる警告のダイアログ ボックスを無効にします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def grabColor(hsvValue: bool = False,rgbValue: bool = False) -> None:
    """
    このコマンドはカーソルを変更し、マウス ボタンを押すと終了になるモードの状態を入力します。ボタンを押したときにカーソルの下にあるピクセルのカラー コンポーネント値を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    hsvValue (boolean): 返される3つのfloat値で、色相、彩度、明度のカラーコンポーネントを指定します。

    -----------------------------------------

    rgbValue (boolean): 返される3つのfloat値で、赤、緑、青のカラー成分を指定します。

    -----------------------------------------

    Return Value:
    None: float[]
    """
    pass

    
def headsUpDisplay(allDescendants: bool = False,allowOverlap: bool = False,attachToRefresh: bool = False,attributeChange: str = "",block: int = 1,blockAlignment: str = "",blockSize: str = "",command: str = "",conditionChange: str = "",conditionFalse: str = "",conditionTrue: str = "",connectionChange: str = "",dataAlignment: str = "",dataFontSize: str = "",dataWidth: int = 1,decimalPrecision: int = 1,disregardIndex: bool = False,event: str = "",exists: bool = False,getOption: str = "",gridColor: int = 1,label: str = "",labelFontSize: str = "",labelWidth: int = 1,lastOccupiedBlock: int = 1,layoutVisibility: bool = False,listConditions: bool = False,listEvents: bool = False,listHeadsUpDisplays: bool = False,listNodeChanges: bool = False,listPresets: bool = False,name: str = "",nextFreeBlock: int = 1,nodeChanges: str = "",padding: int = 1,preset: str = "",refresh: bool = False,remove: bool = False,removeID: int = 1,removePosition: Tuple[int, int] = tuple(1, 1),resetNodeChanges: str = "",scriptResult: bool = False,section: int = 1,setOption: Tuple[str, str] = tuple("", ""),showGrid: bool = False,visible: bool = False) -> None:
    """
    このコマンドは、3D ビューポート上の非アクティブ 2D オーバーレイ プレーンに配置されるヘッドアップ ディスプレイ(HUD)オブジェクトを作成します。ユーザ スクリプトで指定する、実際的な情報を提供するために使用します。ビューポートに表示されるテキスト文字列は、このコマンドの各種フラグを使用してフォーマットします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allDescendants (boolean): このフラグは-ac/attributeChangeフラグと一緒に使用した場合のみに使用できます。これを指定し、HUDが複合アトリビュートまたはマルチアトリビュートにアタッチされている場合、指定したアトリビュートとその子孫に対する変更に基づいてHUDコマンドが実行されます。

    -----------------------------------------

    allowOverlap (boolean): 重なっているセクションの幅や制限に関わらず、ヘッドアップディスプレイを表示します(詳細については、-s/sectionフラグの説明を参照してください)。

    -----------------------------------------

    attachToRefresh (boolean): コマンドをリフレッシュプロセスにアタッチします。このスクリプトは待機リフレッシュが実行される度に実行され、直後に更新されます。

    -----------------------------------------

    attributeChange (string): 指定したアトリビュートの値が変わった場合に、コマンドを実行します。文字列はディペンデンシーノードと特定のアトリビュートの両方を識別する必要があります。ディペンデンシーノードが削除された場合、(削除を元に戻すことができても)このHUDは除去されます。

    -----------------------------------------

    block (int): セクション内で、HUDが属する個々のブロックを表します。各セクションは一列のブロックから構成されます。各セクションに含まれるブロックの総数は異なります。各セクションに表示されるブロック数は、各セクションにあるブロックのサイズとウィンドウの現在のサイズによって決まります。ブロック数は0から始まり、必要に応じて増加します。結果として生じる各HUDの出力文字列は、次に挙げるjustify、padding、labelWidth、dataWidthなどのフォーマットフラグで定義するパラメータで、各ブロック内でフォーマットされます。レイアウトは下図のとおりです。__________________________________________||||||||P|J|LW|DWX|J|P||_____|_____|________|_________|_____|_____|P=幅のサブブロック、パディングJ=ブロック全体の行端揃えLW=幅のサブブロック、labelWidthDWX=特定数の幅のサブブロック、特定数のデータ要素用のdataWidthブロックレイアウト上図は、各ブロックのレイアウトを示しています。幅:パディング、labelWidth、dataWidthはそれぞれのフラグで定義されます。ブロックのレイアウトの詳細:まずブロックのパディングが計算されます。次に上図の2つの主要サブブロック(LWとDWX)がブロックの左右マージンの間で位置揃えされ、一緒に配置されます。主要サブブロックの幅はその内容に関わらず、変化しません。上図で唯一特有のサブブロックはX(特定数)のサブブロックを表すDWXサブブロックのみで、Xはコマンドが返すデータ要素の数です。ブロックの位置決め上部セクションのブロックは主要ビューポートの上端から始まり、下部セクションは下端から始まります。ブロックは、ビューポートの中間から動的に非表示になります。したがって、比較的多いブロック数はビューポートへと引き寄せられません。最後に、単一ブロックを占有できるHUDの数は一つです。占有されているブロックにHUDをさらに配置しようとするとエラーになります。HUDを配置する際の注意点です。

    -----------------------------------------

    blockAlignment (string): ブロックの、その列内での位置合わせを指定します。使用可能な位置合わせは「center」、「left」、「right」で、既定は「left」です。

    -----------------------------------------

    blockSize (string): 各ブロックの高さを設定します。選択できる高さは、small、medium、largeです。ピクセル単位では、それぞれ20、35、50ピクセルに相当します。

    -----------------------------------------

    command (script): 目的の情報を得るために、実行するプロシージャまたはスクリプトを指定します。値または値の配列を返す必要があります。コマンドが値を返さない場合は、警告メッセージが表示されます。このフラグは、conditionフラグ、eventフラグ、attachToRefreshフラグなどのトリガフラグと一緒に使用する必要があります。

    -----------------------------------------

    conditionChange (string): 指定した条件が変わった場合に、データをサンプリングするためにコマンドを実行するトリガです。指定した条件は、定義済みまたはユーザ定義のブーリアンである必要があります。存在する条件のリストを取得するには、-lc/listConditionsフラグを使います。

    -----------------------------------------

    conditionFalse (string): 指定した条件がfalseになった場合に、データをサンプリングするためにコマンドを実行するトリガです。指定した条件は、定義済みまたはユーザ定義のブーリアンである必要があります。存在する条件のリストを取得するには、-lc/listConditionsフラグを使います。

    -----------------------------------------

    conditionTrue (string): 指定した条件がtrueになった場合に、データをサンプリングするためにコマンドを実行するトリガです。指定した条件は、定義済みまたはユーザ定義のブーリアンである必要があります。存在する条件のリストを取得するには、-lc/listConditionsフラグを使います。

    -----------------------------------------

    connectionChange (string): 指定したアトリビュートの関連付けが変わった場合に、このコマンドを実行します。文字列はディペンデンシーノードと特定のアトリビュートの両方を識別する必要があります。ディペンデンシーノードが削除された場合、(削除を元に戻すことができても)このHUDは除去されます。

    -----------------------------------------

    dataAlignment (string): データブロックとデータテキストの、HUDブロック内での位置合わせを指定します。使用可能な位置合わせは「left」と「right」で、既定は「left」です。

    -----------------------------------------

    dataFontSize (string): 返されたデータのフォントサイズを設定します。使用可能なサイズはsmallとlargeです。

    -----------------------------------------

    dataWidth (int): データ値を保持する仮想「テキストボックス」のピクセル幅を指定します。配列など複数の値を返すコマンドの場合、データ要素ごとに指定した幅の「テキストボックス」が作成されます。ラベルのデータ幅が「テキストボックス」の幅より大きい場合、「テキストボックス」の寸法に合わせてデータ値が切り捨てられます(ブロックのレイアウトを確認する場合は、-blockフラグの説明を参照してください)。

    -----------------------------------------

    decimalPrecision (int): コマンドが返す浮動小数点値の小数精度を設定します。精度値の有効範囲は、1～8です。

    -----------------------------------------

    disregardIndex (boolean): このフラグは-ac/attributeChangeフラグと一緒に使用した場合のみに使用できます。これを指定し、HUDがマルチ(インデックス付き)アトリビュートにアタッチされている場合、変更されたマルチアトリビュートに関わらず、HUDコマンドが実行されます。

    -----------------------------------------

    event (string): 指定したイベントが発生した場合に、コマンドを実行します。指定したイベントは、定義済みのMayaイベントである必要があります。存在するイベントのリストを取得するには、-le/listEventsフラグを使用します。

    -----------------------------------------

    exists (boolean): このフラグは、指定したオブジェクトがヘッドアップディスプレイのレイアウトに存在するかどうかを返します。このコマンドにオブジェクト名を提供する必要があります。このフラグは、他のフラグと一緒に使用することができません。

    -----------------------------------------

    getOption (string): このフラグは、文字列で指定したオプションの値を返します。オプションのリストについては、setOptionを参照してください。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    gridColor (int): このフラグは、非アクティブなカラーパレットを使って、グリッドラインのカラーを指定します。1～23までのインデックス番号を指定すると、パレットから対応するカラーが選択されます。

    -----------------------------------------

    label (string): 目的情報の左側に表示されるテキスト文字列です。

    -----------------------------------------

    labelFontSize (string): ラベルのフォントサイズを設定します。使用可能なサイズはsmallとlargeです。

    -----------------------------------------

    labelWidth (int): ラベルを保持する仮想「テキストボックス」のピクセル幅を指定します。この「テキストボックス」の内容は左揃えにされます。ラベルの実際の幅が「テキストボックス」の幅を超える場合、「テキストボックス」の寸法に合わせてラベルが切り捨てられます(ブロックのレイアウトを確認する場合は、-blockフラグの説明を参照してください)。

    -----------------------------------------

    lastOccupiedBlock (int): 指定したセクションで、最後に占有されたブロックのブロック番号を返します。

    -----------------------------------------

    layoutVisibility (boolean): ヘッドアップディスプレイのレイアウトの可視性(オンかオフ)を切り替えます。これは、個々のヘッドアップディスプレイの可視性を修正するのではなく、レイアウトをオフにして、ヘッドアップディスプレイが画面に表示されないようにします。カスタマイズしたヘッドアップディスプレイの可視設定は維持されます。このフラグは、editフラグとqueryフラグのみと一緒に使用できます。

    -----------------------------------------

    listConditions (boolean): このフラグは、適用できるすべての条件の名前を含む文字配列を返します。

    -----------------------------------------

    listEvents (boolean): このフラグは、使用可能なすべてのイベントの名前を含む文字配列を返します。

    -----------------------------------------

    listHeadsUpDisplays (boolean): このフラグは、既存の全HUDの名前を含む文字配列を返します。

    -----------------------------------------

    listNodeChanges (boolean): このフラグは、使用可能なすべてのノード変更の名前を含む文字配列を返します。

    -----------------------------------------

    listPresets (boolean): このフラグは、使用可能なすべてのプリセットHUDの名前を含む文字配列を返します。

    -----------------------------------------

    name (string): このフラグは、ヘッドアップディスプレイ名の編集のみを許可します。

    -----------------------------------------

    nextFreeBlock (int): 指定したセクションで、空いている最初のブロックのブロック番号を返します。

    -----------------------------------------

    nodeChanges (string): このフラグは、選択ベースのトリガ(すなわち、「SelectionChanged」や「SomethingSelected」)と一緒に使用した場合のみに動作し、それ以外の場合は無視されます。このフラグはHUDスクリプトをアタッチし、選択したノードに対する特定の変更が行われたときに実行します。このフラグを使用して、nodeChangeを設定します。nodeChangeをリセットするには、-rnc/resetNodeChangesフラグを使います。すべての使用可能なノード変更のリストを表示するには、-lnc/listNodeChangesフラグを使います。使用可能なノード変更のリストとそれらの機能を次に記します。attributeChange:このスクリプトは、現在選択されているノードのすべてのアトリビュート変更に対応します。connectionChange:このスクリプトは、現在選択されているノードのすべての接続変更に対応します。instanceChange:このスクリプトは、現在選択されているノードのすべてのインスタンス変更に対応します。このフラグは照会モードで、すべてのnodeChangesの値を対(nodeChangeの名前に続きその値)で返します。警告:(パフォーマンス警告)対象のノード変更がHUDスクリプトによって引き起こされた場合、nodeChangeトリガを選択ベースのトリガにアタッチするとパフォーマンスが著しく低下することがあります。したがって、HUDコマンドやスクリプトを簡潔にし、用途をデータの読み出しに限定するように努めてください。アトリビュートの修正、接続やインスタンスの作成は、パフォーマンスの低下につながります。

    -----------------------------------------

    padding (int): ブロックの左右マージンの幅を指定します。既定値は15ピクセルです。

    -----------------------------------------

    preset (string): この設定を使用して、通常のMELコマンドやスクリプトでは取得できない特別なデータを読み出すHUDを含む、特定の定義済みHUDを選択します。このフラグは、コマンドとtriggerフラグの組み合わせとは相互排他的です。ただしプリセットはblockalignment、label、dataFontSizeなど、その他すべてのheadsUpDisplayアトリビュートフラグと動作します(以下に記されたフラグを除く)。使用可能なプリセットのリストを取得するには、このコマンドの-lp/listPresetsフラグを使います。使用可能なプリセットの説明を次に記します。cameraNamesHUDが寄せているビューごとに、ビューが使用しているカメラ名をデータブロック内に返します。polyVertsカメラから見える頂点の数に関する3つの値をデータブロック内に返します。第1の値:カメラから見えるアクティブと非アクティブな頂点の数を表します。第2の値:カメラから見えるアクティブオブジェクトのみにある頂点の数を表します。第3の値:カメラから見えるアクティブな頂点の数を表します。polyEdgesカメラから見えるエッジの数に関する3つの値をデータブロック内に返します。3つの値の順序は、polyVertsプリセットと同様です。polyFacesカメラから見えるフェースの数に関する3つの値をデータブロック内に返します。3つの値の順序は、polyVertsプリセットと同様です。polyUVsカメラから見えるUVの数に関する3つの値をデータブロック内に返します。3つの値の順序は、polyVertsプリセットと同様です。polyTrianglesカメラから見える三角の数に関する3つの値をデータブロック内に返します。3つの値の順序は、polyVertsプリセットと同様です。materialLoadingCountマテリアルのロード数を返します。これはリフレッシュごとに更新されます。textureLoadingCountテクスチャのロード数を返します。これはリフレッシュごとに更新されます。frameRateフレームレートと「fps」文字列の両方を含む単一の文字列をデータブロック内に返します。これはリフレッシュごとに更新されます。viewAxisHUD内のグリッド軸の向きを描画します。これはリフレッシュごとに更新されます。このプリセットはすべてのアトリビュートフラグに対応しますが、プリセットに影響を与えるのは、blockalignmentとblocksizeなどのブロックアトリビュート関連のフラグに限定されます。このプリセットのブロック寸法は、blockSize-「large」、blockWidth-「50」で、ピクセルの領域は50x50になります。distanceFromCameraビューのカメラから、ビュー内で選択したオブジェクトが含まれるバウンディングボックスの中心までの距離をデータブロック内に返します。

    -----------------------------------------

    refresh (boolean): このフラグは、指定したヘッドアップディスプレイの要素を強制的にリフレッシュし、表示される値を更新します。このフラグは、他のフラグと一緒に使用することができません。

    -----------------------------------------

    remove (boolean): このコマンドは、指定したHUD名の、指定したHUDオブジェクトを除去します。このフラグはその他すべてのフラグをオーバーライドし、他の除去フラグとは相互排他的です。

    -----------------------------------------

    removeID (int): このコマンドは、指定したHUDオブジェクトの、作成時に割り当てられる、指定したHUDのID番号を除去します。このフラグはその他すべてのフラグをオーバーライドし、他の除去フラグとは相互排他的です。

    -----------------------------------------

    removePosition ([int, int]): このコマンドは、HUDレイアウトにある特定のブロック位置のコンテンツを除去します。このフラグはその他すべてのフラグをオーバーライドし、他の除去フラグとは相互排他的です。このフラグの構文は、-removePosition/rp[section][block]です。

    -----------------------------------------

    resetNodeChanges (string): このフラグは、指定したnodeChangeをfalseにリセットします。このフラグは、editフラグ下のみで動作します。詳細については、-nc/nodeChangesフラグの説明を参照してください。

    -----------------------------------------

    scriptResult (boolean): このフラグは照会フラグと一緒にのみ使用されます。このフラグで照会すると、HUDの最新の結果が返されます。

    -----------------------------------------

    section (int): HUDを表示させるセクションを定義します。画面は10セクションに分割されています。メインビューポートを分割する10の要素行列は、5列x2行で構成されます。セクションのレイアウトを以下に示します。________________________|||||||||||||0|1|2|3|4||||||||____|____|____|____|____||||||||||||||5|6|7|8|9||||||||____|____|____|____|____|各セクションは、上記のとおり0から9までの番号で表されます。たとえば、上列の左から2行目の場合、セクションは次のように定義されます。-sec1ヘッドアップディスプレイが重なり合って文字が煩雑になることを回避するため、それぞれの行には表示の優先順位が定義されていて、各セクションの表示にも優先順位が設定されています。この優先順位に従って、画面スペースが狭まって行のセクション幅が重なり合うと、HUDは優先順位が一番低いセクションを自動的に除去します。これらのセクションは非表示になり、除去されたことを伝える警告メッセージが表示されます。この処理は、最優先のセクションのみが残るまで継続されます。それぞれの行の優先順位は、次のように定義されます。上列の場合の例:セクション0が最優先され、セクション4が2番目と、外側のセクションの優先順位が最も高くなります。次にセクション2、続くセクション1と3の優先順位は等しく、共に優先順位が最も低くなります。この優先順位の構造は、下列にも適用されます。外側の2セクションが最優先され、中央のセクションが続き、残りの2セクションの優先順位が最も低くなります。つまりビューポートの幅が狭まって上列のセクションが重なり始めた場合、まずセクション1と3がビューから除去され、続いてセクション2が、最後にセクション4が除去されます。ブロックレイアウトについても、同様の説明が以下に記されています。

    -----------------------------------------

    setOption ([string, string]): このフラグは、先頭文字列で指定したオプションを編集します。現在のオプションは、スムーズメッシュプレビュー内のsmpPolyCount-「cage」または「smp」-ポリゴン数の表示を定義します。

    -----------------------------------------

    showGrid (boolean): このフラグは、HUDレイアウトのグリッドラインの表示を切り替えます。

    -----------------------------------------

    visible (boolean): ヘッドアップディスプレイのレイアウトの表示(オンかオフ)を切り替えます。

    -----------------------------------------

    Return Value:
    None: int定期的なコマンド実行のための、ヘッドアップ ディスプレイ(HUD)の ID 番号string|int|int[2]対応する除去コマンドのヘッドアップ ディスプレイの名前、ID またはセクション、ブロック値。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def headsUpMessage(horizontalOffset: int = 1,object: str = "",selection: bool = False,time: float = 1.0,uvTextureEditor: bool = False,verticalOffset: int = 1,viewport: bool = False) -> None:
    """
    このコマンドは 3D ビューでメッセージを描画します。メッセージは次のスクリーン リフレッシュで自動的に消去されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    horizontalOffset (int): このフラグを指定すると、メッセージはポイントから指定した距離(ピクセル)だけ右に表示されます。指定しないと、既定の水平オフセット値0ピクセルが使用されます。

    -----------------------------------------

    object (string): オブジェクトを指定すると、メッセージはオブジェクトのバウンディングボックスの中心点の真上に描画されます。このフラグを指定していないか、またはオブジェクトが見つからない場合は、メッセージは現在選択しているビューの中心に描画されます。

    -----------------------------------------

    selection (boolean): このフラグを指定すると、メッセージは現在選択しているオブジェクト間の中心に描画されます。objectフラグも指定されている場合は、このフラグは何もしません。

    -----------------------------------------

    time (float): このフラグを指定すると、メッセージは指定した時間数(秒数)だけ表示されます。指定しないと、既定の1.0秒が使用されます。

    -----------------------------------------

    uvTextureEditor (boolean): HUDは、UVテクスチャエディタに表示する必要がありますか?

    -----------------------------------------

    verticalOffset (int): このフラグを指定すると、メッセージはポイントから指定した距離(ピクセル)だけ上に表示されます。指定しないと、既定の垂直オフセット値0ピクセルが使用されます。

    -----------------------------------------

    viewport (boolean): HUDは、ビューポートに表示する必要がありますか?

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def hotkey(altModifier: bool = False,autoSave: bool = False,commandModifier: bool = False,ctrlModifier: bool = False,ctxClient: str = "",dragPress: bool = False,factorySettings: bool = False,isModifier: bool = False,keyShortcut: str = "",name: str = "",pressCommandRepeat: bool = False,releaseCommandRepeat: bool = False,releaseName: str = "",shiftModifier: bool = False,sourceUserHotkeys: bool = False) -> None:
    """
    このコマンドは、アプリケーション全体用の単一キーのホットキーを設定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    altModifier (boolean): 

    -----------------------------------------

    autoSave (boolean): trueに設定すると、終了するときに必ずホットキーが保存されます。falseの場合は、「savePrefs-hotkeys」を使用しないかぎり、ホットキーは保存されません。

    -----------------------------------------

    commandModifier (boolean): ホットキーを取得するには、コマンドキーを押す必要があります。これは、個別のコマンドキーを持つシステム上でのみ使用可能です。メニュー項目のアクセラレータキーが使用されている場合(menuItem-ke/keyEquivalent)、アクセラレータキーの設定がホットキー設定をオーバーライドすることに注意してください。

    -----------------------------------------

    ctrlModifier (boolean): ホットキーを取得するには、Ctrlキーを押す必要があります。メニュー項目のアクセラレータキーが使用されている場合(menuItem-ke/keyEquivalent)、アクセラレータキーの設定がホットキー設定をオーバーライドすることに注意してください。

    -----------------------------------------

    ctxClient (string): ホットキーのコンテキストを指定します。他のフラグと一緒に使用すると、特定のホットキーコンテキストでホットキーを変更したり、照会することができます。このフラグを指定しない場合は、グローバルホットキーコンテキストが考慮されます。ホットキーコンテキストでのホットキーの動作を確認するには、hotkeyCtxコマンドを調べてください。

    -----------------------------------------

    dragPress (boolean): ｔrueを指定すると、マニピュレータのドラッグ中にコマンドを実行できます。ただし、ツールコンテキストでこの操作が許可されている場合に限ります。このフラグは既定ではfalseです。

    -----------------------------------------

    factorySettings (boolean): ホットキーを初期の既定にリセットします。

    -----------------------------------------

    isModifier (boolean): このフラグは廃止されているので、使用しないでください。

    -----------------------------------------

    keyShortcut (string): どのキーを設定するかを指定します。キーは、単一のASCII文字(大文字と小文字は別の文字として設定できます)または特殊キーボード文字のキーワード文字列のいずれかである必要があります。有効なキーワードは、Up、Down、Right、Left、Home、End、Page_Up、Page_Down、Insert、Return、Space、F1～F12、Tab(モディファイヤが指定されている場合のみ機能します)、Delete、Backspace(モディファイヤが指定されている場合のみ機能します)です。

    -----------------------------------------

    name (string): キーを押したときに実行されるnamedCommandオブジェクトの名前です。

    -----------------------------------------

    pressCommandRepeat (boolean): trueを指定すると、コマンドrepeatLastが実行されてコマンドが繰り返されます。このフラグは既定ではfalseです。

    -----------------------------------------

    releaseCommandRepeat (boolean): trueを指定すると、コマンドrepeatLastが実行されてコマンドが繰り返されます。このフラグは既定ではfalseです。

    -----------------------------------------

    releaseName (string): キーを離したときに実行されるnamedCommandオブジェクトの名前です。

    -----------------------------------------

    shiftModifier (boolean): ホットキーを取得するには、Shiftキーを押す必要があります。

    -----------------------------------------

    sourceUserHotkeys (boolean): このフラグは現在サポートしていません。ユーザホットキーを読み込むには、hotkeySetコマンドでimportフラグを使用してください。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def hotkeyCheck(altModifier: bool = False,commandModifier: bool = False,ctrlModifier: bool = False,isRepeatable: bool = False,keyString: str = "",keyUp: bool = False,optionModifier: bool = False) -> None:
    """
    このコマンドは、指定したホットキーが nameCommand オブジェクトにマップされているかどうかをチェックします。マップされている場合は、nameCommand オブジェクトの注釈が返されます。マップされていない場合は、空の文字列が返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    altModifier (boolean): Altキーを押すかどうかを指定します。

    -----------------------------------------

    commandModifier (boolean): コマンドキーを押すかどうかを指定します。

    -----------------------------------------

    ctrlModifier (boolean): Ctrlキーを押すかどうかを指定します。

    -----------------------------------------

    isRepeatable (boolean): ホットキーが繰り返し可能である場合は、このフラグを指定します。

    -----------------------------------------

    keyString (string): チェックするキーです。

    -----------------------------------------

    keyUp (boolean): ホットキーをキーアップまたはキーダウンにするか(つまり離すか押すか)を指定します。

    -----------------------------------------

    optionModifier (boolean): optionキーを押すかどうかを指定します。

    -----------------------------------------

    Return Value:
    None: stringすべてのクライアント名を含みます(各クライアント名の後に、対応する nameCommand オブジェクトの注釈または空の文字列が続きます)。
    """
    pass

    
def hotkeyCtx(addClient: str = "",clientArray: bool = False,currentClient: str = "",insertTypeAt: Tuple[str, str] = tuple("", ""),removeAllClients: bool = False,removeClient: str = "",removeType: str = "",type: str = "",typeArray: bool = False,typeExists: str = "") -> None:
    """
    このコマンドは、アプリケーション全体のホットキー コンテキストを設定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addClient (string): 指定したホットキーコンテキストタイプにクライアントを関連付けます。このフラグは、コンテキストタイプを指定する「type」フラグと一緒に使用する必要があります。

    -----------------------------------------

    clientArray (boolean): ホットキーコンテキストタイプに関連付けられているすべてのコンテキストクライアントの配列を返します。このフラグは、コンテキストタイプを指定する「type」フラグと一緒に使用する必要があります。

    -----------------------------------------

    currentClient (string): 指定したホットキーコンテキストタイプの現在のクライアントです。このフラグは、コンテキストタイプを指定する「type」フラグと一緒に使用する必要があります。

    -----------------------------------------

    insertTypeAt ([string, string]): 指定したタイプの前に新しいホットキーコンテキストタイプを挿入します。最初の引数は既存のタイプを指定します。最初の引数が空の場合は、「グローバル」コンテキストタイプの前に新しいコンテキストタイプが挿入されます。2番目の引数は新しいコンテキストタイプの名前を指定します。

    -----------------------------------------

    removeAllClients (boolean): ホットキーコンテキストタイプに関連付けられているすべてのクライアントを除去します。このフラグは、コンテキストタイプを指定する「type」フラグと一緒に使用する必要があります。

    -----------------------------------------

    removeClient (string): ホットキーコンテキストタイプに関連付けられたクライアントを除去します。このフラグは、コンテキストタイプを指定する「type」フラグと一緒に使用する必要があります。

    -----------------------------------------

    removeType (string): 指定したホットキーコンテキストタイプを除去します。

    -----------------------------------------

    type (string): コンテキストタイプを指定します。「currentClient」、「addClient」、「removeClient」などの他のフラグと一緒に使用します。

    -----------------------------------------

    typeArray (boolean): すべてのホットキーコンテキストタイプの名前が優先順位の並び順で格納されている文字の配列を返します。

    -----------------------------------------

    typeExists (string): 指定したホットキーコンテキストタイプが存在するかどうかによって、trueまたはfalseを返します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def hotkeySet(current: bool = False,delete: bool = False,exists: bool = False,export: str = "",hotkeySetArray: bool = False,ip: str = "",rename: str = "",source: str = "") -> None:
    """
    Maya のホットキー設定を管理します。ホットキー設定にはホットキーとコマンドのマッピング情報が保持されます。既定のホットキー設定は、Maya 付属のホットキー設定です。これらはロックされていて、変更できません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    current (boolean): このホットキー設定を現在アクティブなホットキー設定として設定します。照会モードで、現在のホットキー設定の名前を返します。

    -----------------------------------------

    delete (boolean): ホットキー設定が存在する場合は、削除します。他のフラグは無視されます。削除操作に応じて、true|falseを返します。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかによって、trueまたはfalseを返します。他のフラグは無視されます。

    -----------------------------------------

    export (string): ホットキー設定を書き出します。この引数は、出力ファイルのフルパスを指定する場合に使用されます。

    -----------------------------------------

    hotkeySetArray (boolean): すべての既存ホットキー設定の名前が格納された文字配列を返します。

    -----------------------------------------

    ip (string): ホットキー設定を読み込みます。この引数は、読み込むホットキー設定ファイルのフルパスを指定する場合に使用します。

    -----------------------------------------

    rename (string): 既存のホットキーセットの名前を変更します。すべての空白は操作中に'_'に置換されます。

    -----------------------------------------

    source (string): 複製元のホットキー設定を指定します。フラグを指定しない場合は、現在アクティブなホットキー設定が使用されます。

    -----------------------------------------

    Return Value:
    None: stringホットキー設定の名前です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def inViewMessage(alpha: float = 1.0,assistMessage: str = "",backColor: int = 1,clear: str = "",dragKill: bool = False,fade: bool = False,fadeInTime: int = 1,fadeOutTime: int = 1,fadeStayTime: int = 1,font: str = "",fontSize: int = 1,frameOffset: int = 1,hide: bool = False,message: str = "",minimize: bool = False,position: str = "",restore: bool = False,show: bool = False,statusMessage: str = "",textAlpha: float = 1.0,textOffset: int = 1,uvEditor: bool = False) -> None:
    """
    ビュー内メッセージを表示するために使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alpha (float): メッセージボックスの最大アルファ透明度を設定します。

    -----------------------------------------

    assistMessage (string): 表示されるユーザサポートメッセージは、HTML形式にすることができます。

    -----------------------------------------

    backColor (uint): メッセージのバックグラウンドカラーを0xAARRGGBB形式で設定します。アルファは考慮されません。

    -----------------------------------------

    clear (string): 指定された位置のメッセージをクリアするには、このフラグを使用します。サポートされている位置は、-pos/positionフラグの場合と同じです。

    -----------------------------------------

    dragKill (boolean): メッセージをマウスのドラッグ操作で削除する必要がある場合は、このフラグを使用します。

    -----------------------------------------

    fade (boolean): 時間間隔の経過後にこのメッセージをフェードさせるかどうかを指定します。

    -----------------------------------------

    fadeInTime (uint): イメージがフェードインするのにかかる時間をミリ秒単位で設定します。

    -----------------------------------------

    fadeOutTime (uint): イメージがフェードアウトするのにかかる時間をミリ秒単位で設定します。

    -----------------------------------------

    fadeStayTime (uint): イメージが最大不透明度を維持する期間をミリ秒単位で設定します。

    -----------------------------------------

    font (string): メッセージにフォントを適用します(例:"Arial")。

    -----------------------------------------

    fontSize (uint): メッセージのフォントサイズを設定します。

    -----------------------------------------

    frameOffset (uint): ビューポートの端からどこまでメッセージを表示するかをピクセル単位で設定します。

    -----------------------------------------

    hide (boolean): すべてのメッセージを非表示にします。

    -----------------------------------------

    message (string): 表示されるメッセージは、HTML形式にすることができます。-amg/assistMessageと-smg/statusMessageによって継承された一般的なメッセージです。

    -----------------------------------------

    minimize (boolean): すべてのメッセージを最小化します。

    -----------------------------------------

    position (string): メッセージの位置は、アクティブなビューポートに対して相対的に表示されます。サポートされている位置は、です。"TopLeft""TopCenter""TopRight""midLeft""midCenter""midCenterTop""midCenterBot""midRight""botLeft""botCenter""botRight"

    -----------------------------------------

    restore (boolean): すべてのメッセージを復元します。

    -----------------------------------------

    show (boolean): すべてのメッセージを表示します。

    -----------------------------------------

    statusMessage (string): 表示されるステータス情報メッセージは、HTML形式にすることができます。

    -----------------------------------------

    textAlpha (float): メッセージ文の最大アルファ透明度を設定します。

    -----------------------------------------

    textOffset (uint): ビューポートの端からどこまで文字を表示するかをピクセル単位で設定します。

    -----------------------------------------

    uvEditor (boolean): アクティブなUVエディタビュー内にメッセージを表示します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def linearPrecision() -> None:
    """
    このコマンドは、インタフェースでの長さの文字列の表示を制御します。(linearField コマンドを参照してください)。これを設定すると、今後表示されるすべての長さの文字列が、指定した小数点以下の桁数を最大限に表示するようにフォーマットされます。可能な値は 0 ～ 6 です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def loadPrefObjects() -> None:
    """
    「userPrefObjects.ma」からプリファレンス ディペンデンシー ノードがロードされます。これが存在する場合は、ユーザのプリファレンス ディレクトリからロードされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: boolean成功の場合は true です。
    """
    pass

    
def loadUI(listTypes: bool = False,uiFile: str = "",uiString: str = "",verbose: bool = False,workingDirectory: str = "") -> None:
    """
    loadUI コマンドは Trolltech Qt Designer で作成したユーザ インタフェースのロードを可能にします。 一部の Qt クラスには同等の Maya クラスがあり、ウィジェットのクラスが認識されると、代わりに Maya の同等クラスが作成されます。 「-」から始まるウィジェットのダイナミック プロパティは MEL のフラグと値のペアとして扱われます。同様に、「+」から始まるダイナミック プロパティは Python のフラグと値のペアとして扱われます。これらのペアは、作成時にウィジェットに適用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    listTypes (boolean): 認識されたUIタイプと接続されたMayaコマンドのリストを返します。

    -----------------------------------------

    uiFile (string): ユーザインタフェースファイルをロードするためのフルパス

    -----------------------------------------

    uiString (string): フォーマットされた文字列からUIをロード

    -----------------------------------------

    verbose (boolean): 作成されたコントロールに関する追加の情報は出力されます。

    -----------------------------------------

    workingDirectory (string): 作業ディレクトリを設定し、ローダはこのディテクトリからの相対パスにてアイコンやリソースファイルなどのリソースを探します。

    -----------------------------------------

    Return Value:
    None: stringルート コントロールへのフル パス名
    """
    pass

    
def mayaDpiSetting(mode: int = 1,realScaleValue: bool = False,scaleValue: float = 1.0,systemDpi: bool = False) -> None:
    """
    システム DPI またはカスタム スケール設定に基づいて Maya インタフェースをスケーリングするか、スケーリングを行いません。Maya を再起動しないと、変更が有効にならないことにご注意ください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    mode (uint): インタフェースのスケーリングモードを指定します。0-システムDPIベースのスケーリング1-カスタムスケーリング(「-scaleValue」フラグとともにカスタムスケール値を指定する必要があります)2-スケーリングなし

    -----------------------------------------

    realScaleValue (boolean): これは、現在のスケーリングモードと定義されたスケール値に応じて実測スケール値を返す、照会モード専用のフラグです。モード0-現在のシステムDPIと既定のシステムDPIの比を示す、現在の実測スケール値を返します。モード1-定義されたスケール値に、現在のシステムDPIと既定のシステムDPIの比を掛けた積である、現在の実測スケール値を返します。モード2-常に1.0を返します(スケーリングモードがスケーリングなしの場合、実測スケールが100%であることを示します)。

    -----------------------------------------

    scaleValue (float): スケーリングモードが1の場合は、インタフェースのカスタムスケールを指定します。使用できる値は1.0、1.25、1.5、2.0です。照会モードの場合は、現在のスケーリングモードに応じてスケール値を返します。モード0-常に1.0(100%)を返します。モード1-使用されているカスタムスケール値を返します。モード2-常に値1.0(カスタムスケールなし)を返します。

    -----------------------------------------

    systemDpi (boolean): これは、現在のシステムDPI値を返す、照会モード専用のフラグです。

    -----------------------------------------

    Return Value:
    None: int照会されたスケール モードまたはシステム DPI 値float照会された定義済みスケールまたは実際のスケール照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def multiTouch(gestures: bool = False,trackpad: int = 1) -> None:
    """
    ジェスチャ(マルチタッチ)ライブラリとの対話に使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    gestures (boolean): マルチタッチジェスチャを有効/無効にします。

    -----------------------------------------

    trackpad (uint): トラックパッドモードを設定します。次の値を指定することができます。1-カーソルコントロールのみ2-マルチタッチジェスチャのみ3-カーソルとマルチタッチ注意:これは「Mac」専用のフラグです。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nameCommand(annotation: str = "",command: str = "",data1: str = "",data2: str = "",data3: str = "",default: bool = False,sourceType: str = "") -> str:
    """
    nameCommand オブジェクトが作成されます。それぞれの nameCommand オブジェクトは、ホットキーに割り当てることができます。割り当ててからホットキーを押す(ユーザ定義によっては、放す)ことで、nameCommand のコマンド文字列を実行することができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    annotation (string): コマンドの説明です。

    -----------------------------------------

    command (script): nameCommandが起動されたされたときに、実行されるコマンドです。

    -----------------------------------------

    data1 (string): 

    -----------------------------------------

    data2 (string): 

    -----------------------------------------

    data3 (string): これらはオプションのユーザ定義データ文字列で、nameCommandオブジェクトにアタッチされています。これらは、assignCommandコマンドを使って編集または照会することができます。

    -----------------------------------------

    default (boolean): このnameCommandが既定のコマンドであることを示します。既定のnameCommandはプリファレンスに保存されません。

    -----------------------------------------

    sourceType (string): コマンドスクリプトの言語タイプを設定します。必ず、-commandフラグとともに使用してください。有効な値は「mel」(既定で有効)と「python」です。

    -----------------------------------------

    Return Value:
    str: string作成された nameCommand オブジェクトの名前。
    """
    pass

    
def overrideModifier(clear: bool = False,press: str = "",release: str = "") -> None:
    """
    このコマンドで、システムの別の部分にモディファイヤ キーの動作を割り当てることができます。たとえば、モディファイヤ キーの代わりに、ホットキーや入力デバイスを使って同じアクションを実行することができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    clear (boolean): モディファイヤキーを強制しないでください。

    -----------------------------------------

    press (string): 次のモディファイヤを強制的に押します。有効な値は、「Alt」、「Ctrl」、「Shift」です。

    -----------------------------------------

    release (string): 次のモディファイヤを強制的に解放します。有効な値は、「Alt」、「Ctrl」、「Shift」です。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def saveAllShelves() -> None:
    """
    このコマンドは、指定したコントロール レイアウトの直接の子であるすべてのシェルフを prefs ディレクトリに書き込みます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: boolean成功の場合は true、それ以外の場合はエラー メッセージを生成して false を返します。
    """
    pass

    
def savePrefObjects() -> None:
    """
    このコマンドは、ユーザ プリファレンス ディレクトリの「userPrefObjects.ma」にプリファレンス ディペンデンシー ノードを保存します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: boolean成功の場合は true です。
    """
    pass

    
def savePrefs(colors: bool = False,general: bool = False,hotkeys: bool = False,menuSets: bool = False,plugins: bool = False,uiLayout: bool = False) -> None:
    """
    このコマンドは、プリファレンスをディスクに保存します。フラグを指定していない場合は、すべてのプリファレンス タイプを保存します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    colors (boolean): カラープリファレンスをディスクに保存します。

    -----------------------------------------

    general (boolean): 一般的なプリファレンスをディスクに保存します(optionVars)。

    -----------------------------------------

    hotkeys (boolean): ホットキーをディスクに保存します。

    -----------------------------------------

    menuSets (boolean): menuSetプリファレンスをディスクに保存します。

    -----------------------------------------

    plugins (boolean): プラグインのプリファレンスをディスクに保存します。

    -----------------------------------------

    uiLayout (boolean): 各ウィンドウのサイズと位置をディスクに保存します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def saveShelf() -> None:
    """
    このコマンドは指定されたシェルフ(1 番目の引数)を指定されたファイル(2 番目の引数)に保存します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: boolean成功の場合は true です。
    """
    pass

    
def scmh(absolute: bool = False,ignore: int = 1,quiet: bool = False,relative: bool = False) -> None:
    """
    現在のマニピュレータ ハンドルの値を設定します。ただし、UI ユニットでは(適切な場合)、構文は現在のマニピュレータ ハンドルのユニット タイプ(使用可能な場合)をハンドルするよう設定されています。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    absolute (boolean): 値は絶対値です。

    -----------------------------------------

    ignore (uint): これは、多目的のフラグで、1から始まる指数-thのエントリは無視されます。

    -----------------------------------------

    quiet (boolean): このフラグはすべてのエラーメッセージを表示しません。

    -----------------------------------------

    relative (boolean): 値は相対値です。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def setMenuMode() -> None:
    """
    オプションで、Maya のメイン ウィンドウのメニュー バーに新しいメニュー モードを設定します。現在のメニュー モードを返します。新しいメニュー モードを指定した場合は、前のメニュー モードを返します。Maya 8.0 以降、メニュー セットのアーキテクチャが変更され、この関数はメニュー セットをラベルとしてではなく、パラメータとして取るようになりました。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: stringMaya のメイン ウィンドウにあるメニュー バーの、現在のメニュー モードです
    """
    pass

    
def setNodeTypeFlag(display: bool = False,threadSafe: bool = False) -> None:
    """
    このコマンドは、指定したノード タイプにスタティック データを設定します。これは、ノード タイプのクラス全体に影響します。渡される引数は、ノード タイプの名前またはノード タイプのタグです。ノード タイプのタグは objectType コマンドで検索できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    display (boolean): ノードタイプをUIに表示するかどうかを設定します。falseに設定すると、ノードタイプはUIに表示されません。ディスプレイフラグの値を取得するための照会モードです。

    -----------------------------------------

    threadSafe (boolean): ビューポート2.0で平行DG評価オプションを使用している場合にノードタイプを評価するかどうかを設定します。ビューポート2.0で平行DG評価を使用している場合にノードタイプを評価すると、照会モードでは、trueを返します。

    -----------------------------------------

    Return Value:
    None: booleanコマンドは正常に処理されましたか?照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def setStartupMessage() -> None:
    """
    起動ウィンドウのメッセージを更新します。これは、「スプラッシュ スクリーン」としても知られる、アプリケーションの起動時に表示されるウィンドウです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def textManip(visible: bool = False) -> None:
    """
    テキスト マニピュレータを表示/非表示にします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    visible (boolean): テキストマニピュレータを表示/非表示にします。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def thumbnailCaptureComponent(capture: bool = False,capturedFrameCount: bool = False,closeCurrentSession: bool = False,delete: bool = False,endFrame: int = 1,fileDialogCallback: str = "",isSessionOpened: bool = False,launchedFromOptionsBox: bool = False,previewPath: bool = False,removeProjectThumbnail: str = "",save: str = "",startFrame: int = 1) -> None:
    """
    このコマンドは、シーンからサムネイル/シーケンスのプレイブラストを生成するために使用されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    capture (boolean): 現在のシーンのイメージのシーケンスをキャプチャするには、新しいコンポーネントを作成します。

    -----------------------------------------

    capturedFrameCount (boolean): 照会モード専用です。キャプチャされたフレームの数を返します。

    -----------------------------------------

    closeCurrentSession (boolean): 現在のサムネイルコンポーネントを削除します(プレビューイメージは破棄されます)。

    -----------------------------------------

    delete (boolean): 生成されたイメージシーケンスを削除し、現在のキャプチャセッションをプレビューします。

    -----------------------------------------

    endFrame (int): キャプチャされた終了フレームを設定します。-c/captureフラグが設定されている場合にのみ有効です。-sf/startFrameが設定されていて、-ef/endFrameが設定されていない場合、またはendFrameがstartFrameより小さい場合は、endFrameが自動的にstartFrameに設定されます。

    -----------------------------------------

    fileDialogCallback (string): MELのみ。キャプチャコンポーネントウィンドウを閉じた後にコールされるコールバックファイルダイアログを設定します。-c/captureフラグが設定されている場合にのみ有効です。

    -----------------------------------------

    isSessionOpened (boolean): サムネイルまたはプレイブラストのキャプチャセッションを現在実行している(既に開いていて、まだキャンセルまたは保存されていない)場合、trueを返します。

    -----------------------------------------

    launchedFromOptionsBox (boolean): オプションダイアログボックスを通してサムネイルキャプチャコンポーネントが起動されている場合は、trueを返します。それ以外の場合は、falseを返します。

    -----------------------------------------

    previewPath (boolean): 生成されたプレビューパス(生成されたシーケンスの最初のフレームを100x100ピクセルにサイズ変更)を返します。

    -----------------------------------------

    removeProjectThumbnail (string): 指定したプロジェクトファイルパスからキャプチャされたすべてのサムネイルまたはプレイブラストを削除します。

    -----------------------------------------

    save (string): 指定したファイルに対して生成されたイメージシーケンスをディスクに保存します。ファイルパスは絶対パスにする必要があります。

    -----------------------------------------

    startFrame (int): キャプチャされた開始フレームを設定します。-c/captureフラグが設定されている場合にのみ有効です。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    