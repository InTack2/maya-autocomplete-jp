
from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union, Text



def encodeString() -> None:
    """
    このアクションは文字列を取得して、別のコマンドに送る前に回避する必要があるキャラクタをエンコードします。このキャラクタには次のものが含まれます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def format(stringArg: str = "") -> None:
    """
    このコマンドは、フォーマット指定子を含むフォーマット文字列を取得します。フォーマット指定子には、表すパラメータに関する番号が関連付けられています。フォーマット文字列を変更するだけで、渡された値を他の言語用に順序を変更できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    stringArg (string): フォーマット文字列の引数を指定します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def sortCaseInsensitive() -> None:
    """
    このコマンドは、大文字と小文字を区別する方法で配列のすべての文字列をソートします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string[]ソートする文字列
    """
    pass

    
def stringArrayIntersector(allowDuplicates: bool = False,defineTemplate: str = "",exists: bool = False,intersect: Tuple[str] = tuple(""),reset: bool = False,useTemplate: str = "") -> str:
    """
    stringArrayIntersecto コマンドは、大きな文字配列を効率よくインターセクトすることを可能にするオブジェクトを作成および編集します。インターセクタ オブジェクトは、「これまでのインターセクト」の情報を維持し、新しい文字配列が -i/intersect フラグを使用して与えられたときに、インターセクトを更新します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowDuplicates (boolean): インターセクタを入力配列で複製させる(true)か、またはすべての複製エントリを単一の固有エントリに結合する(false)必要があります。このフラグは、インターセクタを初めて作成する場合に使用する必要があります。既定はfalseです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    intersect (string[]): インターセクタによって維持されている現在のインターセクトによって、指定した文字配列をインターセクトします。

    -----------------------------------------

    reset (boolean): インターセクタをリセットし、新しいインターセクトを開始します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    str: stringインターセクタの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def stringArrayIntersector(allowDuplicates: bool = False,defineTemplate: str = "",exists: bool = False,intersect: Tuple[str] = tuple(""),reset: bool = False,useTemplate: str = "") -> str:
    """
    stringArrayIntersecto コマンドは、大きな文字配列を効率よくインターセクトすることを可能にするオブジェクトを作成および編集します。インターセクタ オブジェクトは、「これまでのインターセクト」の情報を維持し、新しい文字配列が -i/intersect フラグを使用して与えられたときに、インターセクトを更新します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allowDuplicates (boolean): インターセクタを入力配列で複製させる(true)か、またはすべての複製エントリを単一の固有エントリに結合する(false)必要があります。このフラグは、インターセクタを初めて作成する場合に使用する必要があります。既定はfalseです。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    intersect (string[]): インターセクタによって維持されている現在のインターセクトによって、指定した文字配列をインターセクトします。

    -----------------------------------------

    reset (boolean): インターセクタをリセットし、新しいインターセクトを開始します。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    str: stringインターセクタの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def assignCommand(addDivider: str = "",altModifier: bool = False,annotation: str = "",command: str = "",commandModifier: bool = False,ctrlModifier: bool = False,data1: str = "",data2: str = "",data3: str = "",delete: int = 1,dividerString: str = "",enableCommandRepeat: bool = False,factorySettings: bool = False,index: int = 1,keyArray: bool = False,keyString: str = "",keyUp: bool = False,name: bool = False,numDividersPreceding: int = 1,numElements: bool = False,optionModifier: bool = False,sortByKey: bool = False,sourceUserCommands: bool = False) -> None:
    """
    このコマンドを使って、ホットキーを割り当てたり、指定したコマンド オブジェクトの内部配列を操作したりすることができます。配列の各オブジェクトには、参照に使う 1 から始まるインデックスが付いています。ホットキー エディタ(Hotkey Editor)でホットキーを割り当てできるので、通常の使用法では、このコマンドを直接使用する必要はありません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addDivider (string): 「annotateddivider」項目をコマンドリストの終わりにアペンドします。

    -----------------------------------------

    altModifier (boolean): このフラグはAltモディファイアをキーに使用するかどうかを指定します。

    -----------------------------------------

    annotation (string): この文字列は、コマンドを説明する英語名です。

    -----------------------------------------

    command (script): このオブジェクトが、キーまたはメニュー項目にマップされた場合に実行されるコマンドです。

    -----------------------------------------

    commandModifier (boolean): このフラグでは、Commandモディファイアをキーに使用するかどうかを指定します。これは、個別のコマンドキーがサポートされているシステム上でのみ使用可能です。

    -----------------------------------------

    ctrlModifier (boolean): このフラグはCtrlモディファイアをキーに使用するかどうかを指定します。

    -----------------------------------------

    data1 (string): オプション。ユーザ定義データ文字列はnameCommandオブジェクトにアタッチできます。

    -----------------------------------------

    data2 (string): オプション。ユーザ定義データ文字列はnameCommandオブジェクトにアタッチできます。

    -----------------------------------------

    data3 (string): オプション。ユーザ定義データ文字列はnameCommandオブジェクトにアタッチできます。

    -----------------------------------------

    delete (int): マネージャに大して位置インデックスでオブジェクトを削除するように通知します。

    -----------------------------------------

    dividerString (string): 渡されたインデックスが「divider」項目に対応する場合、ドライバの注釈が返されます。対応しない場合、ヌル文字列が返されます。

    -----------------------------------------

    enableCommandRepeat (boolean): このフラグは、コマンドの繰り返しが有効になっているかどうかを指定します。

    -----------------------------------------

    factorySettings (boolean): このフラグは、マネージャを工場出荷時設定にもどします。

    -----------------------------------------

    index (int): 操作対象のオブジェクトのインデックスです。インデックス値の範囲は、1から指定した数のコマンドオブジェクトまでです。

    -----------------------------------------

    keyArray (boolean): このフラグは、コマンドのすべてのホットキーを返します。

    -----------------------------------------

    keyString (string): これは、編集モードでコマンドを割り当てるためのキーを指定します。照会モードではこのフラグはキー文字列、モディファイアを返し、コマンドがkeyUpまたはkeyDownにマップされているかどうかを示します。

    -----------------------------------------

    keyUp (boolean): このフラグは、コマンドをkeyUpまたはkeyDownで実行するかどうかを指定します。

    -----------------------------------------

    name (boolean): コマンドオブジェクトの名前。

    -----------------------------------------

    numDividersPreceding (int): namedCommandオブジェクトCのインデックスが渡された場合、namedCommandsがカテゴリでソートされるときはこのフラグはCが付いた「divider」項目の数を返します。

    -----------------------------------------

    numElements (boolean): このコマンドはシステムのnamedCommandsの数を返します。このフラグには、インデックスを指定する必要がありません。

    -----------------------------------------

    optionModifier (boolean): このフラグでは、Optionモディファイアをキーに使用するかどうかを指定します。

    -----------------------------------------

    sortByKey (boolean): このキーは、マネージャにキーまたは作成順序でソートするように通知します。

    -----------------------------------------

    sourceUserCommands (boolean): このコマンドはユーザが指定したコマンドファイルを読み込みます。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def callbacks(addCallback: str = "",clearAllCallbacks: bool = False,clearCallbacks: bool = False,describeHooks: bool = False,dumpCallbacks: bool = False,executeCallbacks: bool = False,hook: str = "",listCallbacks: bool = False,owner: str = "",removeCallback: str = "") -> None:
    """
    このコマンドでは、Maya UI の作成時、キーの時間にコールバックを追加して UI を拡張できます。標準の Maya フックおよびコンテキストに応じてコールバックに渡す引数は、以下の「describeHooks」 UI を拡張するプラグインを追加するサード パーティもカスタム フックを追加できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addCallback (script): 指定したフックにコールバックを追加します。コールバックを追加する際にはオーナーも指定する必要があります。

    -----------------------------------------

    clearAllCallbacks (boolean): すべてのフックおよびオーナーのすべてのコールバックをクリアします。これは、Mayaおよび他のサードパーティが登録したすべてのコールバックに影響するため、通常プラグインの開発およびテスト時のみ使用します。

    -----------------------------------------

    clearCallbacks (boolean): 指定したオーナーのコールバックをすべてクリアします。フックを指定した場合は、そのフックのコールバックとオーナーのみがクリアされます。

    -----------------------------------------

    describeHooks (boolean): 標準のMayaフックをリストします。以下にフック、およびそれに関連付けられた引数と戻り値を示します。サードパーティによって追加されたカスタムフックはリストには含まれていません。hyperShadePanelBuildCreateMenuこのフックは、ハイパーシェードパネルの作成メニューにコンテンツを追加するためにコールされます。これは、標準のMayaノードエントリの作成後にコールされます。このコールバックには、引数や戻り値はありません。適切なMayaUIの外観を保持するには、menuItem-dividertrueを使用し、これらのコールバックが返される直前にメニュー項目分割を追加する必要があります。hyperShadePanelBuildCreateSubMenuこのフックは、標準のMayaノードとカスタムレンダラシェーディングノードを一緒にリストしない分類文字列を取得するためにコールされます。このコールバックには引数はありません。戻り値:次のような分類文字列rendernode/myrendererhyperShadePanelPluginChangeこのフックは、ハイパーシェードパネルを再構築する必要があることをMayaに通知する、プラグイン変更イベント(ロード/アンロード)が発生するとコールされます。classification(文字列):プラグインノードの分類文字列(別のプラグインのものである可能性もあります)changeType(文字列):loadPluginまたはunloadPluginのいずれ戻り値:(int)プラグインがこの分類のノードを対象としており、ハイパーシェードの再構築が必要な場合は0以外createRenderNodeSelectNodeCategoriesこのフックは、[レンダーノードの作成(CreateRenderNode)]ダイアログの構築時に、サードパーティのノードが既定で選択されることを許可する場合にコールされます。標準のフラグ形式は、-allWithMyRendererUpで、選択項目はコールバックのツリーリスタで設定できます。このコールバックには戻り値はありません。flag(文字列):[レンダーノードの作成(CreateRenderNode)]ダイアログコマンドに渡される、先頭のマイナス(-)を除去したフラグtreeLister(文字列):影響を受けるツリーリスタウィジェットたとえば、次のようなコールバックになります。globalprocmyRendererCreateRenderNodeSelectNodeCategoriesCallback(string$flag,string$treeLister){if($flag=="allWithMyRendererUp"){treeLister-e-selectPath"myrenderer"$treeLister;}}createRenderNodePluginChangeこのフックは、[レンダーノードの作成(CreateRenderNode)]ダイアログを閉じる必要があるかどうかを判断するプラグインの変更イベントが発生したときにコールされます。classification(文字列):プラグインノードの分類文字列(別のプラグインのものである可能性もあります)戻り値:(int)プラグインがこの分類のノードを対象としており、[レンダーノードの作成(CreateRenderNode)]ダイアログを閉じる必要がある場合は0以外renderNodeClassificationこのフックは、カスタムレンダラシェーディングノード用の分類文字列を取得するためにコールされます。これは、指定したノードタイプがプラグインレンダラに属するかどうかを判断するために使用されます。このコールバックには引数はありません。戻り値:次のような分類文字列rendernode/myrenderercreateRenderNodeCommandこのフックは、プラグインレンダラに、レンダラノードtreeListerおよびノードエディタからノードを作成する独自のコマンドを登録する機会を与えるためにコールされます。コールバックでは、問題のノードタイプの分類から自身のタイプであるかどうかを判断する必要があります。該当する場合、そのタイプの新しいノードを作成する適切なコマンドを返します。postCommand(文字列):作成コマンドの後に実行するコマンドtype(文字列):nodeType戻り値:(文字列)MEL作成コマンドbuildRenderNodeTreeListerContentこのフックは、プラグインレンダラに、レンダラノードツリーリスタにそのコンテンツを追加する機会を与えるためにコールされます。renderNodeTreeLister(文字列):レンダラノードツリーリスタpostCommand(文字列):作成後に実行するコマンドfilterString(文字列):フィルタのスペース区切りのリストAETemplateCustomContentこのフックは、ソースがAEdependNodeTemplateのノードにアトリビュートエディタのコンテンツを追加する機会をプラグインに与えるためにコールされます。nodeName(文字列):アトリビュートエディタが構築されているノードの名前firstConnectedShaderこのフックは、指定したシェーディングエンジンに接続された一次カスタムシェーダを判断するためにコールされます。nodeName(文字列):シェーディングエンジンの名前returns(文字列):存在する場合、カスタムシェーダの名前allConnectedShadersこのフックは、指定したシェーディングエンジンに接続されているすべてのシェーダを判断するためにコールされます。nodeName(文字列):シェーディングエンジンの名前戻り値(文字列):接続されているカスタムシェーダのコロン区切りのリスト(shader1:shader2:shader3)renderLayerPresetMenuこのフックはrenderLayerノードにプリセットを追加する機会をプラグインに与えるためにコールされます。nodeName(文字列):renderLayerノードの名前addBakingMenuItemsこのフックは、グローバルの[レンダー(Render)]>[ライティング/シェーディング(Lighting/Shading)]メニューにベイクメニュー項目を追加する機会をプラグインに与えるためにコールされます。menuItemAnchor(文字列):後ろに新しいベイクメニュー項目を挿入するmenuItemの名前。addVertexBakingMenuItemsこのフックは、グローバルの[ポリゴン(Polygon)]>[カラー(Color)]メニューにベイクメニュー項目を追加する機会をプラグインに与えるためにコールされます。addPrelightMenuItemsこのフックは、グローバルの[ポリゴン(Polygon)]>[カラーセットエディタ(ColorSetEditor)]メニューにプリライティングメニュー項目を追加する機会をプラグインに与えるためにコールされます。addRMBBakingMenuItemsこのフックは、右マウスボタンメニューにベイクメニュー項目を追加する機会をプラグインに与えるためにコールされます。objectName(文字列):右マウスボタンイベントが発生したオブジェクトの名前addMayaRenderingPreferencesこのフックはMayaの[レンダリングプリファレンス(RenderingPreferences)]セクションにカスタムプリファレンスを追加する機会をプラグインに与えるためにコールされます。updateMayaRenderingPreferencesこのフックはMayaの[レンダリングプリファレンス(RenderingPreferences)]セクションのカスタムプリファレンスを更新する機会をプラグインに与えるためにコールされます。addMayaMuscleMenuItemsこのフックは、Mayaマッスルの[ディスプレイスメント(Displace)]メニューにメニュー項目を追加する機会をプラグインに与えるためにコールされます。menuItemAnchor(文字列):後ろに新しいMayaマッスルメニュー項目を挿入するmenuItemの名前。addMayaMuscleShelfButtonsこのフックは、Mayaマッスルシェルフに項目を追加する機会をプラグインに与えるためにコールされます。addBackburnerRendererMenuItemsこのフックは、Mayaの利用可能なレンダラのBackburnerリストに項目を追加する機会をプラグインに与えるためにコールされます。注:追加したmenuItemの名前は、レンダラと同等にショートネームにする必要があります。例:Mayaソフトウェアレンダラによって「sw」という名前のmenuItemが追加されます。provideAETemplateForNodeTypeこのフックは、対応するAE'nodeType'Templateプロシージャを持たないノードにUIテンプレートを提供する機会をプラグインに与えるためにコールされます。nodeType(文字列):AEが構築されているノードのタイプ戻り値(文字列):要求されたノードタイプのAETemplateとして使用するMELコマンドまたはプロシージャの名前AEnewMultiHandlerこのフックは、マルチアトリビュートにUI作成ハンドラを提供する機会をプラグインに与えるためにコールされます。nodeName(文字列):AEが構築されているノードの名前atributeName(文字列):マルチアトリビュートの名前uiName(文字列):アトリビュートのUI名changedCommand(文字列):マルチアトリビュートの値を変更したときに実行されるMELコマンドまたはプロシージャelementIndexString(文字列):マルチアトリビュートの要素があるインデックスのコロン区切りのリスト戻り値(文字列):コールバックでアトリビュートを処理した場合、作成した最上位のUI要素のフルネームを返す必要があります。そうでない場合は、空の文字列を返す必要があります。AEreplaceMultiHandlerこのフックは、マルチアトリビュートに更新ハンドラを提供する機会をプラグインに与えるためにコールされます。layoutName(文字列):マルチアトリビュートを表すMayaUIコンポーネントの明確に定義された名前nodeName(文字列):AEが構築されているノードの名前atributeName(文字列):マルチアトリビュートの名前changedCommand(文字列):マルチアトリビュートの値を変更したときに実行されるMELコマンドまたはプロシージャelementIndexString(文字列):マルチアトリビュートの要素があるインデックスのコロン区切りのリスト戻り値(整数):コールバックでマルチアトリビュートを処理した場合は1、Mayaで既定の処理を提供する必要がある場合は0を返します。AEnewAttributeHandlerこのフックは、アトリビュートにUI作成ハンドラを提供する機会をプラグインに与えるためにコールされます。nodeName(文字列):AEが構築されているノードの名前atributeName(文字列):アトリビュートの名前uiName(文字列):アトリビュートのUI名changedCommand(文字列):アトリビュートの値を変更したときに実行されるMELコマンドまたはプロシージャ戻り値(文字列):コールバックでアトリビュートを処理した場合、作成した最上位のUI要素のフルネームを返す必要があります。そうでない場合は、空の文字列を返す必要があります。AEreplaceAttributeHandlerこのフックは、アトリビュートに更新ハンドラを提供する機会をプラグインに与えるためにコールされます。nodeName(文字列):AEが構築されているノードの名前atributeName(文字列):アトリビュートの名前changedCommand(文字列):アトリビュートの値を変更したときに実行されるMELコマンドまたはプロシージャ戻り値(整数):コールバックでアトリビュートを処理した場合は1、Mayaで既定の処理を提供する必要がある場合は0を返します。provideClassificationStringsこのフックは、「shader/surface」分類ネームスペースにノードを追加するすべてのサードパーティが指定する必要があります。戻り値(文字列):さまざまなプラグインノードの分類を表すコロン区切りのリストprovideClassificationExclusionStringsこのフックは、nodeTreeListerカテゴリから除外する必要がある分類のリストを提供する機会をプラグインに与えるためにコールされます。たとえば、プラグインは、「material」と「legacy」の両方に分類されたノードを「material」カテゴリから除外することができます。classification(文字列):nodeTreeBuilderが照会している分類戻り値(文字列):nodeTreeBuilderが照会している分類から除外する必要があるさまざまな分類を表すコロン区切りのリストprovideClassificationStringsForFilteredTreeListerこのフックは「createAssignNewMaterialTreeLister」によってコールされ、ツリーリスタビルダに渡される分類フィルタにアペンドする機会をプラグインに与えます。新しい分類がそれぞれ空白で区切られている文字列を返す必要があります。currentFilterString(文字列):現在の分類を表す、空白で区切られた文字列nodeCanBeUsedAsMaterialこのフックはRMBの[お気に入りのマテリアルの割り当て]メニューで使用され、マテリアルとして使用できるシェーディングノードを定義します。ノードをマテリアルノードとして使用できる場合は1、できない場合は0を返す必要があります。nodeId(文字列):照会するシェーディングノードのノードIDnodeOwner(文字列):ノードが属するプラグインの名前addHeaderContentToMayaLambertianShadersAEこのフックは、Mayaのランベルトから生じるシェーダのアトリビュートエディタのヘッダーにコンテンツを追加する機会をプラグインに与えるためにコールされます。nodeName(文字列):アトリビュートエディタが構築されているノードの名前provideNodeToAttrConnectionこのフックは、ノードが入力アトリビュートに接続される場合に、使用する出力アトリビュートをプラグインで指定するためにコールされます。入力アトリビュートタイプが与えられた場合、一致するタイプの出力アトリビュートを返す必要があります。アトリビュートタイプが指定されない場合(空の文字列)、任意のタイプの希望する出力アトリビュートを返すことができます。一致するタイプの出力アトリビュートが使用できない場合は、空の文字列が返されます。nodeType(文字列):照会されたノードのノードタイプattributeType(文字列):入力アトリビュートのデータタイプreturns(文字列):使用する出力アトリビュート名provideNodeToNodeConnectionこのフックは、ノード間の接続がなされた場合に、どのアトリビュートを接続するべきかをプラグインが提供する機会を与えるためにコールされます。ソースおよび目的のアトリビュートはどちらも、「src1:dst1:src2:dst2:src3:dst3」のようなコロン区切りのリストで返される必要があります。srcType(文字列):ソースノードのノードタイプdstType(文字列):目的のノードのノードタイプreturns(文字列):ソースおよび目的のアトリビュート名のコロン区切りのリストprovideOutputAttributeNameForTextureNodeこのフックは、テクスチャノードに異なる出力アトリビュート名を提供する機会をプラグインに与えるためにコールされます。このフックが提供されない場合、「outColor」が使用されます。nodeName(文字列):照会されるテクスチャノードの名前戻り値(文字列):テクスチャノードの出力アトリビュート名addItemsToHypergraphNodePopupMenuこのフックは、ハイパーグラフノードポップアップメニューに項目を追加する機会をプラグインに与えるためにコールされます。nodeName(文字列):ハイパーグラフノードメニューが構築されているノードの名前addItemsToRenderLayerEditorPopupMenuこのフックは、レンダーレイヤエディタポップアップメニューに項目を追加する機会をプラグインに与えるためにコールされます。layerName(string):ポップアップメニューが構築されているレンダーレイヤの名前preventMaterialDeletionFromCleanUpSceneCommandこのフックはcleanUpSceneコマンドによってコールされ、マテリアルノードが使用中で削除してはならないことを伝える機会をプラグインに与えます。フックは各シェーダインスタンスのプラグ/接続ペアごとに1回コールされます。shader(文字列):削除するシェーダノードの名前plug(文字列):照会されたプラグの名前connection(文字列):照会された接続の名前connectNodeToNodeOverrideCallbackこのフックは、ドラッグ＆ドロップの動作を再定義する機会をプラグインに与えるためにコールされます。srcNode(文字列):ソースノード(ドラッグしたノード)の名前dstNode(文字列):目的のノード(ドロップ先のノード)の名前戻り値(整数):この接続の結果として通常生じる操作をMayaが実行する必要がある場合は1を返します。オーバーライドしてカスタムの動作を提供する場合は0を返します。prepareRenderChangedこのフックは、prepareRenderコマンドで走査セットを編集した後に呼び出されます。enableRenderPassMenuOfRenderViewこのフックは、レンダービューのレンダーパスメニュー(ファイル>レンダーパスのロード(File>LoadRenderPass))を有効にする必要があることをMayaに指示する機会をプラグインに与えるためにコールされます。「addRenderPassMenuItemsToRenderView」を使用すると、このメニューに項目を追加することができます。戻り値(整数):プラグインでレンダービューのレンダーパスメニューを有効にする必要がある場合は1を返します。そうでない場合は0を返します。addItemsToRenderPassMenuOfRenderViewこのフックは、レンダービューの「レンダーパス」メニュー(ファイル>レンダーパスのロード(File>LoadRenderPass))にメニュー項目を追加する機会をプラグインに与えるためにコールされます。「enableRenderPassMenuOfRenderView」を使用すると、レンダービューのレンダーパスメニューを有効にすることができます。addItemsToRMBMenuOfTreeListerこのフックは、ツリーリスタにリストされているノードの右マウスボタンメニューを生成する機会をプラグインに与えるためにコールされます。プラグインは、右マウスボタンメニューに項目を追加する前に、メニュー項目分割(menuItem-dividertrueを使用)を追加する必要があります。nodeType(文字列):右マウスボタンメニューが構築されるツリーリスタノードのノードタイプscriptCommand(文字列):右マウスボタンメニューが構築されるツリーリスタノードに関連付けられたスクリプトコマンド戻り値(整数):Mayaが現在のノードタイプのメニューに独自の項目をアペンドする必要がある場合は0を返します。これは、プラグインが明示的に関係していないすべてのノードタイプの戻り値である必要があります。Mayaが現在のノードタイプのメニューに項目を追加しない場合は1を返します。注:ツリーリスタのお気に入り(Favorites)セクションの管理に関連するすべてのメニュー項目は、戻り値に関係なく常に右マウスボタンメニューに追加されます(これらは特殊なケースとして扱われます)。saveCustomNodePresetAttributesこのフックは、保存されるノードプリセットファイルに追加のコマンドを保存する機会をプラグインに与えるためにコールされます。presetNodeToSave(文字列):保存されるプリセットノードの名前。戻り値(文字列):現在のpresetNode保存イベントのnodePreset-customフラグにアペンドされるMELスクリプトを生成するために使用するカスタムプロシージャ(-customフラグのフォーマットの詳細についてはnodePresetコマンドのマニュアルを参照)addItemToFileMenuこのフックは、メインのファイルメニューにメニュー項目を追加する機会をプラグインに与えるためにコールされます。addItemToCreateLightMenuこのフックは、ライト作成(createlight)メニューにメニュー項目を追加する機会をプラグインに与えるためにコールされます。textureReloadこのフックは、テクスチャファイルを参照するすべてのノードを更新する機会をプラグインに与えるためにコールされます。ファイル(文字列):リロードするテクスチャファイルのパス。renderSettingsBuiltこのフックは、レンダー設定(RenderSettings)ウィンドウを作成した後に呼び出されます。rendererAddOneTabToGlobalsWindowCreateProcこのフックは、レンダラが、統一レンダーグローバル(RenderGlobals)ウィンドウ(レンダー設定ウィンドウ)に、レンダラ特有のタブを追加する機会を許可するために呼び出されます。createProc(文字列):タブのコンテンツの作成に使用するプロシージャの名前です。

    -----------------------------------------

    dumpCallbacks (boolean): すべてのフックおよびオーナーによって登録されたすべてのコールバックのリストを取得できます。デバッグに便利です。

    -----------------------------------------

    executeCallbacks (boolean): 指定したフックのコールバックを、実行時に追加の引数を各コールバックに渡しながら実行します。実行された各コールバックの戻り値を含む配列(MEL)またはリスト(Python)を返します。コールバックが値を返さない場合、配列は空の文字列(MEL)またはNone(Python)になります。

    -----------------------------------------

    hook (string): コールバックを登録するフックの名前。

    -----------------------------------------

    listCallbacks (boolean): 指定したフック名のコールバックのリストを取得します。オーナーを指定した場合は、指定したフックのコールバックとオーナーのみがリストされます。

    -----------------------------------------

    owner (string): コールバックを登録するオーナーの名前。これは通常はプラグイン名になります。

    -----------------------------------------

    removeCallback (script): 指定したフック名の既存のコールバックを除去します。コールバックを除去する際にはオーナーも指定する必要があります。

    -----------------------------------------

    Return Value:
    None: string[]コマンドの結果
    """
    pass

    
def commandEcho(addFilter: Tuple[str] = tuple(""),filter: Tuple[str] = tuple(""),lineNumbers: bool = False,state: bool = False) -> None:
    """
    このコマンドは、コマンド ウィンドウに何がエコーされるかを制御します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addFilter (string[]): このフラグを使用すると、すべてのコマンドのエコーが有効になっているときに、現在のフィルタされたコマンドのリストにフィルタをアペンドすることができます。filterフラグと同様に、コマンド名を部分的に指定し、addFilterエントリに指定した従属文字列で始まるすべてのコマンドをフィルタで除外することもできます。

    -----------------------------------------

    filter (string[]): このフラグを使用すると、すべてのコマンドのエコーが有効になっているときに、フィルタで不要なコマンドを取り除くことができます。コマンド名を部分的に指定し、フィルタエントリに指定した従属文字列で始まるすべてのコマンドをフィルタで除外こともできます。フィルタが空の場合は、コマンドウィンドウにすべてのコマンドがエコーされます。

    -----------------------------------------

    lineNumbers (boolean): trueの場合、エラーメッセージと警告メッセージにファイル名と行番号情報が表示されます。trueの場合、エラーメッセージと警告メッセージにファイル名と行番号情報が表示されません。

    -----------------------------------------

    state (boolean): trueの場合、すべてのコマンドがコマンドウィンドウにエコーされます。falseの場合、関連するコマンドだけがエコーされます。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def condition(delete: bool = False,dependency: str = "",initialize: bool = False,script: str = "",state: bool = False) -> None:
    """
    このコマンドは、MEL スクリプトを実行して true/false 値が計算される、新しい名前のついた条件オブジェクトを作成します。この新規の条件は、暗転の調整、他のスクリプトのコントロールなど様々な用途に使用することができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    delete (boolean): 条件を削除します。

    -----------------------------------------

    dependency (string): -dependencyフラグは、新しい条件を引き起こす別の条件を指定します。条件のいずれかに変化があった場合、その新たな状態のスクリプトが実行され、それに従ってこの条件の状態が設定されます。無限ループを定義することもできますが、ランタイムに捕捉され、適切に処理されます。

    -----------------------------------------

    initialize (boolean): 条件が作成され次第、そのスクリプトを強制的に実行し、条件を初期化します。このフラグが指定されていない場合、依存性のいずれかが起動されるまで、スクリプトは実行されません。

    -----------------------------------------

    script (string): 条件の新規の状態を決定するスクリプトです。

    -----------------------------------------

    state (boolean): 条件の状態を設定します。このフラグを使えば、手動でトリガする条件を作成できます。たとえば、依存性や新たな状態スクリプトを使わずに条件を作成することができます。この条件は、-st/stateフラグに対する応答状態を変更するだけです。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def connectControl(fileName: bool = False,index: int = 1,preventContextualMenu: bool = False,preventOverride: bool = False) -> None:
    """
    このコマンドは、1 つまたは複数のディペンデンシー ノードのアトリビュートの 1 番目の引数として指定された UI ウィジェットをアタッチします。このアトリビュートまたはノードは最初から存在している必要はなく、必要に応じてルックアップされます。フラグが指定されていない場合、このコマンドは次のようなコントロールに対して有効です。floatField、floatScrollBar、floatSlider、intField、intScrollBar、intSlider、floatFieldGrp、intFieldGrp、checkBox、radioCollection、optionMenu。index フラグと一緒に使用すると、その他のすべてのグループの個々のコンポーネントで機能します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    fileName (boolean): このフラグによって、接続はファイル名として扱われ、内部から外部へのファイル名表示の変換は、データがコピーされる際に行われます。これはTfieldコントロールへの接続のみにあてはまります。

    -----------------------------------------

    index (uint): このフラグで、多数の異なるコントロールを含むグループから、サブコントロールを見つけることができます。たとえば、floatFieldGrpの1つのフィールドを接続することができます。この場合、存在する可能性のあるテキストラベルを含む、グループのひとつひとつのメンバーを数に入れなければなりません。たとえば、ラベルの付いたチェックボックスのグループがあるとすると、そのラベルはインデックス1、そして最初のチェックボックスはインデックス2と数えられます(インデックスは1ベースです)。

    -----------------------------------------

    preventContextualMenu (boolean): trueの場合、このフラグは関連付けられたコントロールアトリビュートにおけるマウスの右ボタンメニューをブロックします。

    -----------------------------------------

    preventOverride (boolean): trueの場合、コントロールの右マウスボタンメニューを使用したコントロールアトリビュートのオーバーライドは無効になります。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def deleteUI(collection: bool = False,control: bool = False,editor: bool = False,layout: bool = False,menu: bool = False,menuItem: bool = False,panel: bool = False,panelConfig: bool = False,radioMenuItemCollection: bool = False,toolContext: bool = False,uiTemplate: bool = False,window: bool = False) -> None:
    """
    ウィンドウやコントロールなどの UI オブジェクトが削除されます。レイアウトやウィンドウが削除されると、その子もすべて削除されます。フラグを使用する場合は、削除するすべてのオブジェクトが特定タイプである必要があります。このコマンドの編集と照会はできません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    collection (boolean): 削除するオブジェクト名をラジオコレクションかツールコレクションに限定します。

    -----------------------------------------

    control (boolean): 削除するオブジェクト名をコントロールに限定します。

    -----------------------------------------

    editor (boolean): 削除するオブジェクト名をエディタに限定します。

    -----------------------------------------

    layout (boolean): 削除するオブジェクト名をレイアウトに限定します。

    -----------------------------------------

    menu (boolean): 削除するオブジェクト名をメニューに限定します。

    -----------------------------------------

    menuItem (boolean): 削除するオブジェクト名をメニュー項目に限定します。

    -----------------------------------------

    panel (boolean): 削除するオブジェクト名をパネルに限定します。

    -----------------------------------------

    panelConfig (boolean): 削除するオブジェクト名をパネル設定に限定します。

    -----------------------------------------

    radioMenuItemCollection (boolean): 削除するオブジェクト名をラジオメニュー項目コレクションに限定します。

    -----------------------------------------

    toolContext (boolean): 削除するオブジェクト名をツールコンテキストに限定します。

    -----------------------------------------

    uiTemplate (boolean): 削除するオブジェクト名をUIテンプレートに限定します。

    -----------------------------------------

    window (boolean): 削除するオブジェクト名をウィンドウに限定します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def dimWhen(clear: bool = False,false: bool = False,true: bool = False) -> None:
    """
    このメソッドは、指定した UI オブジェクト(1 番目の引数)を、指定した条件(2 番目の引数)にアタッチして、条件が特定の状態になったときにオブジェクトが暗くなるようにします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    clear (boolean): 暗く表示する条件が除去されます。

    -----------------------------------------

    false (boolean): 条件がfalseである場合にオブジェクトが暗く表示されます。

    -----------------------------------------

    true (boolean): 条件がtrueである場合にオブジェクトが暗く表示されます(既定)。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def disable(value: bool = False) -> None:
    """
    このコマンドは、引数として渡されたコントロールを有効または無効にします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    value (boolean): trueにすると、コントロールは無効になります。falseにすると、コントロールは有効になります。既定はtrue(無効)です。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def evalDeferred(evaluateNext: bool = False,list: bool = False,lowPriority: bool = False,lowestPriority: bool = False) -> None:
    """
    このコマンドは指定した文字列を取得し、次の利用できるアイドル時間中に評価します。これは、コントロールを変更または削除できるコマンドをコントロールにアタッチするために便利です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    evaluateNext (boolean): 実行されるコマンドは最も優先的に実行される(理想的には次のキューに組み込まれる)ように指定されます。

    -----------------------------------------

    list (boolean): 待機待ち行列で現在保留状態になっているコマンド文字列のリストを返します。既定では、すべての優先度のコマンドのリストを返します。-lowestPriorityおよび-lowPriorityを使用すると、コマンドのリストを指定した優先度に制限することができます。

    -----------------------------------------

    lowPriority (boolean): 実行するコマンドを低い優先度で保留するように指定します。つまり、Mayaがアイドル状態になるたびに実行されます。

    -----------------------------------------

    lowestPriority (boolean): 実行するコマンドをもっとも低い優先度で保留するように指定します。つまり、他のアイドルイベントがスケジューリングされていない場合に実行されます。

    -----------------------------------------

    Return Value:
    None: string[]コマンドの結果
    """
    pass

    
def isTrue() -> None:
    """
    指定した条件の状態を返すコマンドです。条件が true の場合 1 が、そうでない場合は 0 が返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def itemFilter(byBin: str = "",byName: str = "",byScript: str = "",byType: str = "",category: str = "",classification: str = "",clearByBin: bool = False,clearByType: bool = False,difference: Tuple[str, str] = tuple("", ""),exists: bool = False,intersect: Tuple[str, str] = tuple("", ""),listBuiltInFilters: bool = False,listOtherFilters: bool = False,listUserFilters: bool = False,negate: bool = False,parent: str = "",pythonModule: str = "",secondScript: str = "",text: str = "",union: Tuple[str, str] = tuple("", ""),uniqueNodeNames: bool = False) -> None:
    """
    指定した項目フィルタ オブジェクトを作成するためのコマンドです。このオブジェクトは selectionConnection オブジェクトやエディタにアタッチして、これらのオブジェクトやエディタを通過する項目リストをフィルタすることができます。論理和(Union)、論理積(Intersection)および論理差(Difference)フィルタを使用して、複雑な合成フィルタを作成することができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    byBin (string): このフィルタは、binリストにbin名として指定した文字列が含まれている項目だけを通します。これは多目的フラグです。1つのコマンドでこのフラグが複数回使用されている場合、指定したbin(つまり、論理和、論理bin、またはその他の指定したbin)と最低1つ一致するノードはフィルタを通過できます。

    -----------------------------------------

    byName (string): フィルタは、指定した正規表現の文字列と一致する名前を持つ項目のみを通過させます。この文字列には、特殊文字「*」と「?」を含めることができます。「?」は任意の1文字に相当し、「*」は任意の従属文字列に相当します。

    -----------------------------------------

    byScript (string): フィルタにより、指定した文字列で各項目に対して、MELスクリプトが実行されます。スクリプトから0以外の値が返された場合、項目はフィルタを通過します。スクリプト名の文字列は、次のシグネチャを持つproc名にする必要があります。globalprocintprocName(string$name)またはdefprocName(*args,**keywordArgs)(-pym/pythonModuleを指定する場合)。-secondScriptも使用すると、それが常に優先されることに注意してください。

    -----------------------------------------

    byType (string): 指定した文字列と一致するtypeNameを持つ項目だけがフィルタを通過します。オブジェクトのtypeNameを検索するには、nodeTypeコマンドを使用します。これは多目的フラグです。1つのコマンドでこのフラグが複数回使用されている場合、指定したタイプ(つまり、論理和、論理タイプ、またはそのほかの指定したタイプ)と最低1つ一致するノードはフィルタを通過できます。

    -----------------------------------------

    category (string): フィルタを分類するための文字列です。

    -----------------------------------------

    classification (string): フィルタが組み込みフィルタであるか、ユーザ定義フィルタであるかを指定します。文字列引数は「builtIn」または「user」のどちらかである必要があります。「other」の分類は廃止されました。「user」を代わりに使用してください。フィルタはファイルの新規作成によっては削除されません。フィルタノードがUI(例:アトリビュートエディタ、ハイパーグラフなど)から非表示になり、コマンドラインからアクセスできなくなります。

    -----------------------------------------

    clearByBin (boolean): このフラグにより、このフィルタに接続されている既存のbinがすべてクリアされます。

    -----------------------------------------

    clearByType (boolean): このフラグにより、このフィルタと接続されている既存のtypeNameがすべて消去されます。

    -----------------------------------------

    difference ([string, string]): このフィルタは、名前が指定した文字列である2つの他のフィルタの論理差(Difference)で構成されます。項目は、1番目のフィルタを通過して2番目のフィルタは通過しないときかつそのときに限り、このフィルタを通過します。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかによって、trueまたはfalseを返します。他のフラグは無視されます。

    -----------------------------------------

    intersect ([string, string]): このフィルタは、指定した文字列の名前を持つ2つのフィルタの論理積(Intersection)で構成されます。これに含まれる両方のフィルタを通過できる項目のみ、このフィルタを通過できます。

    -----------------------------------------

    listBuiltInFilters (boolean): 「builtIn」に分類されている項目フィルタすべての配列を返します。

    -----------------------------------------

    listOtherFilters (boolean): 「other」の分類は廃止されました。「user」を代わりに使用してください。「other」に分類されている項目フィルタすべての配列を返します。

    -----------------------------------------

    listUserFilters (boolean): 「user」に分類されている項目フィルタすべての配列を返します。

    -----------------------------------------

    negate (boolean): このフラグはフィルタ自身を反転させたり、通過するものと通過しないものを逆転したりするために使用できます。

    -----------------------------------------

    parent (string): オプションです。指定すると、フィルタのライフスパンがその親のライフスパンに関連付けられます。親が範囲を逸脱すると、フィルタも範囲を逸脱します。指定されていない場合、フィルタは明示的に削除されるまで存在しつづけます。

    -----------------------------------------

    pythonModule (string): -bs/byScriptと-ss/secondScriptを指定したモジュールにあるPython関数として取り扱います。

    -----------------------------------------

    secondScript (string): -bsフラグとともに使用することはできません。2番目のスクリプトは、リスト全体を個々にではなく、同時にフィルタリングするためのものです。次のシグネチャにする必要があります:globalprocstring[]procName(string[]$name)またはdefprocName(*args,**keywordArgs)(-pym/pythonModuleを指定する場合)。これは項目のリストを取り込み、フィルタした項目のリストを返します。

    -----------------------------------------

    text (string): フィルタを使用して格納する注釈文字列を定義します。

    -----------------------------------------

    union ([string, string]): このフィルタは、指定した文字列の名前を持つ2つのフィルタの論理和(Union)で構成されます。含まれているフィルタの最低1つを通過できる項目は、このフィルタを通過できます。

    -----------------------------------------

    uniqueNodeNames (boolean): ネーミングコンフリクトが起こらないように、固有のノード名をスクリプトフィルタに返します。

    -----------------------------------------

    Return Value:
    None: string単一のコマンドの結果string[]複数のコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def itemFilterAttr(byName: str = "",byNameString: str = "",byScript: str = "",classification: str = "",dynamic: bool = False,exists: bool = False,hasCurve: bool = False,hasDrivenKey: bool = False,hasExpression: bool = False,hidden: bool = False,intersect: Tuple[str, str] = tuple("", ""),keyable: bool = False,listBuiltInFilters: bool = False,listOtherFilters: bool = False,listUserFilters: bool = False,negate: bool = False,parent: str = "",published: bool = False,readable: bool = False,scaleRotateTranslate: bool = False,secondScript: str = "",text: str = "",union: Tuple[str, str] = tuple("", ""),writable: bool = False) -> None:
    """
    指定した項目フィルタ アトリビュート オブジェクトを作成するためのコマンドです。このオブジェクトをエディタに付加して、通過するアトリビュートをフィルタすることができます。論理和(Union)や論理積(Intersection)フィルタを使用して、複雑な合成フィルタを作成できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    byName (string): フィルタは、指定した正規表現の文字列と一致する名前を持つ項目のみを通過させます。この文字列には、特殊文字「*」と「?」を含めることができます。「?」「?」は任意の1文字に相当し、「*」は任意の従属文字列に相当します。このフラグは、-byScriptフラグまたは-secondScriptフラグとともに使用できません。

    -----------------------------------------

    byNameString (string): フィルタは、指定した文字列と一致する名前の項目のみを通過させます。これは多目的フラグで、複数の文字列を指定することができます。いずれかの文字列が一致すれば、項目はフィルタを通過します。このフラグは、-byScriptフラグまたは-secondScriptフラグとともに使用できません。

    -----------------------------------------

    byScript (string): 与えられた文字列で指定した名前を持つMELスクリプトが、各アトリビュート名に対して実行されます。スクリプトから0以外の値が返された場合、アトリビュートはフィルタを通過します。スクリプト名の文字列は、次のシグネチャを持つproc名にする必要があります。globalprocintprocName(string$nodeNamestring$attrName)このフラグは、-byNameフラグまたは-byNameStringフラグとともに使用できません。

    -----------------------------------------

    classification (string): フィルタが組み込みフィルタであるか、ユーザ定義フィルタであるかを指定します。文字列引数は「builtIn」または「user」のどちらかである必要があります。「other」のフィルタ分類は廃止されました。「user」を代わりに使用してください。Mayaによって作成されたフィルタは、「builtIn」として分類される必要があります。プラグインまたはユーザスクリプトによって作成されたフィルタは、「user」として分類される必要があります。フィルタはファイルの新規作成によっては削除されません。フィルタノードはUI(例:アトリビュートエディタ、ハイパーグラフなど)から非表示になり、コマンドラインからアクセスできなくなります。

    -----------------------------------------

    dynamic (boolean): ダイナミックアトリビュートのみがフィルタを通過します。

    -----------------------------------------

    exists (boolean): 存在するアトリビュートのみがフィルタを通過します。

    -----------------------------------------

    hasCurve (boolean): フィルタは、アニメーションカーブによってドライブされるアトリビュートのみをを通過させます。

    -----------------------------------------

    hasDrivenKey (boolean): フィルタは、ドリブンキーによってドライブされるアトリビュートのみを通過させます。

    -----------------------------------------

    hasExpression (boolean): フィルタは、エクスプレッションによってドライブされるアトリビュートのみをを通過させます。

    -----------------------------------------

    hidden (boolean): ユーザに対して非表示になっているアトリビュートだけがフィルタを通過します。

    -----------------------------------------

    intersect ([string, string]): このフィルタは、指定した文字列の名前を持つ2つのフィルタの論理積(Intersection)で構成されます。含まれている両方のフィルタを通過できる場合のみ、アトリビュートはこのフィルタを通過できます。

    -----------------------------------------

    keyable (boolean): キー設定可能なアトリビュートだけがフィルタを通過します。

    -----------------------------------------

    listBuiltInFilters (boolean): 「builtIn」に分類されているアトリビュートフィルタすべての配列を返します。

    -----------------------------------------

    listOtherFilters (boolean): 「other」の分類は廃止されました。「user」を代わりに使用してください。「other」に分類されているアトリビュートフィルタすべての配列を返します。

    -----------------------------------------

    listUserFilters (boolean): 「user」に分類されているアトリビュートフィルタすべての配列を返します。

    -----------------------------------------

    negate (boolean): このフラグはフィルタ自身を反転させたり、通過するものと通過しないものを逆転したりするために使用できます。

    -----------------------------------------

    parent (string): このフラグは今ではサポートしていません。

    -----------------------------------------

    published (boolean): フィルタは、コンテナにパブリッシュされたアトリビュートのみを通過させます。

    -----------------------------------------

    readable (boolean): 読み出し可能な(出力)アトリビュートだけがフィルタを通過します。

    -----------------------------------------

    scaleRotateTranslate (boolean): フィルタは、SRTアトリビュート(スケール、回転、移動、これらの子)のみを表示します。

    -----------------------------------------

    secondScript (string): -bsフラグと一緒に使用します。2番目のスクリプトは、リスト全体を個々にではなく、同時にフィルタリングするためのものです。このシグネチャは次のようになります。globalprocstring[]procName(string[]$nodeNamestring[]$attrName)これはアトリビュートのリストを取り込み、フィルタしたアトリビュートのリストを返します。このフラグは、-byNameフラグまたは-byNameStringフラグとともに使用できません。

    -----------------------------------------

    text (string): フィルタを使用して格納する注釈文字列を定義します。

    -----------------------------------------

    union ([string, string]): このフィルタは、指定した文字列の名前を持つ2つのフィルタの論理和(Union)で構成されます。含まれているフィルタの最低1つを通過できるアトリビュートは、このフィルタを通過できます。

    -----------------------------------------

    writable (boolean): 書き込み可能な(入力)アトリビュートだけがフィルタを通過します。

    -----------------------------------------

    Return Value:
    None: string単一のコマンドの結果string[]複数のコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def itemFilterType(text: str = "",type: bool = False) -> None:
    """
    指定した項目フィルタ オブジェクトを照会するためのコマンドです。このオブジェクトは selectionConnection オブジェクトやエディタにアタッチして、これらのオブジェクトやエディタを通過する項目リストをフィルタすることができます。論理和(Union)や論理積(Intersection)フィルタを使用して、複雑な合成フィルタを作成できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    text (string): フィルタを使用して格納する注釈文字列を定義します。

    -----------------------------------------

    type (boolean): フィルタオブジェクトのタイプを照会します。戻り値は、itemFilter、attributeFilter、renderFilter、またはunknownFilterのいずれかになります。

    -----------------------------------------

    Return Value:
    None: string単一のコマンドの結果string[]複数のコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def lsUI(cmdTemplates: bool = False,collection: bool = False,contexts: bool = False,controlLayouts: bool = False,controls: bool = False,dumpWidgets: bool = False,editors: bool = False,head: int = 1,long: bool = False,menuItems: bool = False,menus: bool = False,numWidgets: bool = False,panels: bool = False,radioMenuItemCollections: bool = False,tail: int = 1,type: str = "",windows: bool = False) -> None:
    """
    このコマンドで、UI オブジェクトの名前が返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    cmdTemplates (boolean): ELFUIコマンドを使用して作成したUIコマンドテンプレートです。

    -----------------------------------------

    collection (boolean): ELFUIコマンドを使用して作成したコントロールコレクションです。

    -----------------------------------------

    contexts (boolean): ELFUIコマンドを使用して作成したツールコンテキストです。

    -----------------------------------------

    controlLayouts (boolean): ELFUIコマンドを使用して作成したコントロールレイアウトです(formLayoutsやpaneLayoutsなど)。

    -----------------------------------------

    controls (boolean): ELFUIコマンドを使用して作成したコントロールです(ボタンやチェックボックスなど)。

    -----------------------------------------

    dumpWidgets (boolean): Mayaが使用するすべてのQTウィジェットをダンプします。

    -----------------------------------------

    editors (boolean): すべての現存エディタです。

    -----------------------------------------

    head (int): 項目のリストの先頭から返される要素の最大数を指定します。(注:それぞれのtypeフラグでは、最大でこの数の項目が返されます。複数のフラグを指定すると、返される項目の数は指定した値より多くなります)。

    -----------------------------------------

    long (boolean): パス以外のショートネームではなく、パスのロングネームが使用されます。

    -----------------------------------------

    menuItems (boolean): ELFUIコマンドを使用して作成したメニュー項目です。

    -----------------------------------------

    menus (boolean): ELFUIコマンドを使用して作成したメニューです。

    -----------------------------------------

    numWidgets (boolean): Mayaが使用するQTウィジェットの数をレポートします。

    -----------------------------------------

    panels (boolean): すべての現存パネルです。

    -----------------------------------------

    radioMenuItemCollections (boolean): ELFUIコマンドを使用して作成したメニュー項目コレクションです。

    -----------------------------------------

    tail (int): 項目のリストの末尾から返される要素の最大数を指定します。(注:それぞれのtypeフラグでは、最大でこの数の項目が返されます。複数のフラグを指定すると、返される項目の数は指定した値より多くなります)。

    -----------------------------------------

    type (string): 文字列の引数で指定した特定のタイプのオブジェクトがすべてリストされます。たとえば、「window」、「menu」、「control」、「controlLayout」があります。

    -----------------------------------------

    windows (boolean): ELFUIコマンドを使用して作成したウィンドウです。

    -----------------------------------------

    Return Value:
    None: string[]オブジェクト引数の名前。
    """
    pass

    
def melOptions(duplicateVariableWarnings: bool = False) -> None:
    """
    Maya の埋め込み言語(MEL)の動作に影響を与える設定および照会のオプションです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    duplicateVariableWarnings (boolean): このオプションがオンの場合、MEL変数が同じ名前を持つ別の変数と同じ範囲内で宣言されていると、警告が生成されます。この警告は、スクリプトの実行時でなく、スクリプトの送信時に生成されます。通常、これらの警告はスクリプト内のエラーを示します。照会時は、オプションの現在の設定が返されます。対応するプリファレンスoptionVarはmelDuplicateVariableWarningsです。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def objectTypeUI(isType: str = "",listAll: bool = False,superClasses: bool = False) -> None:
    """
    このコマンドは、ボタンやスライダなどの、UI 要素のタイプを返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    isType (string): オブジェクトが指定したタイプであるかどうかによって、trueまたはfalseを返します。

    -----------------------------------------

    listAll (boolean): すべての既知のUIコマンドとそれぞれのタイプのリストを返します。各エントリにはコマンド名、UIタイプ、クラス名の3つの文字列が含まれます。クラス名は内部で変更される可能性があることに注意してください。

    -----------------------------------------

    superClasses (boolean): 指定したオブジェクトのすべてのスーパークラスの名前のリストを返します。すべてのクラス名は内部の値で、変更される可能性があることに注意してください。

    -----------------------------------------

    Return Value:
    None: string指定したオブジェクトのタイプ。
    """
    pass

    
def optionVar(arraySize: str = "",clearArray: str = "",exists: str = "",floatValue: Tuple[str, float] = tuple("", 1.0),floatValueAppend: Tuple[str, float] = tuple("", 1.0),intValue: Tuple[str, int] = tuple("", 1),intValueAppend: Tuple[str, int] = tuple("", 1),list: bool = False,remove: str = "",removeFromArray: Tuple[str, int] = tuple("", 1),stringValue: Tuple[str, str] = tuple("", ""),stringValueAppend: Tuple[str, str] = tuple("", ""),version: int = 1) -> None:
    """
    このコマンドで、Maya のさまざまな呼び出しに存在する変数を設定および照会できます。この変数はプリファレンスの一部として格納されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    arraySize (string): 「string」という配列のサイズを返します。そのような変数がない場合は、0を返します。変数が配列でない場合は、1を返します。

    -----------------------------------------

    clearArray (string): 「string」という配列がある場合、空に設定されます。空の配列は保存されません。

    -----------------------------------------

    exists (string): 「string」という変数が存在する場合は1を、なければ0を返します。これを使用する場合、その他のフラグはすべて無視されます(照会の方が優先度が高い)。

    -----------------------------------------

    floatValue ([string, float]): double値「float」の「string」という新しい変数を作成します。この名前の変数がすでに存在する場合は、新しい値で上書きされます(タイプに関係なく)。

    -----------------------------------------

    floatValueAppend ([string, float]): 「string」という浮動小数点数配列の末尾に、この値を追加します。このような配列がない場合は作成されます。この名前の浮動小数点数がすでに存在している場合は、配列の最初の要素になります。その他のタイプの値が存在する場合、すべて上書きされます。

    -----------------------------------------

    intValue ([string, int]): 整数値「int」の「string」という新しい変数を作成します。この名前の変数がすでに存在する場合は、新しい値で上書きされます(タイプに関係なく)。

    -----------------------------------------

    intValueAppend ([string, int]): 「string」という整数の配列の末尾に、この値を追加します。このような配列がない場合は作成されます。この名前の整数値がすでに存在している場合は、配列の最初の要素になります。その他のタイプの値が存在する場合、すべて上書きされます。

    -----------------------------------------

    list (boolean): これは、定義された変数名すべての一覧を返します。これを使用する場合、その他のフラグはすべて無視されます(照会およびexistsフラグの方が優先度が高い)。

    -----------------------------------------

    remove (string): あれば、「string」という変数を除去します。注:同一のコマンドで-rおよびその他の(-sv、-iv、-fv)フラグが使用されている場合、値を設定する前にすべての除去が行われます。

    -----------------------------------------

    removeFromArray ([string, int]): 「string」という配列の番号付きの要素「int」を除去します。それ以降はすべてシャッフルされます。

    -----------------------------------------

    stringValue ([string, string]): 1番目の文字列を2番目の文字列で指定した値で使用した名前の新しい変数を作成します。この名前の変数がすでに存在する場合は、新しい値で上書きされます(タイプに関係なく)。

    -----------------------------------------

    stringValueAppend ([string, string]): 1番目の文字列の名前の文字配列の末尾に、2番目の文字列で指定した値を追加します。このような配列がない場合は作成されます。この名前の文字列値がすでに存在している場合は、配列の最初の要素になります。その他のタイプの値が存在する場合、すべて上書きされます。

    -----------------------------------------

    version (int): 互換性のないプリファレンスファイルに関する警告を表示する、プリファレンスバージョン番号

    -----------------------------------------

    Return Value:
    None: int存在するオプションに対して 0 または 1string[]リスト オプションが使用される場合照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def pause(seconds: int = 1) -> None:
    """
    デモやテスト スクリプトで、ユーザが結果を検討できるように、指定した秒数だけ一時停止します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    seconds (int): ここに指定した秒数だけ一時停止します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def refresh(currentView: bool = False,fileExtension: str = "",filename: str = "",force: bool = False,suspend: bool = False) -> None:
    """
    スクリプトの実行中、強制的に再描画するときに使用します。通常の場合、スクリプトの実行中は再描画を保留しますが、画面からイメージを取り込むなどの目的で、中間結果を表示するために再描画を使用することがあります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    currentView (boolean): 現在のビューのみを再描画します。既定ではすべてのビューが再描画されます。

    -----------------------------------------

    fileExtension (string): ファイル名フラグを使用して、保存するファイルの種類を指定します。

    -----------------------------------------

    filename (string): ビューポートのスナップショットを保存するファイルの名前を指定します。currentViewフラグが設定されている場合は、現在の1つを指定します。

    -----------------------------------------

    force (boolean): モデルの状態に関係なく強制的にリフレッシュします。

    -----------------------------------------

    suspend (boolean): Mayaのリフレッシュイベントを停止または続行します。リフレッシュを停止するには「on」、リフレッシュ再開するには「off」を指定します。リフレッシュを再開しただけではリフレッシュは実行されません。「refresh-suspendoff」発行後に生じるMayaの自然なリフレッシュイベントによってリフレッシュが実行されます。このフラグは注意して使用してください。パフォーマンスを向上させることができますが、インタラクティブモードにおけるMayaのディペンデンシーグラフ評価のほとんどがリフレッシュによってドライブされるため、相互関係を含む複雑なディペンデンシーグラフがある場合にこのフラグを使用すると、解析にわずかな違いが発生する可能性があります。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def renameUI() -> None:
    """
    このコマンドは、1 番目の引数として渡された UI オブジェクトの名前を、2 番目の引数として指定された新しい名前に変更します。新しい名前が重複しているか有効でない場合、名前の変更は失敗して古い名前が返されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string新しい名前。名前の変更に失敗した場合は古い名前。
    """
    pass

    
def resourceManager(nameFilter: str = "",saveAs: Tuple[str, str] = tuple("", "")) -> None:
    """
    特定のプロパティに一致するリソースをリスト表示します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    nameFilter (string): 名前に一致するリソースのみをリスト表示します。引数には「?」や「*」の記号が含まれる場合があります。

    -----------------------------------------

    saveAs ([string, string]): リソース(第1パラメータ)のコピーを別ファイル(第2パラメータ)として保存します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def scriptJob(allChildren: bool = False,attributeAdded: Tuple[str, str] = tuple("", ""),attributeChange: Tuple[str, str] = tuple("", ""),attributeDeleted: Tuple[str, str] = tuple("", ""),compressUndo: bool = False,conditionChange: Tuple[str, str] = tuple("", ""),conditionFalse: Tuple[str, str] = tuple("", ""),conditionTrue: Tuple[str, str] = tuple("", ""),connectionChange: Tuple[str, str] = tuple("", ""),disregardIndex: bool = False,event: Tuple[str, str] = tuple("", ""),exists: int = 1,force: bool = False,idleEvent: str = "",kill: int = 1,killAll: bool = False,killWithScene: bool = False,listConditions: bool = False,listEvents: bool = False,listJobs: bool = False,nodeDeleted: Tuple[str, str] = tuple("", ""),nodeNameChanged: Tuple[str, str] = tuple("", ""),parent: str = "",permanent: bool = False,protected: bool = False,replacePrevious: bool = False,runOnce: bool = False,timeChange: str = "",uiDeleted: Tuple[str, str] = tuple("", "")) -> None:
    """
    このコマンドは、MEL コマンドまたはスクリプトである「スクリプト ジョブ」を作成します。このジョブは、指定した条件、イベント、またはアトリビュートにアタッチされます。条件が目的の状態に切り替わるたびに(またはトリガが起動されるたびに)、スクリプトが実行されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allChildren (boolean): このフラグは-ac/attributeChangeフラグと一緒に使用した場合のみに使用できます。これが指定されており、ジョブが複合アトリビュートにアタッチされている場合、指定したアトリビュートとその子に変更が加えられるとジョブが実行されます。

    -----------------------------------------

    attributeAdded ([string, script]): 指定したアトリビュートが追加されるときにスクリプトを実行します。文字列はディペンデンシーノードと特定のアトリビュートの両方を識別する必要があります。ディペンデンシーノードが削除された場合、(削除を元に戻すことができても)このジョブは中断されます。

    -----------------------------------------

    attributeChange ([string, script]): 指定したアトリビュートの値が変わったときにスクリプトを実行します。文字列はディペンデンシーノードと特定のアトリビュートの両方を識別する必要があります。ディペンデンシーノードが削除された場合、(削除を元に戻すことができても)このジョブは中断されます。

    -----------------------------------------

    attributeDeleted ([string, script]): 指定したアトリビュートが削除されるときにスクリプトを実行します。文字列はディペンデンシーノードと特定のアトリビュートの両方を識別する必要があります。ディペンデンシーノードが削除された場合、(削除を元に戻すことができても)このジョブは中断されます。

    -----------------------------------------

    compressUndo (boolean): これをtrueに設定するとscriptJobを元に戻すことができるようになり、そのアクションは、取り消しのために最後に行ったアクションとセットになります。たとえば、セレクションの変更によりscriptJobがトリガされた場合にundoを押すと、scriptJobとセレクションの変更が両方一度に元に戻されます。

    -----------------------------------------

    conditionChange ([string, script]): 指定した条件の状態が変わったときにスクリプトを実行します。文字列は定義済みまたはユーザ定義のブーリアン条件の名前である必要があります。存在する条件のリストを取得するには、-listConditionsフラグを使用します。

    -----------------------------------------

    conditionFalse ([string, script]): 指定した条件がfalseになったときにスクリプトを実行します。文字列は定義済みまたはユーザ定義のブーリアン条件の名前である必要があります。存在する条件のリストを取得するには、-listConditionsフラグを使用します。

    -----------------------------------------

    conditionTrue ([string, script]): 指定した条件がtrueになったときにスクリプトを実行します。文字列は定義済みまたはユーザ定義のブーリアン条件の名前である必要があります。存在する条件のリストを取得するには、-listConditionsフラグを使用します。

    -----------------------------------------

    connectionChange ([string, script]): 指定したアトリビュートの結合関係が変わったときにスクリプトを実行します。文字列はディペンデンシーノードと特定のアトリビュートの両方を識別する必要があります。ディペンデンシーノードが削除された場合、(削除を元に戻すことができても)このジョブは中断されます。

    -----------------------------------------

    disregardIndex (boolean): このフラグは-ac/attributeChangeフラグと一緒に使用した場合のみに使用できます。これが指定されており、ジョブがマルチ(インデックス付き)アトリビュートにアタッチされている場合、マルチアトリビュートのいかなるアトリビュートが変更されてもジョブが実行されます。

    -----------------------------------------

    event ([string, script]): 指定したイベントが発生したときにスクリプトを実行します。文字列は定義済みのMayaイベントの名前である必要があります。存在するイベントのリストを取得するには、-listEventsフラグを使用します。

    -----------------------------------------

    exists (int): 指定した「ジョブ番号」を持つscriptJobが存在する場合はtrueを返し、存在しない場合はfalseを返します。「ジョブ番号」は、新しいscriptJobの作成時に返された値である必要があります。

    -----------------------------------------

    force (boolean): このフラグは、-kill、-killAll、または-replacePreviousと一緒にのみ使用でき、保護されたジョブの削除が可能になります。

    -----------------------------------------

    idleEvent (script): Mayaがアイドル状態になるたびにスクリプトを実行します。警告:アイドルイベントが登録されているかぎり、アプリケーションはイベントをコールし続け、使用可能なCPU時間をすべて使い果たします。idleEventsは注意して使用してください。

    -----------------------------------------

    kill (int): 指定したジョブ番号を持つジョブを中断します。ただし、永続ジョブを中断することはできません。また、保護されたジョブは、コマンドで-forceフラグが使用されている場合にかぎり中断できます。

    -----------------------------------------

    killAll (boolean): すべてのジョブを中断します。永続ジョブは削除されません。保護されたジョブは、-forceフラグが使用されている場合にかぎり削除されます。

    -----------------------------------------

    killWithScene (boolean): 現在のシーンが空になったときに、ジョブを現在のシーンにアタッチします。現在のシーンは、新しいシーンまたは既存のシーンを開くと空になります。

    -----------------------------------------

    listConditions (boolean): このフラグを指定すると、既存のすべての条件の名前を含む文字配列がコマンドから返されます。以下に、既存のすべての条件について説明します。使用可能なMaya機能に基づくイベント指定した機能が使用できる場合、これらのイベントはtrueになります。イベント名Maya機能AnimationExistsアニメーションAnimationUIExistsアニメーションのユーザインタフェースBaseMayaExistsMayaの任意の基本機能BaseUIExists任意のインタラクティブなMaya機能DatabaseUIExistsDeformersExistsデフォーマ機能DeformersUIExistsデフォーマのユーザインタフェースDevicesExistsデバイスサポートDimensionsExists次元DynamicsExistsダイナミクスDynamicsUIExistsダイナミクスのユーザインタフェースExplorerExistsエクスプローImageUIExistsイメージングのユーザインタフェースKinematicsExistsキネマティクスKinematicsUIExistsキネマティクスのユーザインタフェースManipsExistsマニピュレータModelExists基本モデリングツールModelUIExists基本モデリングのユーザインタフェースNurbsExistsNURBSモデリングツールNurbsUIExistsNURBSモデリングのユーザインタフェースPolyCoreExists基本ポリゴンサポートPolygonsExistsポリゴンモデリングPolygonsUIExistsポリゴンモデリングのユーザインタフェースPolyTextureExistsポリゴナルテクスチャリングRenderingExistsビルトインレンダリングRenderingUIExistsレンダリングのユーザインタフェースその他のイベントautoKeyframeState:MayaでautoKeyframingが有効なときはtruebusy:MayaがビジーなときはtruedeleteAllCondition:すべてを削除の操作の最中はtrueflushingScene:シーンをフラッシュしている間はtrueGoButtonEnabled:パネルコンテキストのGoボタンが使用可能なときはtruehotkeyListChange:ホットキーの定義リストが変更されたときはtrueplayingBack:Mayaでアニメーションキーフレームが再生されているときはtrueplaybackIconsCondition:タイムスライダで使用されている再生状態のインスタンスreadingFile:Mayaがファイルを読み取り中のときはtrueRedoAvailable:再実行のために使用可能なコマンドがあるときはtrueSomethingSelected:何らかのオブジェクト(1つまたは複数)が選択されているときはtrueUndoAvailable:元に戻すための使用可能なコマンドがあるときはtrue

    -----------------------------------------

    listEvents (boolean): このフラグを指定すると、既存のすべてのイベントの名前を含む文字配列がコマンドから返されます。以下に、既存のすべてのイベントについて説明します。angularToleranceChanged:角度単位の許容値が変更されたとき。許容値は次の場合に変更されます。MELコマンド「tolerance」に「-angular」フラグを付けて使用する場合オプション->GeneralPreferences->モデリングタブ->接線許容値でプリファレンスを変更する場合angularUnitChanged:ユーザが角度単位を変更したとき。axisAtOriginChanged:原点の軸が変更されたとき。axisInViewChanged:特定のビューの軸が変更されたとき。ColorIndexChanged:カラーインデックスの値が変更されたとき。constructionHistoryChanged:コンストラクションヒストリをオンまたはオフにしたとき。currentContainerChanged:ユーザーが現在のコンテナを設定または設定解除したとき。currentSoundNodeChanged:次の理由から、タイムスライダに表示されているサウンドが変更されたとき:サウンドが除去されている(表示されない)[タイムスライダで右マウスボタン]新しいサウンドが表示されている[タイムスライダで右マウスボタン]サウンド表示が切り替えられている[アニメーションオプション]サウンド表示モードが変更されている[アニメーションオプション]DagObjectCreated:新しいDAGオブジェクトが作成されたとき。deleteAll:filenewが実行されたとき。DisplayColorChanged:表示カラーが変更されたとき。displayLayerChange:レイヤが作成または破壊されたとき。displayLayerManagerChange:ディスプレイレイヤマネージャが変更されたとき。DisplayRGBColorChanged:RGB表示カラーが変更されたとき。glFrameTrigger:内部使用限定。ChannelBoxLabelSelected:チャネルボックスラベル(最初の列)の選択が変更された場合。gridDisplayChanged:内部使用限定。idle:Mayaがアイドル状態で優先順位の高いタスクが存在しないとき。idleHigh:Mayaがアイドル状態のとき。これは、優先順位が低いアイドルタスクより前にコールされます。通常は「idle」を使用します。lightLinkingChanged:ライトリンクリレーションシップを修正する変更が生じたとき。lightLinkingChangedNonSG:ライトリンクリレーションシップを修正する変更が生じたとき(シェーディング割り当ての変更を除く)。linearToleranceChanged:リニア許容値が変更されたとき。許容値は次の場合に変更されます。MELコマンド「tolerance」に「-linear」フラグを付けて使用する場合オプション->GeneralPreferences->モデリングタブ->位置許容値でプリファレンスを変更する場合linearUnitChanged:ユーザがオプション(Options)メニューからリニア単位を変更したときMenuModeChanged:ユーザがMayaメインウィンドウでメニューバーのメニューセットを変更したとき(たとえば、モデリング(Modeling)をアニメーション(Animation)に変更したとき)。RecentCommandChanged:内部使用限定。NewSceneOpened:新しいシーンが開かれたとき。PostSceneRead:シーンが読み込まれた後。特に、ファイルを開いた後や読み込み後、またはすべての子リファレンスが読み込まれた後。nurbsToPolygonsPrefsChanged:NURBSをポリゴンに(NurbsToPolygons)のいずれかのプリファレンスが変更されたとき。プリファレンスは次の場合に変更されます。MELコマンドを使用(「nurbsToPolygonsPref」)ポリゴン->NURBSをポリゴンに->オプションボックス(Polygons->NurbsToPolygons->OptionBox)でプリファレンスを変更playbackRangeChanged:再生キーフレームの範囲が変更されたときplaybackRangeSliderChanged:アニメーション開始/終了範囲(タイムスライダ範囲の右端または左端のエントリセル、その間のセルで再生範囲を調整)が変更されたときpreferredRendererChanged:優先レンダラが変更されたときquitApplication:ユーザが、MELコマンドのquit、または終了(Exit)メニュー項目を使用して、終了を選択したときRedo:ユーザがメニューから再実行を選択し、対象が再実行されたときこのコールバックは、UIまたはローカルストレージの更新に使用できます。このコールバックの最中は、シーンやDGの状態を変更しないでください。renderLayerChange:レンダーレイヤノードの作成や削除が行われたとき。renderLayerManagerChange:現在のレンダーレイヤが変更されたとき。RebuildUIValues:内部使用限定。SceneOpened:シーンが開かれたとき。SceneSaved:シーンが保存されたとき。SelectionChanged:新しい選択が作成されたとき。SelectModeChanged:セレクションモードが変更されたとき。SelectPreferenceChanged:内部使用限定。SelectPriorityChanged:選択の優先順位が変更されたとき。SelectTypeChanged:セレクションタイプが変更されたとき。setEditorChanged:廃止されました。現在は使用されていません。SetModified:setコマンドを使用してセットを修正したとき。SequencerActiveShotChanged:アクティブなシーケンサショットが変更されたとき。snapModeChanged:スナップモードが変更されたとき。たとえば、グリッドスナップに変更されたとき。timeChanged:時間が変更されたとき。timeUnitChanged:時間単位が変更されたとき。ToolChanged:ツール／コンテキストが変更されたとき。PostToolChanged:ツール／コンテキストの変更後。NameChanged:オブジェクトの名前がrenameコマンドを使って変更されたとき。Undo:ユーザがメニューから元に戻すを選択し、対象が取り消されたとき。このコールバックは、UIまたはローカルストレージの更新に使用できます。このコールバックの最中は、シーンやDGの状態を変更しないでください。modelEditorChanged:ユーザがモデルエディタのオプションを変更した場合。colorMgtEnabledChanged:グローバルのシーン単位カラー管理がフラグの変更を許可した場合。colorMgtConfigFileEnableChanged:グローバルのシーン単位カラー管理OCIO設定がフラグの変更を許可した場合。colorMgtPrefsViewTransformChanged:グローバルのシーン単位カラー管理ビュートランスフォーム設定が変更をトランスフォームした場合。colorMgtWorkingSpaceChanged:グローバルのシーン単位カラー管理作業スペースが変更された場合。colorMgtConfigFilePathChanged:グローバルのシーン単位カラー管理OCIO設定ファイルパスが変更された場合。colorMgtConfigChanged:カラー管理モードがネイティブからOCIOに変更されたか、別のOCIO設定がロードされた場合。colorMgtPrefsReloaded:すべてのグローバルのシーン単位カラー管理設定が再ロードされた場合。colorMgtUserPrefsChanged:ユーザレベルのカラー管理プリファレンスが変更された場合。colorMgtOutputChanged:カラー管理トランスフォーム、またはその有効な状態が変更された場合。colorMgtOCIORulesChanged:OCIOモードでルールの種類が変更された場合。colorMgtRefreshed:環境変数の変更をトラップするためにカラー管理が更新された場合。metadataVisualStatusChanged:内部使用限定。shapeEditorTreeviewSelectionChanged:シェイプエディタのツリービューに新しい選択が作成された場合。RenderViewCameraChanged:レンダービューの現在のカメラが変更された場合。

    -----------------------------------------

    listJobs (boolean): このフラグが指定されている場合、既存のすべてのジョブの説明を含む文字配列とジョブ番号がコマンドから返されます。返されたジョブ番号を使用して、後からジョブを中断することができます。

    -----------------------------------------

    nodeDeleted ([string, script]): 指定したノードが削除されるときにスクリプトを実行します。

    -----------------------------------------

    nodeNameChanged ([string, script]): 指定されたノードの名前が変更されたときにスクリプトを実行します。

    -----------------------------------------

    parent (string): このジョブをMayaUIのピースにアタッチします。UIが破壊されると、このジョブも一緒に中断されます。

    -----------------------------------------

    permanent (boolean): ジョブを中断できないようにします。永続ジョブは、アプリケーションの存続期間中、またはジョブの親オブジェクトの存続期間中、存在します。-killWithSceneフラグは、永続ジョブには適用されません。

    -----------------------------------------

    protected (boolean): ジョブを中断されにくくします。保護されたジョブは、-forceフラグを使用して意図的に中断または置き換えを行う必要があります。-killWithSceneフラグは、保護されたジョブには適用されません。

    -----------------------------------------

    replacePrevious (boolean): このフラグは、必ず-parentフラグと一緒に使用します。新しいscriptJobが作成される前に、同じ親を持つ既存のscriptJobsがまず削除されます。

    -----------------------------------------

    runOnce (boolean): これがtrueに設定されている場合、スクリプトは一度だけ実行されます。false(既定)に設定されている場合、スクリプトは条件/イベントのトリガが発生するたびに実行されます。-uidフラグまたは-ndフラグが使用される場合、runOnceが自動的にオンになります。

    -----------------------------------------

    timeChange (script): 現在のタイムが変更されたときにスクリプトを実行します。タイムスライダのクリックによって時間が変更された場合、スクリプトは実行されません。これに対して、「timeChanged」条件によってトリガされたスクリプトは実行されます。

    -----------------------------------------

    uiDeleted ([string, script]): 指定したUIのピースが削除されたときにスクリプトを実行します。

    -----------------------------------------

    Return Value:
    None: intジョブの中断に使用できるジョブ番号です。ジョブ番号は 0 以上の整数値です。string[]list フラグ使用時の文字列リストbooleanexists フラグの場合
    """
    pass

    
def selectionConnection(activeCacheList: bool = False,activeCharacterList: bool = False,activeList: bool = False,addScript: str = "",addTo: str = "",characterList: bool = False,clear: bool = False,connectionList: bool = False,defineTemplate: str = "",deselect: str = "",editor: str = "",exists: bool = False,filter: str = "",findObject: str = "",g: bool = False,highlightList: bool = False,identify: bool = False,keyframeList: bool = False,lock: bool = False,modelList: bool = False,object: str = "",parent: str = "",remove: str = "",removeScript: str = "",select: str = "",setList: bool = False,switch: bool = False,useTemplate: str = "",worldList: bool = False) -> None:
    """
    このコマンドは、指定した名前の selectionConnection オブジェクトを作成します。このオブジェクトは、単に共有されているセレクション リストにすぎません。このリストは、ハイライト データを共有するために複数のエディタによって使用する場合があります。たとえば、選択したリストをアウトライナ(Outliner)がこれらのいずれかのオブジェクトにアタッチし、グラフ エディタ(Graph Editor)がその同じオブジェクトをリスト ソースとして使用する場合があります。グラフ エディタには、アウトライナで選択したオブジェクトのみが表示されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activeCacheList (boolean): この接続がアクティブリストのオブジェクトの属するキャッシュを反映するように指定します。

    -----------------------------------------

    activeCharacterList (boolean): この接続がアクティブリストのオブジェクトの属するキャラクタを反映するように指定します。

    -----------------------------------------

    activeList (boolean): この接続がアクティブリスト(ジオメトリオブジェクトとキー)を反映するように指定します。

    -----------------------------------------

    addScript (script): セレクションに何かが追加されたときにコールされるスクリプトを指定します。

    -----------------------------------------

    addTo (string): 接続のこのリストに追加するselectionConnectionの名前です。

    -----------------------------------------

    characterList (boolean): この接続がワールド座標空間内のすべてのキャラクタを反映するように指定します。

    -----------------------------------------

    clear (boolean): selectionConnectionからすべてを除去します。

    -----------------------------------------

    connectionList (boolean): この接続がselectionConnectionのリストを含むように指定します。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    deselect (name): セレクションから何かを除去します。

    -----------------------------------------

    editor (string): この接続が、指定したエディタの-mainListConnectionを反映するように指定します。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    filter (string): オプションで、この接続にitemFilterを指定します。空の文字列("")は、現在のフィルタをクリアします。フィルタが指定されている場合、selectionConnectionに入力される情報はすべて、受信される前にまずフィルタを通過する必要があります。注:フィルタをアタッチできるのは、通常のselectionConnectionだけです。-act、-mdl、-key、-wl、-sl、-cl、-lst、-obj、または-renフラグを使用して作成された接続にフィルタをアタッチすることはできません。ただし、selectionConnectionにはフィルタをアタッチしないことを強くお勧めします。代わりに、selectionConnectionを使用しているエディタにフィルタをアタッチすることをお勧めします。

    -----------------------------------------

    findObject (name): 指定したオブジェクトをラップする、このリスト内のselectionConnectionを検索します。

    -----------------------------------------

    g (boolean): グローバルのselectionConnectionをスクリプトコマンドで削除することはできません。

    -----------------------------------------

    highlightList (boolean): この接続がハイライトリストとして使用されるように指定します。

    -----------------------------------------

    identify (boolean): これがどのタイプのselectionConnectionであるかを検出します。selectionConnectionのタイプには、activeList、modelList、keyframeList、worldList、objectList、listList、editorList、connection、unknownがあります。

    -----------------------------------------

    keyframeList (boolean): この接続がアクティブリストのアニメーション部分を反映するように指定します。

    -----------------------------------------

    lock (boolean): activeList接続では、接続をロックするとactiveListの変更が聴取されなくなります。

    -----------------------------------------

    modelList (boolean): この接続がアクティブリストのモデリング(すなわちキーを除く)部分を反映するように指定します。

    -----------------------------------------

    object (name): この接続が、指定したオブジェクト(セットである場合もあります)にラップするように指定します。照会されると、このフラグはselectionConnectionのすべてのメンバーを返します(接続がセットをラップする場合は、セットのメンバーを返します)。

    -----------------------------------------

    parent (string): これをアタッチするUIオブジェクトの名前です。親が破壊されると、selectionConnectionは自動削除されます。親が指定されていない場合は、現在のcontrolLayoutに接続が作成されます。

    -----------------------------------------

    remove (string): 接続のこのリストから除去するselectionConnectionの名前です。

    -----------------------------------------

    removeScript (script): セレクションから何かが除去されたときにコールされるスクリプトを指定します。

    -----------------------------------------

    select (name): セレクションに何かを追加します。これにより既存のセレクションが置き換えられることはありません。

    -----------------------------------------

    setList (boolean): この接続がワールド座標空間内のすべてのセットを反映するように指定します。

    -----------------------------------------

    switch (boolean): connectionListに対するモディファイアとして機能し、オブジェクトのリストを空ではない最初のselectionConnectionに設定します。selectionConnectionは、追加された順にテストされます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    worldList (boolean): この接続がワールド座標空間内のすべてのオブジェクトを反映するように指定します。

    -----------------------------------------

    Return Value:
    None: string照会されるフラグの値照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def setParent(defineTemplate: str = "",menu: bool = False,topLevel: bool = False,upLevel: bool = False,useTemplate: str = "") -> None:
    """
    このコマンドは、既定の親を、指定した親に変更します。2 つの特殊な親は、ウィンドウ階層の最上位レベルのレイアウトを示す「|」、または階層の 1 つ上のレベルを示す「..」です。最上位レベルよりも上へ移動しようとする試みは無効です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ指定した名前でコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    menu (boolean): メニュー項目の親メニュー

    -----------------------------------------

    topLevel (boolean): 階層の最上位レベルレイアウトに移動します。「|」を使用するのと同じです。

    -----------------------------------------

    upLevel (boolean): 階層の1つ上のレベルに移動します。「..」を使用するのと同じです。

    -----------------------------------------

    useTemplate (string): 強制的に、コマンドに現在以外の名前で指定したコマンドテンプレートを使用させます。

    -----------------------------------------

    Return Value:
    None: string親が変更された場合は親の名前。親が変更されていない場合は空の文字列。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def setUITemplate(popTemplate: bool = False,pushTemplate: bool = False) -> None:
    """
    このコマンドは、ELF コマンドの現在(既定)のコマンド テンプレートを設定します。特殊名 NONE を使用すると、テンプレートを現在に設定しないようにすることができます。「uiTemplate」コマンドも参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    popTemplate (boolean): スタックから現在のテンプレートをポップし、スタック内の次のテンプレートを現在に設定します。

    -----------------------------------------

    pushTemplate (boolean): 後からポップできるスタックに現在のテンプレートをプッシュします。

    -----------------------------------------

    Return Value:
    None: string現在選択されているコマンド テンプレートの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def uiTemplate(defineTemplate: str = "",exists: bool = False,useTemplate: str = "") -> None:
    """
    新しいコマンド テンプレート オブジェクトを作成するためのコマンドです。テンプレート オブジェクトによって、複数の UI コマンド用にフラグの既定の引数を保持することが可能です。コマンドの引数を指定するには、個々のコマンドで -defineTemplate フラグと既定にしたいフラグと引数を使用します。setUITemplate コマンドも参照してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    Return Value:
    None: string作成された uiTemplate の名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def waitCursor(state: bool = False) -> None:
    """
    このコマンドは、Maya アプリケーション全体で使われるウェイト カーソルを設定/リセットします。これはスタックとして機能します。waitCursor -state onが実行されると、waitCursor -state offが次に来るまで待ちます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    state (boolean): Maya全体でウェイトカーソルを設定するか、リセットするかを指定します。

    -----------------------------------------

    Return Value:
    None: booleantrue : ウェイト カーソルがオンの場合。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    