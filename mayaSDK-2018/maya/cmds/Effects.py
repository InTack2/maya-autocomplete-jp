
from typing import Any, Container, Dict, Generic, Iterable, Iterator, List, Optional, Set, Tuple, TypeVar, Union, Text



def addDynamic() -> None:
    """
    2 番目の引数として指定したオブジェクトを、1 番目の引数として指定した既存のフィールドまたはエミッタのソースにします。実際には、フィールドがオーナー オブジェクトからフォースを放射し、エミッタがオーナー オブジェクトから放出されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: stringソース オブジェクトとソース オブジェクトにアタッチしたフィールドまたはエミッタの名前。
    """
    pass

    
def addPP(attribute: str = "") -> None:
    """
    CV、頂点、またはパーティクルなどのポイント単位のアトリビュート機能を、エミッタまたはフィールドのアトリビュートに追加します。-atr フラグはアトリビュートを識別します。アトリビュートが指定されていない場合、addPP は警告メッセージを返して処理は何も行いません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): PP機能を追加するアトリビュートの名前。現在サポートされているアトリビュートは、(エミッタの)速度だけです。

    -----------------------------------------

    Return Value:
    None: string[]指定したアトリビュートにポイント単位の機能を追加したエミッタ/フィールドの名前を返します。
    """
    pass

    
def air(attenuation: float = 1.0,directionX: float = 1.0,directionY: float = 1.0,directionZ: float = 1.0,enableSpread: bool = False,fanSetup: bool = False,inheritRotation: bool = False,inheritVelocity: float = 1.0,magnitude: float = 1.0,maxDistance: float = 1.0,name: str = "",perVertex: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),speed: float = 1.0,spread: float = 1.0,torusSectionRadius: float = 1.0,velocityComponentOnly: bool = False,volumeExclusion: bool = False,volumeOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),volumeShape: str = "",volumeSweep: float = 1.0,wakeSetup: bool = False,windSetup: bool = False) -> None:
    """
    このコマンドは、リストされた各オブジェクトに対して新しいフィールドを作成します。このフィールドには DAG で有効なシェイプがあり、関連付けられたディペンデンシー ノードがあります。このフィールドはオブジェクトが所有するフィールドのリストに追加されます。connectDynamic を使用して、フィールドがダイナミック オブジェクトに影響を及ぼすようにします。複数のオブジェクトがリストされている場合、各オブジェクトのために個別のフィールドが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attenuation (float): フィールドの減衰率です。

    -----------------------------------------

    directionX (float): 

    -----------------------------------------

    directionY (float): 

    -----------------------------------------

    directionZ (float): 影響を受けるパーティクルの速度に合わせるために指定する大気の移動方向。注:速度ではなく、方向です。速さを設定するには、-sフラグを使います。

    -----------------------------------------

    enableSpread (boolean): これは、システムに対して、「-sp」で指定されるスプレッド角度を使用するかどうかを通知します。これがfalseの場合、最大距離内にある接続されたオブジェクトすべてが影響を受けます。また、falseに設定されている場合、影響を受けるすべてのオブジェクトは、方向ベクトルに沿ってその速度を強制的に合わせられます。trueに設定されてスプレッドが使用されている場合、フォースの方向はフィールドからオブジェクトの方向になります。

    -----------------------------------------

    fanSetup (boolean): 「windSetup」と同じです。ただし、シミュレーションされるのは、ファンや息を吹きかけるエフェクトです。コマンドラインで同じフラグを渡して、既定を調整することができます。次の値により、「ファン」のシミュレーションが準備できます。inheritVelocity1.0inheritRotationtruecomponentOnlyfalseenableSpreadtruespread.5(中心から45°)

    -----------------------------------------

    inheritRotation (boolean): 「true」に設定されている場合、-dx、-dy、と-dzで指定される方向ベクトルは所有する側のオブジェクトに対してローカルとみなされます。したがって、所有するオブジェクトのトランスフォームで何らかの回転が行われた場合(自身、またはその親による)、大気フィールドの方向ベクトルもそれと同じ回転を受けます。

    -----------------------------------------

    inheritVelocity (float): directionフラグとspeedフラグで定義されるベクトルに追加される、フィールドを所有する側の速度の割合(0から1)です。この2つのベクトルの組み合わせが、大気フィールドの総速度ベクトルになります。これによって、所有するオブジェクトの動きで大気を直接定義することができます。

    -----------------------------------------

    magnitude (float): フィールドの強さです。

    -----------------------------------------

    maxDistance (linear): フィールドが作用する最大距離です。-1は、フィールドに最大距離がないことを示します。

    -----------------------------------------

    name (string): フィールドの名前です。

    -----------------------------------------

    perVertex (boolean): 頂点ごとに適用します。このフラグがtrueに設定されている場合、選択したオブジェクトのそれぞれのポイント(CV、パーティクル、頂点など)に、フォースフィールドの同一コピーが発生します。このフラグをfalseに設定すると、フォースはポイントセットのジオメトリの中心からのみ発せられます。

    -----------------------------------------

    position ([linear, linear, linear]): 重力フィールドを配置する空間内の位置(x,y,z)です。これで、重力がオブジェクトからではなく空間のその位置から発生します。-posを使用する(位置でフィールド作成時)ことも、オブジェクト名を示すこともできることに注意してください。

    -----------------------------------------

    speed (float): 影響を受けるオブジェクトの速さが大気フィールドの(-mag、-dx、-dy、-dzフラグに基づく)スピードに到達する速さです。この値は内部的にクランプされ、0.0と1.0の間になります。値が0.0であれば、大気フィールドは作用しません。値が1.0のときは、大気フィールドのスピードをさらにすばやく合わせようとしますが、必ずしも即時にというわけではありません。

    -----------------------------------------

    spread (float): 方向ベクトルからの角度を示し、その角度の範囲内のオブジェクトが影響を受けます。この値は0から1の範囲になります。0の場合は、方向ベクトルに沿った大気フィールドのちょうど前面だけが影響を受けます。1の場合は、所有するオブジェクトの前にあるすべてのオブジェクト、方向ベクトルから全方向に90度の範囲で影響があります。

    -----------------------------------------

    torusSectionRadius (linear): トーラスボリュームの断面半径です。トーラスにのみ適用されます。トーラスモデリングプリミティブの断面半径と同じです。

    -----------------------------------------

    velocityComponentOnly (boolean): 「false」の場合、大気は影響を受けるオブジェクトを加速または減速してその速度を最終的に大気フィールドの総速度ベクトルに合わせます。「true」の場合、ACCELERTIONのみが影響を受けるオブジェクトに適用され、総速度ベクトルに従ってその速度コンポーネントは、総速度ベクトルの大きさと同じかそれ以上になります。これにより、オブジェクトを減速して速度に合わせるのではなく、コンポーネントに合わせるために加速されます。これは、0より大きな値を持つ-ivフラグを使用するときに大変便利です。

    -----------------------------------------

    volumeExclusion (boolean): フィールドのボリューム排除です。trueの場合は、ボリュームの外側のポイント(ボリュームシェイプアトリビュートによって定義される)が影響を受けます。falseの場合は、ボリュームの内側が影響を受けます。volumeShapeが「none」に設定されている場合は何も起こりません。

    -----------------------------------------

    volumeOffset ([linear, linear, linear]): フィールドのボリュームオフセットです。ボリュームオフセットによって、フィールドのボリュームはフィールドの実際の場所から指定した量だけ移動します。これはフィールドのローカル空間にあります。

    -----------------------------------------

    volumeShape (string): フィールドのボリュームシェイプです。フィールドのボリュームシェイプのアトリビュートを設定、編集、照会します。「none」以外の値に設定すると、フィールドが影響を受ける3-Dボリュームを定義します。指定できる値は、「none」、「cube」、「sphere」、「cylinder」、「cone」、「torus」のいずれかです。

    -----------------------------------------

    volumeSweep (angle): フィールドのボリュームスイープです。球、円錐、円柱、トーラスにのみ適用されます。モデリングのスイープアトリビュートと同じエフェクトです。

    -----------------------------------------

    wakeSetup (boolean): 「windSetup」と「fanSetup」と同様に、「wakeSetup」はフィールドの特定の値を設定して、キャラクタの足や手といった動くオブジェクトの近くの空気の動きをシミュレートします。値は次のように設定されます。inheritVelocity1.0inheritRotationfalsecomponentOnlytrueenableSpreadfalsespeed0.0

    -----------------------------------------

    windSetup (boolean): 上の値のいくつかを指定すると、基本的な風のエフェクトをほぼ設定できます。これにより、特定の値を同じコマンドラインで変更することができます。まず、プリセットの値が設定され、渡された他のフラグの値がすべて考慮されます。次の値により、近似の「風」を設定できます。inheritVelocity0.0inheritRotationtruecomponentOnlyfalseenableSpreadfalse

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def arrayMapper(destAttr: str = "",inputU: str = "",inputV: str = "",mapTo: str = "",target: str = "",type: str = "") -> None:
    """
    arrayMapper ノードを作成し、ターゲット オブジェクトに接続します。-type フラグを使うと、このコマンドは出力値の計算に使う外部ノードも作成します。入力アトリビュートがまだ存在しない場合は、作成されます。出力アトリビュートは必須です。フラグが省略されたときは、必要なオブジェクトを供給するためにセレクション リストが使われます。何も見つからない場合は、アクションは省略されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    destAttr (string): Mapperノードからの出力データ用の下流接続となるアトリビュートを指定します。アトリビュートタイプは、使用する出力アトリビュートを決定するために使われます。float配列はoutValuePPを、ベクトル配列はoutColorPPを取得します。このフラグが省略されると、出力接続は作成されません。

    -----------------------------------------

    inputU (string): MapperのuCoordPPアトリビュートに接続する上流アトリビュートを指定します。このフラグが省略されると、入力接続は作成されません。

    -----------------------------------------

    inputV (string): MapperのvCoordPPアトリビュートに接続する上流アトリビュートを指定します。このフラグが省略されると、入力接続は作成されません。

    -----------------------------------------

    mapTo (string): 出力値の計算に使う既存のノードを指定します。このノードは適切なタイプである必要があります。現在は、rampノードだけを使用できます。

    -----------------------------------------

    target (string): 接続されるターゲットオブジェクトを指定します。

    -----------------------------------------

    type (string): 作成して、出力値の計算に使うノードタイプを指定します。現在は、rampだけが有効です。フラグが省略されたときは、接続は行われず外部ノードは作成されません。

    -----------------------------------------

    Return Value:
    None: string[]作成された arrayMapper ノードの名前。
    """
    pass

    
def collision(friction: float = 1.0,name: str = "",offset: float = 1.0,resilience: float = 1.0) -> None:
    """
    このコマンドは、リストされた各オブジェクトに対して新しいフィールドを作成します。このフィールドには DAG で有効なシェイプがあり、関連付けられたディペンデンシー ノードがあります。このフィールドはオブジェクトが所有するフィールドのリストに追加されます。connectDynamic を使用して、フィールドがダイナミック オブジェクトに影響を及ぼすようにします。複数のオブジェクトがリストされている場合、各オブジェクトのために個別のフィールドが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    friction (float): サーフェスの摩擦です。これは、パーティクルが衝突する場合に減速される、衝突するパーティクルのサーフェスに対して平行な速度です。値0では接線速度はまったく失われず、値1ではパーティクルはサーフェスの法線に沿ってまっすぐに反映します。

    -----------------------------------------

    name (string): フィールドの名前です。

    -----------------------------------------

    offset (float): コネクタのオフセット値です。

    -----------------------------------------

    resilience (float): サーフェスの弾性です。これは、サーフェスの法線に沿って反映される、衝突するパーティクルの速度です。サーフェスの法線に沿って、値が1の場合に完全に反映され、0の場合にまったく反映されません。

    -----------------------------------------

    Return Value:
    None: string[]パーティクル衝突用に設定したジオメトリ名。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def connectDynamic(addScriptHandler: str = "",collisions: str = "",delete: bool = False,emitters: str = "",fields: str = "",removeScriptHandler: int = 1) -> None:
    """
    ダイナミック接続は、オブジェクトのフォース フィールド、エミッタ、あるいは衝突が、他のダイナミック オブジェクトに影響するよう指定します。フィールド、エミッタ、衝突に接続されているダイナミック オブジェクトは、それらのフィールド、エミッタ、あるいは衝突オブジェクトに影響されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addScriptHandler (script): dynamicConnectコマンドの呼び出しを処理する機会が提供されるスクリプトを登録します。このフラグにより、他のダイナミクスシステムがconnectDynamicコマンドの動作をオーバーライドすることができます。このフラグの引数としてPython関数を渡す必要があり、その関数ではfields、emitters、collisionObjects、およびobjectsのキーワード引数を取る必要があります。Python関数は、connectDynamicの呼び出しを処理した場合にTrueを返す必要があります。スクリプトがtrueを返す場合、connectDynamicコマンドは作業がスクリプトによって処理されたとみなすため、何も行いません。すべてのコールバックがfalseを返す場合、connectDynamicコマンドは通常どおりに続行します。addScriptHandlerフラグを他のフラグと一緒に使用することはできません。フラグを使用すると、コマンドは後でコールバックを登録解除するために使用できる数値IDを返します(removeScriptHandlerフラグを参照)。

    -----------------------------------------

    collisions (string): 特定のオブジェクトの衝突モデルに各オブジェクトを接続します。

    -----------------------------------------

    delete (boolean): 既存の接続を削除します。

    -----------------------------------------

    emitters (string): 特定のオブジェクトのエミッタに各オブジェクトを接続します。

    -----------------------------------------

    fields (string): 特定のオブジェクトのフィールドに各オブジェクトを接続します。

    -----------------------------------------

    removeScriptHandler (int): このフラグを使用して、以前にaddScriptHandlerフラグと一緒に登録されたコールバックを除去します。このフラグの引数は、addScriptHandlerフラグを使用したときにdynamicConnectによって返された数値IDです。このフラグが無効なIDで呼び出される場合、コマンドは何も実行しません。このフラグを他のフラグと一緒に使用することはできません。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def constrain(barrier: bool = False,damping: float = 1.0,directionalHinge: bool = False,hinge: bool = False,interpenetrate: bool = False,nail: bool = False,name: str = "",orientation: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),pinConstraint: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),restLength: float = 1.0,spring: bool = False,stiffness: float = 1.0) -> None:
    """
    このコマンドは、リジッドボディをワールド、あるいは他のリジッド ボディにコンストレイントします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    barrier (boolean): バリアコンストレイントを作成します。このコマンドでは、1つのリジッドボディが必要です。

    -----------------------------------------

    damping (float): ダンピング定数を設定します。既定値:0.1範囲:-1000.0～1000.0

    -----------------------------------------

    directionalHinge (boolean): 一方向のヒンジコンストレイントを作成します。このコマンドでは、2つのリジッドボディが必要です。一方向のヒンジは、常に初期の軸方向を保持します。

    -----------------------------------------

    hinge (boolean): ヒンジコンストレイントを作成します。このコマンドでは、1つまたは2つのリジッドボディが必要です。

    -----------------------------------------

    interpenetrate (boolean): コンストレイントで定義されたリジッドボディの貫通を許可(あるいは禁止)します。

    -----------------------------------------

    nail (boolean): ネイルコンストレイントを作成します。このコマンドでは、1つのリジッドボディが必要です。

    -----------------------------------------

    name (string): リジッドコンストレイントに名前を付けます。

    -----------------------------------------

    orientation ([float, float, float]): ワールド空間での、コンストレイントの初期方向を設定します。このコマンドは、ヒンジとバリアコンストレイントについてのみ有効です。既定値:0.00.00.0

    -----------------------------------------

    pinConstraint (boolean): ピンコンストレイントを作成します。このコマンドでは、2つのリジッドボディが必要です。

    -----------------------------------------

    position ([float, float, float]): ワールド空間での、コンストレイントの初期位置を設定します。既定値:単コンストレイントの場合は0.00.00.0で、複コンストレイントの場合はボディの中間点です。

    -----------------------------------------

    restLength (float): レスト長を設定します。既定値:1.0

    -----------------------------------------

    spring (boolean): スプリングコンストレイントを作成します。このコマンドでは、1つまたは2つのリジッドボディが必要です。

    -----------------------------------------

    stiffness (float): スプリングの固さの定数を設定します。既定値:5.0

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def drag(attenuation: float = 1.0,directionX: float = 1.0,directionY: float = 1.0,directionZ: float = 1.0,magnitude: float = 1.0,maxDistance: float = 1.0,name: str = "",perVertex: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),torusSectionRadius: float = 1.0,useDirection: bool = False,volumeExclusion: bool = False,volumeOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),volumeShape: str = "",volumeSweep: float = 1.0) -> None:
    """
    このコマンドは、リストされた各オブジェクトに対して新しいフィールドを作成します。このフィールドには DAG で有効なシェイプがあり、関連付けられたディペンデンシー ノードがあります。このフィールドはオブジェクトが所有するフィールドのリストに追加されます。connectDynamic を使用して、フィールドがダイナミック オブジェクトに影響を及ぼすようにします。複数のオブジェクトがリストされている場合、各オブジェクトのために個別のフィールドが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attenuation (float): フィールドの減衰率です。

    -----------------------------------------

    directionX (float): 方向のXコンポーネントです。

    -----------------------------------------

    directionY (float): 方向のYコンポーネントです。

    -----------------------------------------

    directionZ (float): 方向のZコンポーネントです。

    -----------------------------------------

    magnitude (float): フィールドの強さです。

    -----------------------------------------

    maxDistance (linear): フィールドが作用する最大距離です。-1は、フィールドに最大距離がないことを示します。

    -----------------------------------------

    name (string): フィールドの名前です。

    -----------------------------------------

    perVertex (boolean): 頂点ごとに適用します。このフラグがtrueに設定されている場合、選択したオブジェクトのそれぞれのポイント(CV、パーティクル、頂点など)に、フォースフィールドの同一コピーが発生します。このフラグをfalseに設定すると、フォースはポイントセットのジオメトリの中心からのみ発せられます。

    -----------------------------------------

    position ([linear, linear, linear]): 重力フィールドを配置する空間内の位置(x,y,z)です。これで、重力がオブジェクトからではなく空間のその位置から発生します。-posを使用する(位置でフィールド作成時)ことも、オブジェクト名を示すこともできることに注意してください。

    -----------------------------------------

    torusSectionRadius (linear): トーラスボリュームの断面半径です。トーラスにのみ適用されます。トーラスモデリングプリミティブの断面半径と同じです。

    -----------------------------------------

    useDirection (boolean): 方向の有効化と無効化。このフラグをtrueに設定した場合、-dx引数、-dy引数、-dz引数がドラッグで使用されます。

    -----------------------------------------

    volumeExclusion (boolean): フィールドのボリューム排除です。trueの場合は、ボリュームの外側のポイント(ボリュームシェイプアトリビュートによって定義される)が影響を受けます。falseの場合は、ボリュームの内側が影響を受けます。volumeShapeが「none」に設定されている場合は何も起こりません。

    -----------------------------------------

    volumeOffset ([linear, linear, linear]): フィールドのボリュームオフセットです。ボリュームオフセットによって、フィールドのボリュームはフィールドの実際の場所から指定した量だけ移動します。これはフィールドのローカル空間にあります。

    -----------------------------------------

    volumeShape (string): フィールドのボリュームシェイプです。フィールドのボリュームシェイプのアトリビュートを設定、編集、照会します。「none」以外の値に設定すると、フィールドが影響を受ける3-Dボリュームを定義します。指定できる値は、「none」、「cube」、「sphere」、「cylinder」、「cone」、「torus」のいずれかです。

    -----------------------------------------

    volumeSweep (angle): フィールドのボリュームスイープです。球、円錐、円柱、トーラスにのみ適用されます。モデリングのスイープアトリビュートと同じエフェクトです。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dynCache() -> None:
    """
    現在のタイムで、すべてのパーティクル シェイプの現在の状態がキャッシュされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし
    """
    pass

    
def dynExport(allObjects: bool = False,attribute: str = "",format: str = "",maxFrame: float = 1.0,minFrame: float = 1.0,onlyUpdateParticles: bool = False,overSampling: int = 1,path: str = "") -> None:
    """
    パーティクル データがディスク ファイルに書き出しされます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allObjects (boolean): セレクションリストが無視され、すべてのパーティクルオブジェクトが書き出しされます。オブジェクト名も指定した場合、-allフラグは無視されます。

    -----------------------------------------

    attribute (string): 書き出すアトリビュートの名前。指定したオブジェクトに指定したアトリビュートが含まれない場合、dynExportはエラーとなり、書き出しは実行されません。

    -----------------------------------------

    format (string): 目的のフォーマット。「binary」(「pdb」)、「ascii」(「pda」)、「cache」(「pdc」)のうちいずれかになります。pdcフォーマットは、Mayaパーティクルシステムでパーティクルデータをキャッシュするために使用します。pdaフォーマットオプションとpdbフォーマットオプションは、その他のソフトウェアが関係するパイプライン用です(たとえば、社内で作成したプログラムにデータを送信する場合など)。Mayaではpdaフォーマットとpdbフォーマットを読み込めません。pdbフォーマットの正式な説明はありませんが、ExploreMe/particles/readpdbディレクトリに、このpdbフォーマットを読み取る小さくてシンプルなCプログラム「readpdb」のソースとMakefileが含まれています。ファイルを書き出すプラットフォームで、readpdbをコンパイルして実行する必要があることに注意してください。

    -----------------------------------------

    maxFrame (time): 書き出す終了フレーム。

    -----------------------------------------

    minFrame (time): 書き出す開始フレーム。書き出し操作では、最小フレームから最大フレームのシーンが書き出し中に再生されます。

    -----------------------------------------

    onlyUpdateParticles (boolean): 書き出す前にパーティクルのみを更新するかを指定します。

    -----------------------------------------

    overSampling (int): 書き出し中に使用されるオーバーサンプリング。

    -----------------------------------------

    path (string): ワークスペースのサブディレクトリである「particles」ディレクトリを指定し、書き出し済みファイルを格納できます。既定では、ワークスペースパーティクルディレクトリにファイルが格納されます。-pathは、このディレクトリの相対パスです(注:これは、パスがワークスペースルートディレクトリの相対パスだった、Mayaの旧バージョンからの変更です)。「particles」ディレクトリは、プロジェクトウィンドウかワークスペース-frコマンドを使用して任意の場所に設定できます(この方法で、書き出しに絶対パスを使用することができます)。-pathフラグでは、「/」や「¥」を含む文字列が処理されません。すなわち、ディレクトリ階層の1レベル下のみが処理されます。存在しないパスを指定した場合、可能であればそのパスが作成されます。パスを作成できない場合、警告が表示され、エラーになります。パーティクルデータディレクトリが定義されていないプロジェクトを使用すると、dynExportでは、「particles」という既定のディレクトリが作成されてワークスペースに追加されます。

    -----------------------------------------

    Return Value:
    None: string書き出したファイルへのパス
    """
    pass

    
def dynExpression(creation: bool = False,name: str = "",runtime: bool = False,runtimeAfterDynamics: bool = False,runtimeBeforeDynamics: bool = False,string: str = "") -> None:
    """
    指定したパーティクル シェイプに属するエクスプレッションを記述します。エクスプレッションは、C のような構文で長さに制限がないコードのブロックであり、シーン内の数値アトリビュートかパーティクル単位のアトリビュートで、変換、数学演算、論理演算を実行することができます。1 つのエクスプレッションで、任意の数のアトリビュートの読込みと変更ができます。シーン内のパーティクル シェイプは、runtimeBeforeDynamics 用、runtimeAfterDynamics 用、時間作成用の 3 つのエクスプレッションを持っています。作成時エクスプレッションは、存在時間が 0.0 のオブジェクトにあるすべてのパーティクルで実行されます。ランタイム エクスプレッションは、存在時間が 0.0 より大きいパーティクルで実行されます。expression コマンドで作成したエクスプレッションとは異なり、パーティクル エクスプレッションは常に存在して、所有しているパーティクル オブジェクトのシェイプの一部になります。既定は空の文字列ですが、常に存在します。このため、「-e」フラグを使用する必要はありません。dynExpression のコールは、既定ですべて編集とみなされます。パーティクル単位のアトリビュートはパーティクル シェイプのアトリビュートで、オブジェクト内のパーティクルごとに異なる値を持つ可能性があります。このサンプルには位置と速度が含まれます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    creation (boolean): 渡した文字列が、パーティクルシェイプの作成エクスプレッションであることをコマンドに伝えます。つまり、パーティクルが放出されるとき、または既存パーティクルのシーンの最初で、このエクスプレッションは実行されます。

    -----------------------------------------

    name (string): このコマンドに対して使用する名前です。

    -----------------------------------------

    runtime (boolean): 渡した文字列が、パーティクルシェイプのランタイムエクスプレッションであることをコマンドに伝えます。このエクスプレッションはランタイムの開始時に実行されます。

    -----------------------------------------

    runtimeAfterDynamics (boolean): 渡した文字列が、パーティクルシェイプのランタイムエクスプレッションであることをコマンドに伝えます。このエクスプレッションは、パーティクルの存在時間が0より大きければダイナミクスの後に実行されます。

    -----------------------------------------

    runtimeBeforeDynamics (boolean): 渡した文字列が、パーティクルシェイプのランタイムエクスプレッションであることをコマンドに伝えます。このエクスプレッションは、パーティクルの存在時間が0より大きければダイナミクスの前に実行されます。

    -----------------------------------------

    string (string): エクスプレッションの文字列を設定します。これは、-q/queryフラグと、-rbd/runtimeBeforeDynamicsフラグ、-rab/runtimeAfterDynamicsフラグまたは-c/creationフラグで照会することができます。

    -----------------------------------------

    Return Value:
    None: stringこのエクスプレッションが属するパーティクル シェイプ。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dynGlobals(active: bool = False,listAll: bool = False,overSampling: int = 1) -> None:
    """
    このノードでは、シーン内でアクティブな dynGlobals ノードのアトリビュートの編集か照会が行われます。このタイプのアクティブなノードは 1 つだけ存在できます。アクティブな dynGlobals ノードは、「createNode」コマンドを使用して、またはこのコマンドでノードのアトリビュートのアクセスか編集を行って作成される最初のノードです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    active (boolean): シーン内でアクティブなdynGlobalsノードの名前が返されます。アクティブになるのは、1つのdynGlobalsノードのみです。つまり最初に作成されたものがアクティブになります。その他のdynGlobalsノードは無視されます。

    -----------------------------------------

    listAll (boolean): シーン内のすべてのdynGlobalsノードがリスト表示されます。

    -----------------------------------------

    overSampling (int): シーン内のすべてのパーティクルで現在のオーバーサンプリング値が設定されます。

    -----------------------------------------

    Return Value:
    None: string編集コマンドintまたは文字列用。照会したフラグによっては、照会コマンド用。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dynPref(autoCreate: bool = False,echoCollision: bool = False,runupFrom: int = 1,runupToCurrentTime: bool = False,saveOnQuit: bool = False,saveRuntimeState: bool = False) -> None:
    """
    「リジッドボディの自動作成」、「現在のタイムまでの再計算」、「(前の時間か開始時間からの)再計算」の現在の状態の変更と照会が行われます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    autoCreate (boolean): オンにすると、リジッドボディが自動的に作成されます。

    -----------------------------------------

    echoCollision (boolean): オンにすると、パーティクルシステムがパーティクルごとの衝突イベントで実行しているコマンドをスクリプトエディタ(ScriptEditor)にエコーします。オフにすると、コマンドの出力だけがエコーされます。

    -----------------------------------------

    runupFrom (int): オンの場合、前の時間からランナップします。2にすると、開始時間からランナップします。

    -----------------------------------------

    runupToCurrentTime (boolean): オンにすると、現在のタイムまでシーンが再計算されます。

    -----------------------------------------

    saveOnQuit (boolean): オンの場合、プリファレンスの現在値をuserPrefsファイルに保存します。

    -----------------------------------------

    saveRuntimeState (boolean): オンにすると、パーティクルオブジェクトすべてのランタイム状態と初期状態がファイルに保存されます。オフにすると、初期状態のみが保存されます。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def emit(attribute: str = "",floatValue: float = 1.0,object: str = "",position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),vectorValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0)) -> None:
    """
    放出アクションで、エミッタを使用せずに既存のパーティクル オブジェクトにパーティクルを追加することができます。同時に、このアクションで作成されたパーティクルに、パーティクル単位の任意のアトリビュートを設定することができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): 後続の値と次の-attributeフラグの前にある値フラグを関連付ける、パーティクルオブジェクトのアトリビュートを指定します。このコマンドで後で同じアトリビュートを指定し、最初のアトリビュートをオフにする場所を取得できます。使用されるアトリビュートは、パーティクル単位のアトリビュートである必要があります。アトリビュートのロングネーム、ショートネームいずれも可能です。注:パーティクルごとのアトリビュートは、このコマンドフラグを介して指定される前に、パーティクルオブジェクト上に存在している必要があります。

    -----------------------------------------

    floatValue (float): 「現在の」パーティクルの「現在の」アトリビュートに使用するfloat値を設定します。現在のアトリビュートとは、最新の-attributeフラグで指定されるアトリビュートを指します。現在のパーティクルとは、「現在の」アトリビュートに設定された値の数に該当する-positionフラグの一覧にあるパーティクルを指します。現在のアトリビュートがベクトルのパーティクル単位のアトリビュートであれば、指定したfloat値は、このベクトルの3つのコンポーネントすべてに使用されます。

    -----------------------------------------

    object (string): このフラグは、DAGですぐ上にあるparticleShapeまたはトランスフォームの名前を親として取得します。パーティクルを追加するオブジェクトを指定します。このアクションではセレクションリストが無視されるため、このフラグを渡す必要があります。

    -----------------------------------------

    position ([float, float, float]): パーティクルが作成されるパーティクルオブジェクト空間(通常はワールド空間)の位置を指定します。フラグごとに、1つのパーティクルが作成されます。

    -----------------------------------------

    vectorValue ([float, float, float]): 「現在の」パーティクルの「現在の」アトリビュートに使用するベクトル値を設定します。現在のアトリビュートとは、最新の-attributeフラグで指定されるアトリビュートを指します。現在のパーティクルとは、「現在の」アトリビュートに設定された値の数に該当する-positionフラグの一覧にあるパーティクルを指します。現在のアトリビュートが浮動小数点のパーティクル単位のアトリビュートであれば、このフラグで記述されたベクトルが使用されます。この長さは、SQR(xVal2+yVal2+zVal2)として記述されます。

    -----------------------------------------

    Return Value:
    None: int[]position フラグを渡したのと同じ順序で作成したパーティクルの particleId アトリビュート値のリストを含む整数配列。
    """
    pass

    
def emitter(alongAxis: float = 1.0,aroundAxis: float = 1.0,awayFromAxis: float = 1.0,awayFromCenter: float = 1.0,cycleEmission: str = "",cycleInterval: int = 1,directionX: float = 1.0,directionY: float = 1.0,directionZ: float = 1.0,directionalSpeed: float = 1.0,maxDistance: float = 1.0,minDistance: float = 1.0,name: str = "",needParentUV: bool = False,normalSpeed: float = 1.0,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),randomDirection: float = 1.0,rate: float = 1.0,scaleRateByObjectSize: bool = False,scaleSpeedBySize: bool = False,speed: float = 1.0,speedRandom: float = 1.0,spread: float = 1.0,tangentSpeed: float = 1.0,torusSectionRadius: float = 1.0,type: str = "",volumeOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),volumeShape: str = "",volumeSweep: float = 1.0) -> None:
    """
    補助ダイナミクス オブジェクト(例: フィールド、エミッタ)を作成、編集、または照会します。エミッタ オブジェクトを作成します。オブジェクト名が指定されているか、またはオブジェクトが選択されている場合、エミッタをシーンの指定した名前のオブジェクトまたは選択したオブジェクトに適用します。パーティクルはそれぞれエミッタから放出されます。オブジェクトの名前も指定されず、選択もされていない場合、または -pos オプションが指定されている場合、位置エミッタを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alongAxis (float): ボリュームの中心軸に沿った速度の初期値に乗じる値です。マニュアルの図を参照してください。ボリュームエミッタにのみ適用されます。

    -----------------------------------------

    aroundAxis (float): ボリュームの中心軸のまわりの速度の初期値に乗じる値です。マニュアルの図を参照してください。ボリュームエミッタにのみ適用されます。

    -----------------------------------------

    awayFromAxis (float): ボリュームの中心軸からの速度の初期値に乗じる値です。マニュアルの図を参照してください。円柱、円錐、とトーラスなどのボリュームエミッタにのみ適用されます。

    -----------------------------------------

    awayFromCenter (float): 立方体または球のボリュームエミッタの中心点からの方向の初期速度の乗数です。立方体と球のボリュームエミッタにのみ適用されます。

    -----------------------------------------

    cycleEmission (string): 値は「none」または「frame」です。放出を繰り返すと、指定した時間間隔で乱数ストリームが再開されます。これは、フレーム数または放出されるパーティクル数のいずれかになります。この数値はその都度、cycleIntervalアトリビュートで指定されます。cycleEmissionを「frame」、cycleIntervalを1に設定すると、乱数ストリームはフレームごとに再開されます。cycleIntervalを1より大きい値に設定すると、ゲーム開発のサイクル生成に使用できます。

    -----------------------------------------

    cycleInterval (int): 乱数ストリームが再開してから次に再開するまでのフレームまたはパーティクルの数を指定します。cycleEmissionを参照してください。cycleEmissionがNoneに設定されている場合、何も起こりません。

    -----------------------------------------

    directionX (linear): 放出方向のxコンポーネントです。ディレクショナルエミッタに使用します。ボリュームエミッタの場合はdirectionalSpeedを使用します。

    -----------------------------------------

    directionY (linear): 放出方向のyコンポーネントです。ディレクショナルエミッタに使用します。ボリュームエミッタの場合はdirectionalSpeedを使用します。

    -----------------------------------------

    directionZ (linear): 放出方向のzコンポーネントです。ディレクショナルエミッタに使用します。ボリュームエミッタの場合はdirectionalSpeedを使用します。

    -----------------------------------------

    directionalSpeed (float): ボリュームエミッタの場合のみ、directionX、Y、とZアトリビュートで指定した方向のスピードコンポーネントを追加します。ボリュームエミッタにのみ適用されます。エミッタの別のタイプには適用されません。

    -----------------------------------------

    maxDistance (linear): 放出が終了する最大距離です。

    -----------------------------------------

    minDistance (linear): 放出が開始する最小距離です。

    -----------------------------------------

    name (string): オブジェクト名

    -----------------------------------------

    needParentUV (boolean): aNeedParentUVがtrueの場合、各三角形のセグメントまたはラインセグメントからparentUV値を計算して、ターゲットパーティクルオブジェクトに送信します。また、parentUアトリビュートとparentVアトリビュートをパーティクルオブジェクトに追加して、その値を格納する必要があります。

    -----------------------------------------

    normalSpeed (float): ポイント放出の場合の、法線スピードの倍数です。放出されるパーティクルごとに、サーフェスまたはカーブに対する法線スピードのコンポーネントにこれを乗算します。サーフェスエミッタとカーブエミッタのみ。

    -----------------------------------------

    position ([linear, linear, linear]): ワールド空間の位置です。

    -----------------------------------------

    randomDirection (float): ボリューム放出スピードのランダムコンポーネントの大きさです。

    -----------------------------------------

    rate (float): パーティクルを放出するレートです(整数以外も指定できます)。ポイントエミッションの場合、これは単位時間あたりのポイントごとの割合になります。サーフェスエミッションの場合、これは単位時間あたりの面積ごとの割合になります。

    -----------------------------------------

    scaleRateByObjectSize (boolean): カーブエミッタとサーフェスエミッタにのみ適用します。trueの場合、パーティクルの数はオブジェクトサイズ(面積または長さ)とレート値を乗算したものです。falseの場合、オブジェクトサイズは無視され、レート値のみが変更なしで使用されます。前者は、Mayaバージョン3.0より前の動作です。

    -----------------------------------------

    scaleSpeedBySize (boolean): ボリュームエミッタのスケールがその速度に影響するかどうかを示します。

    -----------------------------------------

    speed (float): 速度の倍数です。放出されるパーティクルの速度にこの数値を乗算します。ボリュームエミッタには適用されません。ボリュームエミッタタイプの場合はdirectionalSpeedを使用します。

    -----------------------------------------

    speedRandom (float): 生成されたパーティクルそれぞれのスピードのランダムな変化の範囲を識別します。ゼロ以外の値に設定した場合、スピードは生成されたパーティクルの平均値になり、そのスピードは±speedRandom/2までの間でランダムに変化します。たとえば、スピードが5でspeedRandomが2のときは、スピードは4と6の間で変化します。

    -----------------------------------------

    spread (float): 指定した方向に沿った、90度の断片としてのランダムなスプレッド(0-1)です。ディレクショナルエミッタのみ。

    -----------------------------------------

    tangentSpeed (float): ポイント放出の接線スピードの倍数です。放出されたパーティクルごとに、サーフェスまたはカーブに対する接線スピードのコンポーネントにこれを乗算します。サーフェスエミッタとカーブエミッタのみ。

    -----------------------------------------

    torusSectionRadius (linear): トーラスボリュームの断面半径です。トーラスにのみ適用されます。トーラスモデリングプリミティブの断面半径と同じです。

    -----------------------------------------

    type (string): エミッタのタイプです。選択肢は、omni、dir、direction、surf、surface、curve、curvです。既定はomniです。このタイプの完全な定義は、全方向ポイントエミッタ、ディレクショナルポイントエミッタ、サーフェスエミッタ、カーブエミッタです。

    -----------------------------------------

    volumeOffset ([linear, linear, linear]): エミッタのボリュームのオフセットです。ボリュームオフセットによって、放出ボリュームはエミッタの実際の場所から指定した量だけ移動します。エミッタのローカル空間にあります。

    -----------------------------------------

    volumeShape (string): エミッタのボリュームシェイプです。フィールドのボリュームシェイプのアトリビュートを設定、編集、照会します。「none」以外の値に設定すると、パーティクルが生成される3-Dボリュームを定義します。指定できる値は、「cube」、「sphere」、「cylinder」、「cone」、「torus」のいずれかです。

    -----------------------------------------

    volumeSweep (angle): エミッタのボリュームのスイープです。球、円錐、円柱、トーラスにのみ適用されます。モデリングのスイープアトリビュートと同じエフェクトです。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def event(count: int = 1,delete: bool = False,dieAtCollision: bool = False,emit: int = 1,list: bool = False,name: str = "",proc: str = "",random: bool = False,rename: str = "",select: bool = False,split: int = 1,spread: float = 1.0,target: str = "") -> None:
    """
    event コマンドは、衝突イベントをパーティクル オブジェクトに割り当てます。衝突イベントは、パーティクル シェイプの複数のアトリビュートに格納されます。event コマンドはイベント名を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    count (uint): このイベントを適用する(各パーティクルの)衝突数です。ゼロ(既定)は、すべての衝突に適用することを意味します。

    -----------------------------------------

    delete (boolean): 指定したイベントを削除します。

    -----------------------------------------

    dieAtCollision (boolean): 「count」で指定した衝突でパーティクルが消滅します。count値が指定されていなければ、最初の衝突で消滅します。

    -----------------------------------------

    emit (uint): 割り当てられたターゲットオブジェクトにn個の追加のパーティクルを放出します。オリジナルの(衝突)パーティクルは存在し続け、オリジナルのオブジェクトの中に残ったままです。新しいパーティクルの存在時間はゼロ、質量は放出する側のパーティクルと同じです。このパーティクルは、ターゲットオブジェクトの速度継承パラメータを使用します。

    -----------------------------------------

    list (boolean): 選択したシェイプのイベントを次のようにすべてリスト表示します。event1Nameevent2Name...。シェイプがまったく識別されない場合、次のようにシェイプのイベントをすべてリスト表示します。shape1Nameevent1Nameshape2Nameevent2Name...。文字配列を返します。

    -----------------------------------------

    name (string): 作成しているイベントに名前を割り当てるか、または編集、照会、削除したいイベントを識別します。例を参照してください。

    -----------------------------------------

    proc (script): イベントが発生するたびにコールするMELプロシージャを指定します。これは、次のような引数を持つグローバルプロシージャである必要があります。globalprocprocName(stringobj,intid,stringobjHit);渡される引数はパーティクルオブジェクトの名前、衝突したパーティクルのID、衝突したオブジェクトの名前です。パーティクル-id-qを使用してパーティクルのアトリビュートの値を取得できます。

    -----------------------------------------

    random (boolean): -splitフラグと-emitフラグを使用します。-randomがtrueに、-splitまたは-emitがnに設定されていれば、1とnの間で均一に分散されたランダムな数のパーティクルが、イベントで作成されます。

    -----------------------------------------

    rename (string): 編集しているイベントに新しい名前を割り当てます。例を参照してください。

    -----------------------------------------

    select (boolean): このフラグは現在サポートしていません。-nameフラグを参照してください。

    -----------------------------------------

    split (uint): 衝突するパーティクルを指定した数の新しいパーティクルに分割します。これらの新しいパーティクルは、割り当てられたターゲットオブジェクトの一部になります。ターゲットが割り当てられていない場合、パーティクルは同じオブジェクトの一部になります。新しいパーティクルは、分割元のパーティクルの現在の存在時間を継承します。このパーティクルは、ターゲットオブジェクトの速度継承パラメータを使用します。放出と分割の両方を設定すると、eventコマンドは両方を実行します。まず新しいパーティクルを放出してから、オリジナルのパーティクルを分割します。これは、放出と分割が両立しなかった旧バージョンからの変更点です。

    -----------------------------------------

    spread (float): 衝突で作成されるパーティクルは、衝突する側のパーティクルの跳ね返る方向からランダムな量だけスプレッドします。このスプレッドは、90度の割合(0-1)として指定されます。spreadが0(既定)に設定されていれば、作成された新しいパーティクルはすべて一致します。

    -----------------------------------------

    target (string): パーティクルを放出または分割するターゲットオブジェクトです。-emitフラグまたは-splitフラグで作成された新しいパーティクルは、このオブジェクトに加えられます。

    -----------------------------------------

    Return Value:
    None: string作成用。リスト時は文字配列です。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def expression(alwaysEvaluate: int = 1,animated: int = 1,attribute: str = "",name: str = "",object: str = "",safe: bool = False,shortNames: bool = False,string: str = "",timeDependent: bool = False,unitConversion: str = "") -> None:
    """
    このコマンドは、現在のシーンに属するエクスプレッションを記述します。エクスプレッションは、変換、数学的な操作、シーンのあらゆる数値アトリビュートの論理的決定を実行でき、C に似た構文がある、長さに制限のないコードのブロックです。1 つのエクスプレッションは、数値アトリビュートをいくつでも読んで変更することができます。理論上、シーンのエクスプレッションはすべて 1 つの長いエクスプレッションに結合することができますが、できるだけ効率的で使用や編集をしやすくするには、分割しておいた方が便利です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alwaysEvaluate (uint): TRUEの場合(既定)、他の入力が変更されて出力が要求されたかに関わらず、時間が変更されるたびにエクスプレッションを評価します。FALSEの場合、1つまたは複数の入力が変更されて出力が要求された場合のみ、エクスプレッションを評価します。「time」または「frame」が入力の場合、エクスプレッションはTRUEに設定されているかのように動作することに注意してください。

    -----------------------------------------

    animated (uint): エクスプレッションノードのアニメーションモードを設定します:0=アニメートしない、1=アニメートする、2=コールバックなしでアニメートする。

    -----------------------------------------

    attribute (string): エクスプレッションに使用するアトリビュートの名前を設定します。

    -----------------------------------------

    name (string): エクスプレッションに使用するディペンデンシーグラフノードの名前を設定します。

    -----------------------------------------

    object (string): エクスプレッションの「default」オブジェクトを設定します。これによって、エクスプレッションライターは頻繁に使用するオブジェクトの名前を入力する必要がありません。次の例を参照してください。

    -----------------------------------------

    safe (boolean): この式の実行中に副作用が生じる可能性がない場合は、trueを返します。安全な式は最適化され、alwaysEvaluateフラグが設定されている場合も、必要なときのみ評価できるようになります。

    -----------------------------------------

    shortNames (boolean): -q/queryフラグとともに使用すると、できるだけ短いアトリビュート名を返すようにようにコマンドに指示します。既定では、オブジェクト名を含めてエクスプレッションにどのように入力するかに関わらず、アトリビュートのロングネームを返します。このフラグを設定するたびに、ショートバージョンで、さらに既定のオブジェクトに属するアトリビュートとしてアトリビュート名を返します。フラグを指定しなければ、オブジェクト名は表示されません。

    -----------------------------------------

    string (string): エクスプレッションの文字列を設定します。

    -----------------------------------------

    timeDependent (boolean): 式が「time」または「frame」キーワードを参照している場合は、trueを返します。これらが参照されていると、強制的に時間に接続されます。式に「safe」フラグが設定されていて時間に依存しない場合は、alwaysEvaluateがオンになっているときでも、常に必要に応じて評価されます。それ以外の場合は、時間経過とともに式はダーティになります。

    -----------------------------------------

    unitConversion (string): 作成時に指定した単位変換ノード選択可能な値は、「closestPoint」、「rayCast」、「closestComponent」です。既定は「all」です。angularOnlyの場合、angularアトリビュートにのみ単位変換ノードを挿入します。(度からラジアンへの変換が可能です)。これはパフォーマンス調整のためです。照会すると、エクスプレッションを作成または最後に編集したときに使用したオプションを返します。

    -----------------------------------------

    Return Value:
    None: string作成されたエクスプレッションの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def expressionEditorListen(listenFile: str = "",listenForAttr: str = "",listenForExpression: str = "",listenForName: str = "",stopListenForAttr: str = "",stopListenForExpression: str = "",stopListenForName: str = "") -> None:
    """
    要求時にエクスプレッション エディタ(Expression Editor)のメッセージを受け取って、通信を行います。このアクションは内部使用のみで、ユーザがコールしてはいけません。エクスプレッション エディタでのみコールします。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    listenFile (string): ファイル引数の変更を受け取ります。

    -----------------------------------------

    listenForAttr (string): ノード引数のアトリビュートの変更を受け取ります。

    -----------------------------------------

    listenForExpression (string): 指定した引数の変更を受け取ります。

    -----------------------------------------

    listenForName (string): ノード引数の名前の変更を受け取ります。

    -----------------------------------------

    stopListenForAttr (string): ノード引数のアトリビュート変更の受け取りを停止します。

    -----------------------------------------

    stopListenForExpression (string): 指定した引数の変更の受け取りを終了します。

    -----------------------------------------

    stopListenForName (string): ノード引数の名前変更の受け取りを停止します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def getParticleAttr(array: bool = False,attribute: str = "",object: str = "") -> None:
    """
    このアクションは、パーティクル オブジェクトまたはコンポーネントの指定したパーティクル単位のアトリビュートに対して、値の配列または平均値と最大オフセットを返します。パーティクル コンポーネントがコマンド ラインで指定されている場合、そのコンポーネントの値だけを返します。オブジェクト名が指定されている場合、そのオブジェクトにあるすべてのパーティクルの値を返します。オブジェクト名は渡されないが、パーティクル オブジェクトまたはコンポーネントが選択されている場合、選択したものの値を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    array (boolean): データの完全な配列が必要かどうかを決めます。trueに設定すると、指定した全パーティクルの値を含むfloatの配列を返します。false(既定)に設定すると、コンポーネントの平均からの平均値と最大オフセットを返します。アトリビュートがベクトルアトリビュートの場合、次の6つの値を返します。平均X、平均Y、平均Z、とコンポーネントのX、Y、Zの最大オフセット。

    -----------------------------------------

    attribute (string): 値を使用するアトリビュートを決めます。パーティクル単位のアトリビュートでなければなりません。

    -----------------------------------------

    object (string): このフラグは現在サポートしていません。代わりに、コマンドラインに必要なコンポーネントやオブジェクトの名前を渡してください。例を参照してください。

    -----------------------------------------

    Return Value:
    None: float[]コマンドの結果
    """
    pass

    
def goal(goal: str = "",index: bool = False,useTransformAsGoal: bool = False,weight: float = 1.0) -> None:
    """
    特定のパーティクル オブジェクトのゴールとなる特定のオブジェクトを指定します。ゴール オブジェクトがジオメトリの場合、パーティクル オブジェクト内の各パーティクルはそれぞれ、ゴールの特定の頂点、CV、ラティス ポイントの位置に追従するか一致しようとします。ゴール オブジェクトがほかのパーティクル オブジェクトの場合、各パーティクルはゴールのパーティクルに追従しようとします。その他の場合、全パーティクルはゴール オブジェクトがトランスフォームする現在位置に追従しようとします。ジオメトリとパーティクル オブジェクトの場合、この後者の動作については、-utr true を使用しても得られます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    goal (string): このフラグは文字列を指定して、コマンドラインのパーティクルオブジェクト、または現在選択されているパーティクルオブジェクトのゴールにします。このフラグを複数回使用して、パーティクルオブジェクトのゴールを複数指定することができます。照会はアトリビュートエディタ(AttributeEditor)で使用されます。

    -----------------------------------------

    index (boolean): ゴールのマルチアトリビュートインデックスの配列を返します。これはアトリビュートエディタ(AttributeEditor)専用です。

    -----------------------------------------

    useTransformAsGoal (boolean): 指定したオブジェクトの、シェイプではなく、トランスフォームを使用します。パーティクルとジオメトリオブジェクトにのみ有効です。一度渡されるだけで、-gで渡された全オブジェクトに適用されます。

    -----------------------------------------

    weight (float): これはゴールウェイト値を0から1に指定します。値が0であればゴールの位置はパーティクルオブジェクトに影響しませんが、ウェイトを1にするとパーティクルオブジェクトはゴールオブジェクトに正確に追従しようとします。このフラグは一度渡されるだけで、-g/-goalフラグで渡された全ゴールにウェイトを設定します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def gravity(attenuation: float = 1.0,directionX: float = 1.0,directionY: float = 1.0,directionZ: float = 1.0,magnitude: float = 1.0,maxDistance: float = 1.0,name: str = "",perVertex: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),torusSectionRadius: float = 1.0,volumeExclusion: bool = False,volumeOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),volumeShape: str = "",volumeSweep: float = 1.0) -> None:
    """
    このコマンドは、リストされた各オブジェクトに対して新しいフィールドを作成します。このフィールドには DAG で有効なシェイプがあり、関連付けられたディペンデンシー ノードがあります。このフィールドはオブジェクトが所有するフィールドのリストに追加されます。connectDynamic を使用して、フィールドがダイナミック オブジェクトに影響を及ぼすようにします。複数のオブジェクトがリストされている場合、各オブジェクトのために個別のフィールドが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attenuation (float): フィールドの減衰率です。

    -----------------------------------------

    directionX (float): 方向のXコンポーネントです。

    -----------------------------------------

    directionY (float): 方向のYコンポーネントです。

    -----------------------------------------

    directionZ (float): 方向のZコンポーネントです。

    -----------------------------------------

    magnitude (float): フィールドの強さです。

    -----------------------------------------

    maxDistance (linear): フィールドが作用する最大距離です。-1は、フィールドに最大距離がないことを示します。

    -----------------------------------------

    name (string): フィールドの名前です。

    -----------------------------------------

    perVertex (boolean): 頂点ごとに適用します。このフラグがtrueに設定されている場合、選択したオブジェクトのそれぞれのポイント(CV、パーティクル、頂点など)に、フォースフィールドの同一コピーが発生します。このフラグをfalseに設定すると、フォースはポイントセットのジオメトリの中心からのみ発せられます。

    -----------------------------------------

    position ([linear, linear, linear]): 重力フィールドを配置する空間内の位置(x,y,z)です。これで、重力がオブジェクトからではなく空間のその位置から発生します。-posを使用する(位置でフィールド作成時)ことも、オブジェクト名を示すこともできることに注意してください。

    -----------------------------------------

    torusSectionRadius (linear): トーラスボリュームの断面半径です。トーラスにのみ適用されます。トーラスモデリングプリミティブの断面半径と同じです。

    -----------------------------------------

    volumeExclusion (boolean): フィールドのボリューム排除です。trueの場合は、ボリュームの外側のポイント(ボリュームシェイプアトリビュートによって定義される)が影響を受けます。falseの場合は、ボリュームの内側が影響を受けます。volumeShapeが「none」に設定されている場合は何も起こりません。

    -----------------------------------------

    volumeOffset ([linear, linear, linear]): フィールドのボリュームオフセットです。ボリュームオフセットによって、フィールドのボリュームはフィールドの実際の場所から指定した量だけ移動します。これはフィールドのローカル空間にあります。

    -----------------------------------------

    volumeShape (string): フィールドのボリュームシェイプです。フィールドのボリュームシェイプのアトリビュートを設定、編集、照会します。「none」以外の値に設定すると、フィールドが影響を受ける3-Dボリュームを定義します。指定できる値は、「none」、「cube」、「sphere」、「cylinder」、「cone」、「torus」のいずれかです。

    -----------------------------------------

    volumeSweep (angle): フィールドのボリュームスイープです。球、円錐、円柱、トーラスにのみ適用されます。モデリングのスイープアトリビュートと同じエフェクトです。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def newton(attenuation: float = 1.0,magnitude: float = 1.0,maxDistance: float = 1.0,minDistance: float = 1.0,name: str = "",perVertex: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),torusSectionRadius: float = 1.0,volumeExclusion: bool = False,volumeOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),volumeShape: str = "",volumeSweep: float = 1.0) -> None:
    """
    このコマンドは、リストされた各オブジェクトに対して新しいフィールドを作成します。このフィールドには DAG で有効なシェイプがあり、関連付けられたディペンデンシー ノードがあります。このフィールドはオブジェクトが所有するフィールドのリストに追加されます。connectDynamic を使用して、フィールドがダイナミック オブジェクトに影響を及ぼすようにします。複数のオブジェクトがリストされている場合、各オブジェクトのために個別のフィールドが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attenuation (float): フィールドの減衰率です。

    -----------------------------------------

    magnitude (float): フィールドの強さです。

    -----------------------------------------

    maxDistance (linear): フィールドが作用する最大距離です。-1は、フィールドに最大距離がないことを示します。

    -----------------------------------------

    minDistance (float): フィールドの影響が作用する最小距離です。距離は、フィールドフォースを求める公式の分母になります。mdを小さな正の値に設定することで、距離が非常に小さくなったときに起こる奇妙な動作を防止できます。

    -----------------------------------------

    name (string): フィールドの名前です。

    -----------------------------------------

    perVertex (boolean): 頂点ごとに適用します。このフラグがtrueに設定されている場合、選択したオブジェクトのそれぞれのポイント(CV、パーティクル、頂点など)に、フォースフィールドの同一コピーが発生します。このフラグをfalseに設定すると、フォースはポイントセットのジオメトリの中心からのみ発せられます。

    -----------------------------------------

    position ([linear, linear, linear]): 重力フィールドを配置する空間内の位置(x,y,z)です。これで、重力がオブジェクトからではなく空間のその位置から発生します。-posを使用する(位置でフィールド作成時)ことも、オブジェクト名を示すこともできることに注意してください。

    -----------------------------------------

    torusSectionRadius (linear): トーラスボリュームの断面半径です。トーラスにのみ適用されます。トーラスモデリングプリミティブの断面半径と同じです。

    -----------------------------------------

    volumeExclusion (boolean): フィールドのボリューム排除です。trueの場合は、ボリュームの外側のポイント(ボリュームシェイプアトリビュートによって定義される)が影響を受けます。falseの場合は、ボリュームの内側が影響を受けます。volumeShapeが「none」に設定されている場合は何も起こりません。

    -----------------------------------------

    volumeOffset ([linear, linear, linear]): フィールドのボリュームオフセットです。ボリュームオフセットによって、フィールドのボリュームはフィールドの実際の場所から指定した量だけ移動します。これはフィールドのローカル空間にあります。

    -----------------------------------------

    volumeShape (string): フィールドのボリュームシェイプです。フィールドのボリュームシェイプのアトリビュートを設定、編集、照会します。「none」以外の値に設定すると、フィールドが影響を受ける3-Dボリュームを定義します。指定できる値は、「none」、「cube」、「sphere」、「cylinder」、「cone」、「torus」のいずれかです。

    -----------------------------------------

    volumeSweep (angle): フィールドのボリュームスイープです。球、円錐、円柱、トーラスにのみ適用されます。モデリングのスイープアトリビュートと同じエフェクトです。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def particle(attribute: str = "",cache: bool = False,conserve: float = 1.0,count: bool = False,deleteCache: bool = False,dynamicAttrList: bool = False,floatValue: float = 1.0,gridSpacing: float = 1.0,inherit: float = 1.0,jitterBasePoint: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),jitterRadius: float = 1.0,lowerLeft: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),name: str = "",numJitters: int = 1,order: int = 1,particleId: int = 1,perParticleDouble: bool = False,perParticleVector: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),shapeName: str = "",upperRight: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),vectorValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0)) -> None:
    """
    ワールド空間のポイントのリストから新しいパーティクル オブジェクトが作成されます。パーティクル オブジェクトが作成されると、新しいパーティクル シェイプと関連するパーティクル オブジェクトのディペンデンシー ノードの名前を返します。オブジェクトを照会すると、照会結果を返します。パーティクル ID かパーティクル配列内でのパーティクルの順位を使用すると、パーティクル単位のアトリビュートを照会できます。オブジェクトを編集した場合は何も返されません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): パーティクル単位のアトリビュートの照会と編集で使用されます。照会か編集を行うアトリビュートの名前を指定します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    cache (boolean): パーティクルシェイプのキャッシングをオンまたはオフにします。

    -----------------------------------------

    conserve (float): 運動量保存のコントロール(0～1の間)。フレームからフレームへ保存されるパーティクルシェイプの既存の運動量の割合を指定します。値を1にすると(既定)、本来のニュートン物理学に対応し、運動量が保存されます。

    -----------------------------------------

    count (boolean): オブジェクトのパーティクル数を返します。

    -----------------------------------------

    deleteCache (boolean): パーティクルシェイプキャッシュを削除します。このコマンドは元に戻せません。

    -----------------------------------------

    dynamicAttrList (boolean): オブジェクトのダイナミックアトリビュートのリストを返します。

    -----------------------------------------

    floatValue (float): パーティクル単位のアトリビュートの編集のみで使用されます。浮動小数アトリビュートの編集を指定し、新しい浮動小数値を続ける必要があります。

    -----------------------------------------

    gridSpacing (linear): グリッド内のパーティクル間の間隔。

    -----------------------------------------

    inherit (float): 放出されるオブジェクトの速度の小数部(0-1)が継承されます。

    -----------------------------------------

    jitterBasePoint ([linear, linear, linear]): ジッタのベースポイント(中心点)。それぞれのベースポイントで、ジッタの1つのスウォッチが作成されます。コマンドラインで指定される順序で、ベースポイントを含むその他のフラグと組み合わせられます。その他のフラグのインスタンスが十分に使用できない場合、-jpbのその他すべてのインスタンスに、ラインの最後のものが使用されます。

    -----------------------------------------

    jitterRadius (linear): パーティクルインスタンスを配置する、中心からの最大半径。

    -----------------------------------------

    lowerLeft ([linear, linear, linear]): グリッドの左下のポイント。

    -----------------------------------------

    name (string): パーティクルオブジェクトの名前。

    -----------------------------------------

    numJitters (uint): パーティクルごとのジッタ(インスタンス)の数。

    -----------------------------------------

    order (int): パーティクル単位のアトリビュートの照会と編集で使用されます。アトリビュートの照会か編集を行うパーティクルの、パーティクル配列のゼロベースの順序(インデックス)を指定します。パーティクル単位のアトリビュートの値を照会する場合は、-attributeフラグと-idフラグか-orderフラグが必要となり、-qフラグの前に引数を指定する必要があります。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    particleId (int): パーティクル単位のアトリビュートの照会と編集で使用されます。アトリビュートの照会か編集を行うパーティクルのIDを指定します。パーティクル単位のアトリビュートの値を照会する場合は、-attributeフラグと-idフラグか-orderフラグが必要となり、-qフラグの前に引数を指定する必要があります。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    perParticleDouble (boolean): 初期状態アトリビュート、キャッシュアトリビュート、情報のみのアトリビュートを除き、パーティクル単位の二重アトリビュートのリストを返します。

    -----------------------------------------

    perParticleVector (boolean): 初期状態アトリビュート、キャッシュアトリビュート、情報のみのアトリビュートを除き、パーティクル単位のベクトルアトリビュートのリストを返します。

    -----------------------------------------

    position ([linear, linear, linear]): それぞれのパーティクルのワールド空間での位置。

    -----------------------------------------

    shapeName (string): ジオメトリのインスタンス化で使用するシェイプ名を指定します。パーティクルオブジェクトに名前を付ける-nフラグと混同しないでください。

    -----------------------------------------

    upperRight ([linear, linear, linear]): グリッドの右上のポイント。

    -----------------------------------------

    vectorValue ([float, float, float]): パーティクル単位のアトリビュートの編集のみで使用されます。ベクトルアトリビュートの編集を指定し、ベクトルの3つの浮動小数値を続ける必要があります。

    -----------------------------------------

    Return Value:
    None: string作成したパーティクル オブジェクトの名前照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def particleExists() -> None:
    """
    このコマンドは、指定した名前のパーティクルまたはソフト オブジェクトが存在するかどうか照会するために使用します。トランスフォーム名とシェイプ名のどちらでも使用できるほか、ソフト オブジェクト名も使用可能です。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: boolean指定した名前のパーティクル オブジェクトかソフト オブジェクトが存在する場合は true。存在しない場合は false を返します。
    """
    pass

    
def particleFill(closePacking: bool = False,doubleWalled: bool = False,maxX: float = 1.0,maxY: float = 1.0,maxZ: float = 1.0,minX: float = 1.0,minY: float = 1.0,minZ: float = 1.0,particleDensity: float = 1.0,resolution: int = 1) -> None:
    """
    このコマンドは、選択したオブジェクトをパーティクルのグリッドで塗りつぶす nParticle システムを生成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    closePacking (boolean): オンにすると、パーティクルは六角形に詰め込む形で、可能な限り近接して配置されます。それ以外では、パーティクルは均一なグリッドラティスに詰め込まれます。

    -----------------------------------------

    doubleWalled (boolean): このフラグは、塗りつぶすオブジェクトの厚みがモデリングされている場合(たとえばマグの場合)に使用します。使用しないと、壁の内部にパーティクルが作成されます。doubleWalledでは一部のケースを良好に処理できません。たとえば、doubleWalledのドーナツシェイプでは、ドーナツの中央領域が塗りつぶされることがあります。このような場合、内部の壁を独立したメッシュにしてから、doubleWalledを使用しないで塗り潰したほうが良好になることがあります。

    -----------------------------------------

    maxX (float): オブジェクトのX境界との相対値で表される、X方向の最大塗り潰し境界。値0は完全に空で、1は完全な塗り潰しです。既定値は1、または完全な塗り潰しです。

    -----------------------------------------

    maxY (float): オブジェクトのY境界との相対値で表される、Y方向の最大塗り潰し境界。値0は完全に空で、1は完全な塗り潰しです。既定値は1、または完全な塗り潰しです。

    -----------------------------------------

    maxZ (float): オブジェクトのZ境界との相対値で表される、Z方向の最大塗り潰し境界。値0は完全に空で、1は完全な塗り潰しです。既定値は1、または完全な塗り潰しです。

    -----------------------------------------

    minX (float): オブジェクトのX境界との相対値で表される、X方向の最小塗り潰し境界。値0は完全な塗り潰しで、1は完全に空です。既定値は0、または完全な塗り潰しです。

    -----------------------------------------

    minY (float): オブジェクトのY境界との相対値で表される、Y方向の最小塗り潰し境界。値0は完全な塗り潰しで、1は完全に空です。既定値は0、または完全な塗り潰しです。

    -----------------------------------------

    minZ (float): オブジェクトのZ境界との相対値で表される、Z方向の最小塗り潰し境界。値0は完全な塗り潰しで、1は完全に空です。既定値は0、または完全な塗り潰しです。

    -----------------------------------------

    particleDensity (float): パーティクルのサイズをコントロールします。値1.0では、パーティクルサイズは、解像度パラメータとオブジェクトの境界線によって定義されたグリッド間隔と完全に一致します。サーフェスをオーバーラップするパーティクルは、パーティクルの中心が内部であっても拒否されます。

    -----------------------------------------

    resolution (int): これによって、生成されるパーティクルの総数が定義されます。この総数は、オブジェクトのバウンディングボックスの最長の軸に沿った解像度を表します。立方体シェイプでは、パーティクルの潜在的な合計数は、解像度の立方体になります。他のシェイプでは、より少なくなります。このフラグの既定値は10で、立方体シェイプに対して1000個のパーティクルを生成できます。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def particleInstancer(addObject: bool = False,aimAxis: str = "",aimDirection: str = "",aimPosition: str = "",aimUpAxis: str = "",aimWorldUp: str = "",attributeMapping: bool = False,cycle: str = "",cycleStartObject: str = "",cycleStep: float = 1.0,cycleStepUnits: str = "",index: int = 1,instanceId: str = "",levelOfDetail: str = "",name: str = "",object: str = "",objectIndex: str = "",particleAge: str = "",position: str = "",removeObject: bool = False,rotation: str = "",rotationOrder: str = "",rotationType: str = "",rotationUnits: str = "",scale: str = "",shear: str = "",visibility: str = "") -> None:
    """
    このコマンドを使用してパーティクル インスタンサ ノードを作成し、パーティクル シェイプとインスタンサ ノードに適切なアトリビュートを設定します。パーティクル シェイプとインスタンサ ノードの間に必要な接続も作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addObject (boolean): このフラグは、-objectフラグで指定したオブジェクトを、インスタンスオブジェクトとしてインスタンサノードに追加することを示します。

    -----------------------------------------

    aimAxis (string): このフラグはインスタンスオブジェクトのエイム軸に使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    aimDirection (string): このフラグはインスタンスオブジェクトのエイム方向に使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    aimPosition (string): このフラグはインスタンスオブジェクトのエイム位置に使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    aimUpAxis (string): このフラグはインスタンスオブジェクトのエイムアップ軸に使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    aimWorldUp (string): このフラグはインスタンスオブジェクトのエイムワールドアップに使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    attributeMapping (boolean): このフラグはパーティクルアトリビュートのマッピングリストを照会します。

    -----------------------------------------

    cycle (string): このフラグはインスタンサノードのサイクルアトリビュートを設定、または照会します。オプションは、「none」と「sequential」で、既定は「none」です。

    -----------------------------------------

    cycleStartObject (string): このフラグはインスタンスオブジェクトのサイクル開始オブジェクトに使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    cycleStep (float): このフラグは、インスタンサノードのサイクルステップアトリビュートを設定、または照会します。このアトリビュートは、ステップのサイズをフレーム単位または秒単位で表します(cycleStepUnit参照)。

    -----------------------------------------

    cycleStepUnits (string): このフラグはインスタンサノードのサイクルステップ単位アトリビュートを設定、または照会します。オプションは「frames」か「seconds」で、既定は「frames」です。

    -----------------------------------------

    index (int): このフラグを使用して、i番目のインスタンスオブジェクトの名前を照会します。

    -----------------------------------------

    instanceId (string): このフラグはインスタンスオブジェクトのIDに使用するパーティクルアトリビュート名を照会します。

    -----------------------------------------

    levelOfDetail (string): このフラグは、インスタンスオブジェクトのLODを設定、または照会します。オプションは、「geometry」、「boundingBox」、「boundingBoxes」で、既定は「geometry」です。

    -----------------------------------------

    name (string): このフラグは、インスタンサノードの名前を設定、または照会します。

    -----------------------------------------

    object (string): このフラグは、インスタンスオブジェクトのリストから追加、または除去されるオブジェクトを指定します。このフラグは-addObjectフラグと-removeフラグと一緒に使用します。コマンドラインでどちらのフラグも指定しないと、-addObjectを指定したと仮定されます。

    -----------------------------------------

    objectIndex (string): このフラグはインスタンスオブジェクトのオブジェクトインデックスに使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    particleAge (string): このフラグはインスタンスオブジェクトの存在時間に使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    position (string): 既定は「worldPosition」です。このフラグはインスタンスオブジェクトの位置に使用するパーティクルアトリビュート名を設定、または照会します。既定のアトリビュートはworldPositionです。

    -----------------------------------------

    removeObject (boolean): このフラグは、-objectフラグで指定したオブジェクトを、インスタンスオブジェクトとしてインスタンサノードから除去することを示します。

    -----------------------------------------

    rotation (string): このフラグはインスタンスオブジェクトの回転に使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    rotationOrder (string): このフラグは、-rotationフラグに関連する回転順序を指定します。オプションは、XYZ、XZY、YXZ、YZX、ZXY、ZYXで、既定のアトリビュートはXYZです。

    -----------------------------------------

    rotationType (string): このフラグはインスタンスオブジェクトの回転タイプに使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    rotationUnits (string): このフラグは、rotationフラグに関連する回転単位を指定します。オプションは、度かラジアンで、既定のアトリビュートは度です。

    -----------------------------------------

    scale (string): このフラグはインスタンスオブジェクトのスケールに使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    shear (string): このフラグはインスタンスオブジェクトのシアに使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    visibility (string): このフラグはインスタンスオブジェクトの可視性に使用するパーティクルアトリビュート名を設定、または照会します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def particleRenderInfo(attrList: int = 1,attrListAll: bool = False,name: int = 1,renderTypeCount: bool = False) -> None:
    """
    このアクションでパーティクル レンダー サブクラスの情報にアクセスできます。これは、TdynRenderBase から引き出されます。このアクションは、レンダリングに使用するアトリビュートの情報を集めるためにアトリビュート エディタ(Attribute Editor)で主に使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attrList (int): このレンダータイプで使用するアトリビュートのリストを返します。

    -----------------------------------------

    attrListAll (boolean): パーティクルオブジェクトで使用するすべてのレンダーアトリビュートの完全なリストを返します。パーティクル単位のアトリビュートも含まれます。

    -----------------------------------------

    name (int): レンダータイプを使用するレンダーサブクラスの名前を返します。

    -----------------------------------------

    renderTypeCount (boolean): パーティクルの登録済みレンダークラスの数を返します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def radial(attenuation: float = 1.0,magnitude: float = 1.0,maxDistance: float = 1.0,name: str = "",perVertex: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),torusSectionRadius: float = 1.0,type: float = 1.0,volumeExclusion: bool = False,volumeOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),volumeShape: str = "",volumeSweep: float = 1.0) -> None:
    """
    このコマンドは、リストされた各オブジェクトに対して新しいフィールドを作成します。このフィールドには DAG で有効なシェイプがあり、関連付けられたディペンデンシー ノードがあります。このフィールドはオブジェクトが所有するフィールドのリストに追加されます。connectDynamic を使用して、フィールドがダイナミック オブジェクトに影響を及ぼすようにします。複数のオブジェクトがリストされている場合、各オブジェクトのために個別のフィールドが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attenuation (float): フィールドの減衰率です。

    -----------------------------------------

    magnitude (float): フィールドの強さです。

    -----------------------------------------

    maxDistance (linear): フィールドが作用する最大距離です。-1は、フィールドに最大距離がないことを示します。

    -----------------------------------------

    name (string): フィールドの名前です。

    -----------------------------------------

    perVertex (boolean): 頂点ごとに適用します。このフラグがtrueに設定されている場合、選択したオブジェクトのそれぞれのポイント(CV、パーティクル、頂点など)に、フォースフィールドの同一コピーが発生します。このフラグをfalseに設定すると、フォースはポイントセットのジオメトリの中心からのみ発せられます。

    -----------------------------------------

    position ([linear, linear, linear]): 重力フィールドを配置する空間内の位置(x,y,z)です。これで、重力がオブジェクトからではなく空間のその位置から発生します。-posを使用する(位置でフィールド作成時)ことも、オブジェクト名を示すこともできることに注意してください。

    -----------------------------------------

    torusSectionRadius (linear): トーラスボリュームの断面半径です。トーラスにのみ適用されます。トーラスモデリングプリミティブの断面半径と同じです。

    -----------------------------------------

    type (float): 放射状フィールド(0-1)のタイプです。フィールドの作用を減衰するアルゴリズムを制御します。タイプ1は下位互換性のために提供され、Alias|WavefrontDynamationと同じアルゴリズムを指定します。0から1の値は、一次的なブレンドになります。

    -----------------------------------------

    volumeExclusion (boolean): フィールドのボリューム排除です。trueの場合は、ボリュームの外側のポイント(ボリュームシェイプアトリビュートによって定義される)が影響を受けます。falseの場合は、ボリュームの内側が影響を受けます。volumeShapeが「none」に設定されている場合は何も起こりません。

    -----------------------------------------

    volumeOffset ([linear, linear, linear]): フィールドのボリュームオフセットです。ボリュームオフセットによって、フィールドのボリュームはフィールドの実際の場所から指定した量だけ移動します。これはフィールドのローカル空間にあります。

    -----------------------------------------

    volumeShape (string): フィールドのボリュームシェイプです。フィールドのボリュームシェイプのアトリビュートを設定、編集、照会します。「none」以外の値に設定すると、フィールドが影響を受ける3-Dボリュームを定義します。指定できる値は、「none」、「cube」、「sphere」、「cylinder」、「cone」、「torus」のいずれかです。

    -----------------------------------------

    volumeSweep (angle): フィールドのボリュームスイープです。球、円錐、円柱、トーラスにのみ適用されます。モデリングのスイープアトリビュートと同じエフェクトです。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def rigidBody(active: bool = False,angularVelocity: bool = False,applyForceAt: str = "",bounciness: float = 1.0,cache: bool = False,centerOfMass: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),collisions: bool = False,contactCount: bool = False,contactName: bool = False,contactPosition: bool = False,damping: float = 1.0,deleteCache: bool = False,dynamicFriction: float = 1.0,force: bool = False,ignore: bool = False,impulse: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),impulsePosition: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),initialAngularVelocity: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),initialVelocity: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),layer: int = 1,lockCenterOfMass: bool = False,mass: float = 1.0,name: str = "",orientation: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),particleCollision: bool = False,passive: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),removeShape: str = "",solver: str = "",spinImpulse: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),standInObject: str = "",staticFriction: float = 1.0,tesselationFactor: int = 1,velocity: bool = False) -> None:
    """
    ポリゴン サーフェスか NURBS サーフェスからリジッド ボディを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    active (boolean): アクティブリジッドボディを作成します。アクティブリジッドボディは衝突の作用を受け、衝突を起こし、ダイナミックフィールドの影響を受けます。これは既定です。

    -----------------------------------------

    angularVelocity (boolean): リジッドボディの現在の角速度です。

    -----------------------------------------

    applyForceAt (string): リジッドボディにフォースを適用する方法を決めます。選択肢は、centerOfMass、boundingBox、verticesOrCVsです。既定:boundingBox

    -----------------------------------------

    bounciness (float): リジッドボディの回復(弾性)を設定します。範囲:0.0-2.0既定:0.6

    -----------------------------------------

    cache (boolean): リジッドボディのキャッシュのオン(1)とオフ(0)を切り替えます。既定:オフ

    -----------------------------------------

    centerOfMass ([float, float, float]): リジッドボディの重心(x,y,z)を設定します。既定:実際の重心。

    -----------------------------------------

    collisions (boolean): リジッドボディの衝突のオンとオフを切り替えます。衝突がオフの場合、リジッドボディは他のリジッドボディと衝突しません。既定:オン。

    -----------------------------------------

    contactCount (boolean): リジッドボディの現在のコンタクト数を返します。

    -----------------------------------------

    contactName (boolean): このシェイプにコンタクトしているすべてのリジッドボディの名前を返します。各コンタクトについて1つの名前が返されます。

    -----------------------------------------

    contactPosition (boolean): すべてのコンタクト位置を返します。各コンタクトについて1つの位置が返されます。

    -----------------------------------------

    damping (float): リジッドボディのダンピング値を設定します。範囲:-2.0-2.0既定:0.0

    -----------------------------------------

    deleteCache (boolean): リジッドボディのキャッシュを削除します(キャッシュが存在する場合)。

    -----------------------------------------

    dynamicFriction (float): リジッドボディの動摩擦を設定します。範囲:0.0-1.0既定:0.2

    -----------------------------------------

    force (boolean): リジッドボディに作用している現在のフォースです。

    -----------------------------------------

    ignore (boolean): リジッドボディがリジッドボディソルバ内で無視されます。既定:オフ

    -----------------------------------------

    impulse ([float, float, float]): リジッドボディに瞬間的なインパルスフォースを適用します。既定:0.00.00.0

    -----------------------------------------

    impulsePosition ([float, float, float]): インパルスフォースを適用する位置。既定:リジッドボディの重心。

    -----------------------------------------

    initialAngularVelocity ([float, float, float]): リジッドボディの初期角速度を設定します。既定:0.00.00.0

    -----------------------------------------

    initialVelocity ([float, float, float]): リジッドボディの初期速度を設定します。既定:0.00.00.0

    -----------------------------------------

    layer (int): リジッドボディの衝突レイヤを設定します。同じ衝突レイヤにあるリジッドボディだけが、互いに衝突できます。範囲:>=0既定:0

    -----------------------------------------

    lockCenterOfMass (boolean): リジッドボディの重心をロックします。既定:オフ

    -----------------------------------------

    mass (float): リジッドボディの質量を設定します。範囲:>0既定:1.0

    -----------------------------------------

    name (string): 指定した名前をリジッドボディに割り当てます。

    -----------------------------------------

    orientation ([float, float, float]): リジッドボディの初期方向(x,y,z)を設定します。既定:現在の方向。

    -----------------------------------------

    particleCollision (boolean): リジッドボディがパーティクルと衝突する機能のオンとオフを切り替えます。パーティクルはリジッドボディにフォースの影響を及ぼします。既定:オフ

    -----------------------------------------

    passive (boolean): パッシブリジッドボディを作成します。パッシブリジッドボディは衝突に反応しませんが、アクティブリジッドボディと衝突することができます。パッシブリジッドボディは、ダイナミックフィールドの影響は受けません。キーフレームを設定できるのは、パッシブリジッドボディだけです。

    -----------------------------------------

    position ([float, float, float]): リジッドボディの初期位置(x,y,z)を設定します。既定:現行位置。

    -----------------------------------------

    removeShape (string): 名前の付いたシェイプを削除します。

    -----------------------------------------

    solver (string): このリジッドノードが属するソルバの名前。ソルバが存在しない場合は、リジッドボディは作成されません。ソルバを追加する編集フラグを設定すると、リジッドボディはそのソルバに移動します。

    -----------------------------------------

    spinImpulse ([float, float, float]): リジッドボディにスピンインパルス(瞬間的な回転)フォースを適用します。既定:0.00.00.0

    -----------------------------------------

    standInObject (string): シミュレーションの際、シミュレータが代用オブジェクトを使用します。選択肢はnone、cube、sphereです。既定は「none」です。既定:なし

    -----------------------------------------

    staticFriction (float): リジッドボディの静止摩擦を設定します。範囲:0.0-1.0既定:0.2

    -----------------------------------------

    tesselationFactor (int): リジッドボディサーフェスのテッセレーション係数を設定します。範囲:>=10既定:200

    -----------------------------------------

    velocity (boolean): リジッドボディの現在の速度です。

    -----------------------------------------

    Return Value:
    None: string新しいリジッド ボディの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def rigidSolver(autoTolerances: bool = False,bounciness: bool = False,cacheData: bool = False,collide: bool = False,collisionTolerance: float = 1.0,contactData: bool = False,create: bool = False,current: bool = False,deleteCache: bool = False,displayCenterOfMass: bool = False,displayConstraint: bool = False,displayVelocity: bool = False,dynamics: bool = False,friction: bool = False,interpenetrate: bool = False,interpenetrationCheck: bool = False,name: str = "",rigidBodies: bool = False,rigidBodyCount: bool = False,showCollision: bool = False,showInterpenetration: bool = False,solverMethod: int = 1,startTime: float = 1.0,state: bool = False,statistics: bool = False,stepSize: float = 1.0,velocityVectorScale: float = 1.0) -> None:
    """
    リジッド ソルバのアトリビュートを設定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    autoTolerances (boolean): 許容値を自動的に計算するかどうかを切り替えます。自動計算による許容値は、既定のまたはユーザ定義のステップサイズの値や、シーンのオブジェクトに基づいて計算される衝突の許容値より優先されます。既定:0(オフ)

    -----------------------------------------

    bounciness (boolean): シミュレーションのオブジェクトで弾性のオンとオフを切り替えます。既定値:オン

    -----------------------------------------

    cacheData (boolean): システム内のすべてのリジッドボディでキャッシュをオンに切り替えます。既定値:オフ

    -----------------------------------------

    collide (boolean): リスト表示した2つのリジッドボディが相互に貫通しないようにします。既定:すべてのリジッドボディで衝突がオンになっています。

    -----------------------------------------

    collisionTolerance (float): 衝突の許容値を設定します。2つのオブジェクトが衝突するとみなされる場合にはエラーとなります。範囲:0.0005-1.000既定:0.02

    -----------------------------------------

    contactData (boolean): すべてのリジッドボディでコンタクトデータ情報のオンとオフを切り替えます。既定値:オフ

    -----------------------------------------

    create (boolean): 新しいリジッドソルバを作成します。

    -----------------------------------------

    current (boolean): リジッドソルバを現在のソルバとして設定します。

    -----------------------------------------

    deleteCache (boolean): システム内のすべてのリジッドボディでキャッシュを削除します。

    -----------------------------------------

    displayCenterOfMass (boolean): 重心アイコンを表示します。既定値:オン

    -----------------------------------------

    displayConstraint (boolean): コンストレイントベクトルを表示します。既定値:オン

    -----------------------------------------

    displayVelocity (boolean): 速度ベクトルを表示します。既定値:オフ

    -----------------------------------------

    dynamics (boolean): シミュレーションのオブジェクトでダイナミクスのオンとオフを切り替えます。既定値:オン

    -----------------------------------------

    friction (boolean): シミュレーションのオブジェクトで摩擦のオンとオフを切り替えます。既定値:オン

    -----------------------------------------

    interpenetrate (boolean): リスト表示した2つのリジッドボディを相互に貫通させます。既定:相互貫通はすべてのボディでオフになっています。

    -----------------------------------------

    interpenetrationCheck (boolean): シーン内で相互に貫通するリジッドボディをチェックします。

    -----------------------------------------

    name (string): 新しいオブジェクトの名前です。

    -----------------------------------------

    rigidBodies (boolean): ソルバ内のリジッドボディのリスト表示を返します。

    -----------------------------------------

    rigidBodyCount (boolean): ソルバ内のリジッドボディの数を返します。

    -----------------------------------------

    showCollision (boolean): 衝突するオブジェクトを別のカラーで表示します。

    -----------------------------------------

    showInterpenetration (boolean): 相互に貫通するオブジェクトを別のカラーで表示します。

    -----------------------------------------

    solverMethod (int): ソルバのメソッドを設定します。選択肢は0、1、2です。0＝Euler(最も速い/最も不正確)、1＝Runge-Kutta(Eulerより遅い/Eulerより正確)、2＝適応Runge-Kutta(最も遅い/最も正確)。既定は2(適応Runge-Kutta)です。

    -----------------------------------------

    startTime (float): ソルバの開始時間を設定します。

    -----------------------------------------

    state (boolean): リジッドソルバのオンとオフを切り替えます。

    -----------------------------------------

    statistics (boolean): すべてのリジッドボディでスタティック情報のオンとオフを切り替えます。既定値:オフ

    -----------------------------------------

    stepSize (float): ソルバのステップサイズを設定します。ソルバが1回で取りうるステップの最大のサイズです。範囲:0.0004-0.100既定:0.0333

    -----------------------------------------

    velocityVectorScale (float): 速度ベクトルの表示をスケールします。既定値:1.0

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def runup(cache: bool = False,fromPreviousFrame: bool = False,fromStartFrame: bool = False,maxFrame: float = 1.0,state: bool = False) -> None:
    """
    複数のフレームのフレームを通してシーンを再生し、その過程でダイナミック オブジェクトを強制的に評価します。最大フレームを指定しないと、現在のタイムまで再生されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    cache (boolean): 再計算後に状態をキャッシュします。

    -----------------------------------------

    fromPreviousFrame (boolean): 前に評価したフレームからアニメーションを再計算します。フラグを指定しないと、これが既定になります。

    -----------------------------------------

    fromStartFrame (boolean): 開始フレームからアニメーションを再計算します。フラグを指定しないと、-fromPreviousFrameが既定になります。

    -----------------------------------------

    maxFrame (time): 現在のユーザ時間単位再計算の終了時間です。再計算は、すべてのダイナミックオブジェクトの最小開始フレームから常に始まります。

    -----------------------------------------

    state (boolean): 再計算とキャッシュのオンとオフを切り替えます。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def saveInitialState(attribute: str = "",saveall: bool = False) -> None:
    """
    saveInitialState は、ダイナミック オブジェクトの現在の状態を初期状態として保存します。ダイナミック オブジェクトとは、パーティクル シェイプ、リジッド ボディ、リジッド コンストレイント、またはリジッド ソルバのことです。オブジェクトが指定されていない場合は、選択した任意のオブジェクトの初期状態を保存します。このコマンドは、初期状態を保存したオブジェクトの名前を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): 指定したアトリビュートの初期状態だけを保存します。これは多目的フラグです。

    -----------------------------------------

    saveall (boolean): シーン内のすべてのダイナミックオブジェクトの初期状態を保存します。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果
    """
    pass

    
def setDynamic(allOnWhenRun: bool = False,disableAllOnWhenRun: bool = False,setAll: bool = False,setOff: bool = False,setOn: bool = False) -> None:
    """
    setDynamic は、パーティクルオブジェクトの isDynamic アトリビュートをオンまたはオフに設定します。オブジェクトが指定されていない場合、選択した任意のオブジェクトのアトリビュートを設定します。-all フラグが付けられた場合、シーン内のすべてのパーティクル オブジェクトのアトリビュートを設定します。既定ではアトリビュートを true (オン)に設定します。-off フラグが付けられた場合は、アトリビュートを false (オフ)に設定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    allOnWhenRun (boolean): 廃止されました。サポートされていないか、または使用する必要がありません。

    -----------------------------------------

    disableAllOnWhenRun (boolean): 廃止されました。サポートされていないか、または使用する必要がありません。

    -----------------------------------------

    setAll (boolean): すべてのオブジェクトに対して設定を行います。

    -----------------------------------------

    setOff (boolean): isDynamicをfalseに設定します。

    -----------------------------------------

    setOn (boolean): isDynamicをtrueに設定します。既定では、このフラグが設定されます。

    -----------------------------------------

    Return Value:
    None: string配列
    """
    pass

    
def setParticleAttr(attribute: str = "",floatValue: float = 1.0,object: str = "",randomFloat: float = 1.0,randomVector: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),relative: bool = False,vectorValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0)) -> None:
    """
    このアクションは、すべてのパーティクルの選択したアトリビュートの値、あるいは選択または渡されたパーティクル オブジェクトの選択したコンポーネントの値を設定します。コマンド ラインにコンポーネントを渡すことはできません。コンポーネントの値を設定するには、コンポーネントを選択し、パーティクル オブジェクトの名前だけをこのアクションに渡す必要があります。アトリビュートがベクトル型アトリビュートで、-vv フラグが渡される場合、渡される 3 つの浮動小数点数が値の設定に使用されます。アトリビュートがベクトル型で、-fv フラグが渡され -vv フラグは渡されない場合、アトリビュートの X 値、Y 値、Z 値ごとに浮動小数点数が繰り返されます。同様に、アトリビュートが浮動小数点型アトリビュートであり、ベクトル値が渡される場合、渡されるベクトルの長さがアトリビュート値として使用されます。注: 渡されるアトリビュートは、パーティクル単位のアトリビュートである必要があります



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): 設定するアトリビュートをアクションに指示します。

    -----------------------------------------

    floatValue (float): 値を設定する浮動小数点型アトリビュートを指示します。

    -----------------------------------------

    object (string): このフラグが渡され、文字列がパーティクルオブジェクトのトランスフォームまたはシェイプノードの名前である場合、セレクションリストやコマンドラインは無視されてそのオブジェクトだけが編集され、オブジェクトのすべてのパーティクルの指定したアトリビュート値が変更されます。

    -----------------------------------------

    randomFloat (float): -float～+floatの乱数値を各パーティクルの結果に追加するようにコマンドに指示します。既定は0.0です。

    -----------------------------------------

    randomVector ([float, float, float]): <<-x,-y,-z>>～<<x,y,z>>の乱数値を各パーティクルの結果に追加するようにコマンドに指示します。既定は000です。

    -----------------------------------------

    relative (boolean): これがTRUEに設定されている場合(既定はFALSE)、浮動小数点型またはベクトル型の値が各パーティクルの現在値に追加されます。

    -----------------------------------------

    vectorValue ([float, float, float]): 値を設定するベクトル型アトリビュートを指示します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def soft(convert: bool = False,duplicate: bool = False,duplicateHistory: bool = False,goal: float = 1.0,hideOriginal: bool = False,name: str = "") -> None:
    """
    コマンド ラインに渡されたオブジェクト、またはセレクション リストのオブジェクトからソフト ボディを作成します。使用できるジオメトリは、NURBS オブジェクト、ポリゴン オブジェクト、ラティス オブジェクトのいずれかです。作成されるソフト ボディは、次のようにパーティクル シェイプとジオメトリ シェイプを持つ階層で構成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    convert (boolean): これは、オリジナルのオブジェクトを実際の変形オブジェクトとするようにコマンドに指示します。ソフトボディのパーティクルシェイプノードが、オリジナルのオブジェクトと同じ階層の同じ親の下に挿入されます(元々は親と同一であるトランスフォームが間に1つ追加されます)。フラグが渡されない場合、このように考えられます。-c-h1という組み合わせは無効です。この組み合わせがスクリプトに存在する場合は、-h1を除去してください。

    -----------------------------------------

    duplicate (boolean): オリジナルのオブジェクトのコピーを作成し、そのコピーを変形ジオメトリとして使用するようにコマンドに指示します。オリジナルのオブジェクトへの入力接続が複製されます。オリジナルのオブジェクトをシーン内に保持し、オブジェクトのコピー(ソフトボディ)も作成したい場合は、これを実行します。このフラグと-dhは相互に排他的です。

    -----------------------------------------

    duplicateHistory (boolean): 入力接続だけでなく上流ヒストリも複製される点を除いて、-dと同じです。このフラグと-dは相互に排他的です。

    -----------------------------------------

    goal (float): -dと同じですが、それに加えて、作成されたソフトボディをオリジナルのジオメトリに追従させるようにコマンドに指示します。ソフトボディがオリジナルのジオメトリに追従する程度を制御する値としては、ゴールウェイトの設定を使用します。値に1.0を指定すると正確に追従し、0.0を指定すると全く追従しません。既定値は0.5です。値は0.0～1.0の範囲で指定する必要があります。-gと併せて-dを使用できますが、これは冗長です。ヒストリを複製したい場合は、-dhと-gを一緒に使用することができます。

    -----------------------------------------

    hideOriginal (boolean): このフラグは、複製時(-d、-g、または-dh)にのみ使用します。trueに設定されている場合、2つのオブジェクトのうちソフトボディではないほうのオブジェクトが隠されます。すなわち、-d-htrueを使用すると、オリジナルのオブジェクトは非表示になります。また、-d-c-h1を使用すると、複製オブジェクトが非表示になります。ソフトオブジェクト(-gを参照)のゴールとしてダイナミックオブジェクト以外のオブジェクトを使用するが、シーン内で可視にしたくない場合は、通常、これを実行します。フラグ-h1と-cは相互に排他的です。

    -----------------------------------------

    name (string): このフラグは現在サポートしていません。新しいソフトオブジェクトに名前を付けたい場合は、renameコマンド(UIを利用する場合はアウトライナ(Outliner)から)を使用してください。

    -----------------------------------------

    Return Value:
    None: string配列照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def spring(addSprings: bool = False,allPoints: bool = False,count: bool = False,damping: float = 1.0,dampingPS: float = 1.0,endForceWeight: float = 1.0,exclusive: bool = False,length: float = 1.0,maxDistance: float = 1.0,minDistance: float = 1.0,minMax: bool = False,name: str = "",noDuplicate: bool = False,restLength: float = 1.0,restLengthPS: float = 1.0,startForceWeight: float = 1.0,stiffness: float = 1.0,stiffnessPS: float = 1.0,useDampingPS: bool = False,useRestLengthPS: bool = False,useStiffnessPS: bool = False,walkLength: int = 1,wireframe: bool = False) -> None:
    """
    spring コマンドで、次のすべての操作を実行できます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addSprings (boolean): このフラグを指定すると、選択した既存のスプリングのセットにスプリングが追加されます(既定では新しいスプリングオブジェクトが作成されます)。

    -----------------------------------------

    allPoints (boolean): trueの場合、スプリングアプリケーションのモードをすべてに設定します。これにより、選択されているすべてのポイント間にスプリングが追加されます(既定はfalseです)。

    -----------------------------------------

    count (boolean): このシェイプ内のスプリング数を返します。照会モード専用です。このフラグは、Mayaの旧バージョンとの互換性のためだけに維持されています。スプリングの数を取得するには、スプリングシェイプのcountアトリビュートを使用するほうがはるかに速く簡単にできます。getAttr<shapeName>.count。

    -----------------------------------------

    damping (float): スプリングオブジェクトで作成されたスプリングのダンピング係数です(既定＝0.2)。

    -----------------------------------------

    dampingPS (float): スプリングオブジェクトで作成されたスプリングのダンピング係数ですdampingPSのすべてのエントリは、このフラグで指定した値で初期化されます。フラグとアトリビュート名の両方で、「PS」は「per-spring(スプリング単位)」を表します。(既定＝0.2)。

    -----------------------------------------

    endForceWeight (float): スプリングの終点で、スプリングに適用されるフォースの量。有効な範囲は0.0～1.0です(既定＝1.0)。

    -----------------------------------------

    exclusive (boolean): trueの場合、異なるオブジェクトにあるポイントの対の間にのみ、スプリングが作成されます(既定はfalseです)。

    -----------------------------------------

    length (float): 「restLength」の旧形式。「restLength」を使用してください。

    -----------------------------------------

    maxDistance (float): スプリング作成の対象となる、2ポイント間の最大距離。

    -----------------------------------------

    minDistance (float): スプリング作成の対象となる、2ポイント間の最小距離(既定=0.0。このフラグの既定の詳細については、「既定」を参照してください)。

    -----------------------------------------

    minMax (boolean): trueの場合、スプリングアプリケーションのモードを最小/最大に設定します。これは、minとmaxで指定した最小距離と最大距離の値の間にあるポイントグループに属するすべてのポイント間にスプリングを追加します(既定はfalseです)。注:これは、minまたはmaxフラグを使用すると自動的に設定されます。

    -----------------------------------------

    name (string): スプリングオブジェクトの名前。

    -----------------------------------------

    noDuplicate (boolean): 既存のスプリングをチェックし、すでに同じオブジェクト内のスプリングで結ばれている2ポイント間には新しいスプリングを追加しません。コマンドが作用しているオブジェクトのみチェックされます。このフラグは-addを使用しているときのみ有効です(既定＝false)。

    -----------------------------------------

    restLength (float): 新しいスプリングに対するオブジェクト単位のレスト長です。スプリングは、スプリング単位またはオブジェクト単位のレスト長を使用できます。-lPSと-ulpフラグを参照してください。

    -----------------------------------------

    restLengthPS (float): 新しいスプリングに対するスプリング単位のレスト長です。restLengthPSのすべてのエントリは、このフラグで指定した値で初期化されます。このフラグを指定しない場合、各スプリングのレスト長は、スプリングが作成されたときの2ポイント間の距離、つまりスプリングの長さの初期値に初期化されます。再生時に、スプリングはスプリング単位またはオブジェクト単位のレスト長を使用できます。-rlフラグと-urpフラグを参照してください。フラグとアトリビュート名の両方で、「PS」は「per-spring(スプリング単位)」を表します。

    -----------------------------------------

    startForceWeight (float): スプリングの始点で、スプリングに適用されるフォースの量。有効な範囲は0.0～1.0です(既定＝1.0)。

    -----------------------------------------

    stiffness (float): スプリングオブジェクトで作成されたスプリングの固さです(既定＝1.0)。-dampfloat「damping」の旧形式です。「damping」を使用してください。

    -----------------------------------------

    stiffnessPS (float): スプリングオブジェクトで作成されたスプリングの固さですstiffnessPSのすべてのエントリは、このフラグで指定した値で初期化されます。フラグとアトリビュート名の両方で、「PS」は「per-spring(スプリング単位)」を表します。(既定＝1.0)。

    -----------------------------------------

    useDampingPS (boolean): dampingPS(スプリング単位のダンピング)を使用するかどうかを指定します。falseに設定すると、アトリビュート値としてオブジェクト単位のダンピングが使用されます。このフラグは、単純にスプリングシェイプのuseDampingPSアトリビュートを設定します。フラグとアトリビュート名の両方で、「PS」は「per-spring(スプリング単位)」を表します。(既定＝false)。

    -----------------------------------------

    useRestLengthPS (boolean): restLengthPS(スプリング単位のレスト長)を使用するかどうかを指定します。falseに設定すると、アトリビュート値としてオブジェクト単位のレスト長が使用されます。このフラグは、単純にスプリングシェイプのuseRestLengthPSアトリビュートを設定します。フラグとアトリビュート名の両方で、「PS」は「per-spring(スプリング単位)」を表します。(既定＝false)。

    -----------------------------------------

    useStiffnessPS (boolean): stiffnessPS(スプリング単位の固さ)を使用するかどうかを指定します。falseに設定すると、アトリビュート値としてオブジェクト単位の固さが使用されます。このフラグは、単純にスプリングシェイプのuseStiffnessPSアトリビュートを設定します。フラグとアトリビュート名の両方で、「PS」は「per-spring(スプリング単位)」を表します。(既定＝false)。

    -----------------------------------------

    walkLength (uint): このフラグが有効なのは、ワイヤフレーム作成のときだけです。これは、指定した数のエッジで結ばれたポイントの対の間にスプリングを作成します。たとえば、walkLengthが2の場合、2つ以上のエッジで分断されていないポイントの対に対して、スプリングが作成されます。walkLengthによって頂点の対同士の距離を測る方法は、交差点から交差点の距離を測るために間の道路の数を数えるようなものです。

    -----------------------------------------

    wireframe (boolean): trueの場合、スプリングアプリケーションのモードをワイヤフレームに設定します。これは、ソフトボディ上に作成されたスプリングでのみ有効です。カーブとサーフェスで、隣接するポイント(頂点またはCV)を結ぶ、すべてのエッジに沿ってスプリングを追加します。(既定はfalseです)。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def turbulence(attenuation: float = 1.0,frequency: float = 1.0,magnitude: float = 1.0,maxDistance: float = 1.0,name: str = "",noiseLevel: int = 1,noiseRatio: float = 1.0,perVertex: bool = False,phase: float = 1.0,phaseX: float = 1.0,phaseY: float = 1.0,phaseZ: float = 1.0,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),torusSectionRadius: float = 1.0,volumeExclusion: bool = False,volumeOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),volumeShape: str = "",volumeSweep: float = 1.0) -> None:
    """
    このコマンドは、リストされた各オブジェクトに対して新しいフィールドを作成します。このフィールドには DAG で有効なシェイプがあり、関連付けられたディペンデンシー ノードがあります。このフィールドはオブジェクトが所有するフィールドのリストに追加されます。connectDynamic を使用して、フィールドがダイナミック オブジェクトに影響を及ぼすようにします。複数のオブジェクトがリストされている場合、各オブジェクトのために個別のフィールドが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attenuation (float): フィールドの減衰率です。

    -----------------------------------------

    frequency (float): タービュランスの頻度。これによりモーションのかく乱の度合いが決まります。

    -----------------------------------------

    magnitude (float): フィールドの強さです。

    -----------------------------------------

    maxDistance (linear): フィールドが作用する最大距離です。-1は、フィールドに最大距離がないことを示します。

    -----------------------------------------

    name (string): フィールドの名前です。

    -----------------------------------------

    noiseLevel (int): noiseLevelのパラメータ値がゼロよりも大きい場合、このフィールドはテーブルで複合的なlookupを行います。それぞれの追加されたlookupには、noiseRatioを使用してウェイトがかけられます。noiseLevelは追加するlookupの数です。noiseLevelが0の場合、1つだけのlookupになります。値0(既定)に設定すると、Maya3.0より前のバージョンの動作と同じになります。

    -----------------------------------------

    noiseRatio (float): noiseLevelがゼロよりも大きい場合、noiseRatioはそれぞれの連続したノイズ評価の相対的な強さとなります。これは、たとえば、noiseRatioが0.5の場合、最初の評価のウェイトは0.5、2番目は0.25というふうになります。noiseLevelが0の場合、エフェクトはなしになります。

    -----------------------------------------

    perVertex (boolean): 頂点ごとに適用します。このフラグがtrueに設定されている場合、選択したオブジェクトのそれぞれのポイント(CV、パーティクル、頂点など)に、フォースフィールドの同一コピーが発生します。このフラグをfalseに設定すると、フォースはポイントセットのジオメトリの中心からのみ発せられます。

    -----------------------------------------

    phase (float): タービュランスフィールドの位相をシフトします。これにより、かく乱の起こる方向が決まります。このフラグはサポートされていませんが、下位互換性を保つ目的だけで提供されています。このフラグは-phaseX、-phaseYと-phaseZに置き換えられました。-phaseを設定するということは、-phaseZを設定するということと同じことです(位相のシフトは常にZ軸の方向に行われます)。

    -----------------------------------------

    phaseX (float): タービュランスフィールドの位相シフトをX軸方向に行います。これにより、かく乱の起こる方向が決まります。

    -----------------------------------------

    phaseY (float): タービュランスフィールドの位相シフトをY軸方向に行います。これにより、かく乱の起こる方向が決まります。

    -----------------------------------------

    phaseZ (float): タービュランスフィールドの位相シフトをZ軸方向に行います。これにより、かく乱の起こる方向が決まります。

    -----------------------------------------

    position ([linear, linear, linear]): 重力フィールドを配置する空間内の位置(x,y,z)です。これで、重力がオブジェクトからではなく空間のその位置から発生します。-posを使用する(位置でフィールド作成時)ことも、オブジェクト名を示すこともできることに注意してください。

    -----------------------------------------

    torusSectionRadius (linear): トーラスボリュームの断面半径です。トーラスにのみ適用されます。トーラスモデリングプリミティブの断面半径と同じです。

    -----------------------------------------

    volumeExclusion (boolean): フィールドのボリューム排除です。trueの場合は、ボリュームの外側のポイント(ボリュームシェイプアトリビュートによって定義される)が影響を受けます。falseの場合は、ボリュームの内側が影響を受けます。volumeShapeが「none」に設定されている場合は何も起こりません。

    -----------------------------------------

    volumeOffset ([linear, linear, linear]): フィールドのボリュームオフセットです。ボリュームオフセットによって、フィールドのボリュームはフィールドの実際の場所から指定した量だけ移動します。これはフィールドのローカル空間にあります。

    -----------------------------------------

    volumeShape (string): フィールドのボリュームシェイプです。フィールドのボリュームシェイプのアトリビュートを設定、編集、照会します。「none」以外の値に設定すると、フィールドが影響を受ける3-Dボリュームを定義します。指定できる値は、「none」、「cube」、「sphere」、「cylinder」、「cone」、「torus」のいずれかです。

    -----------------------------------------

    volumeSweep (angle): フィールドのボリュームスイープです。球、円錐、円柱、トーラスにのみ適用されます。モデリングのスイープアトリビュートと同じエフェクトです。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def uniform(attenuation: float = 1.0,directionX: float = 1.0,directionY: float = 1.0,directionZ: float = 1.0,magnitude: float = 1.0,maxDistance: float = 1.0,name: str = "",perVertex: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),torusSectionRadius: float = 1.0,volumeExclusion: bool = False,volumeOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),volumeShape: str = "",volumeSweep: float = 1.0) -> None:
    """
    このコマンドは、リストされた各オブジェクトに対して新しいフィールドを作成します。このフィールドには DAG で有効なシェイプがあり、関連付けられたディペンデンシー ノードがあります。このフィールドはオブジェクトが所有するフィールドのリストに追加されます。connectDynamic を使用して、フィールドがダイナミック オブジェクトに影響を及ぼすようにします。複数のオブジェクトがリストされている場合、各オブジェクトのために個別のフィールドが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attenuation (float): フィールドの減衰率です。

    -----------------------------------------

    directionX (float): 方向のXコンポーネントです。

    -----------------------------------------

    directionY (float): 方向のYコンポーネントです。

    -----------------------------------------

    directionZ (float): 方向のZコンポーネントです。

    -----------------------------------------

    magnitude (float): フィールドの強さです。

    -----------------------------------------

    maxDistance (linear): フィールドが作用する最大距離です。-1は、フィールドに最大距離がないことを示します。

    -----------------------------------------

    name (string): フィールドの名前です。

    -----------------------------------------

    perVertex (boolean): 頂点ごとに適用します。このフラグがtrueに設定されている場合、選択したオブジェクトのそれぞれのポイント(CV、パーティクル、頂点など)に、フォースフィールドの同一コピーが発生します。このフラグをfalseに設定すると、フォースはポイントセットのジオメトリの中心からのみ発せられます。

    -----------------------------------------

    position ([linear, linear, linear]): 重力フィールドを配置する空間内の位置(x,y,z)です。これで、重力がオブジェクトからではなく空間のその位置から発生します。-posを使用する(位置でフィールド作成時)ことも、オブジェクト名を示すこともできることに注意してください。

    -----------------------------------------

    torusSectionRadius (linear): トーラスボリュームの断面半径です。トーラスにのみ適用されます。トーラスモデリングプリミティブの断面半径と同じです。

    -----------------------------------------

    volumeExclusion (boolean): フィールドのボリューム排除です。trueの場合は、ボリュームの外側のポイント(ボリュームシェイプアトリビュートによって定義される)が影響を受けます。falseの場合は、ボリュームの内側が影響を受けます。volumeShapeが「none」に設定されている場合は何も起こりません。

    -----------------------------------------

    volumeOffset ([linear, linear, linear]): フィールドのボリュームオフセットです。ボリュームオフセットによって、フィールドのボリュームはフィールドの実際の場所から指定した量だけ移動します。これはフィールドのローカル空間にあります。

    -----------------------------------------

    volumeShape (string): フィールドのボリュームシェイプです。フィールドのボリュームシェイプのアトリビュートを設定、編集、照会します。「none」以外の値に設定すると、フィールドが影響を受ける3-Dボリュームを定義します。指定できる値は、「none」、「cube」、「sphere」、「cylinder」、「cone」、「torus」のいずれかです。

    -----------------------------------------

    volumeSweep (angle): フィールドのボリュームスイープです。球、円錐、円柱、トーラスにのみ適用されます。モデリングのスイープアトリビュートと同じエフェクトです。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def volumeAxis(alongAxis: float = 1.0,aroundAxis: float = 1.0,attenuation: float = 1.0,awayFromAxis: float = 1.0,awayFromCenter: float = 1.0,detailTurbulence: float = 1.0,directionX: float = 1.0,directionY: float = 1.0,directionZ: float = 1.0,directionalSpeed: float = 1.0,invertAttenuation: bool = False,magnitude: float = 1.0,maxDistance: float = 1.0,name: str = "",perVertex: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),torusSectionRadius: float = 1.0,turbulence: float = 1.0,turbulenceFrequencyX: float = 1.0,turbulenceFrequencyY: float = 1.0,turbulenceFrequencyZ: float = 1.0,turbulenceOffsetX: float = 1.0,turbulenceOffsetY: float = 1.0,turbulenceOffsetZ: float = 1.0,turbulenceSpeed: float = 1.0,volumeExclusion: bool = False,volumeOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),volumeShape: str = "",volumeSweep: float = 1.0) -> None:
    """
    このコマンドは、リストされた各オブジェクトに対して新しいフィールドを作成します。このフィールドには DAG で有効なシェイプがあり、関連付けられたディペンデンシー ノードがあります。このフィールドはオブジェクトが所有するフィールドのリストに追加されます。connectDynamic を使用して、フィールドがダイナミック オブジェクトに影響を及ぼすようにします。複数のオブジェクトがリストされている場合、各オブジェクトのために個別のフィールドが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    alongAxis (float): ボリュームの中心軸に沿った速度の初期値に乗じる値です。マニュアルの図を参照してください。

    -----------------------------------------

    aroundAxis (float): ボリュームの中心軸のまわりの速度の初期値に乗じる値です。マニュアルの図を参照してください。

    -----------------------------------------

    attenuation (float): フィールドの減衰率です。

    -----------------------------------------

    awayFromAxis (float): ボリュームの中心軸からの速度の初期値に乗じる値です。マニュアルの図を参照してください。円柱、円錐、トーラスなどのボリュームエミッタにのみ適用されます。

    -----------------------------------------

    awayFromCenter (float): 立方体または球のボリュームエミッタの中心点からの方向の初期速度の乗数です。立方体と球のボリュームエミッタにのみ適用されます。

    -----------------------------------------

    detailTurbulence (float): 2番目に周波数の高い乱気流の相対強度これを使用すると、スケールの大きいフローに細かい起伏をつけることができます。この2次乱気流は、スピードと周波数の両方が1次乱気流よりも高くなっています。detailTurbulenceがゼロでない値ならば、2番目の乱気流の計算により、シミュレーションは少し遅くなります。

    -----------------------------------------

    directionX (float): フォース方向のxコンポーネントです。一方向のスピードと一緒に使用されます。

    -----------------------------------------

    directionY (float): フォース方向のyコンポーネントです。一方向のスピードと一緒に使用されます。

    -----------------------------------------

    directionZ (float): フォース方向のzコンポーネントです。一方向のスピードと一緒に使用されます。

    -----------------------------------------

    directionalSpeed (float): directionX、directionY、directionZアトリビュートで指定した方向のスピードコンポーネントを追加します。

    -----------------------------------------

    invertAttenuation (boolean): このアトリビュートがFALSEならば、既定では減衰率は、フィールド効果の影響範囲がボリュームの軸より遠くまた端より近い範囲であるとして、計算されます。TRUEの場合、フィールドの全エフェクトがボリュームの端にくるように設定され、増加します。

    -----------------------------------------

    magnitude (float): フィールドの強さです。

    -----------------------------------------

    maxDistance (linear): フィールドが作用する最大距離です。-1は、フィールドに最大距離がないことを示します。

    -----------------------------------------

    name (string): フィールドの名前です。

    -----------------------------------------

    perVertex (boolean): 頂点ごとに適用します。このフラグがtrueに設定されている場合、選択したオブジェクトのそれぞれのポイント(CV、パーティクル、頂点など)に、フォースフィールドの同一コピーが発生します。このフラグをfalseに設定すると、フォースはポイントセットのジオメトリの中心からのみ発せられます。

    -----------------------------------------

    position ([linear, linear, linear]): 重力フィールドを配置する空間内の位置(x,y,z)です。これで、重力がオブジェクトからではなく空間のその位置から発生します。-posを使用する(位置でフィールド作成時)ことも、オブジェクト名を示すこともできることに注意してください。

    -----------------------------------------

    torusSectionRadius (linear): トーラスボリュームの断面半径です。トーラスにのみ適用されます。トーラスモデリングプリミティブの断面半径と同じです。

    -----------------------------------------

    turbulence (float): 時間の経過に伴い進行する乱気流をシミュレートするフォースを追加します。

    -----------------------------------------

    turbulenceFrequencyX (float): X方向で乱気流関数を繰り返します。

    -----------------------------------------

    turbulenceFrequencyY (float): Y方向で乱気流関数を繰り返します。

    -----------------------------------------

    turbulenceFrequencyZ (float): Z方向で乱気流関数を繰り返します。

    -----------------------------------------

    turbulenceOffsetX (float): X方向に乱気流関数を移動します。

    -----------------------------------------

    turbulenceOffsetY (float): Y方向に乱気流関数を移動します。

    -----------------------------------------

    turbulenceOffsetZ (float): Z方向に乱気流関数を移動します。

    -----------------------------------------

    turbulenceSpeed (float): 時間の経過に伴う乱気流の変化率。乱気流は、1.0/turbulenceSpeed秒でシームレスにループします。この速度でアニメートする場合、新しい時間ノードをvolumeAxisNodeの時間入力にアタッチしてから、この時間ノードの時間値をアニメートします。

    -----------------------------------------

    volumeExclusion (boolean): フィールドのボリューム排除です。trueの場合は、ボリュームの外側のポイント(ボリュームシェイプアトリビュートによって定義される)が影響を受けます。falseの場合は、ボリュームの内側が影響を受けます。volumeShapeが「none」に設定されている場合は何も起こりません。

    -----------------------------------------

    volumeOffset ([linear, linear, linear]): フィールドのボリュームオフセットです。ボリュームオフセットによって、フィールドのボリュームはフィールドの実際の場所から指定した量だけ移動します。これはフィールドのローカル空間にあります。

    -----------------------------------------

    volumeShape (string): フィールドのボリュームシェイプです。フィールドのボリュームシェイプのアトリビュートを設定、編集、照会します。「none」以外の値に設定すると、フィールドが影響を受ける3-Dボリュームを定義します。指定できる値は、「none」、「cube」、「sphere」、「cylinder」、「cone」、「torus」のいずれかです。

    -----------------------------------------

    volumeSweep (angle): フィールドのボリュームスイープです。球、円錐、円柱、トーラスにのみ適用されます。モデリングのスイープアトリビュートと同じエフェクトです。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def vortex(attenuation: float = 1.0,axisX: float = 1.0,axisY: float = 1.0,axisZ: float = 1.0,magnitude: float = 1.0,maxDistance: float = 1.0,name: str = "",perVertex: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),torusSectionRadius: float = 1.0,volumeExclusion: bool = False,volumeOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),volumeShape: str = "",volumeSweep: float = 1.0) -> None:
    """
    このコマンドは、リストされた各オブジェクトに対して新しいフィールドを作成します。このフィールドには DAG で有効なシェイプがあり、関連付けられたディペンデンシー ノードがあります。このフィールドはオブジェクトが所有するフィールドのリストに追加されます。connectDynamic を使用して、フィールドがダイナミック オブジェクトに影響を及ぼすようにします。複数のオブジェクトがリストされている場合、各オブジェクトのために個別のフィールドが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attenuation (float): フィールドの減衰率です。

    -----------------------------------------

    axisX (float): 渦軸のXコンポーネントです。

    -----------------------------------------

    axisY (float): 渦軸のYコンポーネントです。

    -----------------------------------------

    axisZ (float): 渦軸のZコンポーネントです。

    -----------------------------------------

    magnitude (float): フィールドの強さです。

    -----------------------------------------

    maxDistance (linear): フィールドが作用する最大距離です。-1は、フィールドに最大距離がないことを示します。

    -----------------------------------------

    name (string): フィールドの名前です。

    -----------------------------------------

    perVertex (boolean): 頂点ごとに適用します。このフラグがtrueに設定されている場合、選択したオブジェクトのそれぞれのポイント(CV、パーティクル、頂点など)に、フォースフィールドの同一コピーが発生します。このフラグをfalseに設定すると、フォースはポイントセットのジオメトリの中心からのみ発せられます。

    -----------------------------------------

    position ([linear, linear, linear]): 重力フィールドを配置する空間内の位置(x,y,z)です。これで、重力がオブジェクトからではなく空間のその位置から発生します。-posを使用する(位置でフィールド作成時)ことも、オブジェクト名を示すこともできることに注意してください。

    -----------------------------------------

    torusSectionRadius (linear): トーラスボリュームの断面半径です。トーラスにのみ適用されます。トーラスモデリングプリミティブの断面半径と同じです。

    -----------------------------------------

    volumeExclusion (boolean): フィールドのボリューム排除です。trueの場合は、ボリュームの外側のポイント(ボリュームシェイプアトリビュートによって定義される)が影響を受けます。falseの場合は、ボリュームの内側が影響を受けます。volumeShapeが「none」に設定されている場合は何も起こりません。

    -----------------------------------------

    volumeOffset ([linear, linear, linear]): フィールドのボリュームオフセットです。ボリュームオフセットによって、フィールドのボリュームはフィールドの実際の場所から指定した量だけ移動します。これはフィールドのローカル空間にあります。

    -----------------------------------------

    volumeShape (string): フィールドのボリュームシェイプです。フィールドのボリュームシェイプのアトリビュートを設定、編集、照会します。「none」以外の値に設定すると、フィールドが影響を受ける3-Dボリュームを定義します。指定できる値は、「none」、「cube」、「sphere」、「cylinder」、「cone」、「torus」のいずれかです。

    -----------------------------------------

    volumeSweep (angle): フィールドのボリュームスイープです。球、円錐、円柱、トーラスにのみ適用されます。モデリングのスイープアトリビュートと同じエフェクトです。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nBase(clearCachedTextureMap: str = "",clearStart: bool = False,stuffStart: bool = False,textureToVertex: str = "") -> None:
    """
    1 つまたは複数の nBase オブジェクトを編集します。nBase オブジェクトには nCloth、nRigid、nParticle オブジェクトが含まれますが、このコマンドのオプションは現在 nParticle オブジェクトには適用されないことに注意してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    clearCachedTextureMap (string): nBaseからの指定されたアトリビュートのキャッシュ済みテクスチャマップをクリアします。

    -----------------------------------------

    clearStart (boolean): 開始状態をクリアすることを指定します。

    -----------------------------------------

    stuffStart (boolean): 現在の状態を開始状態に詰め込むかどうかを指定します。

    -----------------------------------------

    textureToVertex (string): 指定したアトリビュートのテクスチャマップデータを、関連する頂点単位のアトリビュートに転送します。

    -----------------------------------------

    Return Value:
    None: booleanコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nParticle(attribute: str = "",cache: bool = False,conserve: float = 1.0,count: bool = False,deleteCache: bool = False,dynamicAttrList: bool = False,floatValue: float = 1.0,gridSpacing: float = 1.0,inherit: float = 1.0,jitterBasePoint: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),jitterRadius: float = 1.0,lowerLeft: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),name: str = "",numJitters: int = 1,order: int = 1,particleId: int = 1,perParticleDouble: bool = False,perParticleVector: bool = False,position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),shapeName: str = "",upperRight: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),vectorValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0)) -> None:
    """
    nParticle コマンドは、ワールド空間ポイントのリストから、新しい nParticle オブジェクトを作成します。nParticle オブジェクトが作成された場合、このコマンドは新しいパーティクル シェイプの名前と、これにコネクトされたパーティクル オブジェクトのディペンデンシー ノードを返します。オブジェクトを照会すると、照会結果を返します。パーティクル ID かパーティクル配列内でのパーティクルの順位を使用すると、パーティクル単位のアトリビュートを照会できます。オブジェクトを編集した場合は何も返されません。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): パーティクル単位のアトリビュートの照会と編集で使用されます。照会か編集を行うアトリビュートの名前を指定します。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    cache (boolean): パーティクルシェイプのキャッシングをオンまたはオフにします。

    -----------------------------------------

    conserve (float): 運動量保存のコントロール(0～1の間)。フレームからフレームへ保存されるパーティクルシェイプの既存の運動量の割合を指定します。値を1にすると(既定)、本来のニュートン物理学に対応し、運動量が保存されます。

    -----------------------------------------

    count (boolean): オブジェクトのパーティクル数を返します。

    -----------------------------------------

    deleteCache (boolean): パーティクルシェイプキャッシュを削除します。このコマンドは元に戻せません。

    -----------------------------------------

    dynamicAttrList (boolean): オブジェクトのダイナミックアトリビュートのリストを返します。

    -----------------------------------------

    floatValue (float): パーティクル単位のアトリビュートの編集のみで使用されます。浮動小数アトリビュートの編集を指定し、新しい浮動小数値を続ける必要があります。

    -----------------------------------------

    gridSpacing (linear): グリッド内のパーティクル間の間隔。

    -----------------------------------------

    inherit (float): 放出されるオブジェクトの速度の小数部(0-1)が継承されます。

    -----------------------------------------

    jitterBasePoint ([linear, linear, linear]): ジッタのベースポイント(中心点)。それぞれのベースポイントで、ジッタの1つのスウォッチが作成されます。コマンドラインで指定される順序で、ベースポイントを含むその他のフラグと組み合わせられます。その他のフラグのインスタンスが十分に使用できない場合、-jpbのその他すべてのインスタンスに、ラインの最後のものが使用されます。

    -----------------------------------------

    jitterRadius (linear): パーティクルインスタンスを配置する、中心からの最大半径。

    -----------------------------------------

    lowerLeft ([linear, linear, linear]): グリッドの左下のポイント。

    -----------------------------------------

    name (string): パーティクルオブジェクトの名前。

    -----------------------------------------

    numJitters (uint): パーティクルごとのジッタ(インスタンス)の数。

    -----------------------------------------

    order (int): パーティクル単位のアトリビュートの照会と編集で使用されます。アトリビュートの照会か編集を行うパーティクルの、パーティクル配列のゼロベースの順序(インデックス)を指定します。パーティクル単位のアトリビュートの値を照会する場合は、-attributeフラグと-idフラグか-orderフラグが必要となり、-qフラグの前に引数を指定する必要があります。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    particleId (int): パーティクル単位のアトリビュートの照会と編集で使用されます。アトリビュートの照会か編集を行うパーティクルのIDを指定します。パーティクル単位のアトリビュートの値を照会する場合は、-attributeフラグと-idフラグか-orderフラグが必要となり、-qフラグの前に引数を指定する必要があります。照会モードでは、このフラグに値が必要になります。

    -----------------------------------------

    perParticleDouble (boolean): 初期状態アトリビュート、キャッシュアトリビュート、情報のみのアトリビュートを除き、パーティクル単位の二重アトリビュートのリストを返します。

    -----------------------------------------

    perParticleVector (boolean): 初期状態アトリビュート、キャッシュアトリビュート、情報のみのアトリビュートを除き、パーティクル単位のベクトルアトリビュートのリストを返します。

    -----------------------------------------

    position ([linear, linear, linear]): それぞれのパーティクルのワールド空間での位置。

    -----------------------------------------

    shapeName (string): ジオメトリのインスタンス化で使用するシェイプ名を指定します。パーティクルオブジェクトに名前を付ける-nフラグと混同しないでください。

    -----------------------------------------

    upperRight ([linear, linear, linear]): グリッドの右上のポイント。

    -----------------------------------------

    vectorValue ([float, float, float]): パーティクル単位のアトリビュートの編集のみで使用されます。ベクトルアトリビュートの編集を指定し、ベクトルの3つの浮動小数値を続ける必要があります。

    -----------------------------------------

    Return Value:
    None: string作成された nParticle オブジェクトの名前。照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def nSoft(convert: bool = False,duplicate: bool = False,duplicateHistory: bool = False,goal: float = 1.0,hideOriginal: bool = False) -> None:
    """
    コマンド ラインに渡されたオブジェクト、またはセレクション リストのオブジェクトから nSoft ボディを作成します。使用できるジオメトリは、NURBS オブジェクト、ポリゴン オブジェクト、ラティス オブジェクトのいずれかです。作成される nSoft ボディは、次のようにパーティクル シェイプとジオメトリ シェイプを持つ階層で構成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    convert (boolean): これは、オリジナルのオブジェクトを実際の変形オブジェクトとするようにコマンドに指示します。nSoftボディのパーティクルシェイプノードが、オリジナルのオブジェクトと同じ階層の同じ親の下に挿入されます(元々は親と同一であるトランスフォームが間に1つ追加されます)。フラグが渡されない場合、このように考えられます。-c-h1という組み合わせは無効です。この組み合わせがスクリプトに存在する場合は、-h1を除去してください。

    -----------------------------------------

    duplicate (boolean): オリジナルのオブジェクトのコピーを作成し、そのコピーを変形ジオメトリとして使用するようにコマンドに指示します。オリジナルのオブジェクトへの入力接続が複製されます。オリジナルのオブジェクトをシーン内に保持し、オブジェクトのコピー(nSoftボディ)も作成したい場合は、これを実行します。このフラグと-dhは相互に排他的です。

    -----------------------------------------

    duplicateHistory (boolean): 入力接続だけでなく上流ヒストリも複製される点を除いて、-dと同じです。このフラグと-dは相互に排他的です。

    -----------------------------------------

    goal (float): -dと同じですが、それに加えて、作成されたnSoftボディをオリジナルのジオメトリに追従させるようにコマンドに指示します。nSoftボディがオリジナルのジオメトリに追従する程度を制御する値としては、ゴールウェイトの設定を使用します。値に1.0を指定すると正確に追従し、0.0を指定すると全く追従しません。既定値は0.5です。値は0.0～1.0の範囲で指定する必要があります。-gと併せて-dを使用できますが、これは冗長です。ヒストリを複製したい場合は、-dhと-gを一緒に使用することができます。

    -----------------------------------------

    hideOriginal (boolean): このフラグは、複製時(-d、-g、または-dh)にのみ使用します。trueに設定されている場合、2つのオブジェクトのうちnSoftボディではないほうのオブジェクトが隠されます。すなわち、-d-htrueを使用すると、オリジナルのオブジェクトは非表示になります。また、-d-c-h1を使用すると、複製オブジェクトが非表示になります。nSoftオブジェクト(-gを参照)のゴールとしてダイナミックオブジェクト以外のオブジェクトを使用するが、シーン内で可視にしたくない場合は、通常、これを実行します。フラグ-h1と-cは相互に排他的です。

    -----------------------------------------

    Return Value:
    None: string配列照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def dynPaintEditor(activeOnly: bool = False,autoSave: bool = False,camera: str = "",canvasMode: bool = False,canvasUndo: bool = False,changeCommand: Tuple[str, str, str, str] = tuple("", "", "", ""),clear: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),control: bool = False,currentCanvasSize: bool = False,defineTemplate: str = "",displayAppearance: str = "",displayFog: bool = False,displayImage: int = 1,displayLights: str = "",displayStyle: str = "",displayTextures: bool = False,docTag: str = "",doubleBuffer: bool = False,drawAxis: bool = False,drawContext: bool = False,exists: bool = False,fastUpdate: int = 1,fileName: str = "",filter: str = "",forceMainConnection: str = "",highlightConnection: str = "",iconGrab: bool = False,loadImage: str = "",lockMainConnection: bool = False,mainListConnection: str = "",menu: str = "",nbImages: bool = False,newImage: Tuple[int, int, float, float, float] = tuple(1, 1, 1.0, 1.0, 1.0),paintAll: float = 1.0,panel: str = "",parent: str = "",redrawLast: bool = False,refresh: bool = False,refreshMode: int = 1,removeAllImages: bool = False,removeImage: bool = False,rollImage: Tuple[float, float] = tuple(1.0, 1.0),saveAlpha: bool = False,saveBumpmap: str = "",saveImage: bool = False,scaleBlue: float = 1.0,scaleGreen: float = 1.0,scaleRed: float = 1.0,selectionConnection: str = "",singleBuffer: bool = False,snapShot: bool = False,stateString: bool = False,swap: int = 1,tileSize: int = 1,unParent: bool = False,undoCache: bool = False,unlockMainConnection: bool = False,updateMainConnection: bool = False,useTemplate: str = "",wrap: Tuple[bool, bool] = tuple(False, False),writeImage: str = "",zoom: float = 1.0) -> None:
    """
    ペイントできるエディタ ウィンドウが作成されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    activeOnly (boolean): シーンモードの場合、アクティブなストロークのみをリフレッシュするかどうかが決まります。

    -----------------------------------------

    autoSave (boolean): キャンバスモードの場合、各ストローク後にバッファをディスクファイルに保存するかどうかが決まります。モデルビューのシェーディング表示で、テクスチャのペイントと結果の表示を行う場合に適しています。

    -----------------------------------------

    camera (string): ペイントエフェクトパネルが見通すカメラの名前が設定されます。

    -----------------------------------------

    canvasMode (boolean): trueにすると、ペイントエフェクトパネルがキャンバスモードに設定されます。

    -----------------------------------------

    canvasUndo (boolean): キャンバスモードで元に戻すアクションが高速で実行されます。キャンバスモードでペイントする場合はヒストリが使用されないので、特殊な元に戻すアクションになります。キャンバスでは1レベルの元に戻すアクションを実行できます。

    -----------------------------------------

    changeCommand ([string, string, string, string]): パラメータ:先頭文字列:command2番目の文字列:editorName3番目の文字列:editorCmd4番目の文字列:updateFuncエディタで何らかの変更を行う場合にこのコマンドをコールします。このコマンドの基本形は次のとおりです:command(string$editor,string$editorCmd,string$updateFunc,int$reason)考えられる理由は次のとおりです。0:特に理由なし1:スケールカラー2:バッファ(シングル/ダブル)3:軸4:表示されたイメージ5:メモリに保存されたイメージ

    -----------------------------------------

    clear ([float, float, float]): キャンバスモードでは、バッファが浮動小数点値(R,G,B)にクリアされます。

    -----------------------------------------

    control (boolean): 照会モード専用です。このエディタの最上位のコントロールを返します。通常は、親を取得してポップアップメニューをアタッチするために使用します。注意:コントロールのないエディタが存在する場合があります。コントロールが存在しない場合は、この照会はNONEを返します。

    -----------------------------------------

    currentCanvasSize (boolean): 照会モードでは、現在のキャンバスの解像度(X,Y)が返されます。

    -----------------------------------------

    defineTemplate (string): 他の任意のフラグと引数を解析し、かつ引数で指定したコマンドテンプレートに追加するモードに、コマンドのモードを変更します。templateNameが現在のテンプレートとして設定されていれば、その後コマンドが実行されるたびに、この引数が既定の引数として使用されます。

    -----------------------------------------

    displayAppearance (string): モデルパネルの表示の外観を設定します。有効な値は、「wireframe」、「points」、「boundingBox」、「smoothShaded」、「flatShaded」です。このフラグは、-interactiveフラグと-defaultフラグと一緒に使用できます。インタラクティブモードでは、「wireframe」、「points」、「boundingBox」のみが有効であることに注意してください。

    -----------------------------------------

    displayFog (boolean): シーンモードの場合、シーンをリフレッシュした際にペイントエフェクトパネルでフォグを表示するかどうかが決まります。フォグをオンにしてこのフラグをオフにすると、フォグはストローク上には描画されますが、シーンの残りでは描画されません。

    -----------------------------------------

    displayImage (int): 特定のイメージをエディタイメージスタックで現在のエディタイメージとして設定します。イメージは、「si/saveImage」フラグを使用してエディタイメージスタックに追加されます。

    -----------------------------------------

    displayLights (string): シェーディングモード用にライティングを設定します。有効な値は、「selected」、「active」、「all」、「default」です。

    -----------------------------------------

    displayStyle (string): イメージを表示するモードを設定します。有効な値は、基本RGBイメージを表示する場合は「カラー」マスクチャネルを表示する場合は「マスク」イメージの輝度を表示する場合は「輝度」

    -----------------------------------------

    displayTextures (boolean): シェーディングモードでのテクスチャの表示をオンまたはオフにします。

    -----------------------------------------

    docTag (string): エディタにタグをアタッチします。

    -----------------------------------------

    doubleBuffer (boolean): 表示をダブルバッファモードに設定します。

    -----------------------------------------

    drawAxis (boolean): 軸が描画されるかどうかを設定または照会します。

    -----------------------------------------

    drawContext (boolean): コンテキストの名前が返されます。

    -----------------------------------------

    exists (boolean): 指定したオブジェクトが存在するかどうかを返します。他のフラグは無視されます。

    -----------------------------------------

    fastUpdate (int): 廃止-使用しないでください

    -----------------------------------------

    fileName (string): キャンバスを保存するファイルが設定されます。

    -----------------------------------------

    filter (string): このエディタに使用する項目フィルタオブジェクトの名前を指定します。エディタの主要リストに表示される情報をフィルタします。

    -----------------------------------------

    forceMainConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。これは-mainListConnectionフラグの変形で、接続がロックされている場合でも強制的に変更します。このフラグを使用して、-unlockMainConnection、-mainListConnection、-lockMainConnectionフラグを直後に連続して使用する場合に、オーバーヘッドを減します。

    -----------------------------------------

    highlightConnection (string): そのハイライトリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。すべてのエディタにハイライトリストがあるわけではありません。ハイライトリストがあるエディタの場合、これは第二の選択項目を表示したリストになります。

    -----------------------------------------

    iconGrab (boolean): ペイントエフェクトパネルがアイコングラブモードになります。このモードでは、ユーザが画面の一部をドラッグしてアイコンにします。

    -----------------------------------------

    loadImage (string): ディスクからイメージをロードして現在のエディタイメージとして設定します。

    -----------------------------------------

    lockMainConnection (boolean): mainConnection内のオブジェクトの現在のリストをロックして、そのオブジェクトだけがエディタ内に表示されるようにします。これ以降、元のmainConnectionに変更を加えても無視されます。

    -----------------------------------------

    mainListConnection (string): エディタがコンテンツのソースとして使用するselectionConnectionオブジェクトの名前を指定します。エディタはselectionConnectionオブジェクトに含まれている項目のみを表示します。

    -----------------------------------------

    menu (string): エディタ内でメニューを構築するために使用するスクリプトの名前が設定されます。スクリプトはエディタ名を引数として取ります。

    -----------------------------------------

    nbImages (boolean): イメージの数を返します。

    -----------------------------------------

    newImage ([int, int, float, float, float]): 新しいイメージが編集モードで起動され、解像度が整数値(X,Y)に設定されてバッファが浮動小数点値(R,G,B)にクリアされます。照会モードでは、現在のイメージの解像度(X,Y)が返されます。

    -----------------------------------------

    paintAll (float): 現在のリフレッシュモードでバッファが再描画されます。

    -----------------------------------------

    panel (string): このエディタ用のパネルを指定します。既定では、エディタがスクリプトパネルの作成コールバックで作成された場合、エディタはそのパネルに属します。エディタがパネルに属していない場合、エディタのあるウィンドウを削除するとエディタも削除されます。

    -----------------------------------------

    parent (string): このエディタの親のレイアウトを指定します。このフラグは、エディタが現在ペアレント化されていない場合のみに効果があります。

    -----------------------------------------

    redrawLast (boolean): 最後のストロークが再描画されます。これはブラシを変更した場合に便利です。この機能では、元に戻すアクションが高速で実行されてからストロークが再描画されます。

    -----------------------------------------

    refresh (boolean): 現在のエディタイメージのリフレッシュを要求します。

    -----------------------------------------

    refreshMode (int): 指定した値にリフレッシュモードが設定されます。0-リフレッシュ時にストロークが描画されません。1-ワイヤフレームモードでストロークが再描画されます。2-最終レンダーモードでストロークが再描画されます。

    -----------------------------------------

    removeAllImages (boolean): エディタイメージスタックからすべてのエディタイメージを除去します。

    -----------------------------------------

    removeImage (boolean): エディタイメージスタックから現在のエディタイメージを除去します。

    -----------------------------------------

    rollImage ([float, float]): キャンバスモードの場合、浮動小数点値(X,Y)でイメージがロールされます。XとYは、0(ロールなし)から1(完全なロール)の間で指定できます。値を0.5にすると、イメージは50%ロールされます（つまり、境界がスクリーンの中央に移動します）。

    -----------------------------------------

    saveAlpha (boolean): キャンバスモードの場合、キャンバスをディスクファイルに保存する際にアルファを保存するかどうかが決まります。

    -----------------------------------------

    saveBumpmap (string): 指定したファイルに現在のバッファがバンプマップとして保存されます。

    -----------------------------------------

    saveImage (boolean): メモリに現在のEditorImageを保存します。保存されたエディタイメージは、エディタイメージスタックに格納されます。最も新しく保存したイメージは0の位置に、次に新しく保存したイメージは1の位置、などと格納されます。現在のエディタイメージを前に保存したイメージに設定するには、「di/displayImage」フラグを使用します。

    -----------------------------------------

    scaleBlue (float): ビュー内の青の成分のスケーリング係数を定義します。既定値は1で、-1000から+1000までが可能です。

    -----------------------------------------

    scaleGreen (float): ビュー内の緑の成分のスケーリング係数を定義します。既定値は1で、-1000から+1000までが可能です。

    -----------------------------------------

    scaleRed (float): ビュー内の赤の成分のスケーリング係数を定義します。既定値は1で、-1000から+1000までが可能です。

    -----------------------------------------

    selectionConnection (string): その独自のセレクションリストをエディタと同期化させるselectionConnectionオブジェクトの名前を指定します。このエディタから選択する場合、selectionConnectionオブジェクトの中から選択します。オブジェクトが変更されると、エディタが更新されて変更が反映されます。

    -----------------------------------------

    singleBuffer (boolean): 表示をシングルバッファモードに設定します。

    -----------------------------------------

    snapShot (boolean): 現在のカメラビューのスナップショットが取られます。

    -----------------------------------------

    stateString (boolean): 照会モード専用のフラグです。エディタを作成して現在のエディタの状態と一致させるMELコマンドを返します。返されたコマンド文字列は、指定した名前の代わりに文字列変数$editorNameを使用します。

    -----------------------------------------

    swap (int): 廃止-使用しないでください

    -----------------------------------------

    tileSize (int): 表示バッファのハードウェアテクスチャ再描画のタイルサイズが設定されます。

    -----------------------------------------

    unParent (boolean): エディタをそのレイアウトから除去するように指定します。これは照会モードでは使用できません。

    -----------------------------------------

    undoCache (boolean): 既定では、最後のイメージが元に戻す用にキャッシュされます。falseに設定すると、キャンバスモードでの元に戻すが無効になり、シーンモードでの元に戻すでは強制的に完全なリフレッシュが適用されます。現在のシーンの最初のクリアまたはリフレッシュを行う前にfalseに設定すると、メモリの使用量が少なくてすみます。

    -----------------------------------------

    unlockMainConnection (boolean): mainConnectionをロック解除して、オリジナルのmainConnection(まだ使用可能な場合)を効率的に復元し、ダイナミックな更新を行います。

    -----------------------------------------

    updateMainConnection (boolean): ロックされたmainConnectionをオリジナルのmainConnectionから更新させますが、ロック状態は保持されます。

    -----------------------------------------

    useTemplate (string): コマンドに、現在のものとは異なるコマンドテンプレートを使用するように強制します。

    -----------------------------------------

    wrap ([boolean, boolean]): キャンバスモードでは、ペイントする際にUとVでバッファをラップします。

    -----------------------------------------

    writeImage (string): ディスクに現在のエディタイメージを書き込みます。

    -----------------------------------------

    zoom (float): 指定した値でキャンバスイメージがズームされます。

    -----------------------------------------

    Return Value:
    None: stringエディタ名照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def getDefaultBrush() -> None:
    """
    このコマンドは既定のペイント エフェクト ブラシ名を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: string既定のブラシ ノード名
    """
    pass

    
def paintEffectsDisplay(meshDrawEnable: bool = False) -> None:
    """
    このコマンドは、ペイント エフェクト(Paint Effects)の項目にグローバルな表示方法を設定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    meshDrawEnable (boolean): オブジェクトのメッシュ描画を有効にするかどうかを設定します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def pfxstrokes(filename: str = "",postCallback: bool = False,selected: bool = False) -> None:
    """
    このコマンドは、pfxHair ノードを含むすべてのペイント エフェクト ストロークをループし、全チューブの現在の状態をファイルに書き込みます。通常のストローク ノードの場合は、ブラシのチューブ(Tubes)をオンにする必要があり、オンでない場合は出力が得られません。pfxHair ノードの場合は必ず出力が得られますが、ストローク ノードとは書式が異なります(ただし、チューブがオンのブラシを pfxHair ノードに割り当てることで、ストロークと同じ書式が出力されます)。標準のファイル フォーマットは ASCII で、数値の区切りにはカンマが使用され、データ ブロックの間は改行されます。pfxHair ノードで使用される書式は、ヘアのルートから毛先へ向けて、ヘア カーブ ポイントを順に指定します。ヘアは次の形式で連続的に続きます。NumCVs (CV 数)ポイント X (Point X),ポイント Y (Point Y),ポイント Z (Point Z),法線 X (Normal X),法線 Y (Normal Y),法線 Z (normal Z), 幅(Width), カラー R (Color R),カラー G (Color G),カラー B (Color B), パラメータ U (Parameter U)ポイント X (Point X),ポイント Y (Point Y),ポイント Z (Point Z),法線 X (Normal X),法線 Y (Normal Y),法線 Z (normal Z), 幅(Width), カラー R (Color R),カラー G (Color G),カラー B (Color B), パラメータ U (Parameter U)続く... NumCVs (CV 数)ポイント X (Point X),ポイント Y (Point Y),ポイント Z (Point Z),法線 X (Normal X),法線 Y (Normal Y),法線 Z (normal Z), 幅(Width), カラー R (Color R),カラー G (Color G),カラー B (Color B), パラメータ U (Parameter U)続く..。チューブ(Tubes)がオンになっているブラシのファイルを出力する書式はさらに複雑です。チューブは枝分かれでき、セグメントの記述順序は、セグメントの描画順序と同じになります。ペイント エフェクト パネルで背の高い草(Grass)ブラシをゆっくりと描画することにより、セグメントがファイルに表示される順番が分かりやすくなります。新しいチューブは、他のチューブが完了する前に「生え」はじめます。「NumCvs」用の行はなく、代わりに各セグメントの全データは各行に表示されます。各行のデータは、ペイント エフェクトのランタイム機能に渡されたデータと同じです。これらのパラメータの順序と説明については、paintRuntimeFunc.mel の引数リストを参照してください。出力ファイルの行に表示されるパラメータの順序は、この関数の引数で指定した順序と完全に一致します。出力ファイルを解析し、これらのセグメントをカーブへと接続する場合、セグメントと行を接続する上で branchId、parentId、siblingCnt の各パラメータが役に立ちます。-postCallback オプションを使用すると、チューブのデータは、ランタイム コールバック処理後に書き出されます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    filename (string): 出力ファイルです。

    -----------------------------------------

    postCallback (boolean): ランタイムコールバックのMEL関数の起動後に、情報をファイルに出力します。既定では、コールバック前に情報を出力します。

    -----------------------------------------

    selected (boolean): 選択したストロークのみをループします。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def stroke(name: str = "",pressure: bool = False,seed: int = 1) -> None:
    """
    stroke コマンドは、新しいペイント エフェクト ストローク ノードを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    name (string): ストローク名を入力文字列に設定します。

    -----------------------------------------

    pressure (boolean): 作成時に、ペイントエフェクトツール(PaintEffectsTool)から圧力マッピングの設定のコピーを可能にします。既定はfalseです。

    -----------------------------------------

    seed (int): このストロークに乱数の種を設定します。

    -----------------------------------------

    Return Value:
    None: string(新しいストロークまたは置き換えられたストロークへのパス)
    """
    pass

    
def colorAtPoint(coordU: float = 1.0,coordV: float = 1.0,maxU: float = 1.0,maxV: float = 1.0,minU: float = 1.0,minV: float = 1.0,output: str = "",samplesU: int = 1,samplesV: int = 1) -> None:
    """
    colorAtPoint コマンドは、UV 座標で渡したテクスチャ シェーダまたは海洋シェーダを照会するために使用します。(海洋シェーダの場合、UV はワールド座標空間の X と Z です)。戻り値は、渡した入力 UV 引数の数または照会された値によってサイズが決定される浮動小数点配列です。アルファ値のみ、RGB 値のみ、または RGBA 値を照会することができます。返される配列には単一のインデックスが付けられるので、RGB 値を指定した場合、赤の値のインデックスは index * 3 になります。青は index * 3 + 1、緑は index * 3 + 2 になります。RGBA 値では、3 の代わりに 4 の倍数を使用します。アルファ値のみの場合は、インデックスをそのまま使用できます。基本的な引数書式は 2 つあります。colorAtPoint -u 0 -v 0 -u .2 -v .1 など(すべてのポイントを記述)、または colorAtPoint -mu 0 -mv 0 -xu 1 -xv 1 -su 10 -sv 10 // 100 ポイントのサンプリング サンプリングするポイントが複数あり、それらがすべて正規のグリッド構造である場合は、後者の方法を使用してこのルーチンをコールする方がより効率的です。これは、UV 座標を並べた長い引数リストの代わりに、UV の最小/最大とサンプル数を使用します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    coordU (float): テクスチャをサンプリングするU座標を入力します。

    -----------------------------------------

    coordV (float): テクスチャをサンプリングするV座標を入力します。

    -----------------------------------------

    maxU (float): 既定は1.0です。サンプリングするU方向の最大の境界です。

    -----------------------------------------

    maxV (float): 既定は1.0です。サンプリングするV方向の最大の境界です。

    -----------------------------------------

    minU (float): 既定は0.0です。サンプリングするU方向の最小の境界です。

    -----------------------------------------

    minV (float): 既定は0.0です。サンプリングするV方向の最小の境界です。

    -----------------------------------------

    output (string): 出力するデータのタイプ:A=アルファ値のみRGB=カラー値のみRGBA=カラー値とアルファ値

    -----------------------------------------

    samplesU (uint): 既定は1です。U次元でサンプリングするポイントの数です。

    -----------------------------------------

    samplesV (uint): 既定は1です。V次元でサンプリングするポイントの数です。

    -----------------------------------------

    Return Value:
    None: サンプリングする個々の UV 座標(-u float -v float)
    """
    pass

    
def fluidCacheInfo(attribute: str = "",cacheTime: float = 1.0,endFrame: bool = False,hasCache: bool = False,hasData: bool = False,initialConditions: bool = False,playback: bool = False,resolution: bool = False,startFrame: bool = False) -> None:
    """
    流体キャッシュに関する情報を取得するコマンドです。InitialConditions の startFrame と解像度を取得します。再生キャッシュの endFrame も取得します。再生キャッシュの場合、現在のタイムで表示されます(現在のタイムがキャッシュの終了を通過している場合は、終了フレーム)。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): 「hasData」フラグのモデイファイアで、キャッシュが現在のタイムで、特定の流体アトリビュートのデータを持っているかどうかを照会できます。有効なアトリビュート値は、「density」、「velocity」、「temperature」、「fuel」、「color」、「coordinates」(テクスチャ座標)、「falloff」です。

    -----------------------------------------

    cacheTime (time): -hasDataフラグのみで有効です。キャッシュを照会してデータの有無を確認するとき、-hasDataフラグが使用する時間です。

    -----------------------------------------

    endFrame (boolean): キャッシュの終了時間をfloat値で返します。

    -----------------------------------------

    hasCache (boolean): 流体に指定したキャッシュがある場合はtrue、そうでない場合はfalseを返します。

    -----------------------------------------

    hasData (boolean): 特定のキャッシュが、-timeフラグが指定する時間にデータを持っているかどうかを照会します(-timeフラグがない場合は、-hasDataは現在のタイムを仮定します)。「attribute」フラグと一緒に使用すると、指定したアトリビュートのデータがキャッシュに存在するかどうかを示します。「attribute」フラグと一緒に使用しない場合、「hasData」は、任意の有効な流体アトリビュートのデータがキャッシュに存在するかどうかを示します。

    -----------------------------------------

    initialConditions (boolean): 照会するキャッシュとして「InitialConditions」キャッシュを指定します。

    -----------------------------------------

    playback (boolean): 照会するキャッシュとして「Playback」キャッシュを指定します。

    -----------------------------------------

    resolution (boolean): キャッシュの解像度をfloat[]で返します。

    -----------------------------------------

    startFrame (boolean): キャッシュの開始時間をfloat値で返します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def fluidEmitter(cycleEmission: str = "",cycleInterval: int = 1,densityEmissionRate: float = 1.0,fluidDropoff: float = 1.0,fuelEmissionRate: float = 1.0,heatEmissionRate: float = 1.0,maxDistance: float = 1.0,minDistance: float = 1.0,name: str = "",position: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),rate: float = 1.0,torusSectionRadius: float = 1.0,type: str = "",volumeOffset: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),volumeShape: str = "",volumeSweep: float = 1.0) -> None:
    """
    補助ダイナミクス オブジェクト(例: フィールド、エミッタ)を作成、編集、または照会します。エミッタ オブジェクトを作成します。オブジェクト名が指定されているか、またはオブジェクトが選択されている場合、エミッタをシーンの指定した名前のオブジェクトまたは選択したオブジェクトに適用します。その後、流体はそれぞれから放出されます。オブジェクトの名前も指定されず、選択もされていない場合、または -pos オプションが指定されている場合、位置エミッタを作成します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    cycleEmission (string): 値は「none」または「frame」です。放出を繰り返すと、指定した時間間隔で乱数ストリームが再開されます。これは、フレーム数または放出されるパーティクル数のいずれかになります。この数値はその都度、cycleIntervalアトリビュートで指定されます。cycleEmissionを「frame」、cycleIntervalを1に設定すると、乱数ストリームはフレームごとに再開されます。cycleIntervalを1より大きい値に設定すると、ゲーム開発のサイクル生成に使用できます。

    -----------------------------------------

    cycleInterval (int): 乱数ストリームが再開してから次に再開するまでのフレームまたはパーティクルの数を指定します。cycleEmissionを参照してください。cycleEmissionがNoneに設定されている場合、何も起こりません。

    -----------------------------------------

    densityEmissionRate (float): 密度が放出される速度です。

    -----------------------------------------

    fluidDropoff (float): 流体放出ドロップオフの量です。

    -----------------------------------------

    fuelEmissionRate (float): 放出の速度です。

    -----------------------------------------

    heatEmissionRate (float): 密度が放出される速度です。

    -----------------------------------------

    maxDistance (linear): 放出が終了する最大距離です。

    -----------------------------------------

    minDistance (linear): 放出が開始する最小距離です。

    -----------------------------------------

    name (string): オブジェクト名

    -----------------------------------------

    position ([linear, linear, linear]): ワールド空間の位置です。

    -----------------------------------------

    rate (float): パーティクルを放出するレートです(整数以外も指定できます)。ポイントエミッションの場合、これは単位時間あたりのポイントごとの割合になります。サーフェスエミッションの場合、これは単位時間あたりの面積ごとの割合になります。

    -----------------------------------------

    torusSectionRadius (linear): トーラスボリュームの断面半径です。トーラスにのみ適用されます。トーラスモデリングプリミティブの断面半径と同じです。

    -----------------------------------------

    type (string): エミッタのタイプです。選択肢は、omni、dir、direction、surf、surface、curve、curvです。既定はomniです。このタイプの完全な定義は、全方向ポイントエミッタ、ディレクショナルポイントエミッタ、サーフェスエミッタ、カーブエミッタです。

    -----------------------------------------

    volumeOffset ([linear, linear, linear]): エミッタのボリュームのオフセットです。ボリュームオフセットによって、放出ボリュームはエミッタの実際の場所から指定した量だけ移動します。エミッタのローカル空間にあります。

    -----------------------------------------

    volumeShape (string): エミッタのボリュームシェイプです。フィールドのボリュームシェイプのアトリビュートを設定、編集、照会します。「none」以外の値に設定すると、パーティクルが生成される3-Dボリュームを定義します。指定できる値は、「cube」、「sphere」、「cylinder」、「cone」、「torus」のいずれかです。

    -----------------------------------------

    volumeSweep (angle): エミッタのボリュームのスイープです。球、円錐、円柱、トーラスにのみ適用されます。モデリングのスイープアトリビュートと同じエフェクトです。

    -----------------------------------------

    Return Value:
    None: stringコマンドの結果照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def fluidVoxelInfo(checkBounds: bool = False,inBounds: Tuple[int, int, int] = tuple(1, 1, 1),objectSpace: bool = False,radius: float = 1.0,voxel: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),voxelCenter: bool = False,xIndex: int = 1,yIndex: int = 1,zIndex: int = 1) -> None:
    """
    流体ボクセル グリッドの、流体のワールド空間またはオブジェクト空間へのマッピングに関する基礎情報を提供します。このコマンドを使用して、ボクセルの中心を定義する、特定のポイントを含むボクセルを検索することなどができます。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    checkBounds (boolean): このフラグがオンで、範囲外であるポイントのボクセルインデックスが要求された場合、何も返しません。

    -----------------------------------------

    inBounds ([int, int, int]): ボクセルのx、y、zインデックスを示す3つの整数は、流体のボクセルグリッドの範囲内にあるかどうか。範囲内のtrue、範囲外の場合はfalseです（2D流体の場合、3番目の引数にはz=0で渡されます。例を参照してください）。

    -----------------------------------------

    objectSpace (boolean): 照会した値をオブジェクト空間(TRUE)、またはワールド空間(FALSE、既定)で返すかを設定します。

    -----------------------------------------

    radius (float): -voxelフラグのモディファイアです。-voxelフラグで指定したポイントの半径内にあるボクセルを特定する、3つのインデックスのリストを返します。

    -----------------------------------------

    voxel ([float, float, float]): 3つの整数配列を返します。これは特定のポイント位置が含まれるボクセルのx、y、zの各インデックスを示します。checkBoundsフラグがオンでポイントが範囲外の場合は、何も返しません。それ以外の場合は、ポイントが範囲外であっても、インデックス値を返します。-radiusフラグと一緒に使用すると、特定のポイント位置の、特定の半径内にあるボクセルのリストを示す、3つのインデックスの配列を返します。

    -----------------------------------------

    voxelCenter (boolean): 指定したボクセルの中心位置です。float配列を返します(照会のインデックスごとに3つ)。-xIndex、-yIndex、-zIndexフラグと一緒に使用する場合のみ有効です。

    -----------------------------------------

    xIndex (int): このXインデックスを持つセルの値のみを返します。

    -----------------------------------------

    yIndex (int): このYインデックスを持つセルの値のみを返します。

    -----------------------------------------

    zIndex (int): このZインデックスを持つセルの値のみを返します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def getFluidAttr(attribute: str = "",lowerFace: bool = False,xIndex: int = 1,xvalue: bool = False,yIndex: int = 1,yvalue: bool = False,zIndex: int = 1,zvalue: bool = False) -> None:
    """
    個々のグリッド セルまたはグリッドにあるすべてのセルの密度、速度など、組み込みの流体アトリビュートの値を返します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    attribute (string): 値を表示する流体アトリビュートを指定します。有効なアトリビュートは、「force」、「velocity」、「density」、「falloff」、「fuel」、「color」、「temperature」です(フォース値を取得することは、単一時間ステップの速度値を取得する代替方法です)。

    -----------------------------------------

    lowerFace (boolean): -atvelocityのみで有効です。速度値は各ボクセルの中心ではなく端に格納されるので、ボクセルベースのインデックスで速度を設定すると、隣接するボクセルが必然的に影響を受けます。このフラグは、ボクセルの全6面ではなく、左下3面のみの速度成分を設定する場合に使用します。

    -----------------------------------------

    xIndex (int): このXインデックスを持つセルの値のみを返します。

    -----------------------------------------

    xvalue (boolean): 「-at/attribute」フラグで指定したベクトル値アトリビュートの、1番目のコンポーネントのみを取得します。

    -----------------------------------------

    yIndex (int): このYインデックスを持つセルの値のみを返します。

    -----------------------------------------

    yvalue (boolean): 「-at/attribute」フラグで指定したベクトル値アトリビュートの、2番目のコンポーネントのみを取得します。

    -----------------------------------------

    zIndex (int): このZインデックスを持つセルの値のみを返します。

    -----------------------------------------

    zvalue (boolean): 「-at/attribute」フラグで指定したベクトル値アトリビュートの、3番目のコンポーネントのみを取得します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def loadFluid(currentTime: bool = False,frame: float = 1.0,initialConditions: bool = False) -> None:
    """
    グリッド内の全セルにある密度(Density)、速度(Velocity)などのビルトインの流体アトリビュートを初期状態のキャッシュから設定するためのコマンドです。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    currentTime (boolean): このフラグは現在ではサポートしていません。Traxエディタ(TraxEditor)のキャッシュクリップを移動して、再生キャッシュのさまざまなフレームを確認します。

    -----------------------------------------

    frame (float): このフラグは現在ではサポートしていません。Traxエディタ(TraxEditor)のキャッシュクリップを移動して、再生キャッシュのさまざまなフレームを確認します。

    -----------------------------------------

    initialConditions (boolean): 初期状態のキャッシュをロードします。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def resampleFluid(resampleDepth: int = 1,resampleHeight: int = 1,resampleWidth: int = 1) -> None:
    """
    ボクセルのサイズと既存の流体コンテンツの位置を変えずに流体グリッドを延長します。これを可能にするために、流体のトランスフォームも修正されるので、注意してください。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    resampleDepth (int): 深度の解像度をこの値に変更します。

    -----------------------------------------

    resampleHeight (int): 高さの解像度をこの値に変更します。

    -----------------------------------------

    resampleWidth (int): 幅の解像度をこの値に変更します。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def saveFluid(currentTime: int = 1,endTime: int = 1,startTime: int = 1) -> None:
    """
    流体の現在の状態を初期状態のキャッシュに保存するコマンドです。保存されるグリッドは、cacheDensity や cacheVelocity などのキャッシュ アトリビュートによって定義されます。これらのアトリビュートは通常、初期状態の設定(Set Initial State)オプションで設定します。このコマンドを起動する前にキャッシュを設定する必要があります。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    currentTime (int): 流体の現在のタイムでのキャッシュ状態です。

    -----------------------------------------

    endTime (int): キャッシュの終了時間です。

    -----------------------------------------

    startTime (int): キャッシュの開始時間です。

    -----------------------------------------

    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def setFluidAttr(addValue: bool = False,attribute: str = "",clear: bool = False,floatRandom: float = 1.0,floatValue: float = 1.0,lowerFace: bool = False,reset: bool = False,vectorRandom: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),vectorValue: Tuple[float, float, float] = tuple(1.0, 1.0, 1.0),xIndex: int = 1,xvalue: bool = False,yIndex: int = 1,yvalue: bool = False,zIndex: int = 1,zvalue: bool = False) -> None:
    """
    個々のグリッド セルまたはグリッドにあるすべてのセルに対し、密度や速度など、ビルトインの流体アトリビュートの値を設定します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    addValue (boolean): 指定した値をアトリビュートに追加します。

    -----------------------------------------

    attribute (string): 値を設定する流体アトリビュートを指定します。有効なアトリビュートは、速度(Velocity)、密度(Density)、燃料(Fuel)、カラー(Color)、減衰(Falloff)、温度(Temperature)です。

    -----------------------------------------

    clear (boolean): このアトリビュートを0に設定します。

    -----------------------------------------

    floatRandom (float): 密度などのスカラーアトリビュートの場合は、ランダム値を+-VALUEで使用します。fvを指定している場合は、基数としてランダム値と統合します。fvフラグを指定していない場合、基数は0と仮定します。

    -----------------------------------------

    floatValue (float): 密度などのスカラーアトリビュートの場合は、この値を使用します。

    -----------------------------------------

    lowerFace (boolean): -atvelocityのみで有効です。速度値は各ボクセルの中心ではなく端に格納されるので、ボクセルベースのインデックスで速度を設定すると、隣接するボクセルが必然的に影響を受けます。このフラグは、ボクセルの全6面ではなく、左下3面のみの速度成分を設定する場合に使用します。

    -----------------------------------------

    reset (boolean): このアトリビュートを既定値に設定します。

    -----------------------------------------

    vectorRandom ([float, float, float]): 速度などのベクトルアトリビュートの場合は、ランダム値を+-VALUEで使用します。vvを指定している場合は、基数としてこのランダム値と統合します。wフラグを指定していない場合、基数は0,0,0と仮定します。

    -----------------------------------------

    vectorValue ([float, float, float]): 速度などのベクトルアトリビュートの場合は、この値を使用します。

    -----------------------------------------

    xIndex (int): このXインデックスを持つセルの値のみを返します。

    -----------------------------------------

    xvalue (boolean): -at/attributeフラグで指定したベクトル値アトリビュートの、1番目のコンポーネントのみを設定します。

    -----------------------------------------

    yIndex (int): このYインデックスを持つセルの値のみを返します。

    -----------------------------------------

    yvalue (boolean): -at/attributeフラグで指定したベクトル値アトリビュートの、2番目のコンポーネントのみを設定します。

    -----------------------------------------

    zIndex (int): このZインデックスを持つセルの値のみを返します。

    -----------------------------------------

    zvalue (boolean): -at/attributeフラグで指定したベクトル値アトリビュートの、3番目のコンポーネントのみを設定します。

    -----------------------------------------

    Return Value:
    None: なし
    """
    pass

    
def truncateFluidCache() -> None:
    """
    このコマンドは、流体キャッシュの終了時間を現在のタイムに設定します。現在のタイムがキャッシュの終了時間より短い場合はキャッシュを切り捨て、現在のタイムを含む、現在のタイムまでの部分のみを保持します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    
def truncateHairCache() -> None:
    """
    このコマンドは、ヘア キャッシュの終了時間を現在のタイムに設定します。現在のタイムがキャッシュの終了時間より短い場合はキャッシュを切り捨て、現在のタイムを含む、現在のタイムまでの部分のみを保持します。



    -----------------------------------------

    Flags:

    -----------------------------------------
    
    Return Value:
    None: なし照会モードでは、戻り値のタイプは照会されたフラグに基づきます。
    """
    pass

    